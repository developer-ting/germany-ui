/******/ (function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/ var installedModules = {};
  /******/
  /******/ // The require function
  /******/ function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/ if (installedModules[moduleId]) {
      /******/ return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/ var module = (installedModules[moduleId] = {
      /******/ i: moduleId,
      /******/ l: false,
      /******/ exports: {},
      /******/
    });
    /******/
    /******/ // Execute the module function
    /******/ modules[moduleId].call(
      module.exports,
      module,
      module.exports,
      __webpack_require__
    );
    /******/
    /******/ // Flag the module as loaded
    /******/ module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/ return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/ __webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/ __webpack_require__.c = installedModules;
  /******/
  /******/ // define getter function for harmony exports
  /******/ __webpack_require__.d = function (exports, name, getter) {
    /******/ if (!__webpack_require__.o(exports, name)) {
      /******/ Object.defineProperty(exports, name, {
        enumerable: true,
        get: getter,
      });
      /******/
    }
    /******/
  };
  /******/
  /******/ // define __esModule on exports
  /******/ __webpack_require__.r = function (exports) {
    /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
      /******/ Object.defineProperty(exports, Symbol.toStringTag, {
        value: "Module",
      });
      /******/
    }
    /******/ Object.defineProperty(exports, "__esModule", { value: true });
    /******/
  };
  /******/
  /******/ // create a fake namespace object
  /******/ // mode & 1: value is a module id, require it
  /******/ // mode & 2: merge all properties of value into the ns
  /******/ // mode & 4: return value when already ns object
  /******/ // mode & 8|1: behave like require
  /******/ __webpack_require__.t = function (value, mode) {
    /******/ if (mode & 1) value = __webpack_require__(value);
    /******/ if (mode & 8) return value;
    /******/ if (
      mode & 4 &&
      typeof value === "object" &&
      value &&
      value.__esModule
    )
      return value;
    /******/ var ns = Object.create(null);
    /******/ __webpack_require__.r(ns);
    /******/ Object.defineProperty(ns, "default", {
      enumerable: true,
      value: value,
    });
    /******/ if (mode & 2 && typeof value != "string")
      for (var key in value)
        __webpack_require__.d(
          ns,
          key,
          function (key) {
            return value[key];
          }.bind(null, key)
        );
    /******/ return ns;
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/ __webpack_require__.n = function (module) {
    /******/ var getter =
      module && module.__esModule
        ? /******/ function getDefault() {
            return module["default"];
          }
        : /******/ function getModuleExports() {
            return module;
          };
    /******/ __webpack_require__.d(getter, "a", getter);
    /******/ return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/ __webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/ __webpack_require__.p = "";
  /******/
  /******/
  /******/ // Load entry module and return exports
  /******/ return __webpack_require__(
    (__webpack_require__.s = "./src/js/entry.js")
  );
  /******/
})(
  /************************************************************************/
  /******/ {
    /***/ "./node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js":
      /*!***************************************************************************!*\
  !*** ./node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js ***!
  \***************************************************************************/
      /*! exports provided: generateCodeFrame, BASE_TRANSITION, BindingTypes, CAMELIZE, CAPITALIZE, CREATE_BLOCK, CREATE_COMMENT, CREATE_ELEMENT_BLOCK, CREATE_ELEMENT_VNODE, CREATE_SLOTS, CREATE_STATIC, CREATE_TEXT, CREATE_VNODE, CompilerDeprecationTypes, ConstantTypes, ElementTypes, ErrorCodes, FRAGMENT, GUARD_REACTIVE_PROPS, IS_MEMO_SAME, IS_REF, KEEP_ALIVE, MERGE_PROPS, NORMALIZE_CLASS, NORMALIZE_PROPS, NORMALIZE_STYLE, Namespaces, NodeTypes, OPEN_BLOCK, POP_SCOPE_ID, PUSH_SCOPE_ID, RENDER_LIST, RENDER_SLOT, RESOLVE_COMPONENT, RESOLVE_DIRECTIVE, RESOLVE_DYNAMIC_COMPONENT, RESOLVE_FILTER, SET_BLOCK_TRACKING, SUSPENSE, TELEPORT, TO_DISPLAY_STRING, TO_HANDLERS, TO_HANDLER_KEY, TS_NODE_TYPES, UNREF, WITH_CTX, WITH_DIRECTIVES, WITH_MEMO, advancePositionWithClone, advancePositionWithMutation, assert, baseCompile, baseParse, buildDirectiveArgs, buildProps, buildSlots, checkCompatEnabled, convertToBlock, createArrayExpression, createAssignmentExpression, createBlockStatement, createCacheExpression, createCallExpression, createCompilerError, createCompoundExpression, createConditionalExpression, createForLoopParams, createFunctionExpression, createIfStatement, createInterpolation, createObjectExpression, createObjectProperty, createReturnStatement, createRoot, createSequenceExpression, createSimpleExpression, createStructuralDirectiveTransform, createTemplateLiteral, createTransformContext, createVNodeCall, errorMessages, extractIdentifiers, findDir, findProp, forAliasRE, generate, getBaseTransformPreset, getConstantType, getMemoedVNodeCall, getVNodeBlockHelper, getVNodeHelper, hasDynamicKeyVBind, hasScopeRef, helperNameMap, injectProp, isCoreComponent, isFunctionType, isInDestructureAssignment, isInNewExpression, isMemberExpression, isMemberExpressionBrowser, isMemberExpressionNode, isReferencedIdentifier, isSimpleIdentifier, isSlotOutlet, isStaticArgOf, isStaticExp, isStaticProperty, isStaticPropertyKey, isTemplateNode, isText, isVSlot, locStub, noopDirectiveTransform, processExpression, processFor, processIf, processSlotOutlet, registerRuntimeHelpers, resolveComponentType, stringifyExpression, toValidAssetId, trackSlotScopes, trackVForSlotScopes, transform, transformBind, transformElement, transformExpression, transformModel, transformOn, traverseNode, unwrapTSNode, walkBlockDeclarations, walkFunctionParams, walkIdentifiers, warnDeprecation */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "BASE_TRANSITION",
          function () {
            return BASE_TRANSITION;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "BindingTypes",
          function () {
            return BindingTypes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CAMELIZE",
          function () {
            return CAMELIZE;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CAPITALIZE",
          function () {
            return CAPITALIZE;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_BLOCK",
          function () {
            return CREATE_BLOCK;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_COMMENT",
          function () {
            return CREATE_COMMENT;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_ELEMENT_BLOCK",
          function () {
            return CREATE_ELEMENT_BLOCK;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_ELEMENT_VNODE",
          function () {
            return CREATE_ELEMENT_VNODE;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_SLOTS",
          function () {
            return CREATE_SLOTS;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_STATIC",
          function () {
            return CREATE_STATIC;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_TEXT",
          function () {
            return CREATE_TEXT;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_VNODE",
          function () {
            return CREATE_VNODE;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CompilerDeprecationTypes",
          function () {
            return CompilerDeprecationTypes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ConstantTypes",
          function () {
            return ConstantTypes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ElementTypes",
          function () {
            return ElementTypes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ErrorCodes",
          function () {
            return ErrorCodes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "FRAGMENT",
          function () {
            return FRAGMENT;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "GUARD_REACTIVE_PROPS",
          function () {
            return GUARD_REACTIVE_PROPS;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "IS_MEMO_SAME",
          function () {
            return IS_MEMO_SAME;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "IS_REF",
          function () {
            return IS_REF;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "KEEP_ALIVE",
          function () {
            return KEEP_ALIVE;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "MERGE_PROPS",
          function () {
            return MERGE_PROPS;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "NORMALIZE_CLASS",
          function () {
            return NORMALIZE_CLASS;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "NORMALIZE_PROPS",
          function () {
            return NORMALIZE_PROPS;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "NORMALIZE_STYLE",
          function () {
            return NORMALIZE_STYLE;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Namespaces",
          function () {
            return Namespaces;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "NodeTypes",
          function () {
            return NodeTypes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "OPEN_BLOCK",
          function () {
            return OPEN_BLOCK;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "POP_SCOPE_ID",
          function () {
            return POP_SCOPE_ID;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "PUSH_SCOPE_ID",
          function () {
            return PUSH_SCOPE_ID;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "RENDER_LIST",
          function () {
            return RENDER_LIST;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "RENDER_SLOT",
          function () {
            return RENDER_SLOT;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "RESOLVE_COMPONENT",
          function () {
            return RESOLVE_COMPONENT;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "RESOLVE_DIRECTIVE",
          function () {
            return RESOLVE_DIRECTIVE;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "RESOLVE_DYNAMIC_COMPONENT",
          function () {
            return RESOLVE_DYNAMIC_COMPONENT;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "RESOLVE_FILTER",
          function () {
            return RESOLVE_FILTER;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "SET_BLOCK_TRACKING",
          function () {
            return SET_BLOCK_TRACKING;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "SUSPENSE",
          function () {
            return SUSPENSE;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TELEPORT",
          function () {
            return TELEPORT;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TO_DISPLAY_STRING",
          function () {
            return TO_DISPLAY_STRING;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TO_HANDLERS",
          function () {
            return TO_HANDLERS;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TO_HANDLER_KEY",
          function () {
            return TO_HANDLER_KEY;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TS_NODE_TYPES",
          function () {
            return TS_NODE_TYPES;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "UNREF",
          function () {
            return UNREF;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "WITH_CTX",
          function () {
            return WITH_CTX;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "WITH_DIRECTIVES",
          function () {
            return WITH_DIRECTIVES;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "WITH_MEMO",
          function () {
            return WITH_MEMO;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "advancePositionWithClone",
          function () {
            return advancePositionWithClone;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "advancePositionWithMutation",
          function () {
            return advancePositionWithMutation;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "assert",
          function () {
            return assert;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "baseCompile",
          function () {
            return baseCompile;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "baseParse",
          function () {
            return baseParse;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "buildDirectiveArgs",
          function () {
            return buildDirectiveArgs;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "buildProps",
          function () {
            return buildProps;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "buildSlots",
          function () {
            return buildSlots;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "checkCompatEnabled",
          function () {
            return checkCompatEnabled;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "convertToBlock",
          function () {
            return convertToBlock;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createArrayExpression",
          function () {
            return createArrayExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createAssignmentExpression",
          function () {
            return createAssignmentExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createBlockStatement",
          function () {
            return createBlockStatement;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createCacheExpression",
          function () {
            return createCacheExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createCallExpression",
          function () {
            return createCallExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createCompilerError",
          function () {
            return createCompilerError;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createCompoundExpression",
          function () {
            return createCompoundExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createConditionalExpression",
          function () {
            return createConditionalExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createForLoopParams",
          function () {
            return createForLoopParams;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createFunctionExpression",
          function () {
            return createFunctionExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createIfStatement",
          function () {
            return createIfStatement;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createInterpolation",
          function () {
            return createInterpolation;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createObjectExpression",
          function () {
            return createObjectExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createObjectProperty",
          function () {
            return createObjectProperty;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createReturnStatement",
          function () {
            return createReturnStatement;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createRoot",
          function () {
            return createRoot;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createSequenceExpression",
          function () {
            return createSequenceExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createSimpleExpression",
          function () {
            return createSimpleExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createStructuralDirectiveTransform",
          function () {
            return createStructuralDirectiveTransform;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createTemplateLiteral",
          function () {
            return createTemplateLiteral;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createTransformContext",
          function () {
            return createTransformContext;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createVNodeCall",
          function () {
            return createVNodeCall;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "errorMessages",
          function () {
            return errorMessages;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "extractIdentifiers",
          function () {
            return extractIdentifiers;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "findDir",
          function () {
            return findDir;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "findProp",
          function () {
            return findProp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "forAliasRE",
          function () {
            return forAliasRE;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "generate",
          function () {
            return generate;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getBaseTransformPreset",
          function () {
            return getBaseTransformPreset;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getConstantType",
          function () {
            return getConstantType;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getMemoedVNodeCall",
          function () {
            return getMemoedVNodeCall;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getVNodeBlockHelper",
          function () {
            return getVNodeBlockHelper;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getVNodeHelper",
          function () {
            return getVNodeHelper;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "hasDynamicKeyVBind",
          function () {
            return hasDynamicKeyVBind;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "hasScopeRef",
          function () {
            return hasScopeRef;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "helperNameMap",
          function () {
            return helperNameMap;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "injectProp",
          function () {
            return injectProp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isCoreComponent",
          function () {
            return isCoreComponent;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isFunctionType",
          function () {
            return isFunctionType;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isInDestructureAssignment",
          function () {
            return isInDestructureAssignment;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isInNewExpression",
          function () {
            return isInNewExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isMemberExpression",
          function () {
            return isMemberExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isMemberExpressionBrowser",
          function () {
            return isMemberExpressionBrowser;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isMemberExpressionNode",
          function () {
            return isMemberExpressionNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isReferencedIdentifier",
          function () {
            return isReferencedIdentifier;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isSimpleIdentifier",
          function () {
            return isSimpleIdentifier;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isSlotOutlet",
          function () {
            return isSlotOutlet;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isStaticArgOf",
          function () {
            return isStaticArgOf;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isStaticExp",
          function () {
            return isStaticExp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isStaticProperty",
          function () {
            return isStaticProperty;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isStaticPropertyKey",
          function () {
            return isStaticPropertyKey;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isTemplateNode",
          function () {
            return isTemplateNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isText",
          function () {
            return isText$1;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isVSlot",
          function () {
            return isVSlot;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "locStub",
          function () {
            return locStub;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "noopDirectiveTransform",
          function () {
            return noopDirectiveTransform;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "processExpression",
          function () {
            return processExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "processFor",
          function () {
            return processFor;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "processIf",
          function () {
            return processIf;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "processSlotOutlet",
          function () {
            return processSlotOutlet;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "registerRuntimeHelpers",
          function () {
            return registerRuntimeHelpers;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveComponentType",
          function () {
            return resolveComponentType;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "stringifyExpression",
          function () {
            return stringifyExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "toValidAssetId",
          function () {
            return toValidAssetId;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "trackSlotScopes",
          function () {
            return trackSlotScopes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "trackVForSlotScopes",
          function () {
            return trackVForSlotScopes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "transform",
          function () {
            return transform;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "transformBind",
          function () {
            return transformBind;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "transformElement",
          function () {
            return transformElement;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "transformExpression",
          function () {
            return transformExpression;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "transformModel",
          function () {
            return transformModel;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "transformOn",
          function () {
            return transformOn;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "traverseNode",
          function () {
            return traverseNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "unwrapTSNode",
          function () {
            return unwrapTSNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "walkBlockDeclarations",
          function () {
            return walkBlockDeclarations;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "walkFunctionParams",
          function () {
            return walkFunctionParams;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "walkIdentifiers",
          function () {
            return walkIdentifiers;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "warnDeprecation",
          function () {
            return warnDeprecation;
          }
        );
        /* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @vue/shared */ "./node_modules/@vue/shared/dist/shared.esm-bundler.js"
          );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "generateCodeFrame",
          function () {
            return _vue_shared__WEBPACK_IMPORTED_MODULE_0__[
              "generateCodeFrame"
            ];
          }
        );

        /**
         * @vue/compiler-core v3.4.27
         * (c) 2018-present Yuxi (Evan) You and Vue contributors
         * @license MIT
         **/

        const FRAGMENT = Symbol(true ? `Fragment` : undefined);
        const TELEPORT = Symbol(true ? `Teleport` : undefined);
        const SUSPENSE = Symbol(true ? `Suspense` : undefined);
        const KEEP_ALIVE = Symbol(true ? `KeepAlive` : undefined);
        const BASE_TRANSITION = Symbol(true ? `BaseTransition` : undefined);
        const OPEN_BLOCK = Symbol(true ? `openBlock` : undefined);
        const CREATE_BLOCK = Symbol(true ? `createBlock` : undefined);
        const CREATE_ELEMENT_BLOCK = Symbol(
          true ? `createElementBlock` : undefined
        );
        const CREATE_VNODE = Symbol(true ? `createVNode` : undefined);
        const CREATE_ELEMENT_VNODE = Symbol(
          true ? `createElementVNode` : undefined
        );
        const CREATE_COMMENT = Symbol(true ? `createCommentVNode` : undefined);
        const CREATE_TEXT = Symbol(true ? `createTextVNode` : undefined);
        const CREATE_STATIC = Symbol(true ? `createStaticVNode` : undefined);
        const RESOLVE_COMPONENT = Symbol(true ? `resolveComponent` : undefined);
        const RESOLVE_DYNAMIC_COMPONENT = Symbol(
          true ? `resolveDynamicComponent` : undefined
        );
        const RESOLVE_DIRECTIVE = Symbol(true ? `resolveDirective` : undefined);
        const RESOLVE_FILTER = Symbol(true ? `resolveFilter` : undefined);
        const WITH_DIRECTIVES = Symbol(true ? `withDirectives` : undefined);
        const RENDER_LIST = Symbol(true ? `renderList` : undefined);
        const RENDER_SLOT = Symbol(true ? `renderSlot` : undefined);
        const CREATE_SLOTS = Symbol(true ? `createSlots` : undefined);
        const TO_DISPLAY_STRING = Symbol(true ? `toDisplayString` : undefined);
        const MERGE_PROPS = Symbol(true ? `mergeProps` : undefined);
        const NORMALIZE_CLASS = Symbol(true ? `normalizeClass` : undefined);
        const NORMALIZE_STYLE = Symbol(true ? `normalizeStyle` : undefined);
        const NORMALIZE_PROPS = Symbol(true ? `normalizeProps` : undefined);
        const GUARD_REACTIVE_PROPS = Symbol(
          true ? `guardReactiveProps` : undefined
        );
        const TO_HANDLERS = Symbol(true ? `toHandlers` : undefined);
        const CAMELIZE = Symbol(true ? `camelize` : undefined);
        const CAPITALIZE = Symbol(true ? `capitalize` : undefined);
        const TO_HANDLER_KEY = Symbol(true ? `toHandlerKey` : undefined);
        const SET_BLOCK_TRACKING = Symbol(
          true ? `setBlockTracking` : undefined
        );
        const PUSH_SCOPE_ID = Symbol(true ? `pushScopeId` : undefined);
        const POP_SCOPE_ID = Symbol(true ? `popScopeId` : undefined);
        const WITH_CTX = Symbol(true ? `withCtx` : undefined);
        const UNREF = Symbol(true ? `unref` : undefined);
        const IS_REF = Symbol(true ? `isRef` : undefined);
        const WITH_MEMO = Symbol(true ? `withMemo` : undefined);
        const IS_MEMO_SAME = Symbol(true ? `isMemoSame` : undefined);
        const helperNameMap = {
          [FRAGMENT]: `Fragment`,
          [TELEPORT]: `Teleport`,
          [SUSPENSE]: `Suspense`,
          [KEEP_ALIVE]: `KeepAlive`,
          [BASE_TRANSITION]: `BaseTransition`,
          [OPEN_BLOCK]: `openBlock`,
          [CREATE_BLOCK]: `createBlock`,
          [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
          [CREATE_VNODE]: `createVNode`,
          [CREATE_ELEMENT_VNODE]: `createElementVNode`,
          [CREATE_COMMENT]: `createCommentVNode`,
          [CREATE_TEXT]: `createTextVNode`,
          [CREATE_STATIC]: `createStaticVNode`,
          [RESOLVE_COMPONENT]: `resolveComponent`,
          [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
          [RESOLVE_DIRECTIVE]: `resolveDirective`,
          [RESOLVE_FILTER]: `resolveFilter`,
          [WITH_DIRECTIVES]: `withDirectives`,
          [RENDER_LIST]: `renderList`,
          [RENDER_SLOT]: `renderSlot`,
          [CREATE_SLOTS]: `createSlots`,
          [TO_DISPLAY_STRING]: `toDisplayString`,
          [MERGE_PROPS]: `mergeProps`,
          [NORMALIZE_CLASS]: `normalizeClass`,
          [NORMALIZE_STYLE]: `normalizeStyle`,
          [NORMALIZE_PROPS]: `normalizeProps`,
          [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
          [TO_HANDLERS]: `toHandlers`,
          [CAMELIZE]: `camelize`,
          [CAPITALIZE]: `capitalize`,
          [TO_HANDLER_KEY]: `toHandlerKey`,
          [SET_BLOCK_TRACKING]: `setBlockTracking`,
          [PUSH_SCOPE_ID]: `pushScopeId`,
          [POP_SCOPE_ID]: `popScopeId`,
          [WITH_CTX]: `withCtx`,
          [UNREF]: `unref`,
          [IS_REF]: `isRef`,
          [WITH_MEMO]: `withMemo`,
          [IS_MEMO_SAME]: `isMemoSame`,
        };
        function registerRuntimeHelpers(helpers) {
          Object.getOwnPropertySymbols(helpers).forEach((s) => {
            helperNameMap[s] = helpers[s];
          });
        }

        const Namespaces = {
          HTML: 0,
          0: "HTML",
          SVG: 1,
          1: "SVG",
          MATH_ML: 2,
          2: "MATH_ML",
        };
        const NodeTypes = {
          ROOT: 0,
          0: "ROOT",
          ELEMENT: 1,
          1: "ELEMENT",
          TEXT: 2,
          2: "TEXT",
          COMMENT: 3,
          3: "COMMENT",
          SIMPLE_EXPRESSION: 4,
          4: "SIMPLE_EXPRESSION",
          INTERPOLATION: 5,
          5: "INTERPOLATION",
          ATTRIBUTE: 6,
          6: "ATTRIBUTE",
          DIRECTIVE: 7,
          7: "DIRECTIVE",
          COMPOUND_EXPRESSION: 8,
          8: "COMPOUND_EXPRESSION",
          IF: 9,
          9: "IF",
          IF_BRANCH: 10,
          10: "IF_BRANCH",
          FOR: 11,
          11: "FOR",
          TEXT_CALL: 12,
          12: "TEXT_CALL",
          VNODE_CALL: 13,
          13: "VNODE_CALL",
          JS_CALL_EXPRESSION: 14,
          14: "JS_CALL_EXPRESSION",
          JS_OBJECT_EXPRESSION: 15,
          15: "JS_OBJECT_EXPRESSION",
          JS_PROPERTY: 16,
          16: "JS_PROPERTY",
          JS_ARRAY_EXPRESSION: 17,
          17: "JS_ARRAY_EXPRESSION",
          JS_FUNCTION_EXPRESSION: 18,
          18: "JS_FUNCTION_EXPRESSION",
          JS_CONDITIONAL_EXPRESSION: 19,
          19: "JS_CONDITIONAL_EXPRESSION",
          JS_CACHE_EXPRESSION: 20,
          20: "JS_CACHE_EXPRESSION",
          JS_BLOCK_STATEMENT: 21,
          21: "JS_BLOCK_STATEMENT",
          JS_TEMPLATE_LITERAL: 22,
          22: "JS_TEMPLATE_LITERAL",
          JS_IF_STATEMENT: 23,
          23: "JS_IF_STATEMENT",
          JS_ASSIGNMENT_EXPRESSION: 24,
          24: "JS_ASSIGNMENT_EXPRESSION",
          JS_SEQUENCE_EXPRESSION: 25,
          25: "JS_SEQUENCE_EXPRESSION",
          JS_RETURN_STATEMENT: 26,
          26: "JS_RETURN_STATEMENT",
        };
        const ElementTypes = {
          ELEMENT: 0,
          0: "ELEMENT",
          COMPONENT: 1,
          1: "COMPONENT",
          SLOT: 2,
          2: "SLOT",
          TEMPLATE: 3,
          3: "TEMPLATE",
        };
        const ConstantTypes = {
          NOT_CONSTANT: 0,
          0: "NOT_CONSTANT",
          CAN_SKIP_PATCH: 1,
          1: "CAN_SKIP_PATCH",
          CAN_HOIST: 2,
          2: "CAN_HOIST",
          CAN_STRINGIFY: 3,
          3: "CAN_STRINGIFY",
        };
        const locStub = {
          start: { line: 1, column: 1, offset: 0 },
          end: { line: 1, column: 1, offset: 0 },
          source: "",
        };
        function createRoot(children, source = "") {
          return {
            type: 0,
            source,
            children,
            helpers: /* @__PURE__ */ new Set(),
            components: [],
            directives: [],
            hoists: [],
            imports: [],
            cached: 0,
            temps: 0,
            codegenNode: void 0,
            loc: locStub,
          };
        }
        function createVNodeCall(
          context,
          tag,
          props,
          children,
          patchFlag,
          dynamicProps,
          directives,
          isBlock = false,
          disableTracking = false,
          isComponent = false,
          loc = locStub
        ) {
          if (context) {
            if (isBlock) {
              context.helper(OPEN_BLOCK);
              context.helper(getVNodeBlockHelper(context.inSSR, isComponent));
            } else {
              context.helper(getVNodeHelper(context.inSSR, isComponent));
            }
            if (directives) {
              context.helper(WITH_DIRECTIVES);
            }
          }
          return {
            type: 13,
            tag,
            props,
            children,
            patchFlag,
            dynamicProps,
            directives,
            isBlock,
            disableTracking,
            isComponent,
            loc,
          };
        }
        function createArrayExpression(elements, loc = locStub) {
          return {
            type: 17,
            loc,
            elements,
          };
        }
        function createObjectExpression(properties, loc = locStub) {
          return {
            type: 15,
            loc,
            properties,
          };
        }
        function createObjectProperty(key, value) {
          return {
            type: 16,
            loc: locStub,
            key: Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
              key
            )
              ? createSimpleExpression(key, true)
              : key,
            value,
          };
        }
        function createSimpleExpression(
          content,
          isStatic = false,
          loc = locStub,
          constType = 0
        ) {
          return {
            type: 4,
            loc,
            content,
            isStatic,
            constType: isStatic ? 3 : constType,
          };
        }
        function createInterpolation(content, loc) {
          return {
            type: 5,
            loc,
            content: Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"]
            )(content)
              ? createSimpleExpression(content, false, loc)
              : content,
          };
        }
        function createCompoundExpression(children, loc = locStub) {
          return {
            type: 8,
            loc,
            children,
          };
        }
        function createCallExpression(callee, args = [], loc = locStub) {
          return {
            type: 14,
            loc,
            callee,
            arguments: args,
          };
        }
        function createFunctionExpression(
          params,
          returns = void 0,
          newline = false,
          isSlot = false,
          loc = locStub
        ) {
          return {
            type: 18,
            params,
            returns,
            newline,
            isSlot,
            loc,
          };
        }
        function createConditionalExpression(
          test,
          consequent,
          alternate,
          newline = true
        ) {
          return {
            type: 19,
            test,
            consequent,
            alternate,
            newline,
            loc: locStub,
          };
        }
        function createCacheExpression(index, value, isVNode = false) {
          return {
            type: 20,
            index,
            value,
            isVNode,
            loc: locStub,
          };
        }
        function createBlockStatement(body) {
          return {
            type: 21,
            body,
            loc: locStub,
          };
        }
        function createTemplateLiteral(elements) {
          return {
            type: 22,
            elements,
            loc: locStub,
          };
        }
        function createIfStatement(test, consequent, alternate) {
          return {
            type: 23,
            test,
            consequent,
            alternate,
            loc: locStub,
          };
        }
        function createAssignmentExpression(left, right) {
          return {
            type: 24,
            left,
            right,
            loc: locStub,
          };
        }
        function createSequenceExpression(expressions) {
          return {
            type: 25,
            expressions,
            loc: locStub,
          };
        }
        function createReturnStatement(returns) {
          return {
            type: 26,
            returns,
            loc: locStub,
          };
        }
        function getVNodeHelper(ssr, isComponent) {
          return ssr || isComponent ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
        }
        function getVNodeBlockHelper(ssr, isComponent) {
          return ssr || isComponent ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
        }
        function convertToBlock(node, { helper, removeHelper, inSSR }) {
          if (!node.isBlock) {
            node.isBlock = true;
            removeHelper(getVNodeHelper(inSSR, node.isComponent));
            helper(OPEN_BLOCK);
            helper(getVNodeBlockHelper(inSSR, node.isComponent));
          }
        }

        const defaultDelimitersOpen = new Uint8Array([123, 123]);
        const defaultDelimitersClose = new Uint8Array([125, 125]);
        function isTagStartChar(c) {
          return (c >= 97 && c <= 122) || (c >= 65 && c <= 90);
        }
        function isWhitespace(c) {
          return c === 32 || c === 10 || c === 9 || c === 12 || c === 13;
        }
        function isEndOfTagSection(c) {
          return c === 47 || c === 62 || isWhitespace(c);
        }
        function toCharCodes(str) {
          const ret = new Uint8Array(str.length);
          for (let i = 0; i < str.length; i++) {
            ret[i] = str.charCodeAt(i);
          }
          return ret;
        }
        const Sequences = {
          Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
          // CDATA[
          CdataEnd: new Uint8Array([93, 93, 62]),
          // ]]>
          CommentEnd: new Uint8Array([45, 45, 62]),
          // `-->`
          ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
          // `<\/script`
          StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
          // `</style`
          TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
          // `</title`
          TextareaEnd: new Uint8Array([
            60, 47, 116, 101, 120, 116, 97, 114, 101, 97,
          ]),
          // `</textarea
        };
        class Tokenizer {
          constructor(stack, cbs) {
            this.stack = stack;
            this.cbs = cbs;
            /** The current state the tokenizer is in. */
            this.state = 1;
            /** The read buffer. */
            this.buffer = "";
            /** The beginning of the section that is currently being read. */
            this.sectionStart = 0;
            /** The index within the buffer that we are currently looking at. */
            this.index = 0;
            /** The start of the last entity. */
            this.entityStart = 0;
            /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */
            this.baseState = 1;
            /** For special parsing behavior inside of script and style tags. */
            this.inRCDATA = false;
            /** For disabling RCDATA tags handling */
            this.inXML = false;
            /** For disabling interpolation parsing in v-pre */
            this.inVPre = false;
            /** Record newline positions for fast line / column calculation */
            this.newlines = [];
            this.mode = 0;
            this.delimiterOpen = defaultDelimitersOpen;
            this.delimiterClose = defaultDelimitersClose;
            this.delimiterIndex = -1;
            this.currentSequence = void 0;
            this.sequenceIndex = 0;
          }
          get inSFCRoot() {
            return this.mode === 2 && this.stack.length === 0;
          }
          reset() {
            this.state = 1;
            this.mode = 0;
            this.buffer = "";
            this.sectionStart = 0;
            this.index = 0;
            this.baseState = 1;
            this.inRCDATA = false;
            this.currentSequence = void 0;
            this.newlines.length = 0;
            this.delimiterOpen = defaultDelimitersOpen;
            this.delimiterClose = defaultDelimitersClose;
          }
          /**
           * Generate Position object with line / column information using recorded
           * newline positions. We know the index is always going to be an already
           * processed index, so all the newlines up to this index should have been
           * recorded.
           */
          getPos(index) {
            let line = 1;
            let column = index + 1;
            for (let i = this.newlines.length - 1; i >= 0; i--) {
              const newlineIndex = this.newlines[i];
              if (index > newlineIndex) {
                line = i + 2;
                column = index - newlineIndex;
                break;
              }
            }
            return {
              column,
              line,
              offset: index,
            };
          }
          peek() {
            return this.buffer.charCodeAt(this.index + 1);
          }
          stateText(c) {
            if (c === 60) {
              if (this.index > this.sectionStart) {
                this.cbs.ontext(this.sectionStart, this.index);
              }
              this.state = 5;
              this.sectionStart = this.index;
            } else if (!this.inVPre && c === this.delimiterOpen[0]) {
              this.state = 2;
              this.delimiterIndex = 0;
              this.stateInterpolationOpen(c);
            }
          }
          stateInterpolationOpen(c) {
            if (c === this.delimiterOpen[this.delimiterIndex]) {
              if (this.delimiterIndex === this.delimiterOpen.length - 1) {
                const start = this.index + 1 - this.delimiterOpen.length;
                if (start > this.sectionStart) {
                  this.cbs.ontext(this.sectionStart, start);
                }
                this.state = 3;
                this.sectionStart = start;
              } else {
                this.delimiterIndex++;
              }
            } else if (this.inRCDATA) {
              this.state = 32;
              this.stateInRCDATA(c);
            } else {
              this.state = 1;
              this.stateText(c);
            }
          }
          stateInterpolation(c) {
            if (c === this.delimiterClose[0]) {
              this.state = 4;
              this.delimiterIndex = 0;
              this.stateInterpolationClose(c);
            }
          }
          stateInterpolationClose(c) {
            if (c === this.delimiterClose[this.delimiterIndex]) {
              if (this.delimiterIndex === this.delimiterClose.length - 1) {
                this.cbs.oninterpolation(this.sectionStart, this.index + 1);
                if (this.inRCDATA) {
                  this.state = 32;
                } else {
                  this.state = 1;
                }
                this.sectionStart = this.index + 1;
              } else {
                this.delimiterIndex++;
              }
            } else {
              this.state = 3;
              this.stateInterpolation(c);
            }
          }
          stateSpecialStartSequence(c) {
            const isEnd = this.sequenceIndex === this.currentSequence.length;
            const isMatch = isEnd
              ? // If we are at the end of the sequence, make sure the tag name has ended
                isEndOfTagSection(c)
              : // Otherwise, do a case-insensitive comparison
                (c | 32) === this.currentSequence[this.sequenceIndex];
            if (!isMatch) {
              this.inRCDATA = false;
            } else if (!isEnd) {
              this.sequenceIndex++;
              return;
            }
            this.sequenceIndex = 0;
            this.state = 6;
            this.stateInTagName(c);
          }
          /** Look for an end tag. For <title> and <textarea>, also decode entities. */
          stateInRCDATA(c) {
            if (this.sequenceIndex === this.currentSequence.length) {
              if (c === 62 || isWhitespace(c)) {
                const endOfText = this.index - this.currentSequence.length;
                if (this.sectionStart < endOfText) {
                  const actualIndex = this.index;
                  this.index = endOfText;
                  this.cbs.ontext(this.sectionStart, endOfText);
                  this.index = actualIndex;
                }
                this.sectionStart = endOfText + 2;
                this.stateInClosingTagName(c);
                this.inRCDATA = false;
                return;
              }
              this.sequenceIndex = 0;
            }
            if ((c | 32) === this.currentSequence[this.sequenceIndex]) {
              this.sequenceIndex += 1;
            } else if (this.sequenceIndex === 0) {
              if (
                this.currentSequence === Sequences.TitleEnd ||
                (this.currentSequence === Sequences.TextareaEnd &&
                  !this.inSFCRoot)
              ) {
                if (c === this.delimiterOpen[0]) {
                  this.state = 2;
                  this.delimiterIndex = 0;
                  this.stateInterpolationOpen(c);
                }
              } else if (this.fastForwardTo(60)) {
                this.sequenceIndex = 1;
              }
            } else {
              this.sequenceIndex = Number(c === 60);
            }
          }
          stateCDATASequence(c) {
            if (c === Sequences.Cdata[this.sequenceIndex]) {
              if (++this.sequenceIndex === Sequences.Cdata.length) {
                this.state = 28;
                this.currentSequence = Sequences.CdataEnd;
                this.sequenceIndex = 0;
                this.sectionStart = this.index + 1;
              }
            } else {
              this.sequenceIndex = 0;
              this.state = 23;
              this.stateInDeclaration(c);
            }
          }
          /**
           * When we wait for one specific character, we can speed things up
           * by skipping through the buffer until we find it.
           *
           * @returns Whether the character was found.
           */
          fastForwardTo(c) {
            while (++this.index < this.buffer.length) {
              const cc = this.buffer.charCodeAt(this.index);
              if (cc === 10) {
                this.newlines.push(this.index);
              }
              if (cc === c) {
                return true;
              }
            }
            this.index = this.buffer.length - 1;
            return false;
          }
          /**
           * Comments and CDATA end with `-->` and `]]>`.
           *
           * Their common qualities are:
           * - Their end sequences have a distinct character they start with.
           * - That character is then repeated, so we have to check multiple repeats.
           * - All characters but the start character of the sequence can be skipped.
           */
          stateInCommentLike(c) {
            if (c === this.currentSequence[this.sequenceIndex]) {
              if (++this.sequenceIndex === this.currentSequence.length) {
                if (this.currentSequence === Sequences.CdataEnd) {
                  this.cbs.oncdata(this.sectionStart, this.index - 2);
                } else {
                  this.cbs.oncomment(this.sectionStart, this.index - 2);
                }
                this.sequenceIndex = 0;
                this.sectionStart = this.index + 1;
                this.state = 1;
              }
            } else if (this.sequenceIndex === 0) {
              if (this.fastForwardTo(this.currentSequence[0])) {
                this.sequenceIndex = 1;
              }
            } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
              this.sequenceIndex = 0;
            }
          }
          startSpecial(sequence, offset) {
            this.enterRCDATA(sequence, offset);
            this.state = 31;
          }
          enterRCDATA(sequence, offset) {
            this.inRCDATA = true;
            this.currentSequence = sequence;
            this.sequenceIndex = offset;
          }
          stateBeforeTagName(c) {
            if (c === 33) {
              this.state = 22;
              this.sectionStart = this.index + 1;
            } else if (c === 63) {
              this.state = 24;
              this.sectionStart = this.index + 1;
            } else if (isTagStartChar(c)) {
              this.sectionStart = this.index;
              if (this.mode === 0) {
                this.state = 6;
              } else if (this.inSFCRoot) {
                this.state = 34;
              } else if (!this.inXML) {
                if (c === 116) {
                  this.state = 30;
                } else {
                  this.state = c === 115 ? 29 : 6;
                }
              } else {
                this.state = 6;
              }
            } else if (c === 47) {
              this.state = 8;
            } else {
              this.state = 1;
              this.stateText(c);
            }
          }
          stateInTagName(c) {
            if (isEndOfTagSection(c)) {
              this.handleTagName(c);
            }
          }
          stateInSFCRootTagName(c) {
            if (isEndOfTagSection(c)) {
              const tag = this.buffer.slice(this.sectionStart, this.index);
              if (tag !== "template") {
                this.enterRCDATA(toCharCodes(`</` + tag), 0);
              }
              this.handleTagName(c);
            }
          }
          handleTagName(c) {
            this.cbs.onopentagname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = 11;
            this.stateBeforeAttrName(c);
          }
          stateBeforeClosingTagName(c) {
            if (isWhitespace(c));
            else if (c === 62) {
              if (true) {
                this.cbs.onerr(14, this.index);
              }
              this.state = 1;
              this.sectionStart = this.index + 1;
            } else {
              this.state = isTagStartChar(c) ? 9 : 27;
              this.sectionStart = this.index;
            }
          }
          stateInClosingTagName(c) {
            if (c === 62 || isWhitespace(c)) {
              this.cbs.onclosetag(this.sectionStart, this.index);
              this.sectionStart = -1;
              this.state = 10;
              this.stateAfterClosingTagName(c);
            }
          }
          stateAfterClosingTagName(c) {
            if (c === 62) {
              this.state = 1;
              this.sectionStart = this.index + 1;
            }
          }
          stateBeforeAttrName(c) {
            if (c === 62) {
              this.cbs.onopentagend(this.index);
              if (this.inRCDATA) {
                this.state = 32;
              } else {
                this.state = 1;
              }
              this.sectionStart = this.index + 1;
            } else if (c === 47) {
              this.state = 7;
              if (true && this.peek() !== 62) {
                this.cbs.onerr(22, this.index);
              }
            } else if (c === 60 && this.peek() === 47) {
              this.cbs.onopentagend(this.index);
              this.state = 5;
              this.sectionStart = this.index;
            } else if (!isWhitespace(c)) {
              if (true && c === 61) {
                this.cbs.onerr(19, this.index);
              }
              this.handleAttrStart(c);
            }
          }
          handleAttrStart(c) {
            if (c === 118 && this.peek() === 45) {
              this.state = 13;
              this.sectionStart = this.index;
            } else if (c === 46 || c === 58 || c === 64 || c === 35) {
              this.cbs.ondirname(this.index, this.index + 1);
              this.state = 14;
              this.sectionStart = this.index + 1;
            } else {
              this.state = 12;
              this.sectionStart = this.index;
            }
          }
          stateInSelfClosingTag(c) {
            if (c === 62) {
              this.cbs.onselfclosingtag(this.index);
              this.state = 1;
              this.sectionStart = this.index + 1;
              this.inRCDATA = false;
            } else if (!isWhitespace(c)) {
              this.state = 11;
              this.stateBeforeAttrName(c);
            }
          }
          stateInAttrName(c) {
            if (c === 61 || isEndOfTagSection(c)) {
              this.cbs.onattribname(this.sectionStart, this.index);
              this.handleAttrNameEnd(c);
            } else if (true && (c === 34 || c === 39 || c === 60)) {
              this.cbs.onerr(17, this.index);
            }
          }
          stateInDirName(c) {
            if (c === 61 || isEndOfTagSection(c)) {
              this.cbs.ondirname(this.sectionStart, this.index);
              this.handleAttrNameEnd(c);
            } else if (c === 58) {
              this.cbs.ondirname(this.sectionStart, this.index);
              this.state = 14;
              this.sectionStart = this.index + 1;
            } else if (c === 46) {
              this.cbs.ondirname(this.sectionStart, this.index);
              this.state = 16;
              this.sectionStart = this.index + 1;
            }
          }
          stateInDirArg(c) {
            if (c === 61 || isEndOfTagSection(c)) {
              this.cbs.ondirarg(this.sectionStart, this.index);
              this.handleAttrNameEnd(c);
            } else if (c === 91) {
              this.state = 15;
            } else if (c === 46) {
              this.cbs.ondirarg(this.sectionStart, this.index);
              this.state = 16;
              this.sectionStart = this.index + 1;
            }
          }
          stateInDynamicDirArg(c) {
            if (c === 93) {
              this.state = 14;
            } else if (c === 61 || isEndOfTagSection(c)) {
              this.cbs.ondirarg(this.sectionStart, this.index + 1);
              this.handleAttrNameEnd(c);
              if (true) {
                this.cbs.onerr(27, this.index);
              }
            }
          }
          stateInDirModifier(c) {
            if (c === 61 || isEndOfTagSection(c)) {
              this.cbs.ondirmodifier(this.sectionStart, this.index);
              this.handleAttrNameEnd(c);
            } else if (c === 46) {
              this.cbs.ondirmodifier(this.sectionStart, this.index);
              this.sectionStart = this.index + 1;
            }
          }
          handleAttrNameEnd(c) {
            this.sectionStart = this.index;
            this.state = 17;
            this.cbs.onattribnameend(this.index);
            this.stateAfterAttrName(c);
          }
          stateAfterAttrName(c) {
            if (c === 61) {
              this.state = 18;
            } else if (c === 47 || c === 62) {
              this.cbs.onattribend(0, this.sectionStart);
              this.sectionStart = -1;
              this.state = 11;
              this.stateBeforeAttrName(c);
            } else if (!isWhitespace(c)) {
              this.cbs.onattribend(0, this.sectionStart);
              this.handleAttrStart(c);
            }
          }
          stateBeforeAttrValue(c) {
            if (c === 34) {
              this.state = 19;
              this.sectionStart = this.index + 1;
            } else if (c === 39) {
              this.state = 20;
              this.sectionStart = this.index + 1;
            } else if (!isWhitespace(c)) {
              this.sectionStart = this.index;
              this.state = 21;
              this.stateInAttrValueNoQuotes(c);
            }
          }
          handleInAttrValue(c, quote) {
            if (c === quote || this.fastForwardTo(quote)) {
              this.cbs.onattribdata(this.sectionStart, this.index);
              this.sectionStart = -1;
              this.cbs.onattribend(quote === 34 ? 3 : 2, this.index + 1);
              this.state = 11;
            }
          }
          stateInAttrValueDoubleQuotes(c) {
            this.handleInAttrValue(c, 34);
          }
          stateInAttrValueSingleQuotes(c) {
            this.handleInAttrValue(c, 39);
          }
          stateInAttrValueNoQuotes(c) {
            if (isWhitespace(c) || c === 62) {
              this.cbs.onattribdata(this.sectionStart, this.index);
              this.sectionStart = -1;
              this.cbs.onattribend(1, this.index);
              this.state = 11;
              this.stateBeforeAttrName(c);
            } else if (
              (true && c === 34) ||
              c === 39 ||
              c === 60 ||
              c === 61 ||
              c === 96
            ) {
              this.cbs.onerr(18, this.index);
            } else;
          }
          stateBeforeDeclaration(c) {
            if (c === 91) {
              this.state = 26;
              this.sequenceIndex = 0;
            } else {
              this.state = c === 45 ? 25 : 23;
            }
          }
          stateInDeclaration(c) {
            if (c === 62 || this.fastForwardTo(62)) {
              this.state = 1;
              this.sectionStart = this.index + 1;
            }
          }
          stateInProcessingInstruction(c) {
            if (c === 62 || this.fastForwardTo(62)) {
              this.cbs.onprocessinginstruction(this.sectionStart, this.index);
              this.state = 1;
              this.sectionStart = this.index + 1;
            }
          }
          stateBeforeComment(c) {
            if (c === 45) {
              this.state = 28;
              this.currentSequence = Sequences.CommentEnd;
              this.sequenceIndex = 2;
              this.sectionStart = this.index + 1;
            } else {
              this.state = 23;
            }
          }
          stateInSpecialComment(c) {
            if (c === 62 || this.fastForwardTo(62)) {
              this.cbs.oncomment(this.sectionStart, this.index);
              this.state = 1;
              this.sectionStart = this.index + 1;
            }
          }
          stateBeforeSpecialS(c) {
            if (c === Sequences.ScriptEnd[3]) {
              this.startSpecial(Sequences.ScriptEnd, 4);
            } else if (c === Sequences.StyleEnd[3]) {
              this.startSpecial(Sequences.StyleEnd, 4);
            } else {
              this.state = 6;
              this.stateInTagName(c);
            }
          }
          stateBeforeSpecialT(c) {
            if (c === Sequences.TitleEnd[3]) {
              this.startSpecial(Sequences.TitleEnd, 4);
            } else if (c === Sequences.TextareaEnd[3]) {
              this.startSpecial(Sequences.TextareaEnd, 4);
            } else {
              this.state = 6;
              this.stateInTagName(c);
            }
          }
          startEntity() {}
          stateInEntity() {}
          /**
           * Iterates through the buffer, calling the function corresponding to the current state.
           *
           * States that are more likely to be hit are higher up, as a performance improvement.
           */
          parse(input) {
            this.buffer = input;
            while (this.index < this.buffer.length) {
              const c = this.buffer.charCodeAt(this.index);
              if (c === 10) {
                this.newlines.push(this.index);
              }
              switch (this.state) {
                case 1: {
                  this.stateText(c);
                  break;
                }
                case 2: {
                  this.stateInterpolationOpen(c);
                  break;
                }
                case 3: {
                  this.stateInterpolation(c);
                  break;
                }
                case 4: {
                  this.stateInterpolationClose(c);
                  break;
                }
                case 31: {
                  this.stateSpecialStartSequence(c);
                  break;
                }
                case 32: {
                  this.stateInRCDATA(c);
                  break;
                }
                case 26: {
                  this.stateCDATASequence(c);
                  break;
                }
                case 19: {
                  this.stateInAttrValueDoubleQuotes(c);
                  break;
                }
                case 12: {
                  this.stateInAttrName(c);
                  break;
                }
                case 13: {
                  this.stateInDirName(c);
                  break;
                }
                case 14: {
                  this.stateInDirArg(c);
                  break;
                }
                case 15: {
                  this.stateInDynamicDirArg(c);
                  break;
                }
                case 16: {
                  this.stateInDirModifier(c);
                  break;
                }
                case 28: {
                  this.stateInCommentLike(c);
                  break;
                }
                case 27: {
                  this.stateInSpecialComment(c);
                  break;
                }
                case 11: {
                  this.stateBeforeAttrName(c);
                  break;
                }
                case 6: {
                  this.stateInTagName(c);
                  break;
                }
                case 34: {
                  this.stateInSFCRootTagName(c);
                  break;
                }
                case 9: {
                  this.stateInClosingTagName(c);
                  break;
                }
                case 5: {
                  this.stateBeforeTagName(c);
                  break;
                }
                case 17: {
                  this.stateAfterAttrName(c);
                  break;
                }
                case 20: {
                  this.stateInAttrValueSingleQuotes(c);
                  break;
                }
                case 18: {
                  this.stateBeforeAttrValue(c);
                  break;
                }
                case 8: {
                  this.stateBeforeClosingTagName(c);
                  break;
                }
                case 10: {
                  this.stateAfterClosingTagName(c);
                  break;
                }
                case 29: {
                  this.stateBeforeSpecialS(c);
                  break;
                }
                case 30: {
                  this.stateBeforeSpecialT(c);
                  break;
                }
                case 21: {
                  this.stateInAttrValueNoQuotes(c);
                  break;
                }
                case 7: {
                  this.stateInSelfClosingTag(c);
                  break;
                }
                case 23: {
                  this.stateInDeclaration(c);
                  break;
                }
                case 22: {
                  this.stateBeforeDeclaration(c);
                  break;
                }
                case 25: {
                  this.stateBeforeComment(c);
                  break;
                }
                case 24: {
                  this.stateInProcessingInstruction(c);
                  break;
                }
                case 33: {
                  this.stateInEntity();
                  break;
                }
              }
              this.index++;
            }
            this.cleanup();
            this.finish();
          }
          /**
           * Remove data that has already been consumed from the buffer.
           */
          cleanup() {
            if (this.sectionStart !== this.index) {
              if (
                this.state === 1 ||
                (this.state === 32 && this.sequenceIndex === 0)
              ) {
                this.cbs.ontext(this.sectionStart, this.index);
                this.sectionStart = this.index;
              } else if (
                this.state === 19 ||
                this.state === 20 ||
                this.state === 21
              ) {
                this.cbs.onattribdata(this.sectionStart, this.index);
                this.sectionStart = this.index;
              }
            }
          }
          finish() {
            this.handleTrailingData();
            this.cbs.onend();
          }
          /** Handle any trailing data. */
          handleTrailingData() {
            const endIndex = this.buffer.length;
            if (this.sectionStart >= endIndex) {
              return;
            }
            if (this.state === 28) {
              if (this.currentSequence === Sequences.CdataEnd) {
                this.cbs.oncdata(this.sectionStart, endIndex);
              } else {
                this.cbs.oncomment(this.sectionStart, endIndex);
              }
            } else if (
              this.state === 6 ||
              this.state === 11 ||
              this.state === 18 ||
              this.state === 17 ||
              this.state === 12 ||
              this.state === 13 ||
              this.state === 14 ||
              this.state === 15 ||
              this.state === 16 ||
              this.state === 20 ||
              this.state === 19 ||
              this.state === 21 ||
              this.state === 9
            );
            else {
              this.cbs.ontext(this.sectionStart, endIndex);
            }
          }
          emitCodePoint(cp, consumed) {}
        }

        const CompilerDeprecationTypes = {
          COMPILER_IS_ON_ELEMENT: "COMPILER_IS_ON_ELEMENT",
          COMPILER_V_BIND_SYNC: "COMPILER_V_BIND_SYNC",
          COMPILER_V_BIND_OBJECT_ORDER: "COMPILER_V_BIND_OBJECT_ORDER",
          COMPILER_V_ON_NATIVE: "COMPILER_V_ON_NATIVE",
          COMPILER_V_IF_V_FOR_PRECEDENCE: "COMPILER_V_IF_V_FOR_PRECEDENCE",
          COMPILER_NATIVE_TEMPLATE: "COMPILER_NATIVE_TEMPLATE",
          COMPILER_INLINE_TEMPLATE: "COMPILER_INLINE_TEMPLATE",
          COMPILER_FILTERS: "COMPILER_FILTERS",
        };
        const deprecationData = {
          ["COMPILER_IS_ON_ELEMENT"]: {
            message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
            link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`,
          },
          ["COMPILER_V_BIND_SYNC"]: {
            message: (key) =>
              `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
            link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`,
          },
          ["COMPILER_V_BIND_OBJECT_ORDER"]: {
            message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
            link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`,
          },
          ["COMPILER_V_ON_NATIVE"]: {
            message: `.native modifier for v-on has been removed as is no longer necessary.`,
            link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`,
          },
          ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
            message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
            link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`,
          },
          ["COMPILER_NATIVE_TEMPLATE"]: {
            message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`,
          },
          ["COMPILER_INLINE_TEMPLATE"]: {
            message: `"inline-template" has been removed in Vue 3.`,
            link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`,
          },
          ["COMPILER_FILTERS"]: {
            message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
            link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`,
          },
        };
        function getCompatValue(key, { compatConfig }) {
          const value = compatConfig && compatConfig[key];
          if (key === "MODE") {
            return value || 3;
          } else {
            return value;
          }
        }
        function isCompatEnabled(key, context) {
          const mode = getCompatValue("MODE", context);
          const value = getCompatValue(key, context);
          return mode === 3 ? value === true : value !== false;
        }
        function checkCompatEnabled(key, context, loc, ...args) {
          const enabled = isCompatEnabled(key, context);
          if (true && enabled) {
            warnDeprecation(key, context, loc, ...args);
          }
          return enabled;
        }
        function warnDeprecation(key, context, loc, ...args) {
          const val = getCompatValue(key, context);
          if (val === "suppress-warning") {
            return;
          }
          const { message, link } = deprecationData[key];
          const msg = `(deprecation ${key}) ${
            typeof message === "function" ? message(...args) : message
          }${
            link
              ? `
  Details: ${link}`
              : ``
          }`;
          const err = new SyntaxError(msg);
          err.code = key;
          if (loc) err.loc = loc;
          context.onWarn(err);
        }

        function defaultOnError(error) {
          throw error;
        }
        function defaultOnWarn(msg) {
          true && console.warn(`[Vue warn] ${msg.message}`);
        }
        function createCompilerError(code, loc, messages, additionalMessage) {
          const msg = true
            ? (messages || errorMessages)[code] + (additionalMessage || ``)
            : undefined;
          const error = new SyntaxError(String(msg));
          error.code = code;
          error.loc = loc;
          return error;
        }
        const ErrorCodes = {
          ABRUPT_CLOSING_OF_EMPTY_COMMENT: 0,
          0: "ABRUPT_CLOSING_OF_EMPTY_COMMENT",
          CDATA_IN_HTML_CONTENT: 1,
          1: "CDATA_IN_HTML_CONTENT",
          DUPLICATE_ATTRIBUTE: 2,
          2: "DUPLICATE_ATTRIBUTE",
          END_TAG_WITH_ATTRIBUTES: 3,
          3: "END_TAG_WITH_ATTRIBUTES",
          END_TAG_WITH_TRAILING_SOLIDUS: 4,
          4: "END_TAG_WITH_TRAILING_SOLIDUS",
          EOF_BEFORE_TAG_NAME: 5,
          5: "EOF_BEFORE_TAG_NAME",
          EOF_IN_CDATA: 6,
          6: "EOF_IN_CDATA",
          EOF_IN_COMMENT: 7,
          7: "EOF_IN_COMMENT",
          EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT: 8,
          8: "EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT",
          EOF_IN_TAG: 9,
          9: "EOF_IN_TAG",
          INCORRECTLY_CLOSED_COMMENT: 10,
          10: "INCORRECTLY_CLOSED_COMMENT",
          INCORRECTLY_OPENED_COMMENT: 11,
          11: "INCORRECTLY_OPENED_COMMENT",
          INVALID_FIRST_CHARACTER_OF_TAG_NAME: 12,
          12: "INVALID_FIRST_CHARACTER_OF_TAG_NAME",
          MISSING_ATTRIBUTE_VALUE: 13,
          13: "MISSING_ATTRIBUTE_VALUE",
          MISSING_END_TAG_NAME: 14,
          14: "MISSING_END_TAG_NAME",
          MISSING_WHITESPACE_BETWEEN_ATTRIBUTES: 15,
          15: "MISSING_WHITESPACE_BETWEEN_ATTRIBUTES",
          NESTED_COMMENT: 16,
          16: "NESTED_COMMENT",
          UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME: 17,
          17: "UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME",
          UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE: 18,
          18: "UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE",
          UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME: 19,
          19: "UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME",
          UNEXPECTED_NULL_CHARACTER: 20,
          20: "UNEXPECTED_NULL_CHARACTER",
          UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME: 21,
          21: "UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME",
          UNEXPECTED_SOLIDUS_IN_TAG: 22,
          22: "UNEXPECTED_SOLIDUS_IN_TAG",
          X_INVALID_END_TAG: 23,
          23: "X_INVALID_END_TAG",
          X_MISSING_END_TAG: 24,
          24: "X_MISSING_END_TAG",
          X_MISSING_INTERPOLATION_END: 25,
          25: "X_MISSING_INTERPOLATION_END",
          X_MISSING_DIRECTIVE_NAME: 26,
          26: "X_MISSING_DIRECTIVE_NAME",
          X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END: 27,
          27: "X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END",
          X_V_IF_NO_EXPRESSION: 28,
          28: "X_V_IF_NO_EXPRESSION",
          X_V_IF_SAME_KEY: 29,
          29: "X_V_IF_SAME_KEY",
          X_V_ELSE_NO_ADJACENT_IF: 30,
          30: "X_V_ELSE_NO_ADJACENT_IF",
          X_V_FOR_NO_EXPRESSION: 31,
          31: "X_V_FOR_NO_EXPRESSION",
          X_V_FOR_MALFORMED_EXPRESSION: 32,
          32: "X_V_FOR_MALFORMED_EXPRESSION",
          X_V_FOR_TEMPLATE_KEY_PLACEMENT: 33,
          33: "X_V_FOR_TEMPLATE_KEY_PLACEMENT",
          X_V_BIND_NO_EXPRESSION: 34,
          34: "X_V_BIND_NO_EXPRESSION",
          X_V_ON_NO_EXPRESSION: 35,
          35: "X_V_ON_NO_EXPRESSION",
          X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET: 36,
          36: "X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET",
          X_V_SLOT_MIXED_SLOT_USAGE: 37,
          37: "X_V_SLOT_MIXED_SLOT_USAGE",
          X_V_SLOT_DUPLICATE_SLOT_NAMES: 38,
          38: "X_V_SLOT_DUPLICATE_SLOT_NAMES",
          X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN: 39,
          39: "X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN",
          X_V_SLOT_MISPLACED: 40,
          40: "X_V_SLOT_MISPLACED",
          X_V_MODEL_NO_EXPRESSION: 41,
          41: "X_V_MODEL_NO_EXPRESSION",
          X_V_MODEL_MALFORMED_EXPRESSION: 42,
          42: "X_V_MODEL_MALFORMED_EXPRESSION",
          X_V_MODEL_ON_SCOPE_VARIABLE: 43,
          43: "X_V_MODEL_ON_SCOPE_VARIABLE",
          X_V_MODEL_ON_PROPS: 44,
          44: "X_V_MODEL_ON_PROPS",
          X_INVALID_EXPRESSION: 45,
          45: "X_INVALID_EXPRESSION",
          X_KEEP_ALIVE_INVALID_CHILDREN: 46,
          46: "X_KEEP_ALIVE_INVALID_CHILDREN",
          X_PREFIX_ID_NOT_SUPPORTED: 47,
          47: "X_PREFIX_ID_NOT_SUPPORTED",
          X_MODULE_MODE_NOT_SUPPORTED: 48,
          48: "X_MODULE_MODE_NOT_SUPPORTED",
          X_CACHE_HANDLER_NOT_SUPPORTED: 49,
          49: "X_CACHE_HANDLER_NOT_SUPPORTED",
          X_SCOPE_ID_NOT_SUPPORTED: 50,
          50: "X_SCOPE_ID_NOT_SUPPORTED",
          X_VNODE_HOOKS: 51,
          51: "X_VNODE_HOOKS",
          X_V_BIND_INVALID_SAME_NAME_ARGUMENT: 52,
          52: "X_V_BIND_INVALID_SAME_NAME_ARGUMENT",
          __EXTEND_POINT__: 53,
          53: "__EXTEND_POINT__",
        };
        const errorMessages = {
          // parse errors
          [0]: "Illegal comment.",
          [1]: "CDATA section is allowed only in XML context.",
          [2]: "Duplicate attribute.",
          [3]: "End tag cannot have attributes.",
          [4]: "Illegal '/' in tags.",
          [5]: "Unexpected EOF in tag.",
          [6]: "Unexpected EOF in CDATA section.",
          [7]: "Unexpected EOF in comment.",
          [8]: "Unexpected EOF in script.",
          [9]: "Unexpected EOF in tag.",
          [10]: "Incorrectly closed comment.",
          [11]: "Incorrectly opened comment.",
          [12]: "Illegal tag name. Use '&lt;' to print '<'.",
          [13]: "Attribute value was expected.",
          [14]: "End tag name was expected.",
          [15]: "Whitespace was expected.",
          [16]: "Unexpected '<!--' in comment.",
          [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
          [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
          [19]: "Attribute name cannot start with '='.",
          [21]: "'<?' is allowed only in XML context.",
          [20]: `Unexpected null character.`,
          [22]: "Illegal '/' in tags.",
          // Vue-specific parse errors
          [23]: "Invalid end tag.",
          [24]: "Element is missing end tag.",
          [25]: "Interpolation end sign was not found.",
          [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
          [26]: "Legal directive name was expected.",
          // transform errors
          [28]: `v-if/v-else-if is missing expression.`,
          [29]: `v-if/else branches must use unique keys.`,
          [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
          [31]: `v-for is missing expression.`,
          [32]: `v-for has invalid expression.`,
          [33]: `<template v-for> key should be placed on the <template> tag.`,
          [34]: `v-bind is missing expression.`,
          [52]: `v-bind with same-name shorthand only allows static argument.`,
          [35]: `v-on is missing expression.`,
          [36]: `Unexpected custom directive on <slot> outlet.`,
          [37]: `Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
          [38]: `Duplicate slot names found. `,
          [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
          [40]: `v-slot can only be used on components or <template> tags.`,
          [41]: `v-model is missing expression.`,
          [42]: `v-model value must be a valid JavaScript member expression.`,
          [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
          [44]: `v-model cannot be used on a prop, because local prop bindings are not writable.
Use a v-bind binding combined with a v-on listener that emits update:x event instead.`,
          [45]: `Error parsing JavaScript expression: `,
          [46]: `<KeepAlive> expects exactly one child component.`,
          [51]: `@vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support has been removed in 3.4.`,
          // generic errors
          [47]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
          [48]: `ES module mode is not supported in this build of compiler.`,
          [49]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
          [50]: `"scopeId" option is only supported in module mode.`,
          // just to fulfill types
          [53]: ``,
        };

        function walkIdentifiers(
          root,
          onIdentifier,
          includeAll = false,
          parentStack = [],
          knownIds = /* @__PURE__ */ Object.create(null)
        ) {
          {
            return;
          }
        }
        function isReferencedIdentifier(id, parent, parentStack) {
          {
            return false;
          }
        }
        function isInDestructureAssignment(parent, parentStack) {
          if (
            parent &&
            (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")
          ) {
            let i = parentStack.length;
            while (i--) {
              const p = parentStack[i];
              if (p.type === "AssignmentExpression") {
                return true;
              } else if (
                p.type !== "ObjectProperty" &&
                !p.type.endsWith("Pattern")
              ) {
                break;
              }
            }
          }
          return false;
        }
        function isInNewExpression(parentStack) {
          let i = parentStack.length;
          while (i--) {
            const p = parentStack[i];
            if (p.type === "NewExpression") {
              return true;
            } else if (p.type !== "MemberExpression") {
              break;
            }
          }
          return false;
        }
        function walkFunctionParams(node, onIdent) {
          for (const p of node.params) {
            for (const id of extractIdentifiers(p)) {
              onIdent(id);
            }
          }
        }
        function walkBlockDeclarations(block, onIdent) {
          for (const stmt of block.body) {
            if (stmt.type === "VariableDeclaration") {
              if (stmt.declare) continue;
              for (const decl of stmt.declarations) {
                for (const id of extractIdentifiers(decl.id)) {
                  onIdent(id);
                }
              }
            } else if (
              stmt.type === "FunctionDeclaration" ||
              stmt.type === "ClassDeclaration"
            ) {
              if (stmt.declare || !stmt.id) continue;
              onIdent(stmt.id);
            } else if (
              stmt.type === "ForOfStatement" ||
              stmt.type === "ForInStatement" ||
              stmt.type === "ForStatement"
            ) {
              const variable =
                stmt.type === "ForStatement" ? stmt.init : stmt.left;
              if (variable && variable.type === "VariableDeclaration") {
                for (const decl of variable.declarations) {
                  for (const id of extractIdentifiers(decl.id)) {
                    onIdent(id);
                  }
                }
              }
            }
          }
        }
        function extractIdentifiers(param, nodes = []) {
          switch (param.type) {
            case "Identifier":
              nodes.push(param);
              break;
            case "MemberExpression":
              let object = param;
              while (object.type === "MemberExpression") {
                object = object.object;
              }
              nodes.push(object);
              break;
            case "ObjectPattern":
              for (const prop of param.properties) {
                if (prop.type === "RestElement") {
                  extractIdentifiers(prop.argument, nodes);
                } else {
                  extractIdentifiers(prop.value, nodes);
                }
              }
              break;
            case "ArrayPattern":
              param.elements.forEach((element) => {
                if (element) extractIdentifiers(element, nodes);
              });
              break;
            case "RestElement":
              extractIdentifiers(param.argument, nodes);
              break;
            case "AssignmentPattern":
              extractIdentifiers(param.left, nodes);
              break;
          }
          return nodes;
        }
        const isFunctionType = (node) => {
          return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
        };
        const isStaticProperty = (node) =>
          node &&
          (node.type === "ObjectProperty" || node.type === "ObjectMethod") &&
          !node.computed;
        const isStaticPropertyKey = (node, parent) =>
          isStaticProperty(parent) && parent.key === node;
        const TS_NODE_TYPES = [
          "TSAsExpression",
          // foo as number
          "TSTypeAssertion",
          // (<number>foo)
          "TSNonNullExpression",
          // foo!
          "TSInstantiationExpression",
          // foo<string>
          "TSSatisfiesExpression",
          // foo satisfies T
        ];
        function unwrapTSNode(node) {
          if (TS_NODE_TYPES.includes(node.type)) {
            return unwrapTSNode(node.expression);
          } else {
            return node;
          }
        }

        const isStaticExp = (p) => p.type === 4 && p.isStatic;
        function isCoreComponent(tag) {
          switch (tag) {
            case "Teleport":
            case "teleport":
              return TELEPORT;
            case "Suspense":
            case "suspense":
              return SUSPENSE;
            case "KeepAlive":
            case "keep-alive":
              return KEEP_ALIVE;
            case "BaseTransition":
            case "base-transition":
              return BASE_TRANSITION;
          }
        }
        const nonIdentifierRE = /^\d|[^\$\w]/;
        const isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
        const validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
        const validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
        const whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
        const isMemberExpressionBrowser = (path) => {
          path = path.trim().replace(whitespaceRE, (s) => s.trim());
          let state = 0; /* inMemberExp */
          let stateStack = [];
          let currentOpenBracketCount = 0;
          let currentOpenParensCount = 0;
          let currentStringType = null;
          for (let i = 0; i < path.length; i++) {
            const char = path.charAt(i);
            switch (state) {
              case 0 /* inMemberExp */:
                if (char === "[") {
                  stateStack.push(state);
                  state = 1 /* inBrackets */;
                  currentOpenBracketCount++;
                } else if (char === "(") {
                  stateStack.push(state);
                  state = 2 /* inParens */;
                  currentOpenParensCount++;
                } else if (
                  !(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(
                    char
                  )
                ) {
                  return false;
                }
                break;
              case 1 /* inBrackets */:
                if (char === `'` || char === `"` || char === "`") {
                  stateStack.push(state);
                  state = 3 /* inString */;
                  currentStringType = char;
                } else if (char === `[`) {
                  currentOpenBracketCount++;
                } else if (char === `]`) {
                  if (!--currentOpenBracketCount) {
                    state = stateStack.pop();
                  }
                }
                break;
              case 2 /* inParens */:
                if (char === `'` || char === `"` || char === "`") {
                  stateStack.push(state);
                  state = 3 /* inString */;
                  currentStringType = char;
                } else if (char === `(`) {
                  currentOpenParensCount++;
                } else if (char === `)`) {
                  if (i === path.length - 1) {
                    return false;
                  }
                  if (!--currentOpenParensCount) {
                    state = stateStack.pop();
                  }
                }
                break;
              case 3 /* inString */:
                if (char === currentStringType) {
                  state = stateStack.pop();
                  currentStringType = null;
                }
                break;
            }
          }
          return !currentOpenBracketCount && !currentOpenParensCount;
        };
        const isMemberExpressionNode =
          _vue_shared__WEBPACK_IMPORTED_MODULE_0__["NOOP"];
        const isMemberExpression = isMemberExpressionBrowser;
        function advancePositionWithClone(
          pos,
          source,
          numberOfCharacters = source.length
        ) {
          return advancePositionWithMutation(
            {
              offset: pos.offset,
              line: pos.line,
              column: pos.column,
            },
            source,
            numberOfCharacters
          );
        }
        function advancePositionWithMutation(
          pos,
          source,
          numberOfCharacters = source.length
        ) {
          let linesCount = 0;
          let lastNewLinePos = -1;
          for (let i = 0; i < numberOfCharacters; i++) {
            if (source.charCodeAt(i) === 10) {
              linesCount++;
              lastNewLinePos = i;
            }
          }
          pos.offset += numberOfCharacters;
          pos.line += linesCount;
          pos.column =
            lastNewLinePos === -1
              ? pos.column + numberOfCharacters
              : numberOfCharacters - lastNewLinePos;
          return pos;
        }
        function assert(condition, msg) {
          if (!condition) {
            throw new Error(msg || `unexpected compiler condition`);
          }
        }
        function findDir(node, name, allowEmpty = false) {
          for (let i = 0; i < node.props.length; i++) {
            const p = node.props[i];
            if (
              p.type === 7 &&
              (allowEmpty || p.exp) &&
              (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
                name
              )
                ? p.name === name
                : name.test(p.name))
            ) {
              return p;
            }
          }
        }
        function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
          for (let i = 0; i < node.props.length; i++) {
            const p = node.props[i];
            if (p.type === 6) {
              if (dynamicOnly) continue;
              if (p.name === name && (p.value || allowEmpty)) {
                return p;
              }
            } else if (
              p.name === "bind" &&
              (p.exp || allowEmpty) &&
              isStaticArgOf(p.arg, name)
            ) {
              return p;
            }
          }
        }
        function isStaticArgOf(arg, name) {
          return !!(arg && isStaticExp(arg) && arg.content === name);
        }
        function hasDynamicKeyVBind(node) {
          return node.props.some(
            (p) =>
              p.type === 7 &&
              p.name === "bind" &&
              (!p.arg || // v-bind="obj"
                p.arg.type !== 4 || // v-bind:[_ctx.foo]
                !p.arg.isStatic)
            // v-bind:[foo]
          );
        }
        function isText$1(node) {
          return node.type === 5 || node.type === 2;
        }
        function isVSlot(p) {
          return p.type === 7 && p.name === "slot";
        }
        function isTemplateNode(node) {
          return node.type === 1 && node.tagType === 3;
        }
        function isSlotOutlet(node) {
          return node.type === 1 && node.tagType === 2;
        }
        const propsHelperSet = /* @__PURE__ */ new Set([
          NORMALIZE_PROPS,
          GUARD_REACTIVE_PROPS,
        ]);
        function getUnnormalizedProps(props, callPath = []) {
          if (
            props &&
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
              props
            ) &&
            props.type === 14
          ) {
            const callee = props.callee;
            if (
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
                callee
              ) &&
              propsHelperSet.has(callee)
            ) {
              return getUnnormalizedProps(
                props.arguments[0],
                callPath.concat(props)
              );
            }
          }
          return [props, callPath];
        }
        function injectProp(node, prop, context) {
          let propsWithInjection;
          let props = node.type === 13 ? node.props : node.arguments[2];
          let callPath = [];
          let parentCall;
          if (
            props &&
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
              props
            ) &&
            props.type === 14
          ) {
            const ret = getUnnormalizedProps(props);
            props = ret[0];
            callPath = ret[1];
            parentCall = callPath[callPath.length - 1];
          }
          if (
            props == null ||
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(props)
          ) {
            propsWithInjection = createObjectExpression([prop]);
          } else if (props.type === 14) {
            const first = props.arguments[0];
            if (
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
                first
              ) &&
              first.type === 15
            ) {
              if (!hasProp(prop, first)) {
                first.properties.unshift(prop);
              }
            } else {
              if (props.callee === TO_HANDLERS) {
                propsWithInjection = createCallExpression(
                  context.helper(MERGE_PROPS),
                  [createObjectExpression([prop]), props]
                );
              } else {
                props.arguments.unshift(createObjectExpression([prop]));
              }
            }
            !propsWithInjection && (propsWithInjection = props);
          } else if (props.type === 15) {
            if (!hasProp(prop, props)) {
              props.properties.unshift(prop);
            }
            propsWithInjection = props;
          } else {
            propsWithInjection = createCallExpression(
              context.helper(MERGE_PROPS),
              [createObjectExpression([prop]), props]
            );
            if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
              parentCall = callPath[callPath.length - 2];
            }
          }
          if (node.type === 13) {
            if (parentCall) {
              parentCall.arguments[0] = propsWithInjection;
            } else {
              node.props = propsWithInjection;
            }
          } else {
            if (parentCall) {
              parentCall.arguments[0] = propsWithInjection;
            } else {
              node.arguments[2] = propsWithInjection;
            }
          }
        }
        function hasProp(prop, props) {
          let result = false;
          if (prop.key.type === 4) {
            const propKeyName = prop.key.content;
            result = props.properties.some(
              (p) => p.key.type === 4 && p.key.content === propKeyName
            );
          }
          return result;
        }
        function toValidAssetId(name, type) {
          return `_${type}_${name.replace(
            /[^\w]/g,
            (searchValue, replaceValue) => {
              return searchValue === "-"
                ? "_"
                : name.charCodeAt(replaceValue).toString();
            }
          )}`;
        }
        function hasScopeRef(node, ids) {
          if (!node || Object.keys(ids).length === 0) {
            return false;
          }
          switch (node.type) {
            case 1:
              for (let i = 0; i < node.props.length; i++) {
                const p = node.props[i];
                if (
                  p.type === 7 &&
                  (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))
                ) {
                  return true;
                }
              }
              return node.children.some((c) => hasScopeRef(c, ids));
            case 11:
              if (hasScopeRef(node.source, ids)) {
                return true;
              }
              return node.children.some((c) => hasScopeRef(c, ids));
            case 9:
              return node.branches.some((b) => hasScopeRef(b, ids));
            case 10:
              if (hasScopeRef(node.condition, ids)) {
                return true;
              }
              return node.children.some((c) => hasScopeRef(c, ids));
            case 4:
              return (
                !node.isStatic &&
                isSimpleIdentifier(node.content) &&
                !!ids[node.content]
              );
            case 8:
              return node.children.some(
                (c) =>
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isObject"])(
                    c
                  ) && hasScopeRef(c, ids)
              );
            case 5:
            case 12:
              return hasScopeRef(node.content, ids);
            case 2:
            case 3:
              return false;
            default:
              if (true);
              return false;
          }
        }
        function getMemoedVNodeCall(node) {
          if (node.type === 14 && node.callee === WITH_MEMO) {
            return node.arguments[1].returns;
          } else {
            return node;
          }
        }
        const forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;

        const defaultParserOptions = {
          parseMode: "base",
          ns: 0,
          delimiters: [`{{`, `}}`],
          getNamespace: () => 0,
          isVoidTag: _vue_shared__WEBPACK_IMPORTED_MODULE_0__["NO"],
          isPreTag: _vue_shared__WEBPACK_IMPORTED_MODULE_0__["NO"],
          isCustomElement: _vue_shared__WEBPACK_IMPORTED_MODULE_0__["NO"],
          onError: defaultOnError,
          onWarn: defaultOnWarn,
          comments: !!("development" !== "production"),
          prefixIdentifiers: false,
        };
        let currentOptions = defaultParserOptions;
        let currentRoot = null;
        let currentInput = "";
        let currentOpenTag = null;
        let currentProp = null;
        let currentAttrValue = "";
        let currentAttrStartIndex = -1;
        let currentAttrEndIndex = -1;
        let inPre = 0;
        let inVPre = false;
        let currentVPreBoundary = null;
        const stack = [];
        const tokenizer = new Tokenizer(stack, {
          onerr: emitError,
          ontext(start, end) {
            onText(getSlice(start, end), start, end);
          },
          ontextentity(char, start, end) {
            onText(char, start, end);
          },
          oninterpolation(start, end) {
            if (inVPre) {
              return onText(getSlice(start, end), start, end);
            }
            let innerStart = start + tokenizer.delimiterOpen.length;
            let innerEnd = end - tokenizer.delimiterClose.length;
            while (isWhitespace(currentInput.charCodeAt(innerStart))) {
              innerStart++;
            }
            while (isWhitespace(currentInput.charCodeAt(innerEnd - 1))) {
              innerEnd--;
            }
            let exp = getSlice(innerStart, innerEnd);
            if (exp.includes("&")) {
              {
                exp = currentOptions.decodeEntities(exp, false);
              }
            }
            addNode({
              type: 5,
              content: createExp(exp, false, getLoc(innerStart, innerEnd)),
              loc: getLoc(start, end),
            });
          },
          onopentagname(start, end) {
            const name = getSlice(start, end);
            currentOpenTag = {
              type: 1,
              tag: name,
              ns: currentOptions.getNamespace(
                name,
                stack[0],
                currentOptions.ns
              ),
              tagType: 0,
              // will be refined on tag close
              props: [],
              children: [],
              loc: getLoc(start - 1, end),
              codegenNode: void 0,
            };
          },
          onopentagend(end) {
            endOpenTag(end);
          },
          onclosetag(start, end) {
            const name = getSlice(start, end);
            if (!currentOptions.isVoidTag(name)) {
              let found = false;
              for (let i = 0; i < stack.length; i++) {
                const e = stack[i];
                if (e.tag.toLowerCase() === name.toLowerCase()) {
                  found = true;
                  if (i > 0) {
                    emitError(24, stack[0].loc.start.offset);
                  }
                  for (let j = 0; j <= i; j++) {
                    const el = stack.shift();
                    onCloseTag(el, end, j < i);
                  }
                  break;
                }
              }
              if (!found) {
                emitError(23, backTrack(start, 60));
              }
            }
          },
          onselfclosingtag(end) {
            const name = currentOpenTag.tag;
            currentOpenTag.isSelfClosing = true;
            endOpenTag(end);
            if (stack[0] && stack[0].tag === name) {
              onCloseTag(stack.shift(), end);
            }
          },
          onattribname(start, end) {
            currentProp = {
              type: 6,
              name: getSlice(start, end),
              nameLoc: getLoc(start, end),
              value: void 0,
              loc: getLoc(start),
            };
          },
          ondirname(start, end) {
            const raw = getSlice(start, end);
            const name =
              raw === "." || raw === ":"
                ? "bind"
                : raw === "@"
                ? "on"
                : raw === "#"
                ? "slot"
                : raw.slice(2);
            if (!inVPre && name === "") {
              emitError(26, start);
            }
            if (inVPre || name === "") {
              currentProp = {
                type: 6,
                name: raw,
                nameLoc: getLoc(start, end),
                value: void 0,
                loc: getLoc(start),
              };
            } else {
              currentProp = {
                type: 7,
                name,
                rawName: raw,
                exp: void 0,
                arg: void 0,
                modifiers: raw === "." ? ["prop"] : [],
                loc: getLoc(start),
              };
              if (name === "pre") {
                inVPre = tokenizer.inVPre = true;
                currentVPreBoundary = currentOpenTag;
                const props = currentOpenTag.props;
                for (let i = 0; i < props.length; i++) {
                  if (props[i].type === 7) {
                    props[i] = dirToAttr(props[i]);
                  }
                }
              }
            }
          },
          ondirarg(start, end) {
            if (start === end) return;
            const arg = getSlice(start, end);
            if (inVPre) {
              currentProp.name += arg;
              setLocEnd(currentProp.nameLoc, end);
            } else {
              const isStatic = arg[0] !== `[`;
              currentProp.arg = createExp(
                isStatic ? arg : arg.slice(1, -1),
                isStatic,
                getLoc(start, end),
                isStatic ? 3 : 0
              );
            }
          },
          ondirmodifier(start, end) {
            const mod = getSlice(start, end);
            if (inVPre) {
              currentProp.name += "." + mod;
              setLocEnd(currentProp.nameLoc, end);
            } else if (currentProp.name === "slot") {
              const arg = currentProp.arg;
              if (arg) {
                arg.content += "." + mod;
                setLocEnd(arg.loc, end);
              }
            } else {
              currentProp.modifiers.push(mod);
            }
          },
          onattribdata(start, end) {
            currentAttrValue += getSlice(start, end);
            if (currentAttrStartIndex < 0) currentAttrStartIndex = start;
            currentAttrEndIndex = end;
          },
          onattribentity(char, start, end) {
            currentAttrValue += char;
            if (currentAttrStartIndex < 0) currentAttrStartIndex = start;
            currentAttrEndIndex = end;
          },
          onattribnameend(end) {
            const start = currentProp.loc.start.offset;
            const name = getSlice(start, end);
            if (currentProp.type === 7) {
              currentProp.rawName = name;
            }
            if (
              currentOpenTag.props.some(
                (p) => (p.type === 7 ? p.rawName : p.name) === name
              )
            ) {
              emitError(2, start);
            }
          },
          onattribend(quote, end) {
            if (currentOpenTag && currentProp) {
              setLocEnd(currentProp.loc, end);
              if (quote !== 0) {
                if (currentAttrValue.includes("&")) {
                  currentAttrValue = currentOptions.decodeEntities(
                    currentAttrValue,
                    true
                  );
                }
                if (currentProp.type === 6) {
                  if (currentProp.name === "class") {
                    currentAttrValue = condense(currentAttrValue).trim();
                  }
                  if (quote === 1 && !currentAttrValue) {
                    emitError(13, end);
                  }
                  currentProp.value = {
                    type: 2,
                    content: currentAttrValue,
                    loc:
                      quote === 1
                        ? getLoc(currentAttrStartIndex, currentAttrEndIndex)
                        : getLoc(
                            currentAttrStartIndex - 1,
                            currentAttrEndIndex + 1
                          ),
                  };
                  if (
                    tokenizer.inSFCRoot &&
                    currentOpenTag.tag === "template" &&
                    currentProp.name === "lang" &&
                    currentAttrValue &&
                    currentAttrValue !== "html"
                  ) {
                    tokenizer.enterRCDATA(toCharCodes(`</template`), 0);
                  }
                } else {
                  let expParseMode = 0; /* Normal */
                  currentProp.exp = createExp(
                    currentAttrValue,
                    false,
                    getLoc(currentAttrStartIndex, currentAttrEndIndex),
                    0,
                    expParseMode
                  );
                  if (currentProp.name === "for") {
                    currentProp.forParseResult = parseForExpression(
                      currentProp.exp
                    );
                  }
                  let syncIndex = -1;
                  if (
                    currentProp.name === "bind" &&
                    (syncIndex = currentProp.modifiers.indexOf("sync")) > -1 &&
                    checkCompatEnabled(
                      "COMPILER_V_BIND_SYNC",
                      currentOptions,
                      currentProp.loc,
                      currentProp.rawName
                    )
                  ) {
                    currentProp.name = "model";
                    currentProp.modifiers.splice(syncIndex, 1);
                  }
                }
              }
              if (currentProp.type !== 7 || currentProp.name !== "pre") {
                currentOpenTag.props.push(currentProp);
              }
            }
            currentAttrValue = "";
            currentAttrStartIndex = currentAttrEndIndex = -1;
          },
          oncomment(start, end) {
            if (currentOptions.comments) {
              addNode({
                type: 3,
                content: getSlice(start, end),
                loc: getLoc(start - 4, end + 3),
              });
            }
          },
          onend() {
            const end = currentInput.length;
            if (true && tokenizer.state !== 1) {
              switch (tokenizer.state) {
                case 5:
                case 8:
                  emitError(5, end);
                  break;
                case 3:
                case 4:
                  emitError(25, tokenizer.sectionStart);
                  break;
                case 28:
                  if (tokenizer.currentSequence === Sequences.CdataEnd) {
                    emitError(6, end);
                  } else {
                    emitError(7, end);
                  }
                  break;
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                  emitError(9, end);
                  break;
              }
            }
            for (let index = 0; index < stack.length; index++) {
              onCloseTag(stack[index], end - 1);
              emitError(24, stack[index].loc.start.offset);
            }
          },
          oncdata(start, end) {
            if (stack[0].ns !== 0) {
              onText(getSlice(start, end), start, end);
            } else {
              emitError(1, start - 9);
            }
          },
          onprocessinginstruction(start) {
            if ((stack[0] ? stack[0].ns : currentOptions.ns) === 0) {
              emitError(21, start - 1);
            }
          },
        });
        const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
        const stripParensRE = /^\(|\)$/g;
        function parseForExpression(input) {
          const loc = input.loc;
          const exp = input.content;
          const inMatch = exp.match(forAliasRE);
          if (!inMatch) return;
          const [, LHS, RHS] = inMatch;
          const createAliasExpression = (content, offset, asParam = false) => {
            const start = loc.start.offset + offset;
            const end = start + content.length;
            return createExp(
              content,
              false,
              getLoc(start, end),
              0,
              asParam ? 1 /* Params */ : 0 /* Normal */
            );
          };
          const result = {
            source: createAliasExpression(
              RHS.trim(),
              exp.indexOf(RHS, LHS.length)
            ),
            value: void 0,
            key: void 0,
            index: void 0,
            finalized: false,
          };
          let valueContent = LHS.trim().replace(stripParensRE, "").trim();
          const trimmedOffset = LHS.indexOf(valueContent);
          const iteratorMatch = valueContent.match(forIteratorRE);
          if (iteratorMatch) {
            valueContent = valueContent.replace(forIteratorRE, "").trim();
            const keyContent = iteratorMatch[1].trim();
            let keyOffset;
            if (keyContent) {
              keyOffset = exp.indexOf(
                keyContent,
                trimmedOffset + valueContent.length
              );
              result.key = createAliasExpression(keyContent, keyOffset, true);
            }
            if (iteratorMatch[2]) {
              const indexContent = iteratorMatch[2].trim();
              if (indexContent) {
                result.index = createAliasExpression(
                  indexContent,
                  exp.indexOf(
                    indexContent,
                    result.key
                      ? keyOffset + keyContent.length
                      : trimmedOffset + valueContent.length
                  ),
                  true
                );
              }
            }
          }
          if (valueContent) {
            result.value = createAliasExpression(
              valueContent,
              trimmedOffset,
              true
            );
          }
          return result;
        }
        function getSlice(start, end) {
          return currentInput.slice(start, end);
        }
        function endOpenTag(end) {
          if (tokenizer.inSFCRoot) {
            currentOpenTag.innerLoc = getLoc(end + 1, end + 1);
          }
          addNode(currentOpenTag);
          const { tag, ns } = currentOpenTag;
          if (ns === 0 && currentOptions.isPreTag(tag)) {
            inPre++;
          }
          if (currentOptions.isVoidTag(tag)) {
            onCloseTag(currentOpenTag, end);
          } else {
            stack.unshift(currentOpenTag);
            if (ns === 1 || ns === 2) {
              tokenizer.inXML = true;
            }
          }
          currentOpenTag = null;
        }
        function onText(content, start, end) {
          {
            const tag = stack[0] && stack[0].tag;
            if (tag !== "script" && tag !== "style" && content.includes("&")) {
              content = currentOptions.decodeEntities(content, false);
            }
          }
          const parent = stack[0] || currentRoot;
          const lastNode = parent.children[parent.children.length - 1];
          if (lastNode && lastNode.type === 2) {
            lastNode.content += content;
            setLocEnd(lastNode.loc, end);
          } else {
            parent.children.push({
              type: 2,
              content,
              loc: getLoc(start, end),
            });
          }
        }
        function onCloseTag(el, end, isImplied = false) {
          if (isImplied) {
            setLocEnd(el.loc, backTrack(end, 60));
          } else {
            setLocEnd(el.loc, lookAhead(end, 62) + 1);
          }
          if (tokenizer.inSFCRoot) {
            if (el.children.length) {
              el.innerLoc.end = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_0__["extend"]
              )({}, el.children[el.children.length - 1].loc.end);
            } else {
              el.innerLoc.end = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_0__["extend"]
              )({}, el.innerLoc.start);
            }
            el.innerLoc.source = getSlice(
              el.innerLoc.start.offset,
              el.innerLoc.end.offset
            );
          }
          const { tag, ns } = el;
          if (!inVPre) {
            if (tag === "slot") {
              el.tagType = 2;
            } else if (isFragmentTemplate(el)) {
              el.tagType = 3;
            } else if (isComponent(el)) {
              el.tagType = 1;
            }
          }
          if (!tokenizer.inRCDATA) {
            el.children = condenseWhitespace(el.children, el.tag);
          }
          if (ns === 0 && currentOptions.isPreTag(tag)) {
            inPre--;
          }
          if (currentVPreBoundary === el) {
            inVPre = tokenizer.inVPre = false;
            currentVPreBoundary = null;
          }
          if (
            tokenizer.inXML &&
            (stack[0] ? stack[0].ns : currentOptions.ns) === 0
          ) {
            tokenizer.inXML = false;
          }
          {
            const props = el.props;
            if (
              true &&
              isCompatEnabled("COMPILER_V_IF_V_FOR_PRECEDENCE", currentOptions)
            ) {
              let hasIf = false;
              let hasFor = false;
              for (let i = 0; i < props.length; i++) {
                const p = props[i];
                if (p.type === 7) {
                  if (p.name === "if") {
                    hasIf = true;
                  } else if (p.name === "for") {
                    hasFor = true;
                  }
                }
                if (hasIf && hasFor) {
                  warnDeprecation(
                    "COMPILER_V_IF_V_FOR_PRECEDENCE",
                    currentOptions,
                    el.loc
                  );
                  break;
                }
              }
            }
            if (
              !tokenizer.inSFCRoot &&
              isCompatEnabled("COMPILER_NATIVE_TEMPLATE", currentOptions) &&
              el.tag === "template" &&
              !isFragmentTemplate(el)
            ) {
              true &&
                warnDeprecation(
                  "COMPILER_NATIVE_TEMPLATE",
                  currentOptions,
                  el.loc
                );
              const parent = stack[0] || currentRoot;
              const index = parent.children.indexOf(el);
              parent.children.splice(index, 1, ...el.children);
            }
            const inlineTemplateProp = props.find(
              (p) => p.type === 6 && p.name === "inline-template"
            );
            if (
              inlineTemplateProp &&
              checkCompatEnabled(
                "COMPILER_INLINE_TEMPLATE",
                currentOptions,
                inlineTemplateProp.loc
              ) &&
              el.children.length
            ) {
              inlineTemplateProp.value = {
                type: 2,
                content: getSlice(
                  el.children[0].loc.start.offset,
                  el.children[el.children.length - 1].loc.end.offset
                ),
                loc: inlineTemplateProp.loc,
              };
            }
          }
        }
        function lookAhead(index, c) {
          let i = index;
          while (
            currentInput.charCodeAt(i) !== c &&
            i < currentInput.length - 1
          )
            i++;
          return i;
        }
        function backTrack(index, c) {
          let i = index;
          while (currentInput.charCodeAt(i) !== c && i >= 0) i--;
          return i;
        }
        const specialTemplateDir = /* @__PURE__ */ new Set([
          "if",
          "else",
          "else-if",
          "for",
          "slot",
        ]);
        function isFragmentTemplate({ tag, props }) {
          if (tag === "template") {
            for (let i = 0; i < props.length; i++) {
              if (
                props[i].type === 7 &&
                specialTemplateDir.has(props[i].name)
              ) {
                return true;
              }
            }
          }
          return false;
        }
        function isComponent({ tag, props }) {
          if (currentOptions.isCustomElement(tag)) {
            return false;
          }
          if (
            tag === "component" ||
            isUpperCase(tag.charCodeAt(0)) ||
            isCoreComponent(tag) ||
            (currentOptions.isBuiltInComponent &&
              currentOptions.isBuiltInComponent(tag)) ||
            (currentOptions.isNativeTag && !currentOptions.isNativeTag(tag))
          ) {
            return true;
          }
          for (let i = 0; i < props.length; i++) {
            const p = props[i];
            if (p.type === 6) {
              if (p.name === "is" && p.value) {
                if (p.value.content.startsWith("vue:")) {
                  return true;
                } else if (
                  checkCompatEnabled(
                    "COMPILER_IS_ON_ELEMENT",
                    currentOptions,
                    p.loc
                  )
                ) {
                  return true;
                }
              }
            } else if (
              // :is on plain element - only treat as component in compat mode
              p.name === "bind" &&
              isStaticArgOf(p.arg, "is") &&
              checkCompatEnabled(
                "COMPILER_IS_ON_ELEMENT",
                currentOptions,
                p.loc
              )
            ) {
              return true;
            }
          }
          return false;
        }
        function isUpperCase(c) {
          return c > 64 && c < 91;
        }
        const windowsNewlineRE = /\r\n/g;
        function condenseWhitespace(nodes, tag) {
          const shouldCondense = currentOptions.whitespace !== "preserve";
          let removedWhitespace = false;
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (node.type === 2) {
              if (!inPre) {
                if (isAllWhitespace(node.content)) {
                  const prev = nodes[i - 1] && nodes[i - 1].type;
                  const next = nodes[i + 1] && nodes[i + 1].type;
                  if (
                    !prev ||
                    !next ||
                    (shouldCondense &&
                      ((prev === 3 && (next === 3 || next === 1)) ||
                        (prev === 1 &&
                          (next === 3 ||
                            (next === 1 && hasNewlineChar(node.content))))))
                  ) {
                    removedWhitespace = true;
                    nodes[i] = null;
                  } else {
                    node.content = " ";
                  }
                } else if (shouldCondense) {
                  node.content = condense(node.content);
                }
              } else {
                node.content = node.content.replace(windowsNewlineRE, "\n");
              }
            }
          }
          if (inPre && tag && currentOptions.isPreTag(tag)) {
            const first = nodes[0];
            if (first && first.type === 2) {
              first.content = first.content.replace(/^\r?\n/, "");
            }
          }
          return removedWhitespace ? nodes.filter(Boolean) : nodes;
        }
        function isAllWhitespace(str) {
          for (let i = 0; i < str.length; i++) {
            if (!isWhitespace(str.charCodeAt(i))) {
              return false;
            }
          }
          return true;
        }
        function hasNewlineChar(str) {
          for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c === 10 || c === 13) {
              return true;
            }
          }
          return false;
        }
        function condense(str) {
          let ret = "";
          let prevCharIsWhitespace = false;
          for (let i = 0; i < str.length; i++) {
            if (isWhitespace(str.charCodeAt(i))) {
              if (!prevCharIsWhitespace) {
                ret += " ";
                prevCharIsWhitespace = true;
              }
            } else {
              ret += str[i];
              prevCharIsWhitespace = false;
            }
          }
          return ret;
        }
        function addNode(node) {
          (stack[0] || currentRoot).children.push(node);
        }
        function getLoc(start, end) {
          return {
            start: tokenizer.getPos(start),
            // @ts-expect-error allow late attachment
            end: end == null ? end : tokenizer.getPos(end),
            // @ts-expect-error allow late attachment
            source: end == null ? end : getSlice(start, end),
          };
        }
        function setLocEnd(loc, end) {
          loc.end = tokenizer.getPos(end);
          loc.source = getSlice(loc.start.offset, end);
        }
        function dirToAttr(dir) {
          const attr = {
            type: 6,
            name: dir.rawName,
            nameLoc: getLoc(
              dir.loc.start.offset,
              dir.loc.start.offset + dir.rawName.length
            ),
            value: void 0,
            loc: dir.loc,
          };
          if (dir.exp) {
            const loc = dir.exp.loc;
            if (loc.end.offset < dir.loc.end.offset) {
              loc.start.offset--;
              loc.start.column--;
              loc.end.offset++;
              loc.end.column++;
            }
            attr.value = {
              type: 2,
              content: dir.exp.content,
              loc,
            };
          }
          return attr;
        }
        function createExp(
          content,
          isStatic = false,
          loc,
          constType = 0,
          parseMode = 0 /* Normal */
        ) {
          const exp = createSimpleExpression(content, isStatic, loc, constType);
          return exp;
        }
        function emitError(code, index, message) {
          currentOptions.onError(
            createCompilerError(code, getLoc(index, index), void 0, message)
          );
        }
        function reset() {
          tokenizer.reset();
          currentOpenTag = null;
          currentProp = null;
          currentAttrValue = "";
          currentAttrStartIndex = -1;
          currentAttrEndIndex = -1;
          stack.length = 0;
        }
        function baseParse(input, options) {
          reset();
          currentInput = input;
          currentOptions = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_0__["extend"]
          )({}, defaultParserOptions);
          if (options) {
            let key;
            for (key in options) {
              if (options[key] != null) {
                currentOptions[key] = options[key];
              }
            }
          }
          if (true) {
            if (!currentOptions.decodeEntities) {
              throw new Error(
                `[@vue/compiler-core] decodeEntities option is required in browser builds.`
              );
            }
          }
          tokenizer.mode =
            currentOptions.parseMode === "html"
              ? 1
              : currentOptions.parseMode === "sfc"
              ? 2
              : 0;
          tokenizer.inXML = currentOptions.ns === 1 || currentOptions.ns === 2;
          const delimiters = options && options.delimiters;
          if (delimiters) {
            tokenizer.delimiterOpen = toCharCodes(delimiters[0]);
            tokenizer.delimiterClose = toCharCodes(delimiters[1]);
          }
          const root = (currentRoot = createRoot([], input));
          tokenizer.parse(currentInput);
          root.loc = getLoc(0, input.length);
          root.children = condenseWhitespace(root.children);
          currentRoot = null;
          return root;
        }

        function hoistStatic(root, context) {
          walk(
            root,
            context,
            // Root node is unfortunately non-hoistable due to potential parent
            // fallthrough attributes.
            isSingleElementRoot(root, root.children[0])
          );
        }
        function isSingleElementRoot(root, child) {
          const { children } = root;
          return (
            children.length === 1 && child.type === 1 && !isSlotOutlet(child)
          );
        }
        function walk(node, context, doNotHoistNode = false) {
          const { children } = node;
          const originalCount = children.length;
          let hoistedCount = 0;
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (child.type === 1 && child.tagType === 0) {
              const constantType = doNotHoistNode
                ? 0
                : getConstantType(child, context);
              if (constantType > 0) {
                if (constantType >= 2) {
                  child.codegenNode.patchFlag =
                    -1 + (true ? ` /* HOISTED */` : undefined);
                  child.codegenNode = context.hoist(child.codegenNode);
                  hoistedCount++;
                  continue;
                }
              } else {
                const codegenNode = child.codegenNode;
                if (codegenNode.type === 13) {
                  const flag = getPatchFlag(codegenNode);
                  if (
                    (!flag || flag === 512 || flag === 1) &&
                    getGeneratedPropsConstantType(child, context) >= 2
                  ) {
                    const props = getNodeProps(child);
                    if (props) {
                      codegenNode.props = context.hoist(props);
                    }
                  }
                  if (codegenNode.dynamicProps) {
                    codegenNode.dynamicProps = context.hoist(
                      codegenNode.dynamicProps
                    );
                  }
                }
              }
            }
            if (child.type === 1) {
              const isComponent = child.tagType === 1;
              if (isComponent) {
                context.scopes.vSlot++;
              }
              walk(child, context);
              if (isComponent) {
                context.scopes.vSlot--;
              }
            } else if (child.type === 11) {
              walk(child, context, child.children.length === 1);
            } else if (child.type === 9) {
              for (let i2 = 0; i2 < child.branches.length; i2++) {
                walk(
                  child.branches[i2],
                  context,
                  child.branches[i2].children.length === 1
                );
              }
            }
          }
          if (hoistedCount && context.transformHoist) {
            context.transformHoist(children, context, node);
          }
          if (
            hoistedCount &&
            hoistedCount === originalCount &&
            node.type === 1 &&
            node.tagType === 0 &&
            node.codegenNode &&
            node.codegenNode.type === 13 &&
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(
              node.codegenNode.children
            )
          ) {
            const hoisted = context.hoist(
              createArrayExpression(node.codegenNode.children)
            );
            if (context.hmr) {
              hoisted.content = `[...${hoisted.content}]`;
            }
            node.codegenNode.children = hoisted;
          }
        }
        function getConstantType(node, context) {
          const { constantCache } = context;
          switch (node.type) {
            case 1:
              if (node.tagType !== 0) {
                return 0;
              }
              const cached = constantCache.get(node);
              if (cached !== void 0) {
                return cached;
              }
              const codegenNode = node.codegenNode;
              if (codegenNode.type !== 13) {
                return 0;
              }
              if (
                codegenNode.isBlock &&
                node.tag !== "svg" &&
                node.tag !== "foreignObject"
              ) {
                return 0;
              }
              const flag = getPatchFlag(codegenNode);
              if (!flag) {
                let returnType2 = 3;
                const generatedPropsType = getGeneratedPropsConstantType(
                  node,
                  context
                );
                if (generatedPropsType === 0) {
                  constantCache.set(node, 0);
                  return 0;
                }
                if (generatedPropsType < returnType2) {
                  returnType2 = generatedPropsType;
                }
                for (let i = 0; i < node.children.length; i++) {
                  const childType = getConstantType(node.children[i], context);
                  if (childType === 0) {
                    constantCache.set(node, 0);
                    return 0;
                  }
                  if (childType < returnType2) {
                    returnType2 = childType;
                  }
                }
                if (returnType2 > 1) {
                  for (let i = 0; i < node.props.length; i++) {
                    const p = node.props[i];
                    if (p.type === 7 && p.name === "bind" && p.exp) {
                      const expType = getConstantType(p.exp, context);
                      if (expType === 0) {
                        constantCache.set(node, 0);
                        return 0;
                      }
                      if (expType < returnType2) {
                        returnType2 = expType;
                      }
                    }
                  }
                }
                if (codegenNode.isBlock) {
                  for (let i = 0; i < node.props.length; i++) {
                    const p = node.props[i];
                    if (p.type === 7) {
                      constantCache.set(node, 0);
                      return 0;
                    }
                  }
                  context.removeHelper(OPEN_BLOCK);
                  context.removeHelper(
                    getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)
                  );
                  codegenNode.isBlock = false;
                  context.helper(
                    getVNodeHelper(context.inSSR, codegenNode.isComponent)
                  );
                }
                constantCache.set(node, returnType2);
                return returnType2;
              } else {
                constantCache.set(node, 0);
                return 0;
              }
            case 2:
            case 3:
              return 3;
            case 9:
            case 11:
            case 10:
              return 0;
            case 5:
            case 12:
              return getConstantType(node.content, context);
            case 4:
              return node.constType;
            case 8:
              let returnType = 3;
              for (let i = 0; i < node.children.length; i++) {
                const child = node.children[i];
                if (
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
                    child
                  ) ||
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isSymbol"])(
                    child
                  )
                ) {
                  continue;
                }
                const childType = getConstantType(child, context);
                if (childType === 0) {
                  return 0;
                } else if (childType < returnType) {
                  returnType = childType;
                }
              }
              return returnType;
            default:
              if (true);
              return 0;
          }
        }
        const allowHoistedHelperSet = /* @__PURE__ */ new Set([
          NORMALIZE_CLASS,
          NORMALIZE_STYLE,
          NORMALIZE_PROPS,
          GUARD_REACTIVE_PROPS,
        ]);
        function getConstantTypeOfHelperCall(value, context) {
          if (
            value.type === 14 &&
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
              value.callee
            ) &&
            allowHoistedHelperSet.has(value.callee)
          ) {
            const arg = value.arguments[0];
            if (arg.type === 4) {
              return getConstantType(arg, context);
            } else if (arg.type === 14) {
              return getConstantTypeOfHelperCall(arg, context);
            }
          }
          return 0;
        }
        function getGeneratedPropsConstantType(node, context) {
          let returnType = 3;
          const props = getNodeProps(node);
          if (props && props.type === 15) {
            const { properties } = props;
            for (let i = 0; i < properties.length; i++) {
              const { key, value } = properties[i];
              const keyType = getConstantType(key, context);
              if (keyType === 0) {
                return keyType;
              }
              if (keyType < returnType) {
                returnType = keyType;
              }
              let valueType;
              if (value.type === 4) {
                valueType = getConstantType(value, context);
              } else if (value.type === 14) {
                valueType = getConstantTypeOfHelperCall(value, context);
              } else {
                valueType = 0;
              }
              if (valueType === 0) {
                return valueType;
              }
              if (valueType < returnType) {
                returnType = valueType;
              }
            }
          }
          return returnType;
        }
        function getNodeProps(node) {
          const codegenNode = node.codegenNode;
          if (codegenNode.type === 13) {
            return codegenNode.props;
          }
        }
        function getPatchFlag(node) {
          const flag = node.patchFlag;
          return flag ? parseInt(flag, 10) : void 0;
        }

        function createTransformContext(
          root,
          {
            filename = "",
            prefixIdentifiers = false,
            hoistStatic: hoistStatic2 = false,
            hmr = false,
            cacheHandlers = false,
            nodeTransforms = [],
            directiveTransforms = {},
            transformHoist = null,
            isBuiltInComponent = _vue_shared__WEBPACK_IMPORTED_MODULE_0__[
              "NOOP"
            ],
            isCustomElement = _vue_shared__WEBPACK_IMPORTED_MODULE_0__["NOOP"],
            expressionPlugins = [],
            scopeId = null,
            slotted = true,
            ssr = false,
            inSSR = false,
            ssrCssVars = ``,
            bindingMetadata = _vue_shared__WEBPACK_IMPORTED_MODULE_0__[
              "EMPTY_OBJ"
            ],
            inline = false,
            isTS = false,
            onError = defaultOnError,
            onWarn = defaultOnWarn,
            compatConfig,
          }
        ) {
          const nameMatch = filename
            .replace(/\?.*$/, "")
            .match(/([^/\\]+)\.\w+$/);
          const context = {
            // options
            filename,
            selfName:
              nameMatch &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["capitalize"])(
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["camelize"])(
                  nameMatch[1]
                )
              ),
            prefixIdentifiers,
            hoistStatic: hoistStatic2,
            hmr,
            cacheHandlers,
            nodeTransforms,
            directiveTransforms,
            transformHoist,
            isBuiltInComponent,
            isCustomElement,
            expressionPlugins,
            scopeId,
            slotted,
            ssr,
            inSSR,
            ssrCssVars,
            bindingMetadata,
            inline,
            isTS,
            onError,
            onWarn,
            compatConfig,
            // state
            root,
            helpers: /* @__PURE__ */ new Map(),
            components: /* @__PURE__ */ new Set(),
            directives: /* @__PURE__ */ new Set(),
            hoists: [],
            imports: [],
            constantCache: /* @__PURE__ */ new WeakMap(),
            temps: 0,
            cached: 0,
            identifiers: /* @__PURE__ */ Object.create(null),
            scopes: {
              vFor: 0,
              vSlot: 0,
              vPre: 0,
              vOnce: 0,
            },
            parent: null,
            grandParent: null,
            currentNode: root,
            childIndex: 0,
            inVOnce: false,
            // methods
            helper(name) {
              const count = context.helpers.get(name) || 0;
              context.helpers.set(name, count + 1);
              return name;
            },
            removeHelper(name) {
              const count = context.helpers.get(name);
              if (count) {
                const currentCount = count - 1;
                if (!currentCount) {
                  context.helpers.delete(name);
                } else {
                  context.helpers.set(name, currentCount);
                }
              }
            },
            helperString(name) {
              return `_${helperNameMap[context.helper(name)]}`;
            },
            replaceNode(node) {
              if (true) {
                if (!context.currentNode) {
                  throw new Error(`Node being replaced is already removed.`);
                }
                if (!context.parent) {
                  throw new Error(`Cannot replace root node.`);
                }
              }
              context.parent.children[context.childIndex] =
                context.currentNode = node;
            },
            removeNode(node) {
              if (true && !context.parent) {
                throw new Error(`Cannot remove root node.`);
              }
              const list = context.parent.children;
              const removalIndex = node
                ? list.indexOf(node)
                : context.currentNode
                ? context.childIndex
                : -1;
              if (true && removalIndex < 0) {
                throw new Error(
                  `node being removed is not a child of current parent`
                );
              }
              if (!node || node === context.currentNode) {
                context.currentNode = null;
                context.onNodeRemoved();
              } else {
                if (context.childIndex > removalIndex) {
                  context.childIndex--;
                  context.onNodeRemoved();
                }
              }
              context.parent.children.splice(removalIndex, 1);
            },
            onNodeRemoved: _vue_shared__WEBPACK_IMPORTED_MODULE_0__["NOOP"],
            addIdentifiers(exp) {},
            removeIdentifiers(exp) {},
            hoist(exp) {
              if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
                  exp
                )
              )
                exp = createSimpleExpression(exp);
              context.hoists.push(exp);
              const identifier = createSimpleExpression(
                `_hoisted_${context.hoists.length}`,
                false,
                exp.loc,
                2
              );
              identifier.hoisted = exp;
              return identifier;
            },
            cache(exp, isVNode = false) {
              return createCacheExpression(context.cached++, exp, isVNode);
            },
          };
          {
            context.filters = /* @__PURE__ */ new Set();
          }
          return context;
        }
        function transform(root, options) {
          const context = createTransformContext(root, options);
          traverseNode(root, context);
          if (options.hoistStatic) {
            hoistStatic(root, context);
          }
          if (!options.ssr) {
            createRootCodegen(root, context);
          }
          root.helpers = /* @__PURE__ */ new Set([...context.helpers.keys()]);
          root.components = [...context.components];
          root.directives = [...context.directives];
          root.imports = context.imports;
          root.hoists = context.hoists;
          root.temps = context.temps;
          root.cached = context.cached;
          root.transformed = true;
          {
            root.filters = [...context.filters];
          }
        }
        function createRootCodegen(root, context) {
          const { helper } = context;
          const { children } = root;
          if (children.length === 1) {
            const child = children[0];
            if (isSingleElementRoot(root, child) && child.codegenNode) {
              const codegenNode = child.codegenNode;
              if (codegenNode.type === 13) {
                convertToBlock(codegenNode, context);
              }
              root.codegenNode = codegenNode;
            } else {
              root.codegenNode = child;
            }
          } else if (children.length > 1) {
            let patchFlag = 64;
            let patchFlagText =
              _vue_shared__WEBPACK_IMPORTED_MODULE_0__["PatchFlagNames"][64];
            if (true && children.filter((c) => c.type !== 3).length === 1) {
              patchFlag |= 2048;
              patchFlagText += `, ${_vue_shared__WEBPACK_IMPORTED_MODULE_0__["PatchFlagNames"][2048]}`;
            }
            root.codegenNode = createVNodeCall(
              context,
              helper(FRAGMENT),
              void 0,
              root.children,
              patchFlag + (true ? ` /* ${patchFlagText} */` : undefined),
              void 0,
              void 0,
              true,
              void 0,
              false
            );
          } else;
        }
        function traverseChildren(parent, context) {
          let i = 0;
          const nodeRemoved = () => {
            i--;
          };
          for (; i < parent.children.length; i++) {
            const child = parent.children[i];
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
                child
              )
            )
              continue;
            context.grandParent = context.parent;
            context.parent = parent;
            context.childIndex = i;
            context.onNodeRemoved = nodeRemoved;
            traverseNode(child, context);
          }
        }
        function traverseNode(node, context) {
          context.currentNode = node;
          const { nodeTransforms } = context;
          const exitFns = [];
          for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
            const onExit = nodeTransforms[i2](node, context);
            if (onExit) {
              if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(
                  onExit
                )
              ) {
                exitFns.push(...onExit);
              } else {
                exitFns.push(onExit);
              }
            }
            if (!context.currentNode) {
              return;
            } else {
              node = context.currentNode;
            }
          }
          switch (node.type) {
            case 3:
              if (!context.ssr) {
                context.helper(CREATE_COMMENT);
              }
              break;
            case 5:
              if (!context.ssr) {
                context.helper(TO_DISPLAY_STRING);
              }
              break;
            case 9:
              for (let i2 = 0; i2 < node.branches.length; i2++) {
                traverseNode(node.branches[i2], context);
              }
              break;
            case 10:
            case 11:
            case 1:
            case 0:
              traverseChildren(node, context);
              break;
          }
          context.currentNode = node;
          let i = exitFns.length;
          while (i--) {
            exitFns[i]();
          }
        }
        function createStructuralDirectiveTransform(name, fn) {
          const matches = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"]
          )(name)
            ? (n) => n === name
            : (n) => name.test(n);
          return (node, context) => {
            if (node.type === 1) {
              const { props } = node;
              if (node.tagType === 3 && props.some(isVSlot)) {
                return;
              }
              const exitFns = [];
              for (let i = 0; i < props.length; i++) {
                const prop = props[i];
                if (prop.type === 7 && matches(prop.name)) {
                  props.splice(i, 1);
                  i--;
                  const onExit = fn(node, prop, context);
                  if (onExit) exitFns.push(onExit);
                }
              }
              return exitFns;
            }
          };
        }

        const PURE_ANNOTATION = `/*#__PURE__*/`;
        const aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
        function createCodegenContext(
          ast,
          {
            mode = "function",
            prefixIdentifiers = mode === "module",
            sourceMap = false,
            filename = `template.vue.html`,
            scopeId = null,
            optimizeImports = false,
            runtimeGlobalName = `Vue`,
            runtimeModuleName = `vue`,
            ssrRuntimeModuleName = "vue/server-renderer",
            ssr = false,
            isTS = false,
            inSSR = false,
          }
        ) {
          const context = {
            mode,
            prefixIdentifiers,
            sourceMap,
            filename,
            scopeId,
            optimizeImports,
            runtimeGlobalName,
            runtimeModuleName,
            ssrRuntimeModuleName,
            ssr,
            isTS,
            inSSR,
            source: ast.source,
            code: ``,
            column: 1,
            line: 1,
            offset: 0,
            indentLevel: 0,
            pure: false,
            map: void 0,
            helper(key) {
              return `_${helperNameMap[key]}`;
            },
            push(code, newlineIndex = -2 /* None */, node) {
              context.code += code;
            },
            indent() {
              newline(++context.indentLevel);
            },
            deindent(withoutNewLine = false) {
              if (withoutNewLine) {
                --context.indentLevel;
              } else {
                newline(--context.indentLevel);
              }
            },
            newline() {
              newline(context.indentLevel);
            },
          };
          function newline(n) {
            context.push("\n" + `  `.repeat(n), 0 /* Start */);
          }
          return context;
        }
        function generate(ast, options = {}) {
          const context = createCodegenContext(ast, options);
          if (options.onContextCreated) options.onContextCreated(context);
          const {
            mode,
            push,
            prefixIdentifiers,
            indent,
            deindent,
            newline,
            scopeId,
            ssr,
          } = context;
          const helpers = Array.from(ast.helpers);
          const hasHelpers = helpers.length > 0;
          const useWithBlock = !prefixIdentifiers && mode !== "module";
          const preambleContext = context;
          {
            genFunctionPreamble(ast, preambleContext);
          }
          const functionName = ssr ? `ssrRender` : `render`;
          const args = ssr
            ? ["_ctx", "_push", "_parent", "_attrs"]
            : ["_ctx", "_cache"];
          const signature = args.join(", ");
          {
            push(`function ${functionName}(${signature}) {`);
          }
          indent();
          if (useWithBlock) {
            push(`with (_ctx) {`);
            indent();
            if (hasHelpers) {
              push(
                `const { ${helpers.map(aliasHelper).join(", ")} } = _Vue
`,
                -1 /* End */
              );
              newline();
            }
          }
          if (ast.components.length) {
            genAssets(ast.components, "component", context);
            if (ast.directives.length || ast.temps > 0) {
              newline();
            }
          }
          if (ast.directives.length) {
            genAssets(ast.directives, "directive", context);
            if (ast.temps > 0) {
              newline();
            }
          }
          if (ast.filters && ast.filters.length) {
            newline();
            genAssets(ast.filters, "filter", context);
            newline();
          }
          if (ast.temps > 0) {
            push(`let `);
            for (let i = 0; i < ast.temps; i++) {
              push(`${i > 0 ? `, ` : ``}_temp${i}`);
            }
          }
          if (ast.components.length || ast.directives.length || ast.temps) {
            push(
              `
`,
              0 /* Start */
            );
            newline();
          }
          if (!ssr) {
            push(`return `);
          }
          if (ast.codegenNode) {
            genNode(ast.codegenNode, context);
          } else {
            push(`null`);
          }
          if (useWithBlock) {
            deindent();
            push(`}`);
          }
          deindent();
          push(`}`);
          return {
            ast,
            code: context.code,
            preamble: ``,
            map: context.map ? context.map.toJSON() : void 0,
          };
        }
        function genFunctionPreamble(ast, context) {
          const {
            ssr,
            prefixIdentifiers,
            push,
            newline,
            runtimeModuleName,
            runtimeGlobalName,
            ssrRuntimeModuleName,
          } = context;
          const VueBinding = runtimeGlobalName;
          const helpers = Array.from(ast.helpers);
          if (helpers.length > 0) {
            {
              push(
                `const _Vue = ${VueBinding}
`,
                -1 /* End */
              );
              if (ast.hoists.length) {
                const staticHelpers = [
                  CREATE_VNODE,
                  CREATE_ELEMENT_VNODE,
                  CREATE_COMMENT,
                  CREATE_TEXT,
                  CREATE_STATIC,
                ]
                  .filter((helper) => helpers.includes(helper))
                  .map(aliasHelper)
                  .join(", ");
                push(
                  `const { ${staticHelpers} } = _Vue
`,
                  -1 /* End */
                );
              }
            }
          }
          genHoists(ast.hoists, context);
          newline();
          push(`return `);
        }
        function genAssets(assets, type, { helper, push, newline, isTS }) {
          const resolver = helper(
            type === "filter"
              ? RESOLVE_FILTER
              : type === "component"
              ? RESOLVE_COMPONENT
              : RESOLVE_DIRECTIVE
          );
          for (let i = 0; i < assets.length; i++) {
            let id = assets[i];
            const maybeSelfReference = id.endsWith("__self");
            if (maybeSelfReference) {
              id = id.slice(0, -6);
            }
            push(
              `const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(
                id
              )}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`
            );
            if (i < assets.length - 1) {
              newline();
            }
          }
        }
        function genHoists(hoists, context) {
          if (!hoists.length) {
            return;
          }
          context.pure = true;
          const { push, newline, helper, scopeId, mode } = context;
          newline();
          for (let i = 0; i < hoists.length; i++) {
            const exp = hoists[i];
            if (exp) {
              push(`const _hoisted_${i + 1} = ${``}`);
              genNode(exp, context);
              newline();
            }
          }
          context.pure = false;
        }
        function isText(n) {
          return (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(n) ||
            n.type === 4 ||
            n.type === 2 ||
            n.type === 5 ||
            n.type === 8
          );
        }
        function genNodeListAsArray(nodes, context) {
          const multilines =
            nodes.length > 3 ||
            (true &&
              nodes.some(
                (n) =>
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(
                    n
                  ) || !isText(n)
              ));
          context.push(`[`);
          multilines && context.indent();
          genNodeList(nodes, context, multilines);
          multilines && context.deindent();
          context.push(`]`);
        }
        function genNodeList(nodes, context, multilines = false, comma = true) {
          const { push, newline } = context;
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(node)
            ) {
              push(node, -3 /* Unknown */);
            } else if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(node)
            ) {
              genNodeListAsArray(node, context);
            } else {
              genNode(node, context);
            }
            if (i < nodes.length - 1) {
              if (multilines) {
                comma && push(",");
                newline();
              } else {
                comma && push(", ");
              }
            }
          }
        }
        function genNode(node, context) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(node)
          ) {
            context.push(node, -3 /* Unknown */);
            return;
          }
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isSymbol"])(node)
          ) {
            context.push(context.helper(node));
            return;
          }
          switch (node.type) {
            case 1:
            case 9:
            case 11:
              true &&
                assert(
                  node.codegenNode != null,
                  `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`
                );
              genNode(node.codegenNode, context);
              break;
            case 2:
              genText(node, context);
              break;
            case 4:
              genExpression(node, context);
              break;
            case 5:
              genInterpolation(node, context);
              break;
            case 12:
              genNode(node.codegenNode, context);
              break;
            case 8:
              genCompoundExpression(node, context);
              break;
            case 3:
              genComment(node, context);
              break;
            case 13:
              genVNodeCall(node, context);
              break;
            case 14:
              genCallExpression(node, context);
              break;
            case 15:
              genObjectExpression(node, context);
              break;
            case 17:
              genArrayExpression(node, context);
              break;
            case 18:
              genFunctionExpression(node, context);
              break;
            case 19:
              genConditionalExpression(node, context);
              break;
            case 20:
              genCacheExpression(node, context);
              break;
            case 21:
              genNodeList(node.body, context, true, false);
              break;
            case 22:
              break;
            case 23:
              break;
            case 24:
              break;
            case 25:
              break;
            case 26:
              break;
            case 10:
              break;
            default:
              if (true) {
                assert(false, `unhandled codegen node type: ${node.type}`);
                const exhaustiveCheck = node;
                return exhaustiveCheck;
              }
          }
        }
        function genText(node, context) {
          context.push(JSON.stringify(node.content), -3 /* Unknown */, node);
        }
        function genExpression(node, context) {
          const { content, isStatic } = node;
          context.push(
            isStatic ? JSON.stringify(content) : content,
            -3 /* Unknown */,
            node
          );
        }
        function genInterpolation(node, context) {
          const { push, helper, pure } = context;
          if (pure) push(PURE_ANNOTATION);
          push(`${helper(TO_DISPLAY_STRING)}(`);
          genNode(node.content, context);
          push(`)`);
        }
        function genCompoundExpression(node, context) {
          for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i];
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(
                child
              )
            ) {
              context.push(child, -3 /* Unknown */);
            } else {
              genNode(child, context);
            }
          }
        }
        function genExpressionAsPropertyKey(node, context) {
          const { push } = context;
          if (node.type === 8) {
            push(`[`);
            genCompoundExpression(node, context);
            push(`]`);
          } else if (node.isStatic) {
            const text = isSimpleIdentifier(node.content)
              ? node.content
              : JSON.stringify(node.content);
            push(text, -2 /* None */, node);
          } else {
            push(`[${node.content}]`, -3 /* Unknown */, node);
          }
        }
        function genComment(node, context) {
          const { push, helper, pure } = context;
          if (pure) {
            push(PURE_ANNOTATION);
          }
          push(
            `${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`,
            -3 /* Unknown */,
            node
          );
        }
        function genVNodeCall(node, context) {
          const { push, helper, pure } = context;
          const {
            tag,
            props,
            children,
            patchFlag,
            dynamicProps,
            directives,
            isBlock,
            disableTracking,
            isComponent,
          } = node;
          if (directives) {
            push(helper(WITH_DIRECTIVES) + `(`);
          }
          if (isBlock) {
            push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
          }
          if (pure) {
            push(PURE_ANNOTATION);
          }
          const callHelper = isBlock
            ? getVNodeBlockHelper(context.inSSR, isComponent)
            : getVNodeHelper(context.inSSR, isComponent);
          push(helper(callHelper) + `(`, -2 /* None */, node);
          genNodeList(
            genNullableArgs([tag, props, children, patchFlag, dynamicProps]),
            context
          );
          push(`)`);
          if (isBlock) {
            push(`)`);
          }
          if (directives) {
            push(`, `);
            genNode(directives, context);
            push(`)`);
          }
        }
        function genNullableArgs(args) {
          let i = args.length;
          while (i--) {
            if (args[i] != null) break;
          }
          return args.slice(0, i + 1).map((arg) => arg || `null`);
        }
        function genCallExpression(node, context) {
          const { push, helper, pure } = context;
          const callee = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"]
          )(node.callee)
            ? node.callee
            : helper(node.callee);
          if (pure) {
            push(PURE_ANNOTATION);
          }
          push(callee + `(`, -2 /* None */, node);
          genNodeList(node.arguments, context);
          push(`)`);
        }
        function genObjectExpression(node, context) {
          const { push, indent, deindent, newline } = context;
          const { properties } = node;
          if (!properties.length) {
            push(`{}`, -2 /* None */, node);
            return;
          }
          const multilines =
            properties.length > 1 ||
            (true && properties.some((p) => p.value.type !== 4));
          push(multilines ? `{` : `{ `);
          multilines && indent();
          for (let i = 0; i < properties.length; i++) {
            const { key, value } = properties[i];
            genExpressionAsPropertyKey(key, context);
            push(`: `);
            genNode(value, context);
            if (i < properties.length - 1) {
              push(`,`);
              newline();
            }
          }
          multilines && deindent();
          push(multilines ? `}` : ` }`);
        }
        function genArrayExpression(node, context) {
          genNodeListAsArray(node.elements, context);
        }
        function genFunctionExpression(node, context) {
          const { push, indent, deindent } = context;
          const { params, returns, body, newline, isSlot } = node;
          if (isSlot) {
            push(`_${helperNameMap[WITH_CTX]}(`);
          }
          push(`(`, -2 /* None */, node);
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(params)
          ) {
            genNodeList(params, context);
          } else if (params) {
            genNode(params, context);
          }
          push(`) => `);
          if (newline || body) {
            push(`{`);
            indent();
          }
          if (returns) {
            if (newline) {
              push(`return `);
            }
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(
                returns
              )
            ) {
              genNodeListAsArray(returns, context);
            } else {
              genNode(returns, context);
            }
          } else if (body) {
            genNode(body, context);
          }
          if (newline || body) {
            deindent();
            push(`}`);
          }
          if (isSlot) {
            if (node.isNonScopedSlot) {
              push(`, undefined, true`);
            }
            push(`)`);
          }
        }
        function genConditionalExpression(node, context) {
          const { test, consequent, alternate, newline: needNewline } = node;
          const { push, indent, deindent, newline } = context;
          if (test.type === 4) {
            const needsParens = !isSimpleIdentifier(test.content);
            needsParens && push(`(`);
            genExpression(test, context);
            needsParens && push(`)`);
          } else {
            push(`(`);
            genNode(test, context);
            push(`)`);
          }
          needNewline && indent();
          context.indentLevel++;
          needNewline || push(` `);
          push(`? `);
          genNode(consequent, context);
          context.indentLevel--;
          needNewline && newline();
          needNewline || push(` `);
          push(`: `);
          const isNested = alternate.type === 19;
          if (!isNested) {
            context.indentLevel++;
          }
          genNode(alternate, context);
          if (!isNested) {
            context.indentLevel--;
          }
          needNewline &&
            deindent(
              true
              /* without newline */
            );
        }
        function genCacheExpression(node, context) {
          const { push, helper, indent, deindent, newline } = context;
          push(`_cache[${node.index}] || (`);
          if (node.isVNode) {
            indent();
            push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
            newline();
          }
          push(`_cache[${node.index}] = `);
          genNode(node.value, context);
          if (node.isVNode) {
            push(`,`);
            newline();
            push(`${helper(SET_BLOCK_TRACKING)}(1),`);
            newline();
            push(`_cache[${node.index}]`);
            deindent();
          }
          push(`)`);
        }

        const prohibitedKeywordRE = new RegExp(
          "\\b" +
            "arguments,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,let,new,return,super,switch,throw,try,var,void,while,with,yield"
              .split(",")
              .join("\\b|\\b") +
            "\\b"
        );
        const stripStringRE =
          /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;
        function validateBrowserExpression(
          node,
          context,
          asParams = false,
          asRawStatements = false
        ) {
          const exp = node.content;
          if (!exp.trim()) {
            return;
          }
          try {
            new Function(
              asRawStatements
                ? ` ${exp} `
                : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`
            );
          } catch (e) {
            let message = e.message;
            const keywordMatch = exp
              .replace(stripStringRE, "")
              .match(prohibitedKeywordRE);
            if (keywordMatch) {
              message = `avoid using JavaScript keyword as property name: "${keywordMatch[0]}"`;
            }
            context.onError(createCompilerError(45, node.loc, void 0, message));
          }
        }

        const transformExpression = (node, context) => {
          if (node.type === 5) {
            node.content = processExpression(node.content, context);
          } else if (node.type === 1) {
            for (let i = 0; i < node.props.length; i++) {
              const dir = node.props[i];
              if (dir.type === 7 && dir.name !== "for") {
                const exp = dir.exp;
                const arg = dir.arg;
                if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
                  dir.exp = processExpression(
                    exp,
                    context,
                    // slot args must be processed as function params
                    dir.name === "slot"
                  );
                }
                if (arg && arg.type === 4 && !arg.isStatic) {
                  dir.arg = processExpression(arg, context);
                }
              }
            }
          }
        };
        function processExpression(
          node,
          context,
          asParams = false,
          asRawStatements = false,
          localVars = Object.create(context.identifiers)
        ) {
          {
            if (true) {
              validateBrowserExpression(
                node,
                context,
                asParams,
                asRawStatements
              );
            }
            return node;
          }
        }
        function stringifyExpression(exp) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"])(exp)
          ) {
            return exp;
          } else if (exp.type === 4) {
            return exp.content;
          } else {
            return exp.children.map(stringifyExpression).join("");
          }
        }

        const transformIf = createStructuralDirectiveTransform(
          /^(if|else|else-if)$/,
          (node, dir, context) => {
            return processIf(node, dir, context, (ifNode, branch, isRoot) => {
              const siblings = context.parent.children;
              let i = siblings.indexOf(ifNode);
              let key = 0;
              while (i-- >= 0) {
                const sibling = siblings[i];
                if (sibling && sibling.type === 9) {
                  key += sibling.branches.length;
                }
              }
              return () => {
                if (isRoot) {
                  ifNode.codegenNode = createCodegenNodeForBranch(
                    branch,
                    key,
                    context
                  );
                } else {
                  const parentCondition = getParentCondition(
                    ifNode.codegenNode
                  );
                  parentCondition.alternate = createCodegenNodeForBranch(
                    branch,
                    key + ifNode.branches.length - 1,
                    context
                  );
                }
              };
            });
          }
        );
        function processIf(node, dir, context, processCodegen) {
          if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
            const loc = dir.exp ? dir.exp.loc : node.loc;
            context.onError(createCompilerError(28, dir.loc));
            dir.exp = createSimpleExpression(`true`, false, loc);
          }
          if (true && dir.exp) {
            validateBrowserExpression(dir.exp, context);
          }
          if (dir.name === "if") {
            const branch = createIfBranch(node, dir);
            const ifNode = {
              type: 9,
              loc: node.loc,
              branches: [branch],
            };
            context.replaceNode(ifNode);
            if (processCodegen) {
              return processCodegen(ifNode, branch, true);
            }
          } else {
            const siblings = context.parent.children;
            const comments = [];
            let i = siblings.indexOf(node);
            while (i-- >= -1) {
              const sibling = siblings[i];
              if (sibling && sibling.type === 3) {
                context.removeNode(sibling);
                true && comments.unshift(sibling);
                continue;
              }
              if (
                sibling &&
                sibling.type === 2 &&
                !sibling.content.trim().length
              ) {
                context.removeNode(sibling);
                continue;
              }
              if (sibling && sibling.type === 9) {
                if (
                  dir.name === "else-if" &&
                  sibling.branches[sibling.branches.length - 1].condition ===
                    void 0
                ) {
                  context.onError(createCompilerError(30, node.loc));
                }
                context.removeNode();
                const branch = createIfBranch(node, dir);
                if (
                  true &&
                  comments.length && // #3619 ignore comments if the v-if is direct child of <transition>
                  !(
                    context.parent &&
                    context.parent.type === 1 &&
                    (context.parent.tag === "transition" ||
                      context.parent.tag === "Transition")
                  )
                ) {
                  branch.children = [...comments, ...branch.children];
                }
                if (true) {
                  const key = branch.userKey;
                  if (key) {
                    sibling.branches.forEach(({ userKey }) => {
                      if (isSameKey(userKey, key)) {
                        context.onError(
                          createCompilerError(29, branch.userKey.loc)
                        );
                      }
                    });
                  }
                }
                sibling.branches.push(branch);
                const onExit =
                  processCodegen && processCodegen(sibling, branch, false);
                traverseNode(branch, context);
                if (onExit) onExit();
                context.currentNode = null;
              } else {
                context.onError(createCompilerError(30, node.loc));
              }
              break;
            }
          }
        }
        function createIfBranch(node, dir) {
          const isTemplateIf = node.tagType === 3;
          return {
            type: 10,
            loc: node.loc,
            condition: dir.name === "else" ? void 0 : dir.exp,
            children:
              isTemplateIf && !findDir(node, "for") ? node.children : [node],
            userKey: findProp(node, `key`),
            isTemplateIf,
          };
        }
        function createCodegenNodeForBranch(branch, keyIndex, context) {
          if (branch.condition) {
            return createConditionalExpression(
              branch.condition,
              createChildrenCodegenNode(branch, keyIndex, context),
              // make sure to pass in asBlock: true so that the comment node call
              // closes the current block.
              createCallExpression(context.helper(CREATE_COMMENT), [
                true ? '"v-if"' : undefined,
                "true",
              ])
            );
          } else {
            return createChildrenCodegenNode(branch, keyIndex, context);
          }
        }
        function createChildrenCodegenNode(branch, keyIndex, context) {
          const { helper } = context;
          const keyProperty = createObjectProperty(
            `key`,
            createSimpleExpression(`${keyIndex}`, false, locStub, 2)
          );
          const { children } = branch;
          const firstChild = children[0];
          const needFragmentWrapper =
            children.length !== 1 || firstChild.type !== 1;
          if (needFragmentWrapper) {
            if (children.length === 1 && firstChild.type === 11) {
              const vnodeCall = firstChild.codegenNode;
              injectProp(vnodeCall, keyProperty, context);
              return vnodeCall;
            } else {
              let patchFlag = 64;
              let patchFlagText =
                _vue_shared__WEBPACK_IMPORTED_MODULE_0__["PatchFlagNames"][64];
              if (
                true &&
                !branch.isTemplateIf &&
                children.filter((c) => c.type !== 3).length === 1
              ) {
                patchFlag |= 2048;
                patchFlagText += `, ${_vue_shared__WEBPACK_IMPORTED_MODULE_0__["PatchFlagNames"][2048]}`;
              }
              return createVNodeCall(
                context,
                helper(FRAGMENT),
                createObjectExpression([keyProperty]),
                children,
                patchFlag + (true ? ` /* ${patchFlagText} */` : undefined),
                void 0,
                void 0,
                true,
                false,
                false,
                branch.loc
              );
            }
          } else {
            const ret = firstChild.codegenNode;
            const vnodeCall = getMemoedVNodeCall(ret);
            if (vnodeCall.type === 13) {
              convertToBlock(vnodeCall, context);
            }
            injectProp(vnodeCall, keyProperty, context);
            return ret;
          }
        }
        function isSameKey(a, b) {
          if (!a || a.type !== b.type) {
            return false;
          }
          if (a.type === 6) {
            if (a.value.content !== b.value.content) {
              return false;
            }
          } else {
            const exp = a.exp;
            const branchExp = b.exp;
            if (exp.type !== branchExp.type) {
              return false;
            }
            if (
              exp.type !== 4 ||
              exp.isStatic !== branchExp.isStatic ||
              exp.content !== branchExp.content
            ) {
              return false;
            }
          }
          return true;
        }
        function getParentCondition(node) {
          while (true) {
            if (node.type === 19) {
              if (node.alternate.type === 19) {
                node = node.alternate;
              } else {
                return node;
              }
            } else if (node.type === 20) {
              node = node.value;
            }
          }
        }

        const transformFor = createStructuralDirectiveTransform(
          "for",
          (node, dir, context) => {
            const { helper, removeHelper } = context;
            return processFor(node, dir, context, (forNode) => {
              const renderExp = createCallExpression(helper(RENDER_LIST), [
                forNode.source,
              ]);
              const isTemplate = isTemplateNode(node);
              const memo = findDir(node, "memo");
              const keyProp = findProp(node, `key`);
              const keyExp =
                keyProp &&
                (keyProp.type === 6
                  ? createSimpleExpression(keyProp.value.content, true)
                  : keyProp.exp);
              const keyProperty = keyProp
                ? createObjectProperty(`key`, keyExp)
                : null;
              const isStableFragment =
                forNode.source.type === 4 && forNode.source.constType > 0;
              const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
              forNode.codegenNode = createVNodeCall(
                context,
                helper(FRAGMENT),
                void 0,
                renderExp,
                fragmentFlag +
                  (true
                    ? ` /* ${_vue_shared__WEBPACK_IMPORTED_MODULE_0__["PatchFlagNames"][fragmentFlag]} */`
                    : undefined),
                void 0,
                void 0,
                true,
                !isStableFragment,
                false,
                node.loc
              );
              return () => {
                let childBlock;
                const { children } = forNode;
                if (true && isTemplate) {
                  node.children.some((c) => {
                    if (c.type === 1) {
                      const key = findProp(c, "key");
                      if (key) {
                        context.onError(createCompilerError(33, key.loc));
                        return true;
                      }
                    }
                  });
                }
                const needFragmentWrapper =
                  children.length !== 1 || children[0].type !== 1;
                const slotOutlet = isSlotOutlet(node)
                  ? node
                  : isTemplate &&
                    node.children.length === 1 &&
                    isSlotOutlet(node.children[0])
                  ? node.children[0]
                  : null;
                if (slotOutlet) {
                  childBlock = slotOutlet.codegenNode;
                  if (isTemplate && keyProperty) {
                    injectProp(childBlock, keyProperty, context);
                  }
                } else if (needFragmentWrapper) {
                  childBlock = createVNodeCall(
                    context,
                    helper(FRAGMENT),
                    keyProperty
                      ? createObjectExpression([keyProperty])
                      : void 0,
                    node.children,
                    64 +
                      (true
                        ? ` /* ${_vue_shared__WEBPACK_IMPORTED_MODULE_0__["PatchFlagNames"][64]} */`
                        : undefined),
                    void 0,
                    void 0,
                    true,
                    void 0,
                    false
                  );
                } else {
                  childBlock = children[0].codegenNode;
                  if (isTemplate && keyProperty) {
                    injectProp(childBlock, keyProperty, context);
                  }
                  if (childBlock.isBlock !== !isStableFragment) {
                    if (childBlock.isBlock) {
                      removeHelper(OPEN_BLOCK);
                      removeHelper(
                        getVNodeBlockHelper(
                          context.inSSR,
                          childBlock.isComponent
                        )
                      );
                    } else {
                      removeHelper(
                        getVNodeHelper(context.inSSR, childBlock.isComponent)
                      );
                    }
                  }
                  childBlock.isBlock = !isStableFragment;
                  if (childBlock.isBlock) {
                    helper(OPEN_BLOCK);
                    helper(
                      getVNodeBlockHelper(context.inSSR, childBlock.isComponent)
                    );
                  } else {
                    helper(
                      getVNodeHelper(context.inSSR, childBlock.isComponent)
                    );
                  }
                }
                if (memo) {
                  const loop = createFunctionExpression(
                    createForLoopParams(forNode.parseResult, [
                      createSimpleExpression(`_cached`),
                    ])
                  );
                  loop.body = createBlockStatement([
                    createCompoundExpression([
                      `const _memo = (`,
                      memo.exp,
                      `)`,
                    ]),
                    createCompoundExpression([
                      `if (_cached`,
                      ...(keyExp ? [` && _cached.key === `, keyExp] : []),
                      ` && ${context.helperString(
                        IS_MEMO_SAME
                      )}(_cached, _memo)) return _cached`,
                    ]),
                    createCompoundExpression([`const _item = `, childBlock]),
                    createSimpleExpression(`_item.memo = _memo`),
                    createSimpleExpression(`return _item`),
                  ]);
                  renderExp.arguments.push(
                    loop,
                    createSimpleExpression(`_cache`),
                    createSimpleExpression(String(context.cached++))
                  );
                } else {
                  renderExp.arguments.push(
                    createFunctionExpression(
                      createForLoopParams(forNode.parseResult),
                      childBlock,
                      true
                    )
                  );
                }
              };
            });
          }
        );
        function processFor(node, dir, context, processCodegen) {
          if (!dir.exp) {
            context.onError(createCompilerError(31, dir.loc));
            return;
          }
          const parseResult = dir.forParseResult;
          if (!parseResult) {
            context.onError(createCompilerError(32, dir.loc));
            return;
          }
          finalizeForParseResult(parseResult, context);
          const { addIdentifiers, removeIdentifiers, scopes } = context;
          const { source, value, key, index } = parseResult;
          const forNode = {
            type: 11,
            loc: dir.loc,
            source,
            valueAlias: value,
            keyAlias: key,
            objectIndexAlias: index,
            parseResult,
            children: isTemplateNode(node) ? node.children : [node],
          };
          context.replaceNode(forNode);
          scopes.vFor++;
          const onExit = processCodegen && processCodegen(forNode);
          return () => {
            scopes.vFor--;
            if (onExit) onExit();
          };
        }
        function finalizeForParseResult(result, context) {
          if (result.finalized) return;
          if (true) {
            validateBrowserExpression(result.source, context);
            if (result.key) {
              validateBrowserExpression(result.key, context, true);
            }
            if (result.index) {
              validateBrowserExpression(result.index, context, true);
            }
            if (result.value) {
              validateBrowserExpression(result.value, context, true);
            }
          }
          result.finalized = true;
        }
        function createForLoopParams({ value, key, index }, memoArgs = []) {
          return createParamsList([value, key, index, ...memoArgs]);
        }
        function createParamsList(args) {
          let i = args.length;
          while (i--) {
            if (args[i]) break;
          }
          return args
            .slice(0, i + 1)
            .map(
              (arg, i2) =>
                arg || createSimpleExpression(`_`.repeat(i2 + 1), false)
            );
        }

        const defaultFallback = createSimpleExpression(`undefined`, false);
        const trackSlotScopes = (node, context) => {
          if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
            const vSlot = findDir(node, "slot");
            if (vSlot) {
              vSlot.exp;
              context.scopes.vSlot++;
              return () => {
                context.scopes.vSlot--;
              };
            }
          }
        };
        const trackVForSlotScopes = (node, context) => {
          let vFor;
          if (
            isTemplateNode(node) &&
            node.props.some(isVSlot) &&
            (vFor = findDir(node, "for"))
          ) {
            const result = vFor.forParseResult;
            if (result) {
              finalizeForParseResult(result, context);
              const { value, key, index } = result;
              const { addIdentifiers, removeIdentifiers } = context;
              value && addIdentifiers(value);
              key && addIdentifiers(key);
              index && addIdentifiers(index);
              return () => {
                value && removeIdentifiers(value);
                key && removeIdentifiers(key);
                index && removeIdentifiers(index);
              };
            }
          }
        };
        const buildClientSlotFn = (props, _vForExp, children, loc) =>
          createFunctionExpression(
            props,
            children,
            false,
            true,
            children.length ? children[0].loc : loc
          );
        function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
          context.helper(WITH_CTX);
          const { children, loc } = node;
          const slotsProperties = [];
          const dynamicSlots = [];
          let hasDynamicSlots =
            context.scopes.vSlot > 0 || context.scopes.vFor > 0;
          const onComponentSlot = findDir(node, "slot", true);
          if (onComponentSlot) {
            const { arg, exp } = onComponentSlot;
            if (arg && !isStaticExp(arg)) {
              hasDynamicSlots = true;
            }
            slotsProperties.push(
              createObjectProperty(
                arg || createSimpleExpression("default", true),
                buildSlotFn(exp, void 0, children, loc)
              )
            );
          }
          let hasTemplateSlots = false;
          let hasNamedDefaultSlot = false;
          const implicitDefaultChildren = [];
          const seenSlotNames = /* @__PURE__ */ new Set();
          let conditionalBranchIndex = 0;
          for (let i = 0; i < children.length; i++) {
            const slotElement = children[i];
            let slotDir;
            if (
              !isTemplateNode(slotElement) ||
              !(slotDir = findDir(slotElement, "slot", true))
            ) {
              if (slotElement.type !== 3) {
                implicitDefaultChildren.push(slotElement);
              }
              continue;
            }
            if (onComponentSlot) {
              context.onError(createCompilerError(37, slotDir.loc));
              break;
            }
            hasTemplateSlots = true;
            const { children: slotChildren, loc: slotLoc } = slotElement;
            const {
              arg: slotName = createSimpleExpression(`default`, true),
              exp: slotProps,
              loc: dirLoc,
            } = slotDir;
            let staticSlotName;
            if (isStaticExp(slotName)) {
              staticSlotName = slotName ? slotName.content : `default`;
            } else {
              hasDynamicSlots = true;
            }
            const vFor = findDir(slotElement, "for");
            const slotFunction = buildSlotFn(
              slotProps,
              vFor,
              slotChildren,
              slotLoc
            );
            let vIf;
            let vElse;
            if ((vIf = findDir(slotElement, "if"))) {
              hasDynamicSlots = true;
              dynamicSlots.push(
                createConditionalExpression(
                  vIf.exp,
                  buildDynamicSlot(
                    slotName,
                    slotFunction,
                    conditionalBranchIndex++
                  ),
                  defaultFallback
                )
              );
            } else if (
              (vElse = findDir(
                slotElement,
                /^else(-if)?$/,
                true
                /* allowEmpty */
              ))
            ) {
              let j = i;
              let prev;
              while (j--) {
                prev = children[j];
                if (prev.type !== 3) {
                  break;
                }
              }
              if (prev && isTemplateNode(prev) && findDir(prev, "if")) {
                children.splice(i, 1);
                i--;
                let conditional = dynamicSlots[dynamicSlots.length - 1];
                while (conditional.alternate.type === 19) {
                  conditional = conditional.alternate;
                }
                conditional.alternate = vElse.exp
                  ? createConditionalExpression(
                      vElse.exp,
                      buildDynamicSlot(
                        slotName,
                        slotFunction,
                        conditionalBranchIndex++
                      ),
                      defaultFallback
                    )
                  : buildDynamicSlot(
                      slotName,
                      slotFunction,
                      conditionalBranchIndex++
                    );
              } else {
                context.onError(createCompilerError(30, vElse.loc));
              }
            } else if (vFor) {
              hasDynamicSlots = true;
              const parseResult = vFor.forParseResult;
              if (parseResult) {
                finalizeForParseResult(parseResult, context);
                dynamicSlots.push(
                  createCallExpression(context.helper(RENDER_LIST), [
                    parseResult.source,
                    createFunctionExpression(
                      createForLoopParams(parseResult),
                      buildDynamicSlot(slotName, slotFunction),
                      true
                    ),
                  ])
                );
              } else {
                context.onError(createCompilerError(32, vFor.loc));
              }
            } else {
              if (staticSlotName) {
                if (seenSlotNames.has(staticSlotName)) {
                  context.onError(createCompilerError(38, dirLoc));
                  continue;
                }
                seenSlotNames.add(staticSlotName);
                if (staticSlotName === "default") {
                  hasNamedDefaultSlot = true;
                }
              }
              slotsProperties.push(
                createObjectProperty(slotName, slotFunction)
              );
            }
          }
          if (!onComponentSlot) {
            const buildDefaultSlotProperty = (props, children2) => {
              const fn = buildSlotFn(props, void 0, children2, loc);
              if (context.compatConfig) {
                fn.isNonScopedSlot = true;
              }
              return createObjectProperty(`default`, fn);
            };
            if (!hasTemplateSlots) {
              slotsProperties.push(buildDefaultSlotProperty(void 0, children));
            } else if (
              implicitDefaultChildren.length && // #3766
              // with whitespace: 'preserve', whitespaces between slots will end up in
              // implicitDefaultChildren. Ignore if all implicit children are whitespaces.
              implicitDefaultChildren.some((node2) =>
                isNonWhitespaceContent(node2)
              )
            ) {
              if (hasNamedDefaultSlot) {
                context.onError(
                  createCompilerError(39, implicitDefaultChildren[0].loc)
                );
              } else {
                slotsProperties.push(
                  buildDefaultSlotProperty(void 0, implicitDefaultChildren)
                );
              }
            }
          }
          const slotFlag = hasDynamicSlots
            ? 2
            : hasForwardedSlots(node.children)
            ? 3
            : 1;
          let slots = createObjectExpression(
            slotsProperties.concat(
              createObjectProperty(
                `_`,
                // 2 = compiled but dynamic = can skip normalization, but must run diff
                // 1 = compiled and static = can skip normalization AND diff as optimized
                createSimpleExpression(
                  slotFlag +
                    (true
                      ? ` /* ${_vue_shared__WEBPACK_IMPORTED_MODULE_0__["slotFlagsText"][slotFlag]} */`
                      : undefined),
                  false
                )
              )
            ),
            loc
          );
          if (dynamicSlots.length) {
            slots = createCallExpression(context.helper(CREATE_SLOTS), [
              slots,
              createArrayExpression(dynamicSlots),
            ]);
          }
          return {
            slots,
            hasDynamicSlots,
          };
        }
        function buildDynamicSlot(name, fn, index) {
          const props = [
            createObjectProperty(`name`, name),
            createObjectProperty(`fn`, fn),
          ];
          if (index != null) {
            props.push(
              createObjectProperty(
                `key`,
                createSimpleExpression(String(index), true)
              )
            );
          }
          return createObjectExpression(props);
        }
        function hasForwardedSlots(children) {
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            switch (child.type) {
              case 1:
                if (child.tagType === 2 || hasForwardedSlots(child.children)) {
                  return true;
                }
                break;
              case 9:
                if (hasForwardedSlots(child.branches)) return true;
                break;
              case 10:
              case 11:
                if (hasForwardedSlots(child.children)) return true;
                break;
            }
          }
          return false;
        }
        function isNonWhitespaceContent(node) {
          if (node.type !== 2 && node.type !== 12) return true;
          return node.type === 2
            ? !!node.content.trim()
            : isNonWhitespaceContent(node.content);
        }

        const directiveImportMap = /* @__PURE__ */ new WeakMap();
        const transformElement = (node, context) => {
          return function postTransformElement() {
            node = context.currentNode;
            if (
              !(node.type === 1 && (node.tagType === 0 || node.tagType === 1))
            ) {
              return;
            }
            const { tag, props } = node;
            const isComponent = node.tagType === 1;
            let vnodeTag = isComponent
              ? resolveComponentType(node, context)
              : `"${tag}"`;
            const isDynamicComponent =
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isObject"])(
                vnodeTag
              ) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
            let vnodeProps;
            let vnodeChildren;
            let vnodePatchFlag;
            let patchFlag = 0;
            let vnodeDynamicProps;
            let dynamicPropNames;
            let vnodeDirectives;
            let shouldUseBlock =
              // dynamic component may resolve to plain elements
              isDynamicComponent ||
              vnodeTag === TELEPORT ||
              vnodeTag === SUSPENSE ||
              (!isComponent && // <svg> and <foreignObject> must be forced into blocks so that block
                // updates inside get proper isSVG flag at runtime. (#639, #643)
                // This is technically web-specific, but splitting the logic out of core
                // leads to too much unnecessary complexity.
                (tag === "svg" || tag === "foreignObject"));
            if (props.length > 0) {
              const propsBuildResult = buildProps(
                node,
                context,
                void 0,
                isComponent,
                isDynamicComponent
              );
              vnodeProps = propsBuildResult.props;
              patchFlag = propsBuildResult.patchFlag;
              dynamicPropNames = propsBuildResult.dynamicPropNames;
              const directives = propsBuildResult.directives;
              vnodeDirectives =
                directives && directives.length
                  ? createArrayExpression(
                      directives.map((dir) => buildDirectiveArgs(dir, context))
                    )
                  : void 0;
              if (propsBuildResult.shouldUseBlock) {
                shouldUseBlock = true;
              }
            }
            if (node.children.length > 0) {
              if (vnodeTag === KEEP_ALIVE) {
                shouldUseBlock = true;
                patchFlag |= 1024;
                if (true && node.children.length > 1) {
                  context.onError(
                    createCompilerError(46, {
                      start: node.children[0].loc.start,
                      end: node.children[node.children.length - 1].loc.end,
                      source: "",
                    })
                  );
                }
              }
              const shouldBuildAsSlots =
                isComponent && // Teleport is not a real component and has dedicated runtime handling
                vnodeTag !== TELEPORT && // explained above.
                vnodeTag !== KEEP_ALIVE;
              if (shouldBuildAsSlots) {
                const { slots, hasDynamicSlots } = buildSlots(node, context);
                vnodeChildren = slots;
                if (hasDynamicSlots) {
                  patchFlag |= 1024;
                }
              } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
                const child = node.children[0];
                const type = child.type;
                const hasDynamicTextChild = type === 5 || type === 8;
                if (
                  hasDynamicTextChild &&
                  getConstantType(child, context) === 0
                ) {
                  patchFlag |= 1;
                }
                if (hasDynamicTextChild || type === 2) {
                  vnodeChildren = child;
                } else {
                  vnodeChildren = node.children;
                }
              } else {
                vnodeChildren = node.children;
              }
            }
            if (patchFlag !== 0) {
              if (true) {
                if (patchFlag < 0) {
                  vnodePatchFlag =
                    patchFlag +
                    ` /* ${_vue_shared__WEBPACK_IMPORTED_MODULE_0__["PatchFlagNames"][patchFlag]} */`;
                } else {
                  const flagNames = Object.keys(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_0__["PatchFlagNames"]
                  )
                    .map(Number)
                    .filter((n) => n > 0 && patchFlag & n)
                    .map(
                      (n) =>
                        _vue_shared__WEBPACK_IMPORTED_MODULE_0__[
                          "PatchFlagNames"
                        ][n]
                    )
                    .join(`, `);
                  vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
                }
              } else {
              }
              if (dynamicPropNames && dynamicPropNames.length) {
                vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
              }
            }
            node.codegenNode = createVNodeCall(
              context,
              vnodeTag,
              vnodeProps,
              vnodeChildren,
              vnodePatchFlag,
              vnodeDynamicProps,
              vnodeDirectives,
              !!shouldUseBlock,
              false,
              isComponent,
              node.loc
            );
          };
        };
        function resolveComponentType(node, context, ssr = false) {
          let { tag } = node;
          const isExplicitDynamic = isComponentTag(tag);
          const isProp = findProp(
            node,
            "is",
            false,
            true
            /* allow empty */
          );
          if (isProp) {
            if (
              isExplicitDynamic ||
              isCompatEnabled("COMPILER_IS_ON_ELEMENT", context)
            ) {
              let exp;
              if (isProp.type === 6) {
                exp =
                  isProp.value &&
                  createSimpleExpression(isProp.value.content, true);
              } else {
                exp = isProp.exp;
                if (!exp) {
                  exp = createSimpleExpression(`is`, false, isProp.loc);
                }
              }
              if (exp) {
                return createCallExpression(
                  context.helper(RESOLVE_DYNAMIC_COMPONENT),
                  [exp]
                );
              }
            } else if (
              isProp.type === 6 &&
              isProp.value.content.startsWith("vue:")
            ) {
              tag = isProp.value.content.slice(4);
            }
          }
          const builtIn =
            isCoreComponent(tag) || context.isBuiltInComponent(tag);
          if (builtIn) {
            if (!ssr) context.helper(builtIn);
            return builtIn;
          }
          context.helper(RESOLVE_COMPONENT);
          context.components.add(tag);
          return toValidAssetId(tag, `component`);
        }
        function buildProps(
          node,
          context,
          props = node.props,
          isComponent,
          isDynamicComponent,
          ssr = false
        ) {
          const { tag, loc: elementLoc, children } = node;
          let properties = [];
          const mergeArgs = [];
          const runtimeDirectives = [];
          const hasChildren = children.length > 0;
          let shouldUseBlock = false;
          let patchFlag = 0;
          let hasRef = false;
          let hasClassBinding = false;
          let hasStyleBinding = false;
          let hasHydrationEventBinding = false;
          let hasDynamicKeys = false;
          let hasVnodeHook = false;
          const dynamicPropNames = [];
          const pushMergeArg = (arg) => {
            if (properties.length) {
              mergeArgs.push(
                createObjectExpression(dedupeProperties(properties), elementLoc)
              );
              properties = [];
            }
            if (arg) mergeArgs.push(arg);
          };
          const pushRefVForMarker = () => {
            if (context.scopes.vFor > 0) {
              properties.push(
                createObjectProperty(
                  createSimpleExpression("ref_for", true),
                  createSimpleExpression("true")
                )
              );
            }
          };
          const analyzePatchFlag = ({ key, value }) => {
            if (isStaticExp(key)) {
              const name = key.content;
              const isEventHandler = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isOn"]
              )(name);
              if (
                isEventHandler &&
                (!isComponent || isDynamicComponent) && // omit the flag for click handlers because hydration gives click
                // dedicated fast path.
                name.toLowerCase() !== "onclick" && // omit v-model handlers
                name !== "onUpdate:modelValue" && // omit onVnodeXXX hooks
                !Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isReservedProp"]
                )(name)
              ) {
                hasHydrationEventBinding = true;
              }
              if (
                isEventHandler &&
                Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isReservedProp"]
                )(name)
              ) {
                hasVnodeHook = true;
              }
              if (isEventHandler && value.type === 14) {
                value = value.arguments[0];
              }
              if (
                value.type === 20 ||
                ((value.type === 4 || value.type === 8) &&
                  getConstantType(value, context) > 0)
              ) {
                return;
              }
              if (name === "ref") {
                hasRef = true;
              } else if (name === "class") {
                hasClassBinding = true;
              } else if (name === "style") {
                hasStyleBinding = true;
              } else if (name !== "key" && !dynamicPropNames.includes(name)) {
                dynamicPropNames.push(name);
              }
              if (
                isComponent &&
                (name === "class" || name === "style") &&
                !dynamicPropNames.includes(name)
              ) {
                dynamicPropNames.push(name);
              }
            } else {
              hasDynamicKeys = true;
            }
          };
          for (let i = 0; i < props.length; i++) {
            const prop = props[i];
            if (prop.type === 6) {
              const { loc, name, nameLoc, value } = prop;
              let isStatic = true;
              if (name === "ref") {
                hasRef = true;
                pushRefVForMarker();
              }
              if (
                name === "is" &&
                (isComponentTag(tag) ||
                  (value && value.content.startsWith("vue:")) ||
                  isCompatEnabled("COMPILER_IS_ON_ELEMENT", context))
              ) {
                continue;
              }
              properties.push(
                createObjectProperty(
                  createSimpleExpression(name, true, nameLoc),
                  createSimpleExpression(
                    value ? value.content : "",
                    isStatic,
                    value ? value.loc : loc
                  )
                )
              );
            } else {
              const { name, arg, exp, loc, modifiers } = prop;
              const isVBind = name === "bind";
              const isVOn = name === "on";
              if (name === "slot") {
                if (!isComponent) {
                  context.onError(createCompilerError(40, loc));
                }
                continue;
              }
              if (name === "once" || name === "memo") {
                continue;
              }
              if (
                name === "is" ||
                (isVBind &&
                  isStaticArgOf(arg, "is") &&
                  (isComponentTag(tag) ||
                    isCompatEnabled("COMPILER_IS_ON_ELEMENT", context)))
              ) {
                continue;
              }
              if (isVOn && ssr) {
                continue;
              }
              if (
                // #938: elements with dynamic keys should be forced into blocks
                (isVBind && isStaticArgOf(arg, "key")) || // inline before-update hooks need to force block so that it is invoked
                // before children
                (isVOn &&
                  hasChildren &&
                  isStaticArgOf(arg, "vue:before-update"))
              ) {
                shouldUseBlock = true;
              }
              if (isVBind && isStaticArgOf(arg, "ref")) {
                pushRefVForMarker();
              }
              if (!arg && (isVBind || isVOn)) {
                hasDynamicKeys = true;
                if (exp) {
                  if (isVBind) {
                    pushRefVForMarker();
                    pushMergeArg();
                    {
                      if (true) {
                        const hasOverridableKeys = mergeArgs.some((arg2) => {
                          if (arg2.type === 15) {
                            return arg2.properties.some(({ key }) => {
                              if (key.type !== 4 || !key.isStatic) {
                                return true;
                              }
                              return (
                                key.content !== "class" &&
                                key.content !== "style" &&
                                !Object(
                                  _vue_shared__WEBPACK_IMPORTED_MODULE_0__[
                                    "isOn"
                                  ]
                                )(key.content)
                              );
                            });
                          } else {
                            return true;
                          }
                        });
                        if (hasOverridableKeys) {
                          checkCompatEnabled(
                            "COMPILER_V_BIND_OBJECT_ORDER",
                            context,
                            loc
                          );
                        }
                      }
                      if (
                        isCompatEnabled("COMPILER_V_BIND_OBJECT_ORDER", context)
                      ) {
                        mergeArgs.unshift(exp);
                        continue;
                      }
                    }
                    mergeArgs.push(exp);
                  } else {
                    pushMergeArg({
                      type: 14,
                      loc,
                      callee: context.helper(TO_HANDLERS),
                      arguments: isComponent ? [exp] : [exp, `true`],
                    });
                  }
                } else {
                  context.onError(createCompilerError(isVBind ? 34 : 35, loc));
                }
                continue;
              }
              if (isVBind && modifiers.includes("prop")) {
                patchFlag |= 32;
              }
              const directiveTransform = context.directiveTransforms[name];
              if (directiveTransform) {
                const { props: props2, needRuntime } = directiveTransform(
                  prop,
                  node,
                  context
                );
                !ssr && props2.forEach(analyzePatchFlag);
                if (isVOn && arg && !isStaticExp(arg)) {
                  pushMergeArg(createObjectExpression(props2, elementLoc));
                } else {
                  properties.push(...props2);
                }
                if (needRuntime) {
                  runtimeDirectives.push(prop);
                  if (
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isSymbol"]
                    )(needRuntime)
                  ) {
                    directiveImportMap.set(prop, needRuntime);
                  }
                }
              } else if (
                !Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isBuiltInDirective"]
                )(name)
              ) {
                runtimeDirectives.push(prop);
                if (hasChildren) {
                  shouldUseBlock = true;
                }
              }
            }
          }
          let propsExpression = void 0;
          if (mergeArgs.length) {
            pushMergeArg();
            if (mergeArgs.length > 1) {
              propsExpression = createCallExpression(
                context.helper(MERGE_PROPS),
                mergeArgs,
                elementLoc
              );
            } else {
              propsExpression = mergeArgs[0];
            }
          } else if (properties.length) {
            propsExpression = createObjectExpression(
              dedupeProperties(properties),
              elementLoc
            );
          }
          if (hasDynamicKeys) {
            patchFlag |= 16;
          } else {
            if (hasClassBinding && !isComponent) {
              patchFlag |= 2;
            }
            if (hasStyleBinding && !isComponent) {
              patchFlag |= 4;
            }
            if (dynamicPropNames.length) {
              patchFlag |= 8;
            }
            if (hasHydrationEventBinding) {
              patchFlag |= 32;
            }
          }
          if (
            !shouldUseBlock &&
            (patchFlag === 0 || patchFlag === 32) &&
            (hasRef || hasVnodeHook || runtimeDirectives.length > 0)
          ) {
            patchFlag |= 512;
          }
          if (!context.inSSR && propsExpression) {
            switch (propsExpression.type) {
              case 15:
                let classKeyIndex = -1;
                let styleKeyIndex = -1;
                let hasDynamicKey = false;
                for (let i = 0; i < propsExpression.properties.length; i++) {
                  const key = propsExpression.properties[i].key;
                  if (isStaticExp(key)) {
                    if (key.content === "class") {
                      classKeyIndex = i;
                    } else if (key.content === "style") {
                      styleKeyIndex = i;
                    }
                  } else if (!key.isHandlerKey) {
                    hasDynamicKey = true;
                  }
                }
                const classProp = propsExpression.properties[classKeyIndex];
                const styleProp = propsExpression.properties[styleKeyIndex];
                if (!hasDynamicKey) {
                  if (classProp && !isStaticExp(classProp.value)) {
                    classProp.value = createCallExpression(
                      context.helper(NORMALIZE_CLASS),
                      [classProp.value]
                    );
                  }
                  if (
                    styleProp && // the static style is compiled into an object,
                    // so use `hasStyleBinding` to ensure that it is a dynamic style binding
                    (hasStyleBinding ||
                      (styleProp.value.type === 4 &&
                        styleProp.value.content.trim()[0] === `[`) || // v-bind:style and style both exist,
                      // v-bind:style with static literal object
                      styleProp.value.type === 17)
                  ) {
                    styleProp.value = createCallExpression(
                      context.helper(NORMALIZE_STYLE),
                      [styleProp.value]
                    );
                  }
                } else {
                  propsExpression = createCallExpression(
                    context.helper(NORMALIZE_PROPS),
                    [propsExpression]
                  );
                }
                break;
              case 14:
                break;
              default:
                propsExpression = createCallExpression(
                  context.helper(NORMALIZE_PROPS),
                  [
                    createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
                      propsExpression,
                    ]),
                  ]
                );
                break;
            }
          }
          return {
            props: propsExpression,
            directives: runtimeDirectives,
            patchFlag,
            dynamicPropNames,
            shouldUseBlock,
          };
        }
        function dedupeProperties(properties) {
          const knownProps = /* @__PURE__ */ new Map();
          const deduped = [];
          for (let i = 0; i < properties.length; i++) {
            const prop = properties[i];
            if (prop.key.type === 8 || !prop.key.isStatic) {
              deduped.push(prop);
              continue;
            }
            const name = prop.key.content;
            const existing = knownProps.get(name);
            if (existing) {
              if (
                name === "style" ||
                name === "class" ||
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isOn"])(name)
              ) {
                mergeAsArray(existing, prop);
              }
            } else {
              knownProps.set(name, prop);
              deduped.push(prop);
            }
          }
          return deduped;
        }
        function mergeAsArray(existing, incoming) {
          if (existing.value.type === 17) {
            existing.value.elements.push(incoming.value);
          } else {
            existing.value = createArrayExpression(
              [existing.value, incoming.value],
              existing.loc
            );
          }
        }
        function buildDirectiveArgs(dir, context) {
          const dirArgs = [];
          const runtime = directiveImportMap.get(dir);
          if (runtime) {
            dirArgs.push(context.helperString(runtime));
          } else {
            {
              context.helper(RESOLVE_DIRECTIVE);
              context.directives.add(dir.name);
              dirArgs.push(toValidAssetId(dir.name, `directive`));
            }
          }
          const { loc } = dir;
          if (dir.exp) dirArgs.push(dir.exp);
          if (dir.arg) {
            if (!dir.exp) {
              dirArgs.push(`void 0`);
            }
            dirArgs.push(dir.arg);
          }
          if (Object.keys(dir.modifiers).length) {
            if (!dir.arg) {
              if (!dir.exp) {
                dirArgs.push(`void 0`);
              }
              dirArgs.push(`void 0`);
            }
            const trueExpression = createSimpleExpression(`true`, false, loc);
            dirArgs.push(
              createObjectExpression(
                dir.modifiers.map((modifier) =>
                  createObjectProperty(modifier, trueExpression)
                ),
                loc
              )
            );
          }
          return createArrayExpression(dirArgs, dir.loc);
        }
        function stringifyDynamicPropNames(props) {
          let propsNamesString = `[`;
          for (let i = 0, l = props.length; i < l; i++) {
            propsNamesString += JSON.stringify(props[i]);
            if (i < l - 1) propsNamesString += ", ";
          }
          return propsNamesString + `]`;
        }
        function isComponentTag(tag) {
          return tag === "component" || tag === "Component";
        }

        const transformSlotOutlet = (node, context) => {
          if (isSlotOutlet(node)) {
            const { children, loc } = node;
            const { slotName, slotProps } = processSlotOutlet(node, context);
            const slotArgs = [
              context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
              slotName,
              "{}",
              "undefined",
              "true",
            ];
            let expectedLen = 2;
            if (slotProps) {
              slotArgs[2] = slotProps;
              expectedLen = 3;
            }
            if (children.length) {
              slotArgs[3] = createFunctionExpression(
                [],
                children,
                false,
                false,
                loc
              );
              expectedLen = 4;
            }
            if (context.scopeId && !context.slotted) {
              expectedLen = 5;
            }
            slotArgs.splice(expectedLen);
            node.codegenNode = createCallExpression(
              context.helper(RENDER_SLOT),
              slotArgs,
              loc
            );
          }
        };
        function processSlotOutlet(node, context) {
          let slotName = `"default"`;
          let slotProps = void 0;
          const nonNameProps = [];
          for (let i = 0; i < node.props.length; i++) {
            const p = node.props[i];
            if (p.type === 6) {
              if (p.value) {
                if (p.name === "name") {
                  slotName = JSON.stringify(p.value.content);
                } else {
                  p.name = Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_0__["camelize"]
                  )(p.name);
                  nonNameProps.push(p);
                }
              }
            } else {
              if (p.name === "bind" && isStaticArgOf(p.arg, "name")) {
                if (p.exp) {
                  slotName = p.exp;
                } else if (p.arg && p.arg.type === 4) {
                  const name = Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_0__["camelize"]
                  )(p.arg.content);
                  slotName = p.exp = createSimpleExpression(
                    name,
                    false,
                    p.arg.loc
                  );
                }
              } else {
                if (p.name === "bind" && p.arg && isStaticExp(p.arg)) {
                  p.arg.content = Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_0__["camelize"]
                  )(p.arg.content);
                }
                nonNameProps.push(p);
              }
            }
          }
          if (nonNameProps.length > 0) {
            const { props, directives } = buildProps(
              node,
              context,
              nonNameProps,
              false,
              false
            );
            slotProps = props;
            if (directives.length) {
              context.onError(createCompilerError(36, directives[0].loc));
            }
          }
          return {
            slotName,
            slotProps,
          };
        }

        const fnExpRE =
          /^\s*(async\s*)?(\([^)]*?\)|[\w$_]+)\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
        const transformOn = (dir, node, context, augmentor) => {
          const { loc, modifiers, arg } = dir;
          if (!dir.exp && !modifiers.length) {
            context.onError(createCompilerError(35, loc));
          }
          let eventName;
          if (arg.type === 4) {
            if (arg.isStatic) {
              let rawName = arg.content;
              if (true && rawName.startsWith("vnode")) {
                context.onError(createCompilerError(51, arg.loc));
              }
              if (rawName.startsWith("vue:")) {
                rawName = `vnode-${rawName.slice(4)}`;
              }
              const eventString =
                node.tagType !== 0 ||
                rawName.startsWith("vnode") ||
                !/[A-Z]/.test(rawName)
                  ? // for non-element and vnode lifecycle event listeners, auto convert
                    // it to camelCase. See issue #2249
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_0__["toHandlerKey"]
                    )(
                      Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_0__["camelize"]
                      )(rawName)
                    )
                  : // preserve case for plain element listeners that have uppercase
                    // letters, as these may be custom elements' custom events
                    `on:${rawName}`;
              eventName = createSimpleExpression(eventString, true, arg.loc);
            } else {
              eventName = createCompoundExpression([
                `${context.helperString(TO_HANDLER_KEY)}(`,
                arg,
                `)`,
              ]);
            }
          } else {
            eventName = arg;
            eventName.children.unshift(
              `${context.helperString(TO_HANDLER_KEY)}(`
            );
            eventName.children.push(`)`);
          }
          let exp = dir.exp;
          if (exp && !exp.content.trim()) {
            exp = void 0;
          }
          let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
          if (exp) {
            const isMemberExp = isMemberExpression(exp.content);
            const isInlineStatement = !(
              isMemberExp || fnExpRE.test(exp.content)
            );
            const hasMultipleStatements = exp.content.includes(`;`);
            if (true) {
              validateBrowserExpression(
                exp,
                context,
                false,
                hasMultipleStatements
              );
            }
            if (isInlineStatement || (shouldCache && isMemberExp)) {
              exp = createCompoundExpression([
                `${isInlineStatement ? `$event` : `${``}(...args)`} => ${
                  hasMultipleStatements ? `{` : `(`
                }`,
                exp,
                hasMultipleStatements ? `}` : `)`,
              ]);
            }
          }
          let ret = {
            props: [
              createObjectProperty(
                eventName,
                exp || createSimpleExpression(`() => {}`, false, loc)
              ),
            ],
          };
          if (augmentor) {
            ret = augmentor(ret);
          }
          if (shouldCache) {
            ret.props[0].value = context.cache(ret.props[0].value);
          }
          ret.props.forEach((p) => (p.key.isHandlerKey = true));
          return ret;
        };

        const transformBind = (dir, _node, context) => {
          const { modifiers, loc } = dir;
          const arg = dir.arg;
          let { exp } = dir;
          if (exp && exp.type === 4 && !exp.content.trim()) {
            {
              exp = void 0;
            }
          }
          if (!exp) {
            if (arg.type !== 4 || !arg.isStatic) {
              context.onError(createCompilerError(52, arg.loc));
              return {
                props: [
                  createObjectProperty(
                    arg,
                    createSimpleExpression("", true, loc)
                  ),
                ],
              };
            }
            const propName = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_0__["camelize"]
            )(arg.content);
            exp = dir.exp = createSimpleExpression(propName, false, arg.loc);
          }
          if (arg.type !== 4) {
            arg.children.unshift(`(`);
            arg.children.push(`) || ""`);
          } else if (!arg.isStatic) {
            arg.content = `${arg.content} || ""`;
          }
          if (modifiers.includes("camel")) {
            if (arg.type === 4) {
              if (arg.isStatic) {
                arg.content = Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_0__["camelize"]
                )(arg.content);
              } else {
                arg.content = `${context.helperString(CAMELIZE)}(${
                  arg.content
                })`;
              }
            } else {
              arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
              arg.children.push(`)`);
            }
          }
          if (!context.inSSR) {
            if (modifiers.includes("prop")) {
              injectPrefix(arg, ".");
            }
            if (modifiers.includes("attr")) {
              injectPrefix(arg, "^");
            }
          }
          return {
            props: [createObjectProperty(arg, exp)],
          };
        };
        const injectPrefix = (arg, prefix) => {
          if (arg.type === 4) {
            if (arg.isStatic) {
              arg.content = prefix + arg.content;
            } else {
              arg.content = `\`${prefix}\${${arg.content}}\``;
            }
          } else {
            arg.children.unshift(`'${prefix}' + (`);
            arg.children.push(`)`);
          }
        };

        const transformText = (node, context) => {
          if (
            node.type === 0 ||
            node.type === 1 ||
            node.type === 11 ||
            node.type === 10
          ) {
            return () => {
              const children = node.children;
              let currentContainer = void 0;
              let hasText = false;
              for (let i = 0; i < children.length; i++) {
                const child = children[i];
                if (isText$1(child)) {
                  hasText = true;
                  for (let j = i + 1; j < children.length; j++) {
                    const next = children[j];
                    if (isText$1(next)) {
                      if (!currentContainer) {
                        currentContainer = children[i] =
                          createCompoundExpression([child], child.loc);
                      }
                      currentContainer.children.push(` + `, next);
                      children.splice(j, 1);
                      j--;
                    } else {
                      currentContainer = void 0;
                      break;
                    }
                  }
                }
              }
              if (
                !hasText || // if this is a plain element with a single text child, leave it
                // as-is since the runtime has dedicated fast path for this by directly
                // setting textContent of the element.
                // for component root it's always normalized anyway.
                (children.length === 1 &&
                  (node.type === 0 ||
                    (node.type === 1 &&
                      node.tagType === 0 && // #3756
                      // custom directives can potentially add DOM elements arbitrarily,
                      // we need to avoid setting textContent of the element at runtime
                      // to avoid accidentally overwriting the DOM elements added
                      // by the user through custom directives.
                      !node.props.find(
                        (p) =>
                          p.type === 7 && !context.directiveTransforms[p.name]
                      ) && // in compat mode, <template> tags with no special directives
                      // will be rendered as a fragment so its children must be
                      // converted into vnodes.
                      !(node.tag === "template"))))
              ) {
                return;
              }
              for (let i = 0; i < children.length; i++) {
                const child = children[i];
                if (isText$1(child) || child.type === 8) {
                  const callArgs = [];
                  if (child.type !== 2 || child.content !== " ") {
                    callArgs.push(child);
                  }
                  if (!context.ssr && getConstantType(child, context) === 0) {
                    callArgs.push(
                      1 +
                        (true
                          ? ` /* ${_vue_shared__WEBPACK_IMPORTED_MODULE_0__["PatchFlagNames"][1]} */`
                          : undefined)
                    );
                  }
                  children[i] = {
                    type: 12,
                    content: child,
                    loc: child.loc,
                    codegenNode: createCallExpression(
                      context.helper(CREATE_TEXT),
                      callArgs
                    ),
                  };
                }
              }
            };
          }
        };

        const seen$1 = /* @__PURE__ */ new WeakSet();
        const transformOnce = (node, context) => {
          if (node.type === 1 && findDir(node, "once", true)) {
            if (seen$1.has(node) || context.inVOnce || context.inSSR) {
              return;
            }
            seen$1.add(node);
            context.inVOnce = true;
            context.helper(SET_BLOCK_TRACKING);
            return () => {
              context.inVOnce = false;
              const cur = context.currentNode;
              if (cur.codegenNode) {
                cur.codegenNode = context.cache(
                  cur.codegenNode,
                  true
                  /* isVNode */
                );
              }
            };
          }
        };

        const transformModel = (dir, node, context) => {
          const { exp, arg } = dir;
          if (!exp) {
            context.onError(createCompilerError(41, dir.loc));
            return createTransformProps();
          }
          const rawExp = exp.loc.source;
          const expString = exp.type === 4 ? exp.content : rawExp;
          const bindingType = context.bindingMetadata[rawExp];
          if (bindingType === "props" || bindingType === "props-aliased") {
            context.onError(createCompilerError(44, exp.loc));
            return createTransformProps();
          }
          const maybeRef = false;
          if (
            !expString.trim() ||
            (!isMemberExpression(expString) && !maybeRef)
          ) {
            context.onError(createCompilerError(42, exp.loc));
            return createTransformProps();
          }
          const propName = arg
            ? arg
            : createSimpleExpression("modelValue", true);
          const eventName = arg
            ? isStaticExp(arg)
              ? `onUpdate:${Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_0__["camelize"]
                )(arg.content)}`
              : createCompoundExpression(['"onUpdate:" + ', arg])
            : `onUpdate:modelValue`;
          let assignmentExp;
          const eventArg = context.isTS ? `($event: any)` : `$event`;
          {
            assignmentExp = createCompoundExpression([
              `${eventArg} => ((`,
              exp,
              `) = $event)`,
            ]);
          }
          const props = [
            // modelValue: foo
            createObjectProperty(propName, dir.exp),
            // "onUpdate:modelValue": $event => (foo = $event)
            createObjectProperty(eventName, assignmentExp),
          ];
          if (dir.modifiers.length && node.tagType === 1) {
            const modifiers = dir.modifiers
              .map(
                (m) =>
                  (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`
              )
              .join(`, `);
            const modifiersKey = arg
              ? isStaticExp(arg)
                ? `${arg.content}Modifiers`
                : createCompoundExpression([arg, ' + "Modifiers"'])
              : `modelModifiers`;
            props.push(
              createObjectProperty(
                modifiersKey,
                createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2)
              )
            );
          }
          return createTransformProps(props);
        };
        function createTransformProps(props = []) {
          return { props };
        }

        const validDivisionCharRE = /[\w).+\-_$\]]/;
        const transformFilter = (node, context) => {
          if (!isCompatEnabled("COMPILER_FILTERS", context)) {
            return;
          }
          if (node.type === 5) {
            rewriteFilter(node.content, context);
          }
          if (node.type === 1) {
            node.props.forEach((prop) => {
              if (prop.type === 7 && prop.name !== "for" && prop.exp) {
                rewriteFilter(prop.exp, context);
              }
            });
          }
        };
        function rewriteFilter(node, context) {
          if (node.type === 4) {
            parseFilter(node, context);
          } else {
            for (let i = 0; i < node.children.length; i++) {
              const child = node.children[i];
              if (typeof child !== "object") continue;
              if (child.type === 4) {
                parseFilter(child, context);
              } else if (child.type === 8) {
                rewriteFilter(node, context);
              } else if (child.type === 5) {
                rewriteFilter(child.content, context);
              }
            }
          }
        }
        function parseFilter(node, context) {
          const exp = node.content;
          let inSingle = false;
          let inDouble = false;
          let inTemplateString = false;
          let inRegex = false;
          let curly = 0;
          let square = 0;
          let paren = 0;
          let lastFilterIndex = 0;
          let c,
            prev,
            i,
            expression,
            filters = [];
          for (i = 0; i < exp.length; i++) {
            prev = c;
            c = exp.charCodeAt(i);
            if (inSingle) {
              if (c === 39 && prev !== 92) inSingle = false;
            } else if (inDouble) {
              if (c === 34 && prev !== 92) inDouble = false;
            } else if (inTemplateString) {
              if (c === 96 && prev !== 92) inTemplateString = false;
            } else if (inRegex) {
              if (c === 47 && prev !== 92) inRegex = false;
            } else if (
              c === 124 && // pipe
              exp.charCodeAt(i + 1) !== 124 &&
              exp.charCodeAt(i - 1) !== 124 &&
              !curly &&
              !square &&
              !paren
            ) {
              if (expression === void 0) {
                lastFilterIndex = i + 1;
                expression = exp.slice(0, i).trim();
              } else {
                pushFilter();
              }
            } else {
              switch (c) {
                case 34:
                  inDouble = true;
                  break;
                case 39:
                  inSingle = true;
                  break;
                case 96:
                  inTemplateString = true;
                  break;
                case 40:
                  paren++;
                  break;
                case 41:
                  paren--;
                  break;
                case 91:
                  square++;
                  break;
                case 93:
                  square--;
                  break;
                case 123:
                  curly++;
                  break;
                case 125:
                  curly--;
                  break;
              }
              if (c === 47) {
                let j = i - 1;
                let p;
                for (; j >= 0; j--) {
                  p = exp.charAt(j);
                  if (p !== " ") break;
                }
                if (!p || !validDivisionCharRE.test(p)) {
                  inRegex = true;
                }
              }
            }
          }
          if (expression === void 0) {
            expression = exp.slice(0, i).trim();
          } else if (lastFilterIndex !== 0) {
            pushFilter();
          }
          function pushFilter() {
            filters.push(exp.slice(lastFilterIndex, i).trim());
            lastFilterIndex = i + 1;
          }
          if (filters.length) {
            true && warnDeprecation("COMPILER_FILTERS", context, node.loc);
            for (i = 0; i < filters.length; i++) {
              expression = wrapFilter(expression, filters[i], context);
            }
            node.content = expression;
          }
        }
        function wrapFilter(exp, filter, context) {
          context.helper(RESOLVE_FILTER);
          const i = filter.indexOf("(");
          if (i < 0) {
            context.filters.add(filter);
            return `${toValidAssetId(filter, "filter")}(${exp})`;
          } else {
            const name = filter.slice(0, i);
            const args = filter.slice(i + 1);
            context.filters.add(name);
            return `${toValidAssetId(name, "filter")}(${exp}${
              args !== ")" ? "," + args : args
            }`;
          }
        }

        const seen = /* @__PURE__ */ new WeakSet();
        const transformMemo = (node, context) => {
          if (node.type === 1) {
            const dir = findDir(node, "memo");
            if (!dir || seen.has(node)) {
              return;
            }
            seen.add(node);
            return () => {
              const codegenNode =
                node.codegenNode || context.currentNode.codegenNode;
              if (codegenNode && codegenNode.type === 13) {
                if (node.tagType !== 1) {
                  convertToBlock(codegenNode, context);
                }
                node.codegenNode = createCallExpression(
                  context.helper(WITH_MEMO),
                  [
                    dir.exp,
                    createFunctionExpression(void 0, codegenNode),
                    `_cache`,
                    String(context.cached++),
                  ]
                );
              }
            };
          }
        };

        function getBaseTransformPreset(prefixIdentifiers) {
          return [
            [
              transformOnce,
              transformIf,
              transformMemo,
              transformFor,
              ...[transformFilter],
              ...(true ? [transformExpression] : undefined),
              transformSlotOutlet,
              transformElement,
              trackSlotScopes,
              transformText,
            ],
            {
              on: transformOn,
              bind: transformBind,
              model: transformModel,
            },
          ];
        }
        function baseCompile(source, options = {}) {
          const onError = options.onError || defaultOnError;
          const isModuleMode = options.mode === "module";
          {
            if (options.prefixIdentifiers === true) {
              onError(createCompilerError(47));
            } else if (isModuleMode) {
              onError(createCompilerError(48));
            }
          }
          const prefixIdentifiers = false;
          if (options.cacheHandlers) {
            onError(createCompilerError(49));
          }
          if (options.scopeId && !isModuleMode) {
            onError(createCompilerError(50));
          }
          const resolvedOptions = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_0__["extend"]
          )({}, options, {
            prefixIdentifiers,
          });
          const ast = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isString"]
          )(source)
            ? baseParse(source, resolvedOptions)
            : source;
          const [nodeTransforms, directiveTransforms] =
            getBaseTransformPreset();
          transform(
            ast,
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["extend"])(
              {},
              resolvedOptions,
              {
                nodeTransforms: [
                  ...nodeTransforms,
                  ...(options.nodeTransforms || []),
                  // user transforms
                ],
                directiveTransforms: Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_0__["extend"]
                )(
                  {},
                  directiveTransforms,
                  options.directiveTransforms || {}
                  // user transforms
                ),
              }
            )
          );
          return generate(ast, resolvedOptions);
        }

        const BindingTypes = {
          DATA: "data",
          PROPS: "props",
          PROPS_ALIASED: "props-aliased",
          SETUP_LET: "setup-let",
          SETUP_CONST: "setup-const",
          SETUP_REACTIVE_CONST: "setup-reactive-const",
          SETUP_MAYBE_REF: "setup-maybe-ref",
          SETUP_REF: "setup-ref",
          OPTIONS: "options",
          LITERAL_CONST: "literal-const",
        };

        const noopDirectiveTransform = () => ({ props: [] });

        /***/
      },

    /***/ "./node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js":
      /*!*************************************************************************!*\
  !*** ./node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js ***!
  \*************************************************************************/
      /*! exports provided: generateCodeFrame, BASE_TRANSITION, BindingTypes, CAMELIZE, CAPITALIZE, CREATE_BLOCK, CREATE_COMMENT, CREATE_ELEMENT_BLOCK, CREATE_ELEMENT_VNODE, CREATE_SLOTS, CREATE_STATIC, CREATE_TEXT, CREATE_VNODE, CompilerDeprecationTypes, ConstantTypes, ElementTypes, ErrorCodes, FRAGMENT, GUARD_REACTIVE_PROPS, IS_MEMO_SAME, IS_REF, KEEP_ALIVE, MERGE_PROPS, NORMALIZE_CLASS, NORMALIZE_PROPS, NORMALIZE_STYLE, Namespaces, NodeTypes, OPEN_BLOCK, POP_SCOPE_ID, PUSH_SCOPE_ID, RENDER_LIST, RENDER_SLOT, RESOLVE_COMPONENT, RESOLVE_DIRECTIVE, RESOLVE_DYNAMIC_COMPONENT, RESOLVE_FILTER, SET_BLOCK_TRACKING, SUSPENSE, TELEPORT, TO_DISPLAY_STRING, TO_HANDLERS, TO_HANDLER_KEY, TS_NODE_TYPES, UNREF, WITH_CTX, WITH_DIRECTIVES, WITH_MEMO, advancePositionWithClone, advancePositionWithMutation, assert, baseCompile, baseParse, buildDirectiveArgs, buildProps, buildSlots, checkCompatEnabled, convertToBlock, createArrayExpression, createAssignmentExpression, createBlockStatement, createCacheExpression, createCallExpression, createCompilerError, createCompoundExpression, createConditionalExpression, createForLoopParams, createFunctionExpression, createIfStatement, createInterpolation, createObjectExpression, createObjectProperty, createReturnStatement, createRoot, createSequenceExpression, createSimpleExpression, createStructuralDirectiveTransform, createTemplateLiteral, createTransformContext, createVNodeCall, errorMessages, extractIdentifiers, findDir, findProp, forAliasRE, generate, getBaseTransformPreset, getConstantType, getMemoedVNodeCall, getVNodeBlockHelper, getVNodeHelper, hasDynamicKeyVBind, hasScopeRef, helperNameMap, injectProp, isCoreComponent, isFunctionType, isInDestructureAssignment, isInNewExpression, isMemberExpression, isMemberExpressionBrowser, isMemberExpressionNode, isReferencedIdentifier, isSimpleIdentifier, isSlotOutlet, isStaticArgOf, isStaticExp, isStaticProperty, isStaticPropertyKey, isTemplateNode, isText, isVSlot, locStub, noopDirectiveTransform, processExpression, processFor, processIf, processSlotOutlet, registerRuntimeHelpers, resolveComponentType, stringifyExpression, toValidAssetId, trackSlotScopes, trackVForSlotScopes, transform, transformBind, transformElement, transformExpression, transformModel, transformOn, traverseNode, unwrapTSNode, walkBlockDeclarations, walkFunctionParams, walkIdentifiers, warnDeprecation, DOMDirectiveTransforms, DOMErrorCodes, DOMErrorMessages, DOMNodeTransforms, TRANSITION, TRANSITION_GROUP, V_MODEL_CHECKBOX, V_MODEL_DYNAMIC, V_MODEL_RADIO, V_MODEL_SELECT, V_MODEL_TEXT, V_ON_WITH_KEYS, V_ON_WITH_MODIFIERS, V_SHOW, compile, createDOMCompilerError, parse, parserOptions, transformStyle */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "DOMDirectiveTransforms",
          function () {
            return DOMDirectiveTransforms;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "DOMErrorCodes",
          function () {
            return DOMErrorCodes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "DOMErrorMessages",
          function () {
            return DOMErrorMessages;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "DOMNodeTransforms",
          function () {
            return DOMNodeTransforms;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TRANSITION",
          function () {
            return TRANSITION;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TRANSITION_GROUP",
          function () {
            return TRANSITION_GROUP;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "V_MODEL_CHECKBOX",
          function () {
            return V_MODEL_CHECKBOX;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "V_MODEL_DYNAMIC",
          function () {
            return V_MODEL_DYNAMIC;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "V_MODEL_RADIO",
          function () {
            return V_MODEL_RADIO;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "V_MODEL_SELECT",
          function () {
            return V_MODEL_SELECT;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "V_MODEL_TEXT",
          function () {
            return V_MODEL_TEXT;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "V_ON_WITH_KEYS",
          function () {
            return V_ON_WITH_KEYS;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "V_ON_WITH_MODIFIERS",
          function () {
            return V_ON_WITH_MODIFIERS;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "V_SHOW",
          function () {
            return V_SHOW;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "compile",
          function () {
            return compile;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createDOMCompilerError",
          function () {
            return createDOMCompilerError;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "parse",
          function () {
            return parse;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "parserOptions",
          function () {
            return parserOptions;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "transformStyle",
          function () {
            return transformStyle;
          }
        );
        /* harmony import */ var _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @vue/compiler-core */ "./node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js"
          );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "generateCodeFrame",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "generateCodeFrame"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "BASE_TRANSITION",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "BASE_TRANSITION"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "BindingTypes",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "BindingTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CAMELIZE",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["CAMELIZE"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CAPITALIZE",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "CAPITALIZE"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_BLOCK",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "CREATE_BLOCK"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_COMMENT",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "CREATE_COMMENT"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_ELEMENT_BLOCK",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "CREATE_ELEMENT_BLOCK"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_ELEMENT_VNODE",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "CREATE_ELEMENT_VNODE"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_SLOTS",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "CREATE_SLOTS"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_STATIC",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "CREATE_STATIC"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_TEXT",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "CREATE_TEXT"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CREATE_VNODE",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "CREATE_VNODE"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CompilerDeprecationTypes",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "CompilerDeprecationTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ConstantTypes",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "ConstantTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ElementTypes",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "ElementTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ErrorCodes",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "ErrorCodes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "FRAGMENT",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["FRAGMENT"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "GUARD_REACTIVE_PROPS",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "GUARD_REACTIVE_PROPS"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "IS_MEMO_SAME",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "IS_MEMO_SAME"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "IS_REF",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["IS_REF"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "KEEP_ALIVE",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "KEEP_ALIVE"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "MERGE_PROPS",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "MERGE_PROPS"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "NORMALIZE_CLASS",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "NORMALIZE_CLASS"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "NORMALIZE_PROPS",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "NORMALIZE_PROPS"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "NORMALIZE_STYLE",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "NORMALIZE_STYLE"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Namespaces",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "Namespaces"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "NodeTypes",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["NodeTypes"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "OPEN_BLOCK",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "OPEN_BLOCK"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "POP_SCOPE_ID",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "POP_SCOPE_ID"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "PUSH_SCOPE_ID",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "PUSH_SCOPE_ID"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "RENDER_LIST",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "RENDER_LIST"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "RENDER_SLOT",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "RENDER_SLOT"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "RESOLVE_COMPONENT",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "RESOLVE_COMPONENT"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "RESOLVE_DIRECTIVE",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "RESOLVE_DIRECTIVE"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "RESOLVE_DYNAMIC_COMPONENT",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "RESOLVE_DYNAMIC_COMPONENT"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "RESOLVE_FILTER",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "RESOLVE_FILTER"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "SET_BLOCK_TRACKING",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "SET_BLOCK_TRACKING"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "SUSPENSE",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["SUSPENSE"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TELEPORT",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["TELEPORT"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TO_DISPLAY_STRING",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "TO_DISPLAY_STRING"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TO_HANDLERS",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "TO_HANDLERS"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TO_HANDLER_KEY",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "TO_HANDLER_KEY"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TS_NODE_TYPES",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "TS_NODE_TYPES"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "UNREF",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["UNREF"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "WITH_CTX",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["WITH_CTX"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "WITH_DIRECTIVES",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "WITH_DIRECTIVES"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "WITH_MEMO",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["WITH_MEMO"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "advancePositionWithClone",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "advancePositionWithClone"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "advancePositionWithMutation",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "advancePositionWithMutation"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "assert",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["assert"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "baseCompile",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "baseCompile"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "baseParse",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["baseParse"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "buildDirectiveArgs",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "buildDirectiveArgs"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "buildProps",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "buildProps"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "buildSlots",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "buildSlots"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "checkCompatEnabled",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "checkCompatEnabled"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "convertToBlock",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "convertToBlock"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createArrayExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createArrayExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createAssignmentExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createAssignmentExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createBlockStatement",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createBlockStatement"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createCacheExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createCacheExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createCallExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createCallExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createCompilerError",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createCompilerError"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createCompoundExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createCompoundExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createConditionalExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createConditionalExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createForLoopParams",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createForLoopParams"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createFunctionExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createFunctionExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createIfStatement",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createIfStatement"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createInterpolation",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createInterpolation"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createObjectExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createObjectExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createObjectProperty",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createObjectProperty"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createReturnStatement",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createReturnStatement"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createRoot",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createRoot"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createSequenceExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createSequenceExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createSimpleExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createSimpleExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createStructuralDirectiveTransform",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createStructuralDirectiveTransform"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createTemplateLiteral",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createTemplateLiteral"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createTransformContext",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createTransformContext"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createVNodeCall",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createVNodeCall"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "errorMessages",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "errorMessages"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "extractIdentifiers",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "extractIdentifiers"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "findDir",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["findDir"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "findProp",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["findProp"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "forAliasRE",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "forAliasRE"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "generate",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["generate"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getBaseTransformPreset",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "getBaseTransformPreset"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getConstantType",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "getConstantType"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getMemoedVNodeCall",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "getMemoedVNodeCall"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getVNodeBlockHelper",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "getVNodeBlockHelper"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getVNodeHelper",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "getVNodeHelper"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "hasDynamicKeyVBind",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "hasDynamicKeyVBind"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "hasScopeRef",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "hasScopeRef"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "helperNameMap",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "helperNameMap"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "injectProp",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "injectProp"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isCoreComponent",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isCoreComponent"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isFunctionType",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isFunctionType"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isInDestructureAssignment",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isInDestructureAssignment"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isInNewExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isInNewExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isMemberExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isMemberExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isMemberExpressionBrowser",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isMemberExpressionBrowser"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isMemberExpressionNode",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isMemberExpressionNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isReferencedIdentifier",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isReferencedIdentifier"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isSimpleIdentifier",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isSimpleIdentifier"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isSlotOutlet",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isSlotOutlet"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isStaticArgOf",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isStaticArgOf"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isStaticExp",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isStaticExp"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isStaticProperty",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isStaticProperty"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isStaticPropertyKey",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isStaticPropertyKey"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isTemplateNode",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "isTemplateNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isText",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["isText"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isVSlot",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["isVSlot"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "locStub",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["locStub"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "noopDirectiveTransform",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "noopDirectiveTransform"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "processExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "processExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "processFor",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "processFor"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "processIf",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["processIf"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "processSlotOutlet",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "processSlotOutlet"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "registerRuntimeHelpers",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "registerRuntimeHelpers"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveComponentType",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "resolveComponentType"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "stringifyExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "stringifyExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toValidAssetId",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "toValidAssetId"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "trackSlotScopes",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "trackSlotScopes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "trackVForSlotScopes",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "trackVForSlotScopes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "transform",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["transform"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "transformBind",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "transformBind"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "transformElement",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "transformElement"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "transformExpression",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "transformExpression"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "transformModel",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "transformModel"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "transformOn",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "transformOn"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "traverseNode",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "traverseNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "unwrapTSNode",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "unwrapTSNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "walkBlockDeclarations",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "walkBlockDeclarations"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "walkFunctionParams",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "walkFunctionParams"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "walkIdentifiers",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "walkIdentifiers"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "warnDeprecation",
          function () {
            return _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "warnDeprecation"
            ];
          }
        );

        /* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! @vue/shared */ "./node_modules/@vue/shared/dist/shared.esm-bundler.js"
          );
        /**
         * @vue/compiler-dom v3.4.27
         * (c) 2018-present Yuxi (Evan) You and Vue contributors
         * @license MIT
         **/

        const V_MODEL_RADIO = Symbol(true ? `vModelRadio` : undefined);
        const V_MODEL_CHECKBOX = Symbol(true ? `vModelCheckbox` : undefined);
        const V_MODEL_TEXT = Symbol(true ? `vModelText` : undefined);
        const V_MODEL_SELECT = Symbol(true ? `vModelSelect` : undefined);
        const V_MODEL_DYNAMIC = Symbol(true ? `vModelDynamic` : undefined);
        const V_ON_WITH_MODIFIERS = Symbol(
          true ? `vOnModifiersGuard` : undefined
        );
        const V_ON_WITH_KEYS = Symbol(true ? `vOnKeysGuard` : undefined);
        const V_SHOW = Symbol(true ? `vShow` : undefined);
        const TRANSITION = Symbol(true ? `Transition` : undefined);
        const TRANSITION_GROUP = Symbol(true ? `TransitionGroup` : undefined);
        Object(
          _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
            "registerRuntimeHelpers"
          ]
        )({
          [V_MODEL_RADIO]: `vModelRadio`,
          [V_MODEL_CHECKBOX]: `vModelCheckbox`,
          [V_MODEL_TEXT]: `vModelText`,
          [V_MODEL_SELECT]: `vModelSelect`,
          [V_MODEL_DYNAMIC]: `vModelDynamic`,
          [V_ON_WITH_MODIFIERS]: `withModifiers`,
          [V_ON_WITH_KEYS]: `withKeys`,
          [V_SHOW]: `vShow`,
          [TRANSITION]: `Transition`,
          [TRANSITION_GROUP]: `TransitionGroup`,
        });

        let decoder;
        function decodeHtmlBrowser(raw, asAttr = false) {
          if (!decoder) {
            decoder = document.createElement("div");
          }
          if (asAttr) {
            decoder.innerHTML = `<div foo="${raw.replace(/"/g, "&quot;")}">`;
            return decoder.children[0].getAttribute("foo");
          } else {
            decoder.innerHTML = raw;
            return decoder.textContent;
          }
        }

        const parserOptions = {
          parseMode: "html",
          isVoidTag: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isVoidTag"],
          isNativeTag: (tag) =>
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isHTMLTag"])(
              tag
            ) ||
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isSVGTag"])(tag) ||
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isMathMLTag"])(
              tag
            ),
          isPreTag: (tag) => tag === "pre",
          decodeEntities: decodeHtmlBrowser,
          isBuiltInComponent: (tag) => {
            if (tag === "Transition" || tag === "transition") {
              return TRANSITION;
            } else if (
              tag === "TransitionGroup" ||
              tag === "transition-group"
            ) {
              return TRANSITION_GROUP;
            }
          },
          // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher
          getNamespace(tag, parent, rootNamespace) {
            let ns = parent ? parent.ns : rootNamespace;
            if (parent && ns === 2) {
              if (parent.tag === "annotation-xml") {
                if (tag === "svg") {
                  return 1;
                }
                if (
                  parent.props.some(
                    (a) =>
                      a.type === 6 &&
                      a.name === "encoding" &&
                      a.value != null &&
                      (a.value.content === "text/html" ||
                        a.value.content === "application/xhtml+xml")
                  )
                ) {
                  ns = 0;
                }
              } else if (
                /^m(?:[ions]|text)$/.test(parent.tag) &&
                tag !== "mglyph" &&
                tag !== "malignmark"
              ) {
                ns = 0;
              }
            } else if (parent && ns === 1) {
              if (
                parent.tag === "foreignObject" ||
                parent.tag === "desc" ||
                parent.tag === "title"
              ) {
                ns = 0;
              }
            }
            if (ns === 0) {
              if (tag === "svg") {
                return 1;
              }
              if (tag === "math") {
                return 2;
              }
            }
            return ns;
          },
        };

        const transformStyle = (node) => {
          if (node.type === 1) {
            node.props.forEach((p, i) => {
              if (p.type === 6 && p.name === "style" && p.value) {
                node.props[i] = {
                  type: 7,
                  name: `bind`,
                  arg: Object(
                    _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                      "createSimpleExpression"
                    ]
                  )(`style`, true, p.loc),
                  exp: parseInlineCSS(p.value.content, p.loc),
                  modifiers: [],
                  loc: p.loc,
                };
              }
            });
          }
        };
        const parseInlineCSS = (cssText, loc) => {
          const normalized = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["parseStringStyle"]
          )(cssText);
          return Object(
            _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createSimpleExpression"
            ]
          )(JSON.stringify(normalized), false, loc, 3);
        };

        function createDOMCompilerError(code, loc) {
          return Object(
            _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "createCompilerError"
            ]
          )(code, loc, true ? DOMErrorMessages : undefined);
        }
        const DOMErrorCodes = {
          X_V_HTML_NO_EXPRESSION: 53,
          53: "X_V_HTML_NO_EXPRESSION",
          X_V_HTML_WITH_CHILDREN: 54,
          54: "X_V_HTML_WITH_CHILDREN",
          X_V_TEXT_NO_EXPRESSION: 55,
          55: "X_V_TEXT_NO_EXPRESSION",
          X_V_TEXT_WITH_CHILDREN: 56,
          56: "X_V_TEXT_WITH_CHILDREN",
          X_V_MODEL_ON_INVALID_ELEMENT: 57,
          57: "X_V_MODEL_ON_INVALID_ELEMENT",
          X_V_MODEL_ARG_ON_ELEMENT: 58,
          58: "X_V_MODEL_ARG_ON_ELEMENT",
          X_V_MODEL_ON_FILE_INPUT_ELEMENT: 59,
          59: "X_V_MODEL_ON_FILE_INPUT_ELEMENT",
          X_V_MODEL_UNNECESSARY_VALUE: 60,
          60: "X_V_MODEL_UNNECESSARY_VALUE",
          X_V_SHOW_NO_EXPRESSION: 61,
          61: "X_V_SHOW_NO_EXPRESSION",
          X_TRANSITION_INVALID_CHILDREN: 62,
          62: "X_TRANSITION_INVALID_CHILDREN",
          X_IGNORED_SIDE_EFFECT_TAG: 63,
          63: "X_IGNORED_SIDE_EFFECT_TAG",
          __EXTEND_POINT__: 64,
          64: "__EXTEND_POINT__",
        };
        const DOMErrorMessages = {
          [53]: `v-html is missing expression.`,
          [54]: `v-html will override element children.`,
          [55]: `v-text is missing expression.`,
          [56]: `v-text will override element children.`,
          [57]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
          [58]: `v-model argument is not supported on plain elements.`,
          [59]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
          [60]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
          [61]: `v-show is missing expression.`,
          [62]: `<Transition> expects exactly one child element or component.`,
          [63]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`,
        };

        const transformVHtml = (dir, node, context) => {
          const { exp, loc } = dir;
          if (!exp) {
            context.onError(createDOMCompilerError(53, loc));
          }
          if (node.children.length) {
            context.onError(createDOMCompilerError(54, loc));
            node.children.length = 0;
          }
          return {
            props: [
              Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                  "createObjectProperty"
                ]
              )(
                Object(
                  _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                    "createSimpleExpression"
                  ]
                )(`innerHTML`, true, loc),
                exp ||
                  Object(
                    _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                      "createSimpleExpression"
                    ]
                  )("", true)
              ),
            ],
          };
        };

        const transformVText = (dir, node, context) => {
          const { exp, loc } = dir;
          if (!exp) {
            context.onError(createDOMCompilerError(55, loc));
          }
          if (node.children.length) {
            context.onError(createDOMCompilerError(56, loc));
            node.children.length = 0;
          }
          return {
            props: [
              Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                  "createObjectProperty"
                ]
              )(
                Object(
                  _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                    "createSimpleExpression"
                  ]
                )(`textContent`, true),
                exp
                  ? Object(
                      _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                        "getConstantType"
                      ]
                    )(exp, context) > 0
                    ? exp
                    : Object(
                        _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                          "createCallExpression"
                        ]
                      )(
                        context.helperString(
                          _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                            "TO_DISPLAY_STRING"
                          ]
                        ),
                        [exp],
                        loc
                      )
                  : Object(
                      _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                        "createSimpleExpression"
                      ]
                    )("", true)
              ),
            ],
          };
        };

        const transformModel = (dir, node, context) => {
          const baseResult = Object(
            _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["transformModel"]
          )(dir, node, context);
          if (!baseResult.props.length || node.tagType === 1) {
            return baseResult;
          }
          if (dir.arg) {
            context.onError(createDOMCompilerError(58, dir.arg.loc));
          }
          function checkDuplicatedValue() {
            const value = Object(
              _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["findDir"]
            )(node, "bind");
            if (
              value &&
              Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["isStaticArgOf"]
              )(value.arg, "value")
            ) {
              context.onError(createDOMCompilerError(60, value.loc));
            }
          }
          const { tag } = node;
          const isCustomElement = context.isCustomElement(tag);
          if (
            tag === "input" ||
            tag === "textarea" ||
            tag === "select" ||
            isCustomElement
          ) {
            let directiveToUse = V_MODEL_TEXT;
            let isInvalidType = false;
            if (tag === "input" || isCustomElement) {
              const type = Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["findProp"]
              )(node, `type`);
              if (type) {
                if (type.type === 7) {
                  directiveToUse = V_MODEL_DYNAMIC;
                } else if (type.value) {
                  switch (type.value.content) {
                    case "radio":
                      directiveToUse = V_MODEL_RADIO;
                      break;
                    case "checkbox":
                      directiveToUse = V_MODEL_CHECKBOX;
                      break;
                    case "file":
                      isInvalidType = true;
                      context.onError(createDOMCompilerError(59, dir.loc));
                      break;
                    default:
                      true && checkDuplicatedValue();
                      break;
                  }
                }
              } else if (
                Object(
                  _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                    "hasDynamicKeyVBind"
                  ]
                )(node)
              ) {
                directiveToUse = V_MODEL_DYNAMIC;
              } else {
                true && checkDuplicatedValue();
              }
            } else if (tag === "select") {
              directiveToUse = V_MODEL_SELECT;
            } else {
              true && checkDuplicatedValue();
            }
            if (!isInvalidType) {
              baseResult.needRuntime = context.helper(directiveToUse);
            }
          } else {
            context.onError(createDOMCompilerError(57, dir.loc));
          }
          baseResult.props = baseResult.props.filter(
            (p) => !(p.key.type === 4 && p.key.content === "modelValue")
          );
          return baseResult;
        };

        const isEventOptionModifier = /* @__PURE__ */ Object(
          _vue_shared__WEBPACK_IMPORTED_MODULE_1__["makeMap"]
        )(`passive,once,capture`);
        const isNonKeyModifier = /* @__PURE__ */ Object(
          _vue_shared__WEBPACK_IMPORTED_MODULE_1__["makeMap"]
        )(
          // event propagation management
          `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`
        );
        const maybeKeyModifier = /* @__PURE__ */ Object(
          _vue_shared__WEBPACK_IMPORTED_MODULE_1__["makeMap"]
        )("left,right");
        const isKeyboardEvent = /* @__PURE__ */ Object(
          _vue_shared__WEBPACK_IMPORTED_MODULE_1__["makeMap"]
        )(`onkeyup,onkeydown,onkeypress`, true);
        const resolveModifiers = (key, modifiers, context, loc) => {
          const keyModifiers = [];
          const nonKeyModifiers = [];
          const eventOptionModifiers = [];
          for (let i = 0; i < modifiers.length; i++) {
            const modifier = modifiers[i];
            if (
              modifier === "native" &&
              Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                  "checkCompatEnabled"
                ]
              )("COMPILER_V_ON_NATIVE", context, loc)
            ) {
              eventOptionModifiers.push(modifier);
            } else if (isEventOptionModifier(modifier)) {
              eventOptionModifiers.push(modifier);
            } else {
              if (maybeKeyModifier(modifier)) {
                if (
                  Object(
                    _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                      "isStaticExp"
                    ]
                  )(key)
                ) {
                  if (isKeyboardEvent(key.content)) {
                    keyModifiers.push(modifier);
                  } else {
                    nonKeyModifiers.push(modifier);
                  }
                } else {
                  keyModifiers.push(modifier);
                  nonKeyModifiers.push(modifier);
                }
              } else {
                if (isNonKeyModifier(modifier)) {
                  nonKeyModifiers.push(modifier);
                } else {
                  keyModifiers.push(modifier);
                }
              }
            }
          }
          return {
            keyModifiers,
            nonKeyModifiers,
            eventOptionModifiers,
          };
        };
        const transformClick = (key, event) => {
          const isStaticClick =
            Object(
              _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["isStaticExp"]
            )(key) && key.content.toLowerCase() === "onclick";
          return isStaticClick
            ? Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                  "createSimpleExpression"
                ]
              )(event, true)
            : key.type !== 4
            ? Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                  "createCompoundExpression"
                ]
              )([`(`, key, `) === "onClick" ? "${event}" : (`, key, `)`])
            : key;
        };
        const transformOn = (dir, node, context) => {
          return Object(
            _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["transformOn"]
          )(dir, node, context, (baseResult) => {
            const { modifiers } = dir;
            if (!modifiers.length) return baseResult;
            let { key, value: handlerExp } = baseResult.props[0];
            const { keyModifiers, nonKeyModifiers, eventOptionModifiers } =
              resolveModifiers(key, modifiers, context, dir.loc);
            if (nonKeyModifiers.includes("right")) {
              key = transformClick(key, `onContextmenu`);
            }
            if (nonKeyModifiers.includes("middle")) {
              key = transformClick(key, `onMouseup`);
            }
            if (nonKeyModifiers.length) {
              handlerExp = Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                  "createCallExpression"
                ]
              )(context.helper(V_ON_WITH_MODIFIERS), [
                handlerExp,
                JSON.stringify(nonKeyModifiers),
              ]);
            }
            if (
              keyModifiers.length && // if event name is dynamic, always wrap with keys guard
              (!Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["isStaticExp"]
              )(key) ||
                isKeyboardEvent(key.content))
            ) {
              handlerExp = Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                  "createCallExpression"
                ]
              )(context.helper(V_ON_WITH_KEYS), [
                handlerExp,
                JSON.stringify(keyModifiers),
              ]);
            }
            if (eventOptionModifiers.length) {
              const modifierPostfix = eventOptionModifiers
                .map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["capitalize"])
                .join("");
              key = Object(
                _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["isStaticExp"]
              )(key)
                ? Object(
                    _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                      "createSimpleExpression"
                    ]
                  )(`${key.content}${modifierPostfix}`, true)
                : Object(
                    _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                      "createCompoundExpression"
                    ]
                  )([`(`, key, `) + "${modifierPostfix}"`]);
            }
            return {
              props: [
                Object(
                  _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
                    "createObjectProperty"
                  ]
                )(key, handlerExp),
              ],
            };
          });
        };

        const transformShow = (dir, node, context) => {
          const { exp, loc } = dir;
          if (!exp) {
            context.onError(createDOMCompilerError(61, loc));
          }
          return {
            props: [],
            needRuntime: context.helper(V_SHOW),
          };
        };

        const transformTransition = (node, context) => {
          if (node.type === 1 && node.tagType === 1) {
            const component = context.isBuiltInComponent(node.tag);
            if (component === TRANSITION) {
              return () => {
                if (!node.children.length) {
                  return;
                }
                if (hasMultipleChildren(node)) {
                  context.onError(
                    createDOMCompilerError(62, {
                      start: node.children[0].loc.start,
                      end: node.children[node.children.length - 1].loc.end,
                      source: "",
                    })
                  );
                }
                const child = node.children[0];
                if (child.type === 1) {
                  for (const p of child.props) {
                    if (p.type === 7 && p.name === "show") {
                      node.props.push({
                        type: 6,
                        name: "persisted",
                        nameLoc: node.loc,
                        value: void 0,
                        loc: node.loc,
                      });
                    }
                  }
                }
              };
            }
          }
        };
        function hasMultipleChildren(node) {
          const children = (node.children = node.children.filter(
            (c) => c.type !== 3 && !(c.type === 2 && !c.content.trim())
          ));
          const child = children[0];
          return (
            children.length !== 1 ||
            child.type === 11 ||
            (child.type === 9 && child.branches.some(hasMultipleChildren))
          );
        }

        const ignoreSideEffectTags = (node, context) => {
          if (
            node.type === 1 &&
            node.tagType === 0 &&
            (node.tag === "script" || node.tag === "style")
          ) {
            true && context.onError(createDOMCompilerError(63, node.loc));
            context.removeNode();
          }
        };

        const DOMNodeTransforms = [
          transformStyle,
          ...(true ? [transformTransition] : undefined),
        ];
        const DOMDirectiveTransforms = {
          cloak:
            _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__[
              "noopDirectiveTransform"
            ],
          html: transformVHtml,
          text: transformVText,
          model: transformModel,
          // override compiler-core
          on: transformOn,
          // override compiler-core
          show: transformShow,
        };
        function compile(src, options = {}) {
          return Object(
            _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["baseCompile"]
          )(
            src,
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
              {},
              parserOptions,
              options,
              {
                nodeTransforms: [
                  // ignore <script> and <tag>
                  // this is not put inside DOMNodeTransforms because that list is used
                  // by compiler-ssr to generate vnode fallback branches
                  ignoreSideEffectTags,
                  ...DOMNodeTransforms,
                  ...(options.nodeTransforms || []),
                ],
                directiveTransforms: Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
                )(
                  {},
                  DOMDirectiveTransforms,
                  options.directiveTransforms || {}
                ),
                transformHoist: null,
              }
            )
          );
        }
        function parse(template, options = {}) {
          return Object(
            _vue_compiler_core__WEBPACK_IMPORTED_MODULE_0__["baseParse"]
          )(
            template,
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
              {},
              parserOptions,
              options
            )
          );
        }

        /***/
      },

    /***/ "./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js":
      /*!*********************************************************************!*\
  !*** ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js ***!
  \*********************************************************************/
      /*! exports provided: EffectScope, ITERATE_KEY, ReactiveEffect, ReactiveFlags, TrackOpTypes, TriggerOpTypes, computed, customRef, deferredComputed, effect, effectScope, enableTracking, getCurrentScope, isProxy, isReactive, isReadonly, isRef, isShallow, markRaw, onScopeDispose, pauseScheduling, pauseTracking, proxyRefs, reactive, readonly, ref, resetScheduling, resetTracking, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, toRef, toRefs, toValue, track, trigger, triggerRef, unref */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "EffectScope",
          function () {
            return EffectScope;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ITERATE_KEY",
          function () {
            return ITERATE_KEY;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ReactiveEffect",
          function () {
            return ReactiveEffect;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ReactiveFlags",
          function () {
            return ReactiveFlags;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TrackOpTypes",
          function () {
            return TrackOpTypes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TriggerOpTypes",
          function () {
            return TriggerOpTypes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "computed",
          function () {
            return computed;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "customRef",
          function () {
            return customRef;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "deferredComputed",
          function () {
            return deferredComputed;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "effect",
          function () {
            return effect;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "effectScope",
          function () {
            return effectScope;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "enableTracking",
          function () {
            return enableTracking;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getCurrentScope",
          function () {
            return getCurrentScope;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isProxy",
          function () {
            return isProxy;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isReactive",
          function () {
            return isReactive;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isReadonly",
          function () {
            return isReadonly;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isRef",
          function () {
            return isRef;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isShallow",
          function () {
            return isShallow;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "markRaw",
          function () {
            return markRaw;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onScopeDispose",
          function () {
            return onScopeDispose;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "pauseScheduling",
          function () {
            return pauseScheduling;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "pauseTracking",
          function () {
            return pauseTracking;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "proxyRefs",
          function () {
            return proxyRefs;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "reactive",
          function () {
            return reactive;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "readonly",
          function () {
            return readonly;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ref",
          function () {
            return ref;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "resetScheduling",
          function () {
            return resetScheduling;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "resetTracking",
          function () {
            return resetTracking;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowReactive",
          function () {
            return shallowReactive;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowReadonly",
          function () {
            return shallowReadonly;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowRef",
          function () {
            return shallowRef;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "stop",
          function () {
            return stop;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "toRaw",
          function () {
            return toRaw;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "toRef",
          function () {
            return toRef;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "toRefs",
          function () {
            return toRefs;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "toValue",
          function () {
            return toValue;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "track",
          function () {
            return track;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "trigger",
          function () {
            return trigger;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "triggerRef",
          function () {
            return triggerRef;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "unref",
          function () {
            return unref;
          }
        );
        /* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @vue/shared */ "./node_modules/@vue/shared/dist/shared.esm-bundler.js"
          );
        /**
         * @vue/reactivity v3.4.27
         * (c) 2018-present Yuxi (Evan) You and Vue contributors
         * @license MIT
         **/

        function warn(msg, ...args) {
          console.warn(`[Vue warn] ${msg}`, ...args);
        }

        let activeEffectScope;
        class EffectScope {
          constructor(detached = false) {
            this.detached = detached;
            /**
             * @internal
             */
            this._active = true;
            /**
             * @internal
             */
            this.effects = [];
            /**
             * @internal
             */
            this.cleanups = [];
            this.parent = activeEffectScope;
            if (!detached && activeEffectScope) {
              this.index =
                (
                  activeEffectScope.scopes || (activeEffectScope.scopes = [])
                ).push(this) - 1;
            }
          }
          get active() {
            return this._active;
          }
          run(fn) {
            if (this._active) {
              const currentEffectScope = activeEffectScope;
              try {
                activeEffectScope = this;
                return fn();
              } finally {
                activeEffectScope = currentEffectScope;
              }
            } else if (true) {
              warn(`cannot run an inactive effect scope.`);
            }
          }
          /**
           * This should only be called on non-detached scopes
           * @internal
           */
          on() {
            activeEffectScope = this;
          }
          /**
           * This should only be called on non-detached scopes
           * @internal
           */
          off() {
            activeEffectScope = this.parent;
          }
          stop(fromParent) {
            if (this._active) {
              let i, l;
              for (i = 0, l = this.effects.length; i < l; i++) {
                this.effects[i].stop();
              }
              for (i = 0, l = this.cleanups.length; i < l; i++) {
                this.cleanups[i]();
              }
              if (this.scopes) {
                for (i = 0, l = this.scopes.length; i < l; i++) {
                  this.scopes[i].stop(true);
                }
              }
              if (!this.detached && this.parent && !fromParent) {
                const last = this.parent.scopes.pop();
                if (last && last !== this) {
                  this.parent.scopes[this.index] = last;
                  last.index = this.index;
                }
              }
              this.parent = void 0;
              this._active = false;
            }
          }
        }
        function effectScope(detached) {
          return new EffectScope(detached);
        }
        function recordEffectScope(effect, scope = activeEffectScope) {
          if (scope && scope.active) {
            scope.effects.push(effect);
          }
        }
        function getCurrentScope() {
          return activeEffectScope;
        }
        function onScopeDispose(fn) {
          if (activeEffectScope) {
            activeEffectScope.cleanups.push(fn);
          } else if (true) {
            warn(
              `onScopeDispose() is called when there is no active effect scope to be associated with.`
            );
          }
        }

        let activeEffect;
        class ReactiveEffect {
          constructor(fn, trigger, scheduler, scope) {
            this.fn = fn;
            this.trigger = trigger;
            this.scheduler = scheduler;
            this.active = true;
            this.deps = [];
            /**
             * @internal
             */
            this._dirtyLevel = 4;
            /**
             * @internal
             */
            this._trackId = 0;
            /**
             * @internal
             */
            this._runnings = 0;
            /**
             * @internal
             */
            this._shouldSchedule = false;
            /**
             * @internal
             */
            this._depsLength = 0;
            recordEffectScope(this, scope);
          }
          get dirty() {
            if (this._dirtyLevel === 2 || this._dirtyLevel === 3) {
              this._dirtyLevel = 1;
              pauseTracking();
              for (let i = 0; i < this._depsLength; i++) {
                const dep = this.deps[i];
                if (dep.computed) {
                  triggerComputed(dep.computed);
                  if (this._dirtyLevel >= 4) {
                    break;
                  }
                }
              }
              if (this._dirtyLevel === 1) {
                this._dirtyLevel = 0;
              }
              resetTracking();
            }
            return this._dirtyLevel >= 4;
          }
          set dirty(v) {
            this._dirtyLevel = v ? 4 : 0;
          }
          run() {
            this._dirtyLevel = 0;
            if (!this.active) {
              return this.fn();
            }
            let lastShouldTrack = shouldTrack;
            let lastEffect = activeEffect;
            try {
              shouldTrack = true;
              activeEffect = this;
              this._runnings++;
              preCleanupEffect(this);
              return this.fn();
            } finally {
              postCleanupEffect(this);
              this._runnings--;
              activeEffect = lastEffect;
              shouldTrack = lastShouldTrack;
            }
          }
          stop() {
            if (this.active) {
              preCleanupEffect(this);
              postCleanupEffect(this);
              this.onStop && this.onStop();
              this.active = false;
            }
          }
        }
        function triggerComputed(computed) {
          return computed.value;
        }
        function preCleanupEffect(effect2) {
          effect2._trackId++;
          effect2._depsLength = 0;
        }
        function postCleanupEffect(effect2) {
          if (effect2.deps.length > effect2._depsLength) {
            for (let i = effect2._depsLength; i < effect2.deps.length; i++) {
              cleanupDepEffect(effect2.deps[i], effect2);
            }
            effect2.deps.length = effect2._depsLength;
          }
        }
        function cleanupDepEffect(dep, effect2) {
          const trackId = dep.get(effect2);
          if (trackId !== void 0 && effect2._trackId !== trackId) {
            dep.delete(effect2);
            if (dep.size === 0) {
              dep.cleanup();
            }
          }
        }
        function effect(fn, options) {
          if (fn.effect instanceof ReactiveEffect) {
            fn = fn.effect.fn;
          }
          const _effect = new ReactiveEffect(
            fn,
            _vue_shared__WEBPACK_IMPORTED_MODULE_0__["NOOP"],
            () => {
              if (_effect.dirty) {
                _effect.run();
              }
            }
          );
          if (options) {
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["extend"])(
              _effect,
              options
            );
            if (options.scope) recordEffectScope(_effect, options.scope);
          }
          if (!options || !options.lazy) {
            _effect.run();
          }
          const runner = _effect.run.bind(_effect);
          runner.effect = _effect;
          return runner;
        }
        function stop(runner) {
          runner.effect.stop();
        }
        let shouldTrack = true;
        let pauseScheduleStack = 0;
        const trackStack = [];
        function pauseTracking() {
          trackStack.push(shouldTrack);
          shouldTrack = false;
        }
        function enableTracking() {
          trackStack.push(shouldTrack);
          shouldTrack = true;
        }
        function resetTracking() {
          const last = trackStack.pop();
          shouldTrack = last === void 0 ? true : last;
        }
        function pauseScheduling() {
          pauseScheduleStack++;
        }
        function resetScheduling() {
          pauseScheduleStack--;
          while (!pauseScheduleStack && queueEffectSchedulers.length) {
            queueEffectSchedulers.shift()();
          }
        }
        function trackEffect(effect2, dep, debuggerEventExtraInfo) {
          var _a;
          if (dep.get(effect2) !== effect2._trackId) {
            dep.set(effect2, effect2._trackId);
            const oldDep = effect2.deps[effect2._depsLength];
            if (oldDep !== dep) {
              if (oldDep) {
                cleanupDepEffect(oldDep, effect2);
              }
              effect2.deps[effect2._depsLength++] = dep;
            } else {
              effect2._depsLength++;
            }
            if (true) {
              (_a = effect2.onTrack) == null
                ? void 0
                : _a.call(
                    effect2,
                    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["extend"])(
                      { effect: effect2 },
                      debuggerEventExtraInfo
                    )
                  );
            }
          }
        }
        const queueEffectSchedulers = [];
        function triggerEffects(dep, dirtyLevel, debuggerEventExtraInfo) {
          var _a;
          pauseScheduling();
          for (const effect2 of dep.keys()) {
            let tracking;
            if (
              effect2._dirtyLevel < dirtyLevel &&
              (tracking != null
                ? tracking
                : (tracking = dep.get(effect2) === effect2._trackId))
            ) {
              effect2._shouldSchedule ||
                (effect2._shouldSchedule = effect2._dirtyLevel === 0);
              effect2._dirtyLevel = dirtyLevel;
            }
            if (
              effect2._shouldSchedule &&
              (tracking != null
                ? tracking
                : (tracking = dep.get(effect2) === effect2._trackId))
            ) {
              if (true) {
                (_a = effect2.onTrigger) == null
                  ? void 0
                  : _a.call(
                      effect2,
                      Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_0__["extend"]
                      )({ effect: effect2 }, debuggerEventExtraInfo)
                    );
              }
              effect2.trigger();
              if (
                (!effect2._runnings || effect2.allowRecurse) &&
                effect2._dirtyLevel !== 2
              ) {
                effect2._shouldSchedule = false;
                if (effect2.scheduler) {
                  queueEffectSchedulers.push(effect2.scheduler);
                }
              }
            }
          }
          resetScheduling();
        }

        const createDep = (cleanup, computed) => {
          const dep = /* @__PURE__ */ new Map();
          dep.cleanup = cleanup;
          dep.computed = computed;
          return dep;
        };

        const targetMap = /* @__PURE__ */ new WeakMap();
        const ITERATE_KEY = Symbol(true ? "iterate" : undefined);
        const MAP_KEY_ITERATE_KEY = Symbol(
          true ? "Map key iterate" : undefined
        );
        function track(target, type, key) {
          if (shouldTrack && activeEffect) {
            let depsMap = targetMap.get(target);
            if (!depsMap) {
              targetMap.set(target, (depsMap = /* @__PURE__ */ new Map()));
            }
            let dep = depsMap.get(key);
            if (!dep) {
              depsMap.set(key, (dep = createDep(() => depsMap.delete(key))));
            }
            trackEffect(
              activeEffect,
              dep,
              true
                ? {
                    target,
                    type,
                    key,
                  }
                : undefined
            );
          }
        }
        function trigger(target, type, key, newValue, oldValue, oldTarget) {
          const depsMap = targetMap.get(target);
          if (!depsMap) {
            return;
          }
          let deps = [];
          if (type === "clear") {
            deps = [...depsMap.values()];
          } else if (
            key === "length" &&
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(target)
          ) {
            const newLength = Number(newValue);
            depsMap.forEach((dep, key2) => {
              if (
                key2 === "length" ||
                (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isSymbol"])(
                  key2
                ) &&
                  key2 >= newLength)
              ) {
                deps.push(dep);
              }
            });
          } else {
            if (key !== void 0) {
              deps.push(depsMap.get(key));
            }
            switch (type) {
              case "add":
                if (
                  !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(
                    target
                  )
                ) {
                  deps.push(depsMap.get(ITERATE_KEY));
                  if (
                    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isMap"])(
                      target
                    )
                  ) {
                    deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                  }
                } else if (
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isIntegerKey"]
                  )(key)
                ) {
                  deps.push(depsMap.get("length"));
                }
                break;
              case "delete":
                if (
                  !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(
                    target
                  )
                ) {
                  deps.push(depsMap.get(ITERATE_KEY));
                  if (
                    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isMap"])(
                      target
                    )
                  ) {
                    deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                  }
                }
                break;
              case "set":
                if (
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isMap"])(
                    target
                  )
                ) {
                  deps.push(depsMap.get(ITERATE_KEY));
                }
                break;
            }
          }
          pauseScheduling();
          for (const dep of deps) {
            if (dep) {
              triggerEffects(
                dep,
                4,
                true
                  ? {
                      target,
                      type,
                      key,
                      newValue,
                      oldValue,
                      oldTarget,
                    }
                  : undefined
              );
            }
          }
          resetScheduling();
        }
        function getDepFromReactive(object, key) {
          const depsMap = targetMap.get(object);
          return depsMap && depsMap.get(key);
        }

        const isNonTrackableKeys = /* @__PURE__ */ Object(
          _vue_shared__WEBPACK_IMPORTED_MODULE_0__["makeMap"]
        )(`__proto__,__v_isRef,__isVue`);
        const builtInSymbols = new Set(
          /* @__PURE__ */ Object.getOwnPropertyNames(Symbol)
            .filter((key) => key !== "arguments" && key !== "caller")
            .map((key) => Symbol[key])
            .filter(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isSymbol"])
        );
        const arrayInstrumentations =
          /* @__PURE__ */ createArrayInstrumentations();
        function createArrayInstrumentations() {
          const instrumentations = {};
          ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
            instrumentations[key] = function (...args) {
              const arr = toRaw(this);
              for (let i = 0, l = this.length; i < l; i++) {
                track(arr, "get", i + "");
              }
              const res = arr[key](...args);
              if (res === -1 || res === false) {
                return arr[key](...args.map(toRaw));
              } else {
                return res;
              }
            };
          });
          ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
            instrumentations[key] = function (...args) {
              pauseTracking();
              pauseScheduling();
              const res = toRaw(this)[key].apply(this, args);
              resetScheduling();
              resetTracking();
              return res;
            };
          });
          return instrumentations;
        }
        function hasOwnProperty(key) {
          if (
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isSymbol"])(key)
          )
            key = String(key);
          const obj = toRaw(this);
          track(obj, "has", key);
          return obj.hasOwnProperty(key);
        }
        class BaseReactiveHandler {
          constructor(_isReadonly = false, _isShallow = false) {
            this._isReadonly = _isReadonly;
            this._isShallow = _isShallow;
          }
          get(target, key, receiver) {
            const isReadonly2 = this._isReadonly,
              isShallow2 = this._isShallow;
            if (key === "__v_isReactive") {
              return !isReadonly2;
            } else if (key === "__v_isReadonly") {
              return isReadonly2;
            } else if (key === "__v_isShallow") {
              return isShallow2;
            } else if (key === "__v_raw") {
              if (
                receiver ===
                  (isReadonly2
                    ? isShallow2
                      ? shallowReadonlyMap
                      : readonlyMap
                    : isShallow2
                    ? shallowReactiveMap
                    : reactiveMap
                  ).get(target) || // receiver is not the reactive proxy, but has the same prototype
                // this means the reciever is a user proxy of the reactive proxy
                Object.getPrototypeOf(target) ===
                  Object.getPrototypeOf(receiver)
              ) {
                return target;
              }
              return;
            }
            const targetIsArray = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"]
            )(target);
            if (!isReadonly2) {
              if (
                targetIsArray &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["hasOwn"])(
                  arrayInstrumentations,
                  key
                )
              ) {
                return Reflect.get(arrayInstrumentations, key, receiver);
              }
              if (key === "hasOwnProperty") {
                return hasOwnProperty;
              }
            }
            const res = Reflect.get(target, key, receiver);
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isSymbol"])(key)
                ? builtInSymbols.has(key)
                : isNonTrackableKeys(key)
            ) {
              return res;
            }
            if (!isReadonly2) {
              track(target, "get", key);
            }
            if (isShallow2) {
              return res;
            }
            if (isRef(res)) {
              return targetIsArray &&
                Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isIntegerKey"]
                )(key)
                ? res
                : res.value;
            }
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isObject"])(res)
            ) {
              return isReadonly2 ? readonly(res) : reactive(res);
            }
            return res;
          }
        }
        class MutableReactiveHandler extends BaseReactiveHandler {
          constructor(isShallow2 = false) {
            super(false, isShallow2);
          }
          set(target, key, value, receiver) {
            let oldValue = target[key];
            if (!this._isShallow) {
              const isOldValueReadonly = isReadonly(oldValue);
              if (!isShallow(value) && !isReadonly(value)) {
                oldValue = toRaw(oldValue);
                value = toRaw(value);
              }
              if (
                !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(
                  target
                ) &&
                isRef(oldValue) &&
                !isRef(value)
              ) {
                if (isOldValueReadonly) {
                  return false;
                } else {
                  oldValue.value = value;
                  return true;
                }
              }
            }
            const hadKey =
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(
                target
              ) &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isIntegerKey"])(
                key
              )
                ? Number(key) < target.length
                : Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["hasOwn"])(
                    target,
                    key
                  );
            const result = Reflect.set(target, key, value, receiver);
            if (target === toRaw(receiver)) {
              if (!hadKey) {
                trigger(target, "add", key, value);
              } else if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["hasChanged"])(
                  value,
                  oldValue
                )
              ) {
                trigger(target, "set", key, value, oldValue);
              }
            }
            return result;
          }
          deleteProperty(target, key) {
            const hadKey = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_0__["hasOwn"]
            )(target, key);
            const oldValue = target[key];
            const result = Reflect.deleteProperty(target, key);
            if (result && hadKey) {
              trigger(target, "delete", key, void 0, oldValue);
            }
            return result;
          }
          has(target, key) {
            const result = Reflect.has(target, key);
            if (
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isSymbol"])(
                key
              ) ||
              !builtInSymbols.has(key)
            ) {
              track(target, "has", key);
            }
            return result;
          }
          ownKeys(target) {
            track(
              target,
              "iterate",
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"])(
                target
              )
                ? "length"
                : ITERATE_KEY
            );
            return Reflect.ownKeys(target);
          }
        }
        class ReadonlyReactiveHandler extends BaseReactiveHandler {
          constructor(isShallow2 = false) {
            super(true, isShallow2);
          }
          set(target, key) {
            if (true) {
              warn(
                `Set operation on key "${String(
                  key
                )}" failed: target is readonly.`,
                target
              );
            }
            return true;
          }
          deleteProperty(target, key) {
            if (true) {
              warn(
                `Delete operation on key "${String(
                  key
                )}" failed: target is readonly.`,
                target
              );
            }
            return true;
          }
        }
        const mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler();
        const readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler();
        const shallowReactiveHandlers =
          /* @__PURE__ */ new MutableReactiveHandler(true);
        const shallowReadonlyHandlers =
          /* @__PURE__ */ new ReadonlyReactiveHandler(true);

        const toShallow = (value) => value;
        const getProto = (v) => Reflect.getPrototypeOf(v);
        function get(target, key, isReadonly = false, isShallow = false) {
          target = target["__v_raw"];
          const rawTarget = toRaw(target);
          const rawKey = toRaw(key);
          if (!isReadonly) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["hasChanged"])(
                key,
                rawKey
              )
            ) {
              track(rawTarget, "get", key);
            }
            track(rawTarget, "get", rawKey);
          }
          const { has: has2 } = getProto(rawTarget);
          const wrap = isShallow
            ? toShallow
            : isReadonly
            ? toReadonly
            : toReactive;
          if (has2.call(rawTarget, key)) {
            return wrap(target.get(key));
          } else if (has2.call(rawTarget, rawKey)) {
            return wrap(target.get(rawKey));
          } else if (target !== rawTarget) {
            target.get(key);
          }
        }
        function has(key, isReadonly = false) {
          const target = this["__v_raw"];
          const rawTarget = toRaw(target);
          const rawKey = toRaw(key);
          if (!isReadonly) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["hasChanged"])(
                key,
                rawKey
              )
            ) {
              track(rawTarget, "has", key);
            }
            track(rawTarget, "has", rawKey);
          }
          return key === rawKey
            ? target.has(key)
            : target.has(key) || target.has(rawKey);
        }
        function size(target, isReadonly = false) {
          target = target["__v_raw"];
          !isReadonly && track(toRaw(target), "iterate", ITERATE_KEY);
          return Reflect.get(target, "size", target);
        }
        function add(value) {
          value = toRaw(value);
          const target = toRaw(this);
          const proto = getProto(target);
          const hadKey = proto.has.call(target, value);
          if (!hadKey) {
            target.add(value);
            trigger(target, "add", value, value);
          }
          return this;
        }
        function set(key, value) {
          value = toRaw(value);
          const target = toRaw(this);
          const { has: has2, get: get2 } = getProto(target);
          let hadKey = has2.call(target, key);
          if (!hadKey) {
            key = toRaw(key);
            hadKey = has2.call(target, key);
          } else if (true) {
            checkIdentityKeys(target, has2, key);
          }
          const oldValue = get2.call(target, key);
          target.set(key, value);
          if (!hadKey) {
            trigger(target, "add", key, value);
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["hasChanged"])(
              value,
              oldValue
            )
          ) {
            trigger(target, "set", key, value, oldValue);
          }
          return this;
        }
        function deleteEntry(key) {
          const target = toRaw(this);
          const { has: has2, get: get2 } = getProto(target);
          let hadKey = has2.call(target, key);
          if (!hadKey) {
            key = toRaw(key);
            hadKey = has2.call(target, key);
          } else if (true) {
            checkIdentityKeys(target, has2, key);
          }
          const oldValue = get2 ? get2.call(target, key) : void 0;
          const result = target.delete(key);
          if (hadKey) {
            trigger(target, "delete", key, void 0, oldValue);
          }
          return result;
        }
        function clear() {
          const target = toRaw(this);
          const hadItems = target.size !== 0;
          const oldTarget = true
            ? Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isMap"])(target)
              ? new Map(target)
              : new Set(target)
            : undefined;
          const result = target.clear();
          if (hadItems) {
            trigger(target, "clear", void 0, void 0, oldTarget);
          }
          return result;
        }
        function createForEach(isReadonly, isShallow) {
          return function forEach(callback, thisArg) {
            const observed = this;
            const target = observed["__v_raw"];
            const rawTarget = toRaw(target);
            const wrap = isShallow
              ? toShallow
              : isReadonly
              ? toReadonly
              : toReactive;
            !isReadonly && track(rawTarget, "iterate", ITERATE_KEY);
            return target.forEach((value, key) => {
              return callback.call(thisArg, wrap(value), wrap(key), observed);
            });
          };
        }
        function createIterableMethod(method, isReadonly, isShallow) {
          return function (...args) {
            const target = this["__v_raw"];
            const rawTarget = toRaw(target);
            const targetIsMap = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isMap"]
            )(rawTarget);
            const isPair =
              method === "entries" ||
              (method === Symbol.iterator && targetIsMap);
            const isKeyOnly = method === "keys" && targetIsMap;
            const innerIterator = target[method](...args);
            const wrap = isShallow
              ? toShallow
              : isReadonly
              ? toReadonly
              : toReactive;
            !isReadonly &&
              track(
                rawTarget,
                "iterate",
                isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
              );
            return {
              // iterator protocol
              next() {
                const { value, done } = innerIterator.next();
                return done
                  ? { value, done }
                  : {
                      value: isPair
                        ? [wrap(value[0]), wrap(value[1])]
                        : wrap(value),
                      done,
                    };
              },
              // iterable protocol
              [Symbol.iterator]() {
                return this;
              },
            };
          };
        }
        function createReadonlyMethod(type) {
          return function (...args) {
            if (true) {
              const key = args[0] ? `on key "${args[0]}" ` : ``;
              warn(
                `${Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_0__["capitalize"]
                )(type)} operation ${key}failed: target is readonly.`,
                toRaw(this)
              );
            }
            return type === "delete" ? false : type === "clear" ? void 0 : this;
          };
        }
        function createInstrumentations() {
          const mutableInstrumentations2 = {
            get(key) {
              return get(this, key);
            },
            get size() {
              return size(this);
            },
            has,
            add,
            set,
            delete: deleteEntry,
            clear,
            forEach: createForEach(false, false),
          };
          const shallowInstrumentations2 = {
            get(key) {
              return get(this, key, false, true);
            },
            get size() {
              return size(this);
            },
            has,
            add,
            set,
            delete: deleteEntry,
            clear,
            forEach: createForEach(false, true),
          };
          const readonlyInstrumentations2 = {
            get(key) {
              return get(this, key, true);
            },
            get size() {
              return size(this, true);
            },
            has(key) {
              return has.call(this, key, true);
            },
            add: createReadonlyMethod("add"),
            set: createReadonlyMethod("set"),
            delete: createReadonlyMethod("delete"),
            clear: createReadonlyMethod("clear"),
            forEach: createForEach(true, false),
          };
          const shallowReadonlyInstrumentations2 = {
            get(key) {
              return get(this, key, true, true);
            },
            get size() {
              return size(this, true);
            },
            has(key) {
              return has.call(this, key, true);
            },
            add: createReadonlyMethod("add"),
            set: createReadonlyMethod("set"),
            delete: createReadonlyMethod("delete"),
            clear: createReadonlyMethod("clear"),
            forEach: createForEach(true, true),
          };
          const iteratorMethods = [
            "keys",
            "values",
            "entries",
            Symbol.iterator,
          ];
          iteratorMethods.forEach((method) => {
            mutableInstrumentations2[method] = createIterableMethod(
              method,
              false,
              false
            );
            readonlyInstrumentations2[method] = createIterableMethod(
              method,
              true,
              false
            );
            shallowInstrumentations2[method] = createIterableMethod(
              method,
              false,
              true
            );
            shallowReadonlyInstrumentations2[method] = createIterableMethod(
              method,
              true,
              true
            );
          });
          return [
            mutableInstrumentations2,
            readonlyInstrumentations2,
            shallowInstrumentations2,
            shallowReadonlyInstrumentations2,
          ];
        }
        const [
          mutableInstrumentations,
          readonlyInstrumentations,
          shallowInstrumentations,
          shallowReadonlyInstrumentations,
        ] = /* @__PURE__ */ createInstrumentations();
        function createInstrumentationGetter(isReadonly, shallow) {
          const instrumentations = shallow
            ? isReadonly
              ? shallowReadonlyInstrumentations
              : shallowInstrumentations
            : isReadonly
            ? readonlyInstrumentations
            : mutableInstrumentations;
          return (target, key, receiver) => {
            if (key === "__v_isReactive") {
              return !isReadonly;
            } else if (key === "__v_isReadonly") {
              return isReadonly;
            } else if (key === "__v_raw") {
              return target;
            }
            return Reflect.get(
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["hasOwn"])(
                instrumentations,
                key
              ) && key in target
                ? instrumentations
                : target,
              key,
              receiver
            );
          };
        }
        const mutableCollectionHandlers = {
          get: /* @__PURE__ */ createInstrumentationGetter(false, false),
        };
        const shallowCollectionHandlers = {
          get: /* @__PURE__ */ createInstrumentationGetter(false, true),
        };
        const readonlyCollectionHandlers = {
          get: /* @__PURE__ */ createInstrumentationGetter(true, false),
        };
        const shallowReadonlyCollectionHandlers = {
          get: /* @__PURE__ */ createInstrumentationGetter(true, true),
        };
        function checkIdentityKeys(target, has2, key) {
          const rawKey = toRaw(key);
          if (rawKey !== key && has2.call(target, rawKey)) {
            const type = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_0__["toRawType"]
            )(target);
            warn(
              `Reactive ${type} contains both the raw and reactive versions of the same object${
                type === `Map` ? ` as keys` : ``
              }, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
            );
          }
        }

        const reactiveMap = /* @__PURE__ */ new WeakMap();
        const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
        const readonlyMap = /* @__PURE__ */ new WeakMap();
        const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
        function targetTypeMap(rawType) {
          switch (rawType) {
            case "Object":
            case "Array":
              return 1 /* COMMON */;
            case "Map":
            case "Set":
            case "WeakMap":
            case "WeakSet":
              return 2 /* COLLECTION */;
            default:
              return 0 /* INVALID */;
          }
        }
        function getTargetType(value) {
          return value["__v_skip"] || !Object.isExtensible(value)
            ? 0 /* INVALID */
            : targetTypeMap(
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["toRawType"])(
                  value
                )
              );
        }
        function reactive(target) {
          if (isReadonly(target)) {
            return target;
          }
          return createReactiveObject(
            target,
            false,
            mutableHandlers,
            mutableCollectionHandlers,
            reactiveMap
          );
        }
        function shallowReactive(target) {
          return createReactiveObject(
            target,
            false,
            shallowReactiveHandlers,
            shallowCollectionHandlers,
            shallowReactiveMap
          );
        }
        function readonly(target) {
          return createReactiveObject(
            target,
            true,
            readonlyHandlers,
            readonlyCollectionHandlers,
            readonlyMap
          );
        }
        function shallowReadonly(target) {
          return createReactiveObject(
            target,
            true,
            shallowReadonlyHandlers,
            shallowReadonlyCollectionHandlers,
            shallowReadonlyMap
          );
        }
        function createReactiveObject(
          target,
          isReadonly2,
          baseHandlers,
          collectionHandlers,
          proxyMap
        ) {
          if (
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isObject"])(
              target
            )
          ) {
            if (true) {
              warn(`value cannot be made reactive: ${String(target)}`);
            }
            return target;
          }
          if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
            return target;
          }
          const existingProxy = proxyMap.get(target);
          if (existingProxy) {
            return existingProxy;
          }
          const targetType = getTargetType(target);
          if (targetType === 0 /* INVALID */) {
            return target;
          }
          const proxy = new Proxy(
            target,
            targetType === 2 /* COLLECTION */
              ? collectionHandlers
              : baseHandlers
          );
          proxyMap.set(target, proxy);
          return proxy;
        }
        function isReactive(value) {
          if (isReadonly(value)) {
            return isReactive(value["__v_raw"]);
          }
          return !!(value && value["__v_isReactive"]);
        }
        function isReadonly(value) {
          return !!(value && value["__v_isReadonly"]);
        }
        function isShallow(value) {
          return !!(value && value["__v_isShallow"]);
        }
        function isProxy(value) {
          return value ? !!value["__v_raw"] : false;
        }
        function toRaw(observed) {
          const raw = observed && observed["__v_raw"];
          return raw ? toRaw(raw) : observed;
        }
        function markRaw(value) {
          if (Object.isExtensible(value)) {
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["def"])(
              value,
              "__v_skip",
              true
            );
          }
          return value;
        }
        const toReactive = (value) =>
          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isObject"])(value)
            ? reactive(value)
            : value;
        const toReadonly = (value) =>
          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isObject"])(value)
            ? readonly(value)
            : value;

        const COMPUTED_SIDE_EFFECT_WARN = `Computed is still dirty after getter evaluation, likely because a computed is mutating its own dependency in its getter. State mutations in computed getters should be avoided.  Check the docs for more details: https://vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free`;
        class ComputedRefImpl {
          constructor(getter, _setter, isReadonly, isSSR) {
            this.getter = getter;
            this._setter = _setter;
            this.dep = void 0;
            this.__v_isRef = true;
            this["__v_isReadonly"] = false;
            this.effect = new ReactiveEffect(
              () => getter(this._value),
              () => triggerRefValue(this, this.effect._dirtyLevel === 2 ? 2 : 3)
            );
            this.effect.computed = this;
            this.effect.active = this._cacheable = !isSSR;
            this["__v_isReadonly"] = isReadonly;
          }
          get value() {
            const self = toRaw(this);
            if (
              (!self._cacheable || self.effect.dirty) &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["hasChanged"])(
                self._value,
                (self._value = self.effect.run())
              )
            ) {
              triggerRefValue(self, 4);
            }
            trackRefValue(self);
            if (self.effect._dirtyLevel >= 2) {
              if (true && this._warnRecursive) {
                warn(
                  COMPUTED_SIDE_EFFECT_WARN,
                  `

getter: `,
                  this.getter
                );
              }
              triggerRefValue(self, 2);
            }
            return self._value;
          }
          set value(newValue) {
            this._setter(newValue);
          }
          // #region polyfill _dirty for backward compatibility third party code for Vue <= 3.3.x
          get _dirty() {
            return this.effect.dirty;
          }
          set _dirty(v) {
            this.effect.dirty = v;
          }
          // #endregion
        }
        function computed(getterOrOptions, debugOptions, isSSR = false) {
          let getter;
          let setter;
          const onlyGetter = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isFunction"]
          )(getterOrOptions);
          if (onlyGetter) {
            getter = getterOrOptions;
            setter = true
              ? () => {
                  warn("Write operation failed: computed value is readonly");
                }
              : undefined;
          } else {
            getter = getterOrOptions.get;
            setter = getterOrOptions.set;
          }
          const cRef = new ComputedRefImpl(
            getter,
            setter,
            onlyGetter || !setter,
            isSSR
          );
          if (true && debugOptions && !isSSR) {
            cRef.effect.onTrack = debugOptions.onTrack;
            cRef.effect.onTrigger = debugOptions.onTrigger;
          }
          return cRef;
        }

        function trackRefValue(ref2) {
          var _a;
          if (shouldTrack && activeEffect) {
            ref2 = toRaw(ref2);
            trackEffect(
              activeEffect,
              (_a = ref2.dep) != null
                ? _a
                : (ref2.dep = createDep(
                    () => (ref2.dep = void 0),
                    ref2 instanceof ComputedRefImpl ? ref2 : void 0
                  )),
              true
                ? {
                    target: ref2,
                    type: "get",
                    key: "value",
                  }
                : undefined
            );
          }
        }
        function triggerRefValue(ref2, dirtyLevel = 4, newVal) {
          ref2 = toRaw(ref2);
          const dep = ref2.dep;
          if (dep) {
            triggerEffects(
              dep,
              dirtyLevel,
              true
                ? {
                    target: ref2,
                    type: "set",
                    key: "value",
                    newValue: newVal,
                  }
                : undefined
            );
          }
        }
        function isRef(r) {
          return !!(r && r.__v_isRef === true);
        }
        function ref(value) {
          return createRef(value, false);
        }
        function shallowRef(value) {
          return createRef(value, true);
        }
        function createRef(rawValue, shallow) {
          if (isRef(rawValue)) {
            return rawValue;
          }
          return new RefImpl(rawValue, shallow);
        }
        class RefImpl {
          constructor(value, __v_isShallow) {
            this.__v_isShallow = __v_isShallow;
            this.dep = void 0;
            this.__v_isRef = true;
            this._rawValue = __v_isShallow ? value : toRaw(value);
            this._value = __v_isShallow ? value : toReactive(value);
          }
          get value() {
            trackRefValue(this);
            return this._value;
          }
          set value(newVal) {
            const useDirectValue =
              this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
            newVal = useDirectValue ? newVal : toRaw(newVal);
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["hasChanged"])(
                newVal,
                this._rawValue
              )
            ) {
              this._rawValue = newVal;
              this._value = useDirectValue ? newVal : toReactive(newVal);
              triggerRefValue(this, 4, newVal);
            }
          }
        }
        function triggerRef(ref2) {
          triggerRefValue(ref2, 4, true ? ref2.value : undefined);
        }
        function unref(ref2) {
          return isRef(ref2) ? ref2.value : ref2;
        }
        function toValue(source) {
          return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(
            source
          )
            ? source()
            : unref(source);
        }
        const shallowUnwrapHandlers = {
          get: (target, key, receiver) =>
            unref(Reflect.get(target, key, receiver)),
          set: (target, key, value, receiver) => {
            const oldValue = target[key];
            if (isRef(oldValue) && !isRef(value)) {
              oldValue.value = value;
              return true;
            } else {
              return Reflect.set(target, key, value, receiver);
            }
          },
        };
        function proxyRefs(objectWithRefs) {
          return isReactive(objectWithRefs)
            ? objectWithRefs
            : new Proxy(objectWithRefs, shallowUnwrapHandlers);
        }
        class CustomRefImpl {
          constructor(factory) {
            this.dep = void 0;
            this.__v_isRef = true;
            const { get, set } = factory(
              () => trackRefValue(this),
              () => triggerRefValue(this)
            );
            this._get = get;
            this._set = set;
          }
          get value() {
            return this._get();
          }
          set value(newVal) {
            this._set(newVal);
          }
        }
        function customRef(factory) {
          return new CustomRefImpl(factory);
        }
        function toRefs(object) {
          if (true && !isProxy(object)) {
            warn(
              `toRefs() expects a reactive object but received a plain one.`
            );
          }
          const ret = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_0__["isArray"]
          )(object)
            ? new Array(object.length)
            : {};
          for (const key in object) {
            ret[key] = propertyToRef(object, key);
          }
          return ret;
        }
        class ObjectRefImpl {
          constructor(_object, _key, _defaultValue) {
            this._object = _object;
            this._key = _key;
            this._defaultValue = _defaultValue;
            this.__v_isRef = true;
          }
          get value() {
            const val = this._object[this._key];
            return val === void 0 ? this._defaultValue : val;
          }
          set value(newVal) {
            this._object[this._key] = newVal;
          }
          get dep() {
            return getDepFromReactive(toRaw(this._object), this._key);
          }
        }
        class GetterRefImpl {
          constructor(_getter) {
            this._getter = _getter;
            this.__v_isRef = true;
            this.__v_isReadonly = true;
          }
          get value() {
            return this._getter();
          }
        }
        function toRef(source, key, defaultValue) {
          if (isRef(source)) {
            return source;
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(
              source
            )
          ) {
            return new GetterRefImpl(source);
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__["isObject"])(
              source
            ) &&
            arguments.length > 1
          ) {
            return propertyToRef(source, key, defaultValue);
          } else {
            return ref(source);
          }
        }
        function propertyToRef(source, key, defaultValue) {
          const val = source[key];
          return isRef(val)
            ? val
            : new ObjectRefImpl(source, key, defaultValue);
        }

        const deferredComputed = computed;

        const TrackOpTypes = {
          GET: "get",
          HAS: "has",
          ITERATE: "iterate",
        };
        const TriggerOpTypes = {
          SET: "set",
          ADD: "add",
          DELETE: "delete",
          CLEAR: "clear",
        };
        const ReactiveFlags = {
          SKIP: "__v_skip",
          IS_REACTIVE: "__v_isReactive",
          IS_READONLY: "__v_isReadonly",
          IS_SHALLOW: "__v_isShallow",
          RAW: "__v_raw",
        };

        /***/
      },

    /***/ "./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js":
      /*!*************************************************************************!*\
  !*** ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js ***!
  \*************************************************************************/
      /*! exports provided: EffectScope, ReactiveEffect, TrackOpTypes, TriggerOpTypes, customRef, effect, effectScope, getCurrentScope, isProxy, isReactive, isReadonly, isRef, isShallow, markRaw, onScopeDispose, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, toRef, toRefs, toValue, triggerRef, unref, camelize, capitalize, normalizeClass, normalizeProps, normalizeStyle, toDisplayString, toHandlerKey, BaseTransition, BaseTransitionPropsValidators, Comment, DeprecationTypes, ErrorCodes, ErrorTypeStrings, Fragment, KeepAlive, Static, Suspense, Teleport, Text, assertNumber, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, compatUtils, computed, createBlock, createCommentVNode, createElementBlock, createElementVNode, createHydrationRenderer, createPropsRestProxy, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, defineEmits, defineExpose, defineModel, defineOptions, defineProps, defineSlots, devtools, getCurrentInstance, getTransitionRawChildren, guardReactiveProps, h, handleError, hasInjectionContext, initCustomFormatter, inject, isMemoSame, isRuntimeOnly, isVNode, mergeDefaults, mergeModels, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveFilter, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useAttrs, useModel, useSSRContext, useSlots, useTransitionState, version, warn, watch, watchEffect, watchPostEffect, watchSyncEffect, withAsyncContext, withCtx, withDefaults, withDirectives, withMemo, withScopeId */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "BaseTransition",
          function () {
            return BaseTransition;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "BaseTransitionPropsValidators",
          function () {
            return BaseTransitionPropsValidators;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Comment",
          function () {
            return Comment;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "DeprecationTypes",
          function () {
            return DeprecationTypes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ErrorCodes",
          function () {
            return ErrorCodes;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ErrorTypeStrings",
          function () {
            return ErrorTypeStrings;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Fragment",
          function () {
            return Fragment;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "KeepAlive",
          function () {
            return KeepAlive;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Static",
          function () {
            return Static;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Suspense",
          function () {
            return Suspense;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Teleport",
          function () {
            return Teleport;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Text",
          function () {
            return Text;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "assertNumber",
          function () {
            return assertNumber;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "callWithAsyncErrorHandling",
          function () {
            return callWithAsyncErrorHandling;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "callWithErrorHandling",
          function () {
            return callWithErrorHandling;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "cloneVNode",
          function () {
            return cloneVNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "compatUtils",
          function () {
            return compatUtils;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "computed",
          function () {
            return computed;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createBlock",
          function () {
            return createBlock;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createCommentVNode",
          function () {
            return createCommentVNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createElementBlock",
          function () {
            return createElementBlock;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createElementVNode",
          function () {
            return createBaseVNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createHydrationRenderer",
          function () {
            return createHydrationRenderer;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createPropsRestProxy",
          function () {
            return createPropsRestProxy;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createRenderer",
          function () {
            return createRenderer;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createSlots",
          function () {
            return createSlots;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createStaticVNode",
          function () {
            return createStaticVNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createTextVNode",
          function () {
            return createTextVNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createVNode",
          function () {
            return createVNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "defineAsyncComponent",
          function () {
            return defineAsyncComponent;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "defineComponent",
          function () {
            return defineComponent;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "defineEmits",
          function () {
            return defineEmits;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "defineExpose",
          function () {
            return defineExpose;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "defineModel",
          function () {
            return defineModel;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "defineOptions",
          function () {
            return defineOptions;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "defineProps",
          function () {
            return defineProps;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "defineSlots",
          function () {
            return defineSlots;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "devtools",
          function () {
            return devtools;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getCurrentInstance",
          function () {
            return getCurrentInstance;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getTransitionRawChildren",
          function () {
            return getTransitionRawChildren;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "guardReactiveProps",
          function () {
            return guardReactiveProps;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "h",
          function () {
            return h;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "handleError",
          function () {
            return handleError;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "hasInjectionContext",
          function () {
            return hasInjectionContext;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "initCustomFormatter",
          function () {
            return initCustomFormatter;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "inject",
          function () {
            return inject;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isMemoSame",
          function () {
            return isMemoSame;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isRuntimeOnly",
          function () {
            return isRuntimeOnly;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isVNode",
          function () {
            return isVNode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "mergeDefaults",
          function () {
            return mergeDefaults;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "mergeModels",
          function () {
            return mergeModels;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "mergeProps",
          function () {
            return mergeProps;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "nextTick",
          function () {
            return nextTick;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onActivated",
          function () {
            return onActivated;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onBeforeMount",
          function () {
            return onBeforeMount;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onBeforeUnmount",
          function () {
            return onBeforeUnmount;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onBeforeUpdate",
          function () {
            return onBeforeUpdate;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onDeactivated",
          function () {
            return onDeactivated;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onErrorCaptured",
          function () {
            return onErrorCaptured;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onMounted",
          function () {
            return onMounted;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onRenderTracked",
          function () {
            return onRenderTracked;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onRenderTriggered",
          function () {
            return onRenderTriggered;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onServerPrefetch",
          function () {
            return onServerPrefetch;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onUnmounted",
          function () {
            return onUnmounted;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "onUpdated",
          function () {
            return onUpdated;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "openBlock",
          function () {
            return openBlock;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "popScopeId",
          function () {
            return popScopeId;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "provide",
          function () {
            return provide;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "pushScopeId",
          function () {
            return pushScopeId;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "queuePostFlushCb",
          function () {
            return queuePostFlushCb;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "registerRuntimeCompiler",
          function () {
            return registerRuntimeCompiler;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "renderList",
          function () {
            return renderList;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "renderSlot",
          function () {
            return renderSlot;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveComponent",
          function () {
            return resolveComponent;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveDirective",
          function () {
            return resolveDirective;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveDynamicComponent",
          function () {
            return resolveDynamicComponent;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveFilter",
          function () {
            return resolveFilter;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveTransitionHooks",
          function () {
            return resolveTransitionHooks;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "setBlockTracking",
          function () {
            return setBlockTracking;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "setDevtoolsHook",
          function () {
            return setDevtoolsHook;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "setTransitionHooks",
          function () {
            return setTransitionHooks;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ssrContextKey",
          function () {
            return ssrContextKey;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ssrUtils",
          function () {
            return ssrUtils;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "toHandlers",
          function () {
            return toHandlers;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "transformVNodeArgs",
          function () {
            return transformVNodeArgs;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "useAttrs",
          function () {
            return useAttrs;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "useModel",
          function () {
            return useModel;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "useSSRContext",
          function () {
            return useSSRContext;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "useSlots",
          function () {
            return useSlots;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "useTransitionState",
          function () {
            return useTransitionState;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "version",
          function () {
            return version;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "warn",
          function () {
            return warn;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "watch",
          function () {
            return watch;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "watchEffect",
          function () {
            return watchEffect;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "watchPostEffect",
          function () {
            return watchPostEffect;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "watchSyncEffect",
          function () {
            return watchSyncEffect;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "withAsyncContext",
          function () {
            return withAsyncContext;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "withCtx",
          function () {
            return withCtx;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "withDefaults",
          function () {
            return withDefaults;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "withDirectives",
          function () {
            return withDirectives;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "withMemo",
          function () {
            return withMemo;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "withScopeId",
          function () {
            return withScopeId;
          }
        );
        /* harmony import */ var _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @vue/reactivity */ "./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js"
          );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "EffectScope",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["EffectScope"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ReactiveEffect",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
              "ReactiveEffect"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TrackOpTypes",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["TrackOpTypes"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TriggerOpTypes",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
              "TriggerOpTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "customRef",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["customRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "effect",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["effect"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "effectScope",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["effectScope"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getCurrentScope",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
              "getCurrentScope"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isProxy",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isProxy"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isReactive",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isReactive"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isReadonly",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isReadonly"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isRef",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isShallow",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isShallow"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "markRaw",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["markRaw"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onScopeDispose",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
              "onScopeDispose"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "proxyRefs",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["proxyRefs"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "reactive",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["reactive"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "readonly",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["readonly"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ref",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["ref"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowReactive",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
              "shallowReactive"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowReadonly",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
              "shallowReadonly"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowRef",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["shallowRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "stop",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["stop"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toRaw",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toRef",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toRefs",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRefs"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toValue",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toValue"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "triggerRef",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["triggerRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "unref",
          function () {
            return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["unref"];
          }
        );

        /* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! @vue/shared */ "./node_modules/@vue/shared/dist/shared.esm-bundler.js"
          );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "camelize",
          function () {
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "capitalize",
          function () {
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["capitalize"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "normalizeClass",
          function () {
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["normalizeClass"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "normalizeProps",
          function () {
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["normalizeProps"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "normalizeStyle",
          function () {
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["normalizeStyle"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toDisplayString",
          function () {
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toDisplayString"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toHandlerKey",
          function () {
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toHandlerKey"];
          }
        );

        /**
         * @vue/runtime-core v3.4.27
         * (c) 2018-present Yuxi (Evan) You and Vue contributors
         * @license MIT
         **/

        const stack = [];
        function pushWarningContext(vnode) {
          stack.push(vnode);
        }
        function popWarningContext() {
          stack.pop();
        }
        function warn$1(msg, ...args) {
          Object(
            _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["pauseTracking"]
          )();
          const instance = stack.length
            ? stack[stack.length - 1].component
            : null;
          const appWarnHandler =
            instance && instance.appContext.config.warnHandler;
          const trace = getComponentTrace();
          if (appWarnHandler) {
            callWithErrorHandling(appWarnHandler, instance, 11, [
              msg +
                args
                  .map((a) => {
                    var _a, _b;
                    return (_b =
                      (_a = a.toString) == null ? void 0 : _a.call(a)) != null
                      ? _b
                      : JSON.stringify(a);
                  })
                  .join(""),
              instance && instance.proxy,
              trace
                .map(
                  ({ vnode }) =>
                    `at <${formatComponentName(instance, vnode.type)}>`
                )
                .join("\n"),
              trace,
            ]);
          } else {
            const warnArgs = [`[Vue warn]: ${msg}`, ...args];
            if (
              trace.length && // avoid spamming console during tests
              true
            ) {
              warnArgs.push(
                `
`,
                ...formatTrace(trace)
              );
            }
            console.warn(...warnArgs);
          }
          Object(
            _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["resetTracking"]
          )();
        }
        function getComponentTrace() {
          let currentVNode = stack[stack.length - 1];
          if (!currentVNode) {
            return [];
          }
          const normalizedStack = [];
          while (currentVNode) {
            const last = normalizedStack[0];
            if (last && last.vnode === currentVNode) {
              last.recurseCount++;
            } else {
              normalizedStack.push({
                vnode: currentVNode,
                recurseCount: 0,
              });
            }
            const parentInstance =
              currentVNode.component && currentVNode.component.parent;
            currentVNode = parentInstance && parentInstance.vnode;
          }
          return normalizedStack;
        }
        function formatTrace(trace) {
          const logs = [];
          trace.forEach((entry, i) => {
            logs.push(
              ...(i === 0
                ? []
                : [
                    `
`,
                  ]),
              ...formatTraceEntry(entry)
            );
          });
          return logs;
        }
        function formatTraceEntry({ vnode, recurseCount }) {
          const postfix =
            recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
          const isRoot = vnode.component
            ? vnode.component.parent == null
            : false;
          const open = ` at <${formatComponentName(
            vnode.component,
            vnode.type,
            isRoot
          )}`;
          const close = `>` + postfix;
          return vnode.props
            ? [open, ...formatProps(vnode.props), close]
            : [open + close];
        }
        function formatProps(props) {
          const res = [];
          const keys = Object.keys(props);
          keys.slice(0, 3).forEach((key) => {
            res.push(...formatProp(key, props[key]));
          });
          if (keys.length > 3) {
            res.push(` ...`);
          }
          return res;
        }
        function formatProp(key, value, raw) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(value)
          ) {
            value = JSON.stringify(value);
            return raw ? value : [`${key}=${value}`];
          } else if (
            typeof value === "number" ||
            typeof value === "boolean" ||
            value == null
          ) {
            return raw ? value : [`${key}=${value}`];
          } else if (
            Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"])(value)
          ) {
            value = formatProp(
              key,
              Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"])(
                value.value
              ),
              true
            );
            return raw ? value : [`${key}=Ref<`, value, `>`];
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              value
            )
          ) {
            return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
          } else {
            value = Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"]
            )(value);
            return raw ? value : [`${key}=`, value];
          }
        }
        function assertNumber(val, type) {
          if (false) {
          }
          if (val === void 0) {
            return;
          } else if (typeof val !== "number") {
            warn$1(
              `${type} is not a valid number - got ${JSON.stringify(val)}.`
            );
          } else if (isNaN(val)) {
            warn$1(
              `${type} is NaN - the duration expression might be incorrect.`
            );
          }
        }

        const ErrorCodes = {
          SETUP_FUNCTION: 0,
          0: "SETUP_FUNCTION",
          RENDER_FUNCTION: 1,
          1: "RENDER_FUNCTION",
          WATCH_GETTER: 2,
          2: "WATCH_GETTER",
          WATCH_CALLBACK: 3,
          3: "WATCH_CALLBACK",
          WATCH_CLEANUP: 4,
          4: "WATCH_CLEANUP",
          NATIVE_EVENT_HANDLER: 5,
          5: "NATIVE_EVENT_HANDLER",
          COMPONENT_EVENT_HANDLER: 6,
          6: "COMPONENT_EVENT_HANDLER",
          VNODE_HOOK: 7,
          7: "VNODE_HOOK",
          DIRECTIVE_HOOK: 8,
          8: "DIRECTIVE_HOOK",
          TRANSITION_HOOK: 9,
          9: "TRANSITION_HOOK",
          APP_ERROR_HANDLER: 10,
          10: "APP_ERROR_HANDLER",
          APP_WARN_HANDLER: 11,
          11: "APP_WARN_HANDLER",
          FUNCTION_REF: 12,
          12: "FUNCTION_REF",
          ASYNC_COMPONENT_LOADER: 13,
          13: "ASYNC_COMPONENT_LOADER",
          SCHEDULER: 14,
          14: "SCHEDULER",
        };
        const ErrorTypeStrings$1 = {
          ["sp"]: "serverPrefetch hook",
          ["bc"]: "beforeCreate hook",
          ["c"]: "created hook",
          ["bm"]: "beforeMount hook",
          ["m"]: "mounted hook",
          ["bu"]: "beforeUpdate hook",
          ["u"]: "updated",
          ["bum"]: "beforeUnmount hook",
          ["um"]: "unmounted hook",
          ["a"]: "activated hook",
          ["da"]: "deactivated hook",
          ["ec"]: "errorCaptured hook",
          ["rtc"]: "renderTracked hook",
          ["rtg"]: "renderTriggered hook",
          [0]: "setup function",
          [1]: "render function",
          [2]: "watcher getter",
          [3]: "watcher callback",
          [4]: "watcher cleanup function",
          [5]: "native event handler",
          [6]: "component event handler",
          [7]: "vnode hook",
          [8]: "directive hook",
          [9]: "transition hook",
          [10]: "app errorHandler",
          [11]: "app warnHandler",
          [12]: "ref function",
          [13]: "async component loader",
          [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://github.com/vuejs/core .",
        };
        function callWithErrorHandling(fn, instance, type, args) {
          try {
            return args ? fn(...args) : fn();
          } catch (err) {
            handleError(err, instance, type);
          }
        }
        function callWithAsyncErrorHandling(fn, instance, type, args) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(fn)
          ) {
            const res = callWithErrorHandling(fn, instance, type, args);
            if (
              res &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isPromise"])(res)
            ) {
              res.catch((err) => {
                handleError(err, instance, type);
              });
            }
            return res;
          }
          if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(fn)) {
            const values = [];
            for (let i = 0; i < fn.length; i++) {
              values.push(
                callWithAsyncErrorHandling(fn[i], instance, type, args)
              );
            }
            return values;
          } else if (true) {
            warn$1(
              `Invalid value type passed to callWithAsyncErrorHandling(): ${typeof fn}`
            );
          }
        }
        function handleError(err, instance, type, throwInDev = true) {
          const contextVNode = instance ? instance.vnode : null;
          if (instance) {
            let cur = instance.parent;
            const exposedInstance = instance.proxy;
            const errorInfo = true ? ErrorTypeStrings$1[type] : undefined;
            while (cur) {
              const errorCapturedHooks = cur.ec;
              if (errorCapturedHooks) {
                for (let i = 0; i < errorCapturedHooks.length; i++) {
                  if (
                    errorCapturedHooks[i](err, exposedInstance, errorInfo) ===
                    false
                  ) {
                    return;
                  }
                }
              }
              cur = cur.parent;
            }
            const appErrorHandler = instance.appContext.config.errorHandler;
            if (appErrorHandler) {
              Object(
                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["pauseTracking"]
              )();
              callWithErrorHandling(appErrorHandler, null, 10, [
                err,
                exposedInstance,
                errorInfo,
              ]);
              Object(
                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["resetTracking"]
              )();
              return;
            }
          }
          logError(err, type, contextVNode, throwInDev);
        }
        function logError(err, type, contextVNode, throwInDev = true) {
          if (true) {
            const info = ErrorTypeStrings$1[type];
            if (contextVNode) {
              pushWarningContext(contextVNode);
            }
            warn$1(
              `Unhandled error${info ? ` during execution of ${info}` : ``}`
            );
            if (contextVNode) {
              popWarningContext();
            }
            if (throwInDev) {
              throw err;
            } else {
              console.error(err);
            }
          } else {
          }
        }

        let isFlushing = false;
        let isFlushPending = false;
        const queue = [];
        let flushIndex = 0;
        const pendingPostFlushCbs = [];
        let activePostFlushCbs = null;
        let postFlushIndex = 0;
        const resolvedPromise = /* @__PURE__ */ Promise.resolve();
        let currentFlushPromise = null;
        const RECURSION_LIMIT = 100;
        function nextTick(fn) {
          const p = currentFlushPromise || resolvedPromise;
          return fn ? p.then(this ? fn.bind(this) : fn) : p;
        }
        function findInsertionIndex(id) {
          let start = flushIndex + 1;
          let end = queue.length;
          while (start < end) {
            const middle = (start + end) >>> 1;
            const middleJob = queue[middle];
            const middleJobId = getId(middleJob);
            if (middleJobId < id || (middleJobId === id && middleJob.pre)) {
              start = middle + 1;
            } else {
              end = middle;
            }
          }
          return start;
        }
        function queueJob(job) {
          if (
            !queue.length ||
            !queue.includes(
              job,
              isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex
            )
          ) {
            if (job.id == null) {
              queue.push(job);
            } else {
              queue.splice(findInsertionIndex(job.id), 0, job);
            }
            queueFlush();
          }
        }
        function queueFlush() {
          if (!isFlushing && !isFlushPending) {
            isFlushPending = true;
            currentFlushPromise = resolvedPromise.then(flushJobs);
          }
        }
        function invalidateJob(job) {
          const i = queue.indexOf(job);
          if (i > flushIndex) {
            queue.splice(i, 1);
          }
        }
        function queuePostFlushCb(cb) {
          if (
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(cb)
          ) {
            if (
              !activePostFlushCbs ||
              !activePostFlushCbs.includes(
                cb,
                cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex
              )
            ) {
              pendingPostFlushCbs.push(cb);
            }
          } else {
            pendingPostFlushCbs.push(...cb);
          }
          queueFlush();
        }
        function flushPreFlushCbs(
          instance,
          seen,
          i = isFlushing ? flushIndex + 1 : 0
        ) {
          if (true) {
            seen = seen || /* @__PURE__ */ new Map();
          }
          for (; i < queue.length; i++) {
            const cb = queue[i];
            if (cb && cb.pre) {
              if (instance && cb.id !== instance.uid) {
                continue;
              }
              if (true && checkRecursiveUpdates(seen, cb)) {
                continue;
              }
              queue.splice(i, 1);
              i--;
              cb();
            }
          }
        }
        function flushPostFlushCbs(seen) {
          if (pendingPostFlushCbs.length) {
            const deduped = [...new Set(pendingPostFlushCbs)].sort(
              (a, b) => getId(a) - getId(b)
            );
            pendingPostFlushCbs.length = 0;
            if (activePostFlushCbs) {
              activePostFlushCbs.push(...deduped);
              return;
            }
            activePostFlushCbs = deduped;
            if (true) {
              seen = seen || /* @__PURE__ */ new Map();
            }
            for (
              postFlushIndex = 0;
              postFlushIndex < activePostFlushCbs.length;
              postFlushIndex++
            ) {
              if (
                true &&
                checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])
              ) {
                continue;
              }
              activePostFlushCbs[postFlushIndex]();
            }
            activePostFlushCbs = null;
            postFlushIndex = 0;
          }
        }
        const getId = (job) => (job.id == null ? Infinity : job.id);
        const comparator = (a, b) => {
          const diff = getId(a) - getId(b);
          if (diff === 0) {
            if (a.pre && !b.pre) return -1;
            if (b.pre && !a.pre) return 1;
          }
          return diff;
        };
        function flushJobs(seen) {
          isFlushPending = false;
          isFlushing = true;
          if (true) {
            seen = seen || /* @__PURE__ */ new Map();
          }
          queue.sort(comparator);
          const check = true
            ? (job) => checkRecursiveUpdates(seen, job)
            : undefined;
          try {
            for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
              const job = queue[flushIndex];
              if (job && job.active !== false) {
                if (true && check(job)) {
                  continue;
                }
                callWithErrorHandling(job, null, 14);
              }
            }
          } finally {
            flushIndex = 0;
            queue.length = 0;
            flushPostFlushCbs(seen);
            isFlushing = false;
            currentFlushPromise = null;
            if (queue.length || pendingPostFlushCbs.length) {
              flushJobs(seen);
            }
          }
        }
        function checkRecursiveUpdates(seen, fn) {
          if (!seen.has(fn)) {
            seen.set(fn, 1);
          } else {
            const count = seen.get(fn);
            if (count > RECURSION_LIMIT) {
              const instance = fn.ownerInstance;
              const componentName = instance && getComponentName(instance.type);
              handleError(
                `Maximum recursive updates exceeded${
                  componentName ? ` in component <${componentName}>` : ``
                }. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,
                null,
                10
              );
              return true;
            } else {
              seen.set(fn, count + 1);
            }
          }
        }

        let isHmrUpdating = false;
        const hmrDirtyComponents = /* @__PURE__ */ new Set();
        if (true) {
          Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["getGlobalThis"]
          )().__VUE_HMR_RUNTIME__ = {
            createRecord: tryWrap(createRecord),
            rerender: tryWrap(rerender),
            reload: tryWrap(reload),
          };
        }
        const map = /* @__PURE__ */ new Map();
        function registerHMR(instance) {
          const id = instance.type.__hmrId;
          let record = map.get(id);
          if (!record) {
            createRecord(id, instance.type);
            record = map.get(id);
          }
          record.instances.add(instance);
        }
        function unregisterHMR(instance) {
          map.get(instance.type.__hmrId).instances.delete(instance);
        }
        function createRecord(id, initialDef) {
          if (map.has(id)) {
            return false;
          }
          map.set(id, {
            initialDef: normalizeClassComponent(initialDef),
            instances: /* @__PURE__ */ new Set(),
          });
          return true;
        }
        function normalizeClassComponent(component) {
          return isClassComponent(component) ? component.__vccOpts : component;
        }
        function rerender(id, newRender) {
          const record = map.get(id);
          if (!record) {
            return;
          }
          record.initialDef.render = newRender;
          [...record.instances].forEach((instance) => {
            if (newRender) {
              instance.render = newRender;
              normalizeClassComponent(instance.type).render = newRender;
            }
            instance.renderCache = [];
            isHmrUpdating = true;
            instance.effect.dirty = true;
            instance.update();
            isHmrUpdating = false;
          });
        }
        function reload(id, newComp) {
          const record = map.get(id);
          if (!record) return;
          newComp = normalizeClassComponent(newComp);
          updateComponentDef(record.initialDef, newComp);
          const instances = [...record.instances];
          for (const instance of instances) {
            const oldComp = normalizeClassComponent(instance.type);
            if (!hmrDirtyComponents.has(oldComp)) {
              if (oldComp !== record.initialDef) {
                updateComponentDef(oldComp, newComp);
              }
              hmrDirtyComponents.add(oldComp);
            }
            instance.appContext.propsCache.delete(instance.type);
            instance.appContext.emitsCache.delete(instance.type);
            instance.appContext.optionsCache.delete(instance.type);
            if (instance.ceReload) {
              hmrDirtyComponents.add(oldComp);
              instance.ceReload(newComp.styles);
              hmrDirtyComponents.delete(oldComp);
            } else if (instance.parent) {
              instance.parent.effect.dirty = true;
              queueJob(instance.parent.update);
            } else if (instance.appContext.reload) {
              instance.appContext.reload();
            } else if (typeof window !== "undefined") {
              window.location.reload();
            } else {
              console.warn(
                "[HMR] Root or manually mounted instance modified. Full reload required."
              );
            }
          }
          queuePostFlushCb(() => {
            for (const instance of instances) {
              hmrDirtyComponents.delete(normalizeClassComponent(instance.type));
            }
          });
        }
        function updateComponentDef(oldComp, newComp) {
          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
            oldComp,
            newComp
          );
          for (const key in oldComp) {
            if (key !== "__file" && !(key in newComp)) {
              delete oldComp[key];
            }
          }
        }
        function tryWrap(fn) {
          return (id, arg) => {
            try {
              return fn(id, arg);
            } catch (e) {
              console.error(e);
              console.warn(
                `[HMR] Something went wrong during Vue component hot-reload. Full reload required.`
              );
            }
          };
        }

        let devtools$1;
        let buffer = [];
        let devtoolsNotInstalled = false;
        function emit$1(event, ...args) {
          if (devtools$1) {
            devtools$1.emit(event, ...args);
          } else if (!devtoolsNotInstalled) {
            buffer.push({ event, args });
          }
        }
        function setDevtoolsHook$1(hook, target) {
          var _a, _b;
          devtools$1 = hook;
          if (devtools$1) {
            devtools$1.enabled = true;
            buffer.forEach(({ event, args }) =>
              devtools$1.emit(event, ...args)
            );
            buffer = [];
          } else if (
            // handle late devtools injection - only do this if we are in an actual
            // browser environment to avoid the timer handle stalling test runner exit
            // (#4815)
            typeof window !== "undefined" && // some envs mock window but not fully
            window.HTMLElement && // also exclude jsdom
            !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) ==
            null
              ? void 0
              : _b.includes("jsdom"))
          ) {
            const replay = (target.__VUE_DEVTOOLS_HOOK_REPLAY__ =
              target.__VUE_DEVTOOLS_HOOK_REPLAY__ || []);
            replay.push((newHook) => {
              setDevtoolsHook$1(newHook, target);
            });
            setTimeout(() => {
              if (!devtools$1) {
                target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
                devtoolsNotInstalled = true;
                buffer = [];
              }
            }, 3e3);
          } else {
            devtoolsNotInstalled = true;
            buffer = [];
          }
        }
        function devtoolsInitApp(app, version) {
          emit$1("app:init" /* APP_INIT */, app, version, {
            Fragment,
            Text,
            Comment,
            Static,
          });
        }
        function devtoolsUnmountApp(app) {
          emit$1("app:unmount" /* APP_UNMOUNT */, app);
        }
        const devtoolsComponentAdded =
          /* @__PURE__ */ createDevtoolsComponentHook(
            "component:added" /* COMPONENT_ADDED */
          );
        const devtoolsComponentUpdated =
          /* @__PURE__ */ createDevtoolsComponentHook(
            "component:updated" /* COMPONENT_UPDATED */
          );
        const _devtoolsComponentRemoved =
          /* @__PURE__ */ createDevtoolsComponentHook(
            "component:removed" /* COMPONENT_REMOVED */
          );
        const devtoolsComponentRemoved = (component) => {
          if (
            devtools$1 &&
            typeof devtools$1.cleanupBuffer === "function" && // remove the component if it wasn't buffered
            !devtools$1.cleanupBuffer(component)
          ) {
            _devtoolsComponentRemoved(component);
          }
        };
        /*! #__NO_SIDE_EFFECTS__ */
        // @__NO_SIDE_EFFECTS__
        function createDevtoolsComponentHook(hook) {
          return (component) => {
            emit$1(
              hook,
              component.appContext.app,
              component.uid,
              component.parent ? component.parent.uid : void 0,
              component
            );
          };
        }
        const devtoolsPerfStart = /* @__PURE__ */ createDevtoolsPerformanceHook(
          "perf:start" /* PERFORMANCE_START */
        );
        const devtoolsPerfEnd = /* @__PURE__ */ createDevtoolsPerformanceHook(
          "perf:end" /* PERFORMANCE_END */
        );
        function createDevtoolsPerformanceHook(hook) {
          return (component, type, time) => {
            emit$1(
              hook,
              component.appContext.app,
              component.uid,
              component,
              type,
              time
            );
          };
        }
        function devtoolsComponentEmit(component, event, params) {
          emit$1(
            "component:emit" /* COMPONENT_EMIT */,
            component.appContext.app,
            component,
            event,
            params
          );
        }

        function emit(instance, event, ...rawArgs) {
          if (instance.isUnmounted) return;
          const props =
            instance.vnode.props ||
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"];
          if (true) {
            const {
              emitsOptions,
              propsOptions: [propsOptions],
            } = instance;
            if (emitsOptions) {
              if (!(event in emitsOptions) && true) {
                if (
                  !propsOptions ||
                  !(
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toHandlerKey"]
                    )(event) in propsOptions
                  )
                ) {
                  warn$1(
                    `Component emitted event "${event}" but it is neither declared in the emits option nor as an "${Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toHandlerKey"]
                    )(event)}" prop.`
                  );
                }
              } else {
                const validator = emitsOptions[event];
                if (
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"]
                  )(validator)
                ) {
                  const isValid = validator(...rawArgs);
                  if (!isValid) {
                    warn$1(
                      `Invalid event arguments: event validation failed for event "${event}".`
                    );
                  }
                }
              }
            }
          }
          let args = rawArgs;
          const isModelListener = event.startsWith("update:");
          const modelArg = isModelListener && event.slice(7);
          if (modelArg && modelArg in props) {
            const modifiersKey = `${
              modelArg === "modelValue" ? "model" : modelArg
            }Modifiers`;
            const { number, trim } =
              props[modifiersKey] ||
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"];
            if (trim) {
              args = rawArgs.map((a) =>
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(a)
                  ? a.trim()
                  : a
              );
            }
            if (number) {
              args = rawArgs.map(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseToNumber"]
              );
            }
          }
          if (true) {
            devtoolsComponentEmit(instance, event, args);
          }
          if (true) {
            const lowerCaseEvent = event.toLowerCase();
            if (
              lowerCaseEvent !== event &&
              props[
                Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toHandlerKey"]
                )(lowerCaseEvent)
              ]
            ) {
              warn$1(
                `Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(
                  instance,
                  instance.type
                )} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"]
                )(event)}" instead of "${event}".`
              );
            }
          }
          let handlerName;
          let handler =
            props[
              (handlerName = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toHandlerKey"]
              )(event))
            ] || // also try camelCase event handler (#2249)
            props[
              (handlerName = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toHandlerKey"]
              )(
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"])(
                  event
                )
              ))
            ];
          if (!handler && isModelListener) {
            handler =
              props[
                (handlerName = Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toHandlerKey"]
                )(
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"])(
                    event
                  )
                ))
              ];
          }
          if (handler) {
            callWithAsyncErrorHandling(handler, instance, 6, args);
          }
          const onceHandler = props[handlerName + `Once`];
          if (onceHandler) {
            if (!instance.emitted) {
              instance.emitted = {};
            } else if (instance.emitted[handlerName]) {
              return;
            }
            instance.emitted[handlerName] = true;
            callWithAsyncErrorHandling(onceHandler, instance, 6, args);
          }
        }
        function normalizeEmitsOptions(comp, appContext, asMixin = false) {
          const cache = appContext.emitsCache;
          const cached = cache.get(comp);
          if (cached !== void 0) {
            return cached;
          }
          const raw = comp.emits;
          let normalized = {};
          let hasExtends = false;
          if (
            true &&
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              comp
            )
          ) {
            const extendEmits = (raw2) => {
              const normalizedFromExtend = normalizeEmitsOptions(
                raw2,
                appContext,
                true
              );
              if (normalizedFromExtend) {
                hasExtends = true;
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                  normalized,
                  normalizedFromExtend
                );
              }
            };
            if (!asMixin && appContext.mixins.length) {
              appContext.mixins.forEach(extendEmits);
            }
            if (comp.extends) {
              extendEmits(comp.extends);
            }
            if (comp.mixins) {
              comp.mixins.forEach(extendEmits);
            }
          }
          if (!raw && !hasExtends) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(comp)
            ) {
              cache.set(comp, null);
            }
            return null;
          }
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(raw)
          ) {
            raw.forEach((key) => (normalized[key] = null));
          } else {
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
              normalized,
              raw
            );
          }
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(comp)
          ) {
            cache.set(comp, normalized);
          }
          return normalized;
        }
        function isEmitListener(options, key) {
          if (
            !options ||
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isOn"])(key)
          ) {
            return false;
          }
          key = key.slice(2).replace(/Once$/, "");
          return (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
              options,
              key[0].toLowerCase() + key.slice(1)
            ) ||
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
              options,
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"])(key)
            ) ||
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
              options,
              key
            )
          );
        }

        let currentRenderingInstance = null;
        let currentScopeId = null;
        function setCurrentRenderingInstance(instance) {
          const prev = currentRenderingInstance;
          currentRenderingInstance = instance;
          currentScopeId = (instance && instance.type.__scopeId) || null;
          return prev;
        }
        function pushScopeId(id) {
          currentScopeId = id;
        }
        function popScopeId() {
          currentScopeId = null;
        }
        const withScopeId = (_id) => withCtx;
        function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
          if (!ctx) return fn;
          if (fn._n) {
            return fn;
          }
          const renderFnWithContext = (...args) => {
            if (renderFnWithContext._d) {
              setBlockTracking(-1);
            }
            const prevInstance = setCurrentRenderingInstance(ctx);
            let res;
            try {
              res = fn(...args);
            } finally {
              setCurrentRenderingInstance(prevInstance);
              if (renderFnWithContext._d) {
                setBlockTracking(1);
              }
            }
            if (true) {
              devtoolsComponentUpdated(ctx);
            }
            return res;
          };
          renderFnWithContext._n = true;
          renderFnWithContext._c = true;
          renderFnWithContext._d = true;
          return renderFnWithContext;
        }

        let accessedAttrs = false;
        function markAttrsAccessed() {
          accessedAttrs = true;
        }
        function renderComponentRoot(instance) {
          const {
            type: Component,
            vnode,
            proxy,
            withProxy,
            propsOptions: [propsOptions],
            slots,
            attrs,
            emit,
            render,
            renderCache,
            props,
            data,
            setupState,
            ctx,
            inheritAttrs,
          } = instance;
          const prev = setCurrentRenderingInstance(instance);
          let result;
          let fallthroughAttrs;
          if (true) {
            accessedAttrs = false;
          }
          try {
            if (vnode.shapeFlag & 4) {
              const proxyToUse = withProxy || proxy;
              const thisProxy =
                true && setupState.__isScriptSetup
                  ? new Proxy(proxyToUse, {
                      get(target, key, receiver) {
                        warn$1(
                          `Property '${String(
                            key
                          )}' was accessed via 'this'. Avoid using 'this' in templates.`
                        );
                        return Reflect.get(target, key, receiver);
                      },
                    })
                  : proxyToUse;
              result = normalizeVNode(
                render.call(
                  thisProxy,
                  proxyToUse,
                  renderCache,
                  true
                    ? Object(
                        _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                          "shallowReadonly"
                        ]
                      )(props)
                    : undefined,
                  setupState,
                  data,
                  ctx
                )
              );
              fallthroughAttrs = attrs;
            } else {
              const render2 = Component;
              if (true && attrs === props) {
                markAttrsAccessed();
              }
              result = normalizeVNode(
                render2.length > 1
                  ? render2(
                      true
                        ? Object(
                            _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                              "shallowReadonly"
                            ]
                          )(props)
                        : undefined,
                      true
                        ? {
                            get attrs() {
                              markAttrsAccessed();
                              return Object(
                                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                                  "shallowReadonly"
                                ]
                              )(attrs);
                            },
                            slots,
                            emit,
                          }
                        : undefined
                    )
                  : render2(
                      true
                        ? Object(
                            _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                              "shallowReadonly"
                            ]
                          )(props)
                        : undefined,
                      null
                    )
              );
              fallthroughAttrs = Component.props
                ? attrs
                : getFunctionalFallthrough(attrs);
            }
          } catch (err) {
            blockStack.length = 0;
            handleError(err, instance, 1);
            result = createVNode(Comment);
          }
          let root = result;
          let setRoot = void 0;
          if (true && result.patchFlag > 0 && result.patchFlag & 2048) {
            [root, setRoot] = getChildRoot(result);
          }
          if (fallthroughAttrs && inheritAttrs !== false) {
            const keys = Object.keys(fallthroughAttrs);
            const { shapeFlag } = root;
            if (keys.length) {
              if (shapeFlag & (1 | 6)) {
                if (
                  propsOptions &&
                  keys.some(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isModelListener"]
                  )
                ) {
                  fallthroughAttrs = filterModelListeners(
                    fallthroughAttrs,
                    propsOptions
                  );
                }
                root = cloneVNode(root, fallthroughAttrs, false, true);
              } else if (true && !accessedAttrs && root.type !== Comment) {
                const allAttrs = Object.keys(attrs);
                const eventAttrs = [];
                const extraAttrs = [];
                for (let i = 0, l = allAttrs.length; i < l; i++) {
                  const key = allAttrs[i];
                  if (
                    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isOn"])(
                      key
                    )
                  ) {
                    if (
                      !Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__[
                          "isModelListener"
                        ]
                      )(key)
                    ) {
                      eventAttrs.push(key[2].toLowerCase() + key.slice(3));
                    }
                  } else {
                    extraAttrs.push(key);
                  }
                }
                if (extraAttrs.length) {
                  warn$1(
                    `Extraneous non-props attributes (${extraAttrs.join(
                      ", "
                    )}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`
                  );
                }
                if (eventAttrs.length) {
                  warn$1(
                    `Extraneous non-emits event listeners (${eventAttrs.join(
                      ", "
                    )}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`
                  );
                }
              }
            }
          }
          if (vnode.dirs) {
            if (true && !isElementRoot(root)) {
              warn$1(
                `Runtime directive used on component with non-element root node. The directives will not function as intended.`
              );
            }
            root = cloneVNode(root, null, false, true);
            root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
          }
          if (vnode.transition) {
            if (true && !isElementRoot(root)) {
              warn$1(
                `Component inside <Transition> renders non-element root node that cannot be animated.`
              );
            }
            root.transition = vnode.transition;
          }
          if (true && setRoot) {
            setRoot(root);
          } else {
            result = root;
          }
          setCurrentRenderingInstance(prev);
          return result;
        }
        const getChildRoot = (vnode) => {
          const rawChildren = vnode.children;
          const dynamicChildren = vnode.dynamicChildren;
          const childRoot = filterSingleRoot(rawChildren, false);
          if (!childRoot) {
            return [vnode, void 0];
          } else if (
            true &&
            childRoot.patchFlag > 0 &&
            childRoot.patchFlag & 2048
          ) {
            return getChildRoot(childRoot);
          }
          const index = rawChildren.indexOf(childRoot);
          const dynamicIndex = dynamicChildren
            ? dynamicChildren.indexOf(childRoot)
            : -1;
          const setRoot = (updatedRoot) => {
            rawChildren[index] = updatedRoot;
            if (dynamicChildren) {
              if (dynamicIndex > -1) {
                dynamicChildren[dynamicIndex] = updatedRoot;
              } else if (updatedRoot.patchFlag > 0) {
                vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
              }
            }
          };
          return [normalizeVNode(childRoot), setRoot];
        };
        function filterSingleRoot(children, recurse = true) {
          let singleRoot;
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isVNode(child)) {
              if (child.type !== Comment || child.children === "v-if") {
                if (singleRoot) {
                  return;
                } else {
                  singleRoot = child;
                  if (
                    true &&
                    recurse &&
                    singleRoot.patchFlag > 0 &&
                    singleRoot.patchFlag & 2048
                  ) {
                    return filterSingleRoot(singleRoot.children);
                  }
                }
              }
            } else {
              return;
            }
          }
          return singleRoot;
        }
        const getFunctionalFallthrough = (attrs) => {
          let res;
          for (const key in attrs) {
            if (
              key === "class" ||
              key === "style" ||
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isOn"])(key)
            ) {
              (res || (res = {}))[key] = attrs[key];
            }
          }
          return res;
        };
        const filterModelListeners = (attrs, props) => {
          const res = {};
          for (const key in attrs) {
            if (
              !Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isModelListener"]
              )(key) ||
              !(key.slice(9) in props)
            ) {
              res[key] = attrs[key];
            }
          }
          return res;
        };
        const isElementRoot = (vnode) => {
          return vnode.shapeFlag & (6 | 1) || vnode.type === Comment;
        };
        function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
          const {
            props: prevProps,
            children: prevChildren,
            component,
          } = prevVNode;
          const {
            props: nextProps,
            children: nextChildren,
            patchFlag,
          } = nextVNode;
          const emits = component.emitsOptions;
          if (true && (prevChildren || nextChildren) && isHmrUpdating) {
            return true;
          }
          if (nextVNode.dirs || nextVNode.transition) {
            return true;
          }
          if (optimized && patchFlag >= 0) {
            if (patchFlag & 1024) {
              return true;
            }
            if (patchFlag & 16) {
              if (!prevProps) {
                return !!nextProps;
              }
              return hasPropsChanged(prevProps, nextProps, emits);
            } else if (patchFlag & 8) {
              const dynamicProps = nextVNode.dynamicProps;
              for (let i = 0; i < dynamicProps.length; i++) {
                const key = dynamicProps[i];
                if (
                  nextProps[key] !== prevProps[key] &&
                  !isEmitListener(emits, key)
                ) {
                  return true;
                }
              }
            }
          } else {
            if (prevChildren || nextChildren) {
              if (!nextChildren || !nextChildren.$stable) {
                return true;
              }
            }
            if (prevProps === nextProps) {
              return false;
            }
            if (!prevProps) {
              return !!nextProps;
            }
            if (!nextProps) {
              return true;
            }
            return hasPropsChanged(prevProps, nextProps, emits);
          }
          return false;
        }
        function hasPropsChanged(prevProps, nextProps, emitsOptions) {
          const nextKeys = Object.keys(nextProps);
          if (nextKeys.length !== Object.keys(prevProps).length) {
            return true;
          }
          for (let i = 0; i < nextKeys.length; i++) {
            const key = nextKeys[i];
            if (
              nextProps[key] !== prevProps[key] &&
              !isEmitListener(emitsOptions, key)
            ) {
              return true;
            }
          }
          return false;
        }
        function updateHOCHostEl({ vnode, parent }, el) {
          while (parent) {
            const root = parent.subTree;
            if (root.suspense && root.suspense.activeBranch === vnode) {
              root.el = vnode.el;
            }
            if (root === vnode) {
              (vnode = parent.vnode).el = el;
              parent = parent.parent;
            } else {
              break;
            }
          }
        }

        const COMPONENTS = "components";
        const DIRECTIVES = "directives";
        function resolveComponent(name, maybeSelfReference) {
          return (
            resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name
          );
        }
        const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
        function resolveDynamicComponent(component) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(
              component
            )
          ) {
            return resolveAsset(COMPONENTS, component, false) || component;
          } else {
            return component || NULL_DYNAMIC_COMPONENT;
          }
        }
        function resolveDirective(name) {
          return resolveAsset(DIRECTIVES, name);
        }
        function resolveAsset(
          type,
          name,
          warnMissing = true,
          maybeSelfReference = false
        ) {
          const instance = currentRenderingInstance || currentInstance;
          if (instance) {
            const Component = instance.type;
            if (type === COMPONENTS) {
              const selfName = getComponentName(Component, false);
              if (
                selfName &&
                (selfName === name ||
                  selfName ===
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"]
                    )(name) ||
                  selfName ===
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["capitalize"]
                    )(
                      Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"]
                      )(name)
                    ))
              ) {
                return Component;
              }
            }
            const res =
              // local registration
              // check instance[type] first which is resolved for options API
              resolve(instance[type] || Component[type], name) || // global registration
              resolve(instance.appContext[type], name);
            if (!res && maybeSelfReference) {
              return Component;
            }
            if (true && warnMissing && !res) {
              const extra =
                type === COMPONENTS
                  ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.`
                  : ``;
              warn$1(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
            }
            return res;
          } else if (true) {
            warn$1(
              `resolve${Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["capitalize"]
              )(type.slice(0, -1))} can only be used in render() or setup().`
            );
          }
        }
        function resolve(registry, name) {
          return (
            registry &&
            (registry[name] ||
              registry[
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"])(
                  name
                )
              ] ||
              registry[
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["capitalize"])(
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"])(
                    name
                  )
                )
              ])
          );
        }

        const isSuspense = (type) => type.__isSuspense;
        let suspenseId = 0;
        const SuspenseImpl = {
          name: "Suspense",
          // In order to make Suspense tree-shakable, we need to avoid importing it
          // directly in the renderer. The renderer checks for the __isSuspense flag
          // on a vnode's type and calls the `process` method, passing in renderer
          // internals.
          __isSuspense: true,
          process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            rendererInternals
          ) {
            if (n1 == null) {
              mountSuspense(
                n2,
                container,
                anchor,
                parentComponent,
                parentSuspense,
                namespace,
                slotScopeIds,
                optimized,
                rendererInternals
              );
            } else {
              if (
                parentSuspense &&
                parentSuspense.deps > 0 &&
                !n1.suspense.isInFallback
              ) {
                n2.suspense = n1.suspense;
                n2.suspense.vnode = n2;
                n2.el = n1.el;
                return;
              }
              patchSuspense(
                n1,
                n2,
                container,
                anchor,
                parentComponent,
                namespace,
                slotScopeIds,
                optimized,
                rendererInternals
              );
            }
          },
          hydrate: hydrateSuspense,
          create: createSuspenseBoundary,
          normalize: normalizeSuspenseChildren,
        };
        const Suspense = SuspenseImpl;
        function triggerEvent(vnode, name) {
          const eventListener = vnode.props && vnode.props[name];
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              eventListener
            )
          ) {
            eventListener();
          }
        }
        function mountSuspense(
          vnode,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized,
          rendererInternals
        ) {
          const {
            p: patch,
            o: { createElement },
          } = rendererInternals;
          const hiddenContainer = createElement("div");
          const suspense = (vnode.suspense = createSuspenseBoundary(
            vnode,
            parentSuspense,
            parentComponent,
            container,
            hiddenContainer,
            anchor,
            namespace,
            slotScopeIds,
            optimized,
            rendererInternals
          ));
          patch(
            null,
            (suspense.pendingBranch = vnode.ssContent),
            hiddenContainer,
            null,
            parentComponent,
            suspense,
            namespace,
            slotScopeIds
          );
          if (suspense.deps > 0) {
            triggerEvent(vnode, "onPending");
            triggerEvent(vnode, "onFallback");
            patch(
              null,
              vnode.ssFallback,
              container,
              anchor,
              parentComponent,
              null,
              // fallback tree will not have suspense context
              namespace,
              slotScopeIds
            );
            setActiveBranch(suspense, vnode.ssFallback);
          } else {
            suspense.resolve(false, true);
          }
        }
        function patchSuspense(
          n1,
          n2,
          container,
          anchor,
          parentComponent,
          namespace,
          slotScopeIds,
          optimized,
          { p: patch, um: unmount, o: { createElement } }
        ) {
          const suspense = (n2.suspense = n1.suspense);
          suspense.vnode = n2;
          n2.el = n1.el;
          const newBranch = n2.ssContent;
          const newFallback = n2.ssFallback;
          const { activeBranch, pendingBranch, isInFallback, isHydrating } =
            suspense;
          if (pendingBranch) {
            suspense.pendingBranch = newBranch;
            if (isSameVNodeType(newBranch, pendingBranch)) {
              patch(
                pendingBranch,
                newBranch,
                suspense.hiddenContainer,
                null,
                parentComponent,
                suspense,
                namespace,
                slotScopeIds,
                optimized
              );
              if (suspense.deps <= 0) {
                suspense.resolve();
              } else if (isInFallback) {
                if (!isHydrating) {
                  patch(
                    activeBranch,
                    newFallback,
                    container,
                    anchor,
                    parentComponent,
                    null,
                    // fallback tree will not have suspense context
                    namespace,
                    slotScopeIds,
                    optimized
                  );
                  setActiveBranch(suspense, newFallback);
                }
              }
            } else {
              suspense.pendingId = suspenseId++;
              if (isHydrating) {
                suspense.isHydrating = false;
                suspense.activeBranch = pendingBranch;
              } else {
                unmount(pendingBranch, parentComponent, suspense);
              }
              suspense.deps = 0;
              suspense.effects.length = 0;
              suspense.hiddenContainer = createElement("div");
              if (isInFallback) {
                patch(
                  null,
                  newBranch,
                  suspense.hiddenContainer,
                  null,
                  parentComponent,
                  suspense,
                  namespace,
                  slotScopeIds,
                  optimized
                );
                if (suspense.deps <= 0) {
                  suspense.resolve();
                } else {
                  patch(
                    activeBranch,
                    newFallback,
                    container,
                    anchor,
                    parentComponent,
                    null,
                    // fallback tree will not have suspense context
                    namespace,
                    slotScopeIds,
                    optimized
                  );
                  setActiveBranch(suspense, newFallback);
                }
              } else if (
                activeBranch &&
                isSameVNodeType(newBranch, activeBranch)
              ) {
                patch(
                  activeBranch,
                  newBranch,
                  container,
                  anchor,
                  parentComponent,
                  suspense,
                  namespace,
                  slotScopeIds,
                  optimized
                );
                suspense.resolve(true);
              } else {
                patch(
                  null,
                  newBranch,
                  suspense.hiddenContainer,
                  null,
                  parentComponent,
                  suspense,
                  namespace,
                  slotScopeIds,
                  optimized
                );
                if (suspense.deps <= 0) {
                  suspense.resolve();
                }
              }
            }
          } else {
            if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
              patch(
                activeBranch,
                newBranch,
                container,
                anchor,
                parentComponent,
                suspense,
                namespace,
                slotScopeIds,
                optimized
              );
              setActiveBranch(suspense, newBranch);
            } else {
              triggerEvent(n2, "onPending");
              suspense.pendingBranch = newBranch;
              if (newBranch.shapeFlag & 512) {
                suspense.pendingId = newBranch.component.suspenseId;
              } else {
                suspense.pendingId = suspenseId++;
              }
              patch(
                null,
                newBranch,
                suspense.hiddenContainer,
                null,
                parentComponent,
                suspense,
                namespace,
                slotScopeIds,
                optimized
              );
              if (suspense.deps <= 0) {
                suspense.resolve();
              } else {
                const { timeout, pendingId } = suspense;
                if (timeout > 0) {
                  setTimeout(() => {
                    if (suspense.pendingId === pendingId) {
                      suspense.fallback(newFallback);
                    }
                  }, timeout);
                } else if (timeout === 0) {
                  suspense.fallback(newFallback);
                }
              }
            }
          }
        }
        let hasWarned = false;
        function createSuspenseBoundary(
          vnode,
          parentSuspense,
          parentComponent,
          container,
          hiddenContainer,
          anchor,
          namespace,
          slotScopeIds,
          optimized,
          rendererInternals,
          isHydrating = false
        ) {
          if (true && !hasWarned) {
            hasWarned = true;
            console[console.info ? "info" : "log"](
              `<Suspense> is an experimental feature and its API will likely change.`
            );
          }
          const {
            p: patch,
            m: move,
            um: unmount,
            n: next,
            o: { parentNode, remove },
          } = rendererInternals;
          let parentSuspenseId;
          const isSuspensible = isVNodeSuspensible(vnode);
          if (isSuspensible) {
            if (parentSuspense && parentSuspense.pendingBranch) {
              parentSuspenseId = parentSuspense.pendingId;
              parentSuspense.deps++;
            }
          }
          const timeout = vnode.props
            ? Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["toNumber"])(
                vnode.props.timeout
              )
            : void 0;
          if (true) {
            assertNumber(timeout, `Suspense timeout`);
          }
          const initialAnchor = anchor;
          const suspense = {
            vnode,
            parent: parentSuspense,
            parentComponent,
            namespace,
            container,
            hiddenContainer,
            deps: 0,
            pendingId: suspenseId++,
            timeout: typeof timeout === "number" ? timeout : -1,
            activeBranch: null,
            pendingBranch: null,
            isInFallback: !isHydrating,
            isHydrating,
            isUnmounted: false,
            effects: [],
            resolve(resume = false, sync = false) {
              if (true) {
                if (!resume && !suspense.pendingBranch) {
                  throw new Error(
                    `suspense.resolve() is called without a pending branch.`
                  );
                }
                if (suspense.isUnmounted) {
                  throw new Error(
                    `suspense.resolve() is called on an already unmounted suspense boundary.`
                  );
                }
              }
              const {
                vnode: vnode2,
                activeBranch,
                pendingBranch,
                pendingId,
                effects,
                parentComponent: parentComponent2,
                container: container2,
              } = suspense;
              let delayEnter = false;
              if (suspense.isHydrating) {
                suspense.isHydrating = false;
              } else if (!resume) {
                delayEnter =
                  activeBranch &&
                  pendingBranch.transition &&
                  pendingBranch.transition.mode === "out-in";
                if (delayEnter) {
                  activeBranch.transition.afterLeave = () => {
                    if (pendingId === suspense.pendingId) {
                      move(
                        pendingBranch,
                        container2,
                        anchor === initialAnchor ? next(activeBranch) : anchor,
                        0
                      );
                      queuePostFlushCb(effects);
                    }
                  };
                }
                if (activeBranch) {
                  if (
                    parentNode(activeBranch.el) !== suspense.hiddenContainer
                  ) {
                    anchor = next(activeBranch);
                  }
                  unmount(activeBranch, parentComponent2, suspense, true);
                }
                if (!delayEnter) {
                  move(pendingBranch, container2, anchor, 0);
                }
              }
              setActiveBranch(suspense, pendingBranch);
              suspense.pendingBranch = null;
              suspense.isInFallback = false;
              let parent = suspense.parent;
              let hasUnresolvedAncestor = false;
              while (parent) {
                if (parent.pendingBranch) {
                  parent.effects.push(...effects);
                  hasUnresolvedAncestor = true;
                  break;
                }
                parent = parent.parent;
              }
              if (!hasUnresolvedAncestor && !delayEnter) {
                queuePostFlushCb(effects);
              }
              suspense.effects = [];
              if (isSuspensible) {
                if (
                  parentSuspense &&
                  parentSuspense.pendingBranch &&
                  parentSuspenseId === parentSuspense.pendingId
                ) {
                  parentSuspense.deps--;
                  if (parentSuspense.deps === 0 && !sync) {
                    parentSuspense.resolve();
                  }
                }
              }
              triggerEvent(vnode2, "onResolve");
            },
            fallback(fallbackVNode) {
              if (!suspense.pendingBranch) {
                return;
              }
              const {
                vnode: vnode2,
                activeBranch,
                parentComponent: parentComponent2,
                container: container2,
                namespace: namespace2,
              } = suspense;
              triggerEvent(vnode2, "onFallback");
              const anchor2 = next(activeBranch);
              const mountFallback = () => {
                if (!suspense.isInFallback) {
                  return;
                }
                patch(
                  null,
                  fallbackVNode,
                  container2,
                  anchor2,
                  parentComponent2,
                  null,
                  // fallback tree will not have suspense context
                  namespace2,
                  slotScopeIds,
                  optimized
                );
                setActiveBranch(suspense, fallbackVNode);
              };
              const delayEnter =
                fallbackVNode.transition &&
                fallbackVNode.transition.mode === "out-in";
              if (delayEnter) {
                activeBranch.transition.afterLeave = mountFallback;
              }
              suspense.isInFallback = true;
              unmount(
                activeBranch,
                parentComponent2,
                null,
                // no suspense so unmount hooks fire now
                true
                // shouldRemove
              );
              if (!delayEnter) {
                mountFallback();
              }
            },
            move(container2, anchor2, type) {
              suspense.activeBranch &&
                move(suspense.activeBranch, container2, anchor2, type);
              suspense.container = container2;
            },
            next() {
              return suspense.activeBranch && next(suspense.activeBranch);
            },
            registerDep(instance, setupRenderEffect) {
              const isInPendingSuspense = !!suspense.pendingBranch;
              if (isInPendingSuspense) {
                suspense.deps++;
              }
              const hydratedEl = instance.vnode.el;
              instance.asyncDep
                .catch((err) => {
                  handleError(err, instance, 0);
                })
                .then((asyncSetupResult) => {
                  if (
                    instance.isUnmounted ||
                    suspense.isUnmounted ||
                    suspense.pendingId !== instance.suspenseId
                  ) {
                    return;
                  }
                  instance.asyncResolved = true;
                  const { vnode: vnode2 } = instance;
                  if (true) {
                    pushWarningContext(vnode2);
                  }
                  handleSetupResult(instance, asyncSetupResult, false);
                  if (hydratedEl) {
                    vnode2.el = hydratedEl;
                  }
                  const placeholder = !hydratedEl && instance.subTree.el;
                  setupRenderEffect(
                    instance,
                    vnode2,
                    // component may have been moved before resolve.
                    // if this is not a hydration, instance.subTree will be the comment
                    // placeholder.
                    parentNode(hydratedEl || instance.subTree.el),
                    // anchor will not be used if this is hydration, so only need to
                    // consider the comment placeholder case.
                    hydratedEl ? null : next(instance.subTree),
                    suspense,
                    namespace,
                    optimized
                  );
                  if (placeholder) {
                    remove(placeholder);
                  }
                  updateHOCHostEl(instance, vnode2.el);
                  if (true) {
                    popWarningContext();
                  }
                  if (isInPendingSuspense && --suspense.deps === 0) {
                    suspense.resolve();
                  }
                });
            },
            unmount(parentSuspense2, doRemove) {
              suspense.isUnmounted = true;
              if (suspense.activeBranch) {
                unmount(
                  suspense.activeBranch,
                  parentComponent,
                  parentSuspense2,
                  doRemove
                );
              }
              if (suspense.pendingBranch) {
                unmount(
                  suspense.pendingBranch,
                  parentComponent,
                  parentSuspense2,
                  doRemove
                );
              }
            },
          };
          return suspense;
        }
        function hydrateSuspense(
          node,
          vnode,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized,
          rendererInternals,
          hydrateNode
        ) {
          const suspense = (vnode.suspense = createSuspenseBoundary(
            vnode,
            parentSuspense,
            parentComponent,
            node.parentNode,
            // eslint-disable-next-line no-restricted-globals
            document.createElement("div"),
            null,
            namespace,
            slotScopeIds,
            optimized,
            rendererInternals,
            true
          ));
          const result = hydrateNode(
            node,
            (suspense.pendingBranch = vnode.ssContent),
            parentComponent,
            suspense,
            slotScopeIds,
            optimized
          );
          if (suspense.deps === 0) {
            suspense.resolve(false, true);
          }
          return result;
        }
        function normalizeSuspenseChildren(vnode) {
          const { shapeFlag, children } = vnode;
          const isSlotChildren = shapeFlag & 32;
          vnode.ssContent = normalizeSuspenseSlot(
            isSlotChildren ? children.default : children
          );
          vnode.ssFallback = isSlotChildren
            ? normalizeSuspenseSlot(children.fallback)
            : createVNode(Comment);
        }
        function normalizeSuspenseSlot(s) {
          let block;
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(s)
          ) {
            const trackBlock = isBlockTreeEnabled && s._c;
            if (trackBlock) {
              s._d = false;
              openBlock();
            }
            s = s();
            if (trackBlock) {
              s._d = true;
              block = currentBlock;
              closeBlock();
            }
          }
          if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(s)) {
            const singleChild = filterSingleRoot(s);
            if (
              true &&
              !singleChild &&
              s.filter((child) => child !== NULL_DYNAMIC_COMPONENT).length > 0
            ) {
              warn$1(`<Suspense> slots expect a single root node.`);
            }
            s = singleChild;
          }
          s = normalizeVNode(s);
          if (block && !s.dynamicChildren) {
            s.dynamicChildren = block.filter((c) => c !== s);
          }
          return s;
        }
        function queueEffectWithSuspense(fn, suspense) {
          if (suspense && suspense.pendingBranch) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(fn)
            ) {
              suspense.effects.push(...fn);
            } else {
              suspense.effects.push(fn);
            }
          } else {
            queuePostFlushCb(fn);
          }
        }
        function setActiveBranch(suspense, branch) {
          suspense.activeBranch = branch;
          const { vnode, parentComponent } = suspense;
          let el = branch.el;
          while (!el && branch.component) {
            branch = branch.component.subTree;
            el = branch.el;
          }
          vnode.el = el;
          if (parentComponent && parentComponent.subTree === vnode) {
            parentComponent.vnode.el = el;
            updateHOCHostEl(parentComponent, el);
          }
        }
        function isVNodeSuspensible(vnode) {
          const suspensible = vnode.props && vnode.props.suspensible;
          return suspensible != null && suspensible !== false;
        }

        const ssrContextKey = Symbol.for("v-scx");
        const useSSRContext = () => {
          {
            const ctx = inject(ssrContextKey);
            if (!ctx) {
              true &&
                warn$1(
                  `Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`
                );
            }
            return ctx;
          }
        };

        function watchEffect(effect, options) {
          return doWatch(effect, null, options);
        }
        function watchPostEffect(effect, options) {
          return doWatch(
            effect,
            null,
            true
              ? Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                  {},
                  options,
                  { flush: "post" }
                )
              : undefined
          );
        }
        function watchSyncEffect(effect, options) {
          return doWatch(
            effect,
            null,
            true
              ? Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                  {},
                  options,
                  { flush: "sync" }
                )
              : undefined
          );
        }
        const INITIAL_WATCHER_VALUE = {};
        function watch(source, cb, options) {
          if (
            true &&
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(cb)
          ) {
            warn$1(
              `\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`
            );
          }
          return doWatch(source, cb, options);
        }
        function doWatch(
          source,
          cb,
          {
            immediate,
            deep,
            flush,
            once,
            onTrack,
            onTrigger,
          } = _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"]
        ) {
          if (cb && once) {
            const _cb = cb;
            cb = (...args) => {
              _cb(...args);
              unwatch();
            };
          }
          if (true && deep !== void 0 && typeof deep === "number") {
            warn$1(
              `watch() "deep" option with number value will be used as watch depth in future versions. Please use a boolean instead to avoid potential breakage.`
            );
          }
          if (true && !cb) {
            if (immediate !== void 0) {
              warn$1(
                `watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`
              );
            }
            if (deep !== void 0) {
              warn$1(
                `watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`
              );
            }
            if (once !== void 0) {
              warn$1(
                `watch() "once" option is only respected when using the watch(source, callback, options?) signature.`
              );
            }
          }
          const warnInvalidSource = (s) => {
            warn$1(
              `Invalid watch source: `,
              s,
              `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`
            );
          };
          const instance = currentInstance;
          const reactiveGetter = (source2) =>
            deep === true
              ? source2
              : // for deep: false, only traverse root-level properties
                traverse(source2, deep === false ? 1 : void 0);
          let getter;
          let forceTrigger = false;
          let isMultiSource = false;
          if (
            Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"])(
              source
            )
          ) {
            getter = () => source.value;
            forceTrigger = Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isShallow"]
            )(source);
          } else if (
            Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isReactive"])(
              source
            )
          ) {
            getter = () => reactiveGetter(source);
            forceTrigger = true;
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(source)
          ) {
            isMultiSource = true;
            forceTrigger = source.some(
              (s) =>
                Object(
                  _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isReactive"]
                )(s) ||
                Object(
                  _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isShallow"]
                )(s)
            );
            getter = () =>
              source.map((s) => {
                if (
                  Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"])(
                    s
                  )
                ) {
                  return s.value;
                } else if (
                  Object(
                    _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isReactive"]
                  )(s)
                ) {
                  return reactiveGetter(s);
                } else if (
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"]
                  )(s)
                ) {
                  return callWithErrorHandling(s, instance, 2);
                } else {
                  true && warnInvalidSource(s);
                }
              });
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              source
            )
          ) {
            if (cb) {
              getter = () => callWithErrorHandling(source, instance, 2);
            } else {
              getter = () => {
                if (cleanup) {
                  cleanup();
                }
                return callWithAsyncErrorHandling(source, instance, 3, [
                  onCleanup,
                ]);
              };
            }
          } else {
            getter = _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
            true && warnInvalidSource(source);
          }
          if (cb && deep) {
            const baseGetter = getter;
            getter = () => traverse(baseGetter());
          }
          let cleanup;
          let onCleanup = (fn) => {
            cleanup = effect.onStop = () => {
              callWithErrorHandling(fn, instance, 4);
              cleanup = effect.onStop = void 0;
            };
          };
          let ssrCleanup;
          if (isInSSRComponentSetup) {
            onCleanup = _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
            if (!cb) {
              getter();
            } else if (immediate) {
              callWithAsyncErrorHandling(cb, instance, 3, [
                getter(),
                isMultiSource ? [] : void 0,
                onCleanup,
              ]);
            }
            if (flush === "sync") {
              const ctx = useSSRContext();
              ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
            } else {
              return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
            }
          }
          let oldValue = isMultiSource
            ? new Array(source.length).fill(INITIAL_WATCHER_VALUE)
            : INITIAL_WATCHER_VALUE;
          const job = () => {
            if (!effect.active || !effect.dirty) {
              return;
            }
            if (cb) {
              const newValue = effect.run();
              if (
                deep ||
                forceTrigger ||
                (isMultiSource
                  ? newValue.some((v, i) =>
                      Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasChanged"]
                      )(v, oldValue[i])
                    )
                  : Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasChanged"]
                    )(newValue, oldValue)) ||
                false
              ) {
                if (cleanup) {
                  cleanup();
                }
                callWithAsyncErrorHandling(cb, instance, 3, [
                  newValue,
                  // pass undefined as the old value when it's changed for the first time
                  oldValue === INITIAL_WATCHER_VALUE
                    ? void 0
                    : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE
                    ? []
                    : oldValue,
                  onCleanup,
                ]);
                oldValue = newValue;
              }
            } else {
              effect.run();
            }
          };
          job.allowRecurse = !!cb;
          let scheduler;
          if (flush === "sync") {
            scheduler = job;
          } else if (flush === "post") {
            scheduler = () =>
              queuePostRenderEffect(job, instance && instance.suspense);
          } else {
            job.pre = true;
            if (instance) job.id = instance.uid;
            scheduler = () => queueJob(job);
          }
          const effect = new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
            "ReactiveEffect"
          ](
            getter,
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"],
            scheduler
          );
          const scope = Object(
            _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["getCurrentScope"]
          )();
          const unwatch = () => {
            effect.stop();
            if (scope) {
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["remove"])(
                scope.effects,
                effect
              );
            }
          };
          if (true) {
            effect.onTrack = onTrack;
            effect.onTrigger = onTrigger;
          }
          if (cb) {
            if (immediate) {
              job();
            } else {
              oldValue = effect.run();
            }
          } else if (flush === "post") {
            queuePostRenderEffect(
              effect.run.bind(effect),
              instance && instance.suspense
            );
          } else {
            effect.run();
          }
          if (ssrCleanup) ssrCleanup.push(unwatch);
          return unwatch;
        }
        function instanceWatch(source, value, options) {
          const publicThis = this.proxy;
          const getter = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"]
          )(source)
            ? source.includes(".")
              ? createPathGetter(publicThis, source)
              : () => publicThis[source]
            : source.bind(publicThis, publicThis);
          let cb;
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              value
            )
          ) {
            cb = value;
          } else {
            cb = value.handler;
            options = value;
          }
          const reset = setCurrentInstance(this);
          const res = doWatch(getter, cb.bind(publicThis), options);
          reset();
          return res;
        }
        function createPathGetter(ctx, path) {
          const segments = path.split(".");
          return () => {
            let cur = ctx;
            for (let i = 0; i < segments.length && cur; i++) {
              cur = cur[segments[i]];
            }
            return cur;
          };
        }
        function traverse(value, depth = Infinity, seen) {
          if (
            depth <= 0 ||
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(
              value
            ) ||
            value["__v_skip"]
          ) {
            return value;
          }
          seen = seen || /* @__PURE__ */ new Set();
          if (seen.has(value)) {
            return value;
          }
          seen.add(value);
          depth--;
          if (
            Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"])(value)
          ) {
            traverse(value.value, depth, seen);
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)
          ) {
            for (let i = 0; i < value.length; i++) {
              traverse(value[i], depth, seen);
            }
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isSet"])(value) ||
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isMap"])(value)
          ) {
            value.forEach((v) => {
              traverse(v, depth, seen);
            });
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isPlainObject"])(
              value
            )
          ) {
            for (const key in value) {
              traverse(value[key], depth, seen);
            }
          }
          return value;
        }

        function validateDirectiveName(name) {
          if (
            Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isBuiltInDirective"]
            )(name)
          ) {
            warn$1(
              "Do not use built-in directive ids as custom directive id: " +
                name
            );
          }
        }
        function withDirectives(vnode, directives) {
          if (currentRenderingInstance === null) {
            true &&
              warn$1(
                `withDirectives can only be used inside render functions.`
              );
            return vnode;
          }
          const instance =
            getExposeProxy(currentRenderingInstance) ||
            currentRenderingInstance.proxy;
          const bindings = vnode.dirs || (vnode.dirs = []);
          for (let i = 0; i < directives.length; i++) {
            let [
              dir,
              value,
              arg,
              modifiers = _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"],
            ] = directives[i];
            if (dir) {
              if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                  dir
                )
              ) {
                dir = {
                  mounted: dir,
                  updated: dir,
                };
              }
              if (dir.deep) {
                traverse(value);
              }
              bindings.push({
                dir,
                instance,
                value,
                oldValue: void 0,
                arg,
                modifiers,
              });
            }
          }
          return vnode;
        }
        function invokeDirectiveHook(vnode, prevVNode, instance, name) {
          const bindings = vnode.dirs;
          const oldBindings = prevVNode && prevVNode.dirs;
          for (let i = 0; i < bindings.length; i++) {
            const binding = bindings[i];
            if (oldBindings) {
              binding.oldValue = oldBindings[i].value;
            }
            let hook = binding.dir[name];
            if (hook) {
              Object(
                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["pauseTracking"]
              )();
              callWithAsyncErrorHandling(hook, instance, 8, [
                vnode.el,
                binding,
                vnode,
                prevVNode,
              ]);
              Object(
                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["resetTracking"]
              )();
            }
          }
        }

        const leaveCbKey = Symbol("_leaveCb");
        const enterCbKey = Symbol("_enterCb");
        function useTransitionState() {
          const state = {
            isMounted: false,
            isLeaving: false,
            isUnmounting: false,
            leavingVNodes: /* @__PURE__ */ new Map(),
          };
          onMounted(() => {
            state.isMounted = true;
          });
          onBeforeUnmount(() => {
            state.isUnmounting = true;
          });
          return state;
        }
        const TransitionHookValidator = [Function, Array];
        const BaseTransitionPropsValidators = {
          mode: String,
          appear: Boolean,
          persisted: Boolean,
          // enter
          onBeforeEnter: TransitionHookValidator,
          onEnter: TransitionHookValidator,
          onAfterEnter: TransitionHookValidator,
          onEnterCancelled: TransitionHookValidator,
          // leave
          onBeforeLeave: TransitionHookValidator,
          onLeave: TransitionHookValidator,
          onAfterLeave: TransitionHookValidator,
          onLeaveCancelled: TransitionHookValidator,
          // appear
          onBeforeAppear: TransitionHookValidator,
          onAppear: TransitionHookValidator,
          onAfterAppear: TransitionHookValidator,
          onAppearCancelled: TransitionHookValidator,
        };
        const BaseTransitionImpl = {
          name: `BaseTransition`,
          props: BaseTransitionPropsValidators,
          setup(props, { slots }) {
            const instance = getCurrentInstance();
            const state = useTransitionState();
            return () => {
              const children =
                slots.default &&
                getTransitionRawChildren(slots.default(), true);
              if (!children || !children.length) {
                return;
              }
              let child = children[0];
              if (children.length > 1) {
                let hasFound = false;
                for (const c of children) {
                  if (c.type !== Comment) {
                    if (true && hasFound) {
                      warn$1(
                        "<transition> can only be used on a single element or component. Use <transition-group> for lists."
                      );
                      break;
                    }
                    child = c;
                    hasFound = true;
                    if (false) {
                    }
                  }
                }
              }
              const rawProps = Object(
                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"]
              )(props);
              const { mode } = rawProps;
              if (
                true &&
                mode &&
                mode !== "in-out" &&
                mode !== "out-in" &&
                mode !== "default"
              ) {
                warn$1(`invalid <transition> mode: ${mode}`);
              }
              if (state.isLeaving) {
                return emptyPlaceholder(child);
              }
              const innerChild = getKeepAliveChild(child);
              if (!innerChild) {
                return emptyPlaceholder(child);
              }
              const enterHooks = resolveTransitionHooks(
                innerChild,
                rawProps,
                state,
                instance
              );
              setTransitionHooks(innerChild, enterHooks);
              const oldChild = instance.subTree;
              const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
              if (
                oldInnerChild &&
                oldInnerChild.type !== Comment &&
                !isSameVNodeType(innerChild, oldInnerChild)
              ) {
                const leavingHooks = resolveTransitionHooks(
                  oldInnerChild,
                  rawProps,
                  state,
                  instance
                );
                setTransitionHooks(oldInnerChild, leavingHooks);
                if (mode === "out-in" && innerChild.type !== Comment) {
                  state.isLeaving = true;
                  leavingHooks.afterLeave = () => {
                    state.isLeaving = false;
                    if (instance.update.active !== false) {
                      instance.effect.dirty = true;
                      instance.update();
                    }
                  };
                  return emptyPlaceholder(child);
                } else if (mode === "in-out" && innerChild.type !== Comment) {
                  leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
                    const leavingVNodesCache = getLeavingNodesForType(
                      state,
                      oldInnerChild
                    );
                    leavingVNodesCache[String(oldInnerChild.key)] =
                      oldInnerChild;
                    el[leaveCbKey] = () => {
                      earlyRemove();
                      el[leaveCbKey] = void 0;
                      delete enterHooks.delayedLeave;
                    };
                    enterHooks.delayedLeave = delayedLeave;
                  };
                }
              }
              return child;
            };
          },
        };
        const BaseTransition = BaseTransitionImpl;
        function getLeavingNodesForType(state, vnode) {
          const { leavingVNodes } = state;
          let leavingVNodesCache = leavingVNodes.get(vnode.type);
          if (!leavingVNodesCache) {
            leavingVNodesCache = /* @__PURE__ */ Object.create(null);
            leavingVNodes.set(vnode.type, leavingVNodesCache);
          }
          return leavingVNodesCache;
        }
        function resolveTransitionHooks(vnode, props, state, instance) {
          const {
            appear,
            mode,
            persisted = false,
            onBeforeEnter,
            onEnter,
            onAfterEnter,
            onEnterCancelled,
            onBeforeLeave,
            onLeave,
            onAfterLeave,
            onLeaveCancelled,
            onBeforeAppear,
            onAppear,
            onAfterAppear,
            onAppearCancelled,
          } = props;
          const key = String(vnode.key);
          const leavingVNodesCache = getLeavingNodesForType(state, vnode);
          const callHook = (hook, args) => {
            hook && callWithAsyncErrorHandling(hook, instance, 9, args);
          };
          const callAsyncHook = (hook, args) => {
            const done = args[1];
            callHook(hook, args);
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(hook)
            ) {
              if (hook.every((hook2) => hook2.length <= 1)) done();
            } else if (hook.length <= 1) {
              done();
            }
          };
          const hooks = {
            mode,
            persisted,
            beforeEnter(el) {
              let hook = onBeforeEnter;
              if (!state.isMounted) {
                if (appear) {
                  hook = onBeforeAppear || onBeforeEnter;
                } else {
                  return;
                }
              }
              if (el[leaveCbKey]) {
                el[leaveCbKey](
                  true
                  /* cancelled */
                );
              }
              const leavingVNode = leavingVNodesCache[key];
              if (
                leavingVNode &&
                isSameVNodeType(vnode, leavingVNode) &&
                leavingVNode.el[leaveCbKey]
              ) {
                leavingVNode.el[leaveCbKey]();
              }
              callHook(hook, [el]);
            },
            enter(el) {
              let hook = onEnter;
              let afterHook = onAfterEnter;
              let cancelHook = onEnterCancelled;
              if (!state.isMounted) {
                if (appear) {
                  hook = onAppear || onEnter;
                  afterHook = onAfterAppear || onAfterEnter;
                  cancelHook = onAppearCancelled || onEnterCancelled;
                } else {
                  return;
                }
              }
              let called = false;
              const done = (el[enterCbKey] = (cancelled) => {
                if (called) return;
                called = true;
                if (cancelled) {
                  callHook(cancelHook, [el]);
                } else {
                  callHook(afterHook, [el]);
                }
                if (hooks.delayedLeave) {
                  hooks.delayedLeave();
                }
                el[enterCbKey] = void 0;
              });
              if (hook) {
                callAsyncHook(hook, [el, done]);
              } else {
                done();
              }
            },
            leave(el, remove) {
              const key2 = String(vnode.key);
              if (el[enterCbKey]) {
                el[enterCbKey](
                  true
                  /* cancelled */
                );
              }
              if (state.isUnmounting) {
                return remove();
              }
              callHook(onBeforeLeave, [el]);
              let called = false;
              const done = (el[leaveCbKey] = (cancelled) => {
                if (called) return;
                called = true;
                remove();
                if (cancelled) {
                  callHook(onLeaveCancelled, [el]);
                } else {
                  callHook(onAfterLeave, [el]);
                }
                el[leaveCbKey] = void 0;
                if (leavingVNodesCache[key2] === vnode) {
                  delete leavingVNodesCache[key2];
                }
              });
              leavingVNodesCache[key2] = vnode;
              if (onLeave) {
                callAsyncHook(onLeave, [el, done]);
              } else {
                done();
              }
            },
            clone(vnode2) {
              return resolveTransitionHooks(vnode2, props, state, instance);
            },
          };
          return hooks;
        }
        function emptyPlaceholder(vnode) {
          if (isKeepAlive(vnode)) {
            vnode = cloneVNode(vnode);
            vnode.children = null;
            return vnode;
          }
        }
        function getKeepAliveChild(vnode) {
          if (!isKeepAlive(vnode)) {
            return vnode;
          }
          if (true && vnode.component) {
            return vnode.component.subTree;
          }
          const { shapeFlag, children } = vnode;
          if (children) {
            if (shapeFlag & 16) {
              return children[0];
            }
            if (
              shapeFlag & 32 &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                children.default
              )
            ) {
              return children.default();
            }
          }
        }
        function setTransitionHooks(vnode, hooks) {
          if (vnode.shapeFlag & 6 && vnode.component) {
            setTransitionHooks(vnode.component.subTree, hooks);
          } else if (vnode.shapeFlag & 128) {
            vnode.ssContent.transition = hooks.clone(vnode.ssContent);
            vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
          } else {
            vnode.transition = hooks;
          }
        }
        function getTransitionRawChildren(
          children,
          keepComment = false,
          parentKey
        ) {
          let ret = [];
          let keyedFragmentCount = 0;
          for (let i = 0; i < children.length; i++) {
            let child = children[i];
            const key =
              parentKey == null
                ? child.key
                : String(parentKey) + String(child.key != null ? child.key : i);
            if (child.type === Fragment) {
              if (child.patchFlag & 128) keyedFragmentCount++;
              ret = ret.concat(
                getTransitionRawChildren(child.children, keepComment, key)
              );
            } else if (keepComment || child.type !== Comment) {
              ret.push(key != null ? cloneVNode(child, { key }) : child);
            }
          }
          if (keyedFragmentCount > 1) {
            for (let i = 0; i < ret.length; i++) {
              ret[i].patchFlag = -2;
            }
          }
          return ret;
        }

        /*! #__NO_SIDE_EFFECTS__ */
        // @__NO_SIDE_EFFECTS__
        function defineComponent(options, extraOptions) {
          return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
            options
          )
            ? // #8326: extend call and options.name access are considered side-effects
              // by Rollup, so we have to wrap it in a pure-annotated IIFE.
              /* @__PURE__ */ (() =>
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                  { name: options.name },
                  extraOptions,
                  { setup: options }
                ))()
            : options;
        }

        const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
        /*! #__NO_SIDE_EFFECTS__ */
        // @__NO_SIDE_EFFECTS__
        function defineAsyncComponent(source) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              source
            )
          ) {
            source = { loader: source };
          }
          const {
            loader,
            loadingComponent,
            errorComponent,
            delay = 200,
            timeout,
            // undefined = never times out
            suspensible = true,
            onError: userOnError,
          } = source;
          let pendingRequest = null;
          let resolvedComp;
          let retries = 0;
          const retry = () => {
            retries++;
            pendingRequest = null;
            return load();
          };
          const load = () => {
            let thisRequest;
            return (
              pendingRequest ||
              (thisRequest = pendingRequest =
                loader()
                  .catch((err) => {
                    err = err instanceof Error ? err : new Error(String(err));
                    if (userOnError) {
                      return new Promise((resolve, reject) => {
                        const userRetry = () => resolve(retry());
                        const userFail = () => reject(err);
                        userOnError(err, userRetry, userFail, retries + 1);
                      });
                    } else {
                      throw err;
                    }
                  })
                  .then((comp) => {
                    if (thisRequest !== pendingRequest && pendingRequest) {
                      return pendingRequest;
                    }
                    if (true && !comp) {
                      warn$1(
                        `Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`
                      );
                    }
                    if (
                      comp &&
                      (comp.__esModule || comp[Symbol.toStringTag] === "Module")
                    ) {
                      comp = comp.default;
                    }
                    if (
                      true &&
                      comp &&
                      !Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"]
                      )(comp) &&
                      !Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"]
                      )(comp)
                    ) {
                      throw new Error(
                        `Invalid async component load result: ${comp}`
                      );
                    }
                    resolvedComp = comp;
                    return comp;
                  }))
            );
          };
          return defineComponent({
            name: "AsyncComponentWrapper",
            __asyncLoader: load,
            get __asyncResolved() {
              return resolvedComp;
            },
            setup() {
              const instance = currentInstance;
              if (resolvedComp) {
                return () => createInnerComp(resolvedComp, instance);
              }
              const onError = (err) => {
                pendingRequest = null;
                handleError(err, instance, 13, !errorComponent);
              };
              if ((suspensible && instance.suspense) || isInSSRComponentSetup) {
                return load()
                  .then((comp) => {
                    return () => createInnerComp(comp, instance);
                  })
                  .catch((err) => {
                    onError(err);
                    return () =>
                      errorComponent
                        ? createVNode(errorComponent, {
                            error: err,
                          })
                        : null;
                  });
              }
              const loaded = Object(
                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["ref"]
              )(false);
              const error = Object(
                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["ref"]
              )();
              const delayed = Object(
                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["ref"]
              )(!!delay);
              if (delay) {
                setTimeout(() => {
                  delayed.value = false;
                }, delay);
              }
              if (timeout != null) {
                setTimeout(() => {
                  if (!loaded.value && !error.value) {
                    const err = new Error(
                      `Async component timed out after ${timeout}ms.`
                    );
                    onError(err);
                    error.value = err;
                  }
                }, timeout);
              }
              load()
                .then(() => {
                  loaded.value = true;
                  if (instance.parent && isKeepAlive(instance.parent.vnode)) {
                    instance.parent.effect.dirty = true;
                    queueJob(instance.parent.update);
                  }
                })
                .catch((err) => {
                  onError(err);
                  error.value = err;
                });
              return () => {
                if (loaded.value && resolvedComp) {
                  return createInnerComp(resolvedComp, instance);
                } else if (error.value && errorComponent) {
                  return createVNode(errorComponent, {
                    error: error.value,
                  });
                } else if (loadingComponent && !delayed.value) {
                  return createVNode(loadingComponent);
                }
              };
            },
          });
        }
        function createInnerComp(comp, parent) {
          const { ref: ref2, props, children, ce } = parent.vnode;
          const vnode = createVNode(comp, props, children);
          vnode.ref = ref2;
          vnode.ce = ce;
          delete parent.vnode.ce;
          return vnode;
        }

        const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
        const KeepAliveImpl = {
          name: `KeepAlive`,
          // Marker for special handling inside the renderer. We are not using a ===
          // check directly on KeepAlive in the renderer, because importing it directly
          // would prevent it from being tree-shaken.
          __isKeepAlive: true,
          props: {
            include: [String, RegExp, Array],
            exclude: [String, RegExp, Array],
            max: [String, Number],
          },
          setup(props, { slots }) {
            const instance = getCurrentInstance();
            const sharedContext = instance.ctx;
            if (!sharedContext.renderer) {
              return () => {
                const children = slots.default && slots.default();
                return children && children.length === 1
                  ? children[0]
                  : children;
              };
            }
            const cache = /* @__PURE__ */ new Map();
            const keys = /* @__PURE__ */ new Set();
            let current = null;
            if (true) {
              instance.__v_cache = cache;
            }
            const parentSuspense = instance.suspense;
            const {
              renderer: {
                p: patch,
                m: move,
                um: _unmount,
                o: { createElement },
              },
            } = sharedContext;
            const storageContainer = createElement("div");
            sharedContext.activate = (
              vnode,
              container,
              anchor,
              namespace,
              optimized
            ) => {
              const instance2 = vnode.component;
              move(vnode, container, anchor, 0, parentSuspense);
              patch(
                instance2.vnode,
                vnode,
                container,
                anchor,
                instance2,
                parentSuspense,
                namespace,
                vnode.slotScopeIds,
                optimized
              );
              queuePostRenderEffect(() => {
                instance2.isDeactivated = false;
                if (instance2.a) {
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["invokeArrayFns"]
                  )(instance2.a);
                }
                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
                if (vnodeHook) {
                  invokeVNodeHook(vnodeHook, instance2.parent, vnode);
                }
              }, parentSuspense);
              if (true) {
                devtoolsComponentAdded(instance2);
              }
            };
            sharedContext.deactivate = (vnode) => {
              const instance2 = vnode.component;
              move(vnode, storageContainer, null, 1, parentSuspense);
              queuePostRenderEffect(() => {
                if (instance2.da) {
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["invokeArrayFns"]
                  )(instance2.da);
                }
                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
                if (vnodeHook) {
                  invokeVNodeHook(vnodeHook, instance2.parent, vnode);
                }
                instance2.isDeactivated = true;
              }, parentSuspense);
              if (true) {
                devtoolsComponentAdded(instance2);
              }
            };
            function unmount(vnode) {
              resetShapeFlag(vnode);
              _unmount(vnode, instance, parentSuspense, true);
            }
            function pruneCache(filter) {
              cache.forEach((vnode, key) => {
                const name = getComponentName(vnode.type);
                if (name && (!filter || !filter(name))) {
                  pruneCacheEntry(key);
                }
              });
            }
            function pruneCacheEntry(key) {
              const cached = cache.get(key);
              if (!current || !isSameVNodeType(cached, current)) {
                unmount(cached);
              } else if (current) {
                resetShapeFlag(current);
              }
              cache.delete(key);
              keys.delete(key);
            }
            watch(
              () => [props.include, props.exclude],
              ([include, exclude]) => {
                include && pruneCache((name) => matches(include, name));
                exclude && pruneCache((name) => !matches(exclude, name));
              },
              // prune post-render after `current` has been updated
              { flush: "post", deep: true }
            );
            let pendingCacheKey = null;
            const cacheSubtree = () => {
              if (pendingCacheKey != null) {
                cache.set(pendingCacheKey, getInnerChild(instance.subTree));
              }
            };
            onMounted(cacheSubtree);
            onUpdated(cacheSubtree);
            onBeforeUnmount(() => {
              cache.forEach((cached) => {
                const { subTree, suspense } = instance;
                const vnode = getInnerChild(subTree);
                if (cached.type === vnode.type && cached.key === vnode.key) {
                  resetShapeFlag(vnode);
                  const da = vnode.component.da;
                  da && queuePostRenderEffect(da, suspense);
                  return;
                }
                unmount(cached);
              });
            });
            return () => {
              pendingCacheKey = null;
              if (!slots.default) {
                return null;
              }
              const children = slots.default();
              const rawVNode = children[0];
              if (children.length > 1) {
                if (true) {
                  warn$1(
                    `KeepAlive should contain exactly one component child.`
                  );
                }
                current = null;
                return children;
              } else if (
                !isVNode(rawVNode) ||
                (!(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128))
              ) {
                current = null;
                return rawVNode;
              }
              let vnode = getInnerChild(rawVNode);
              const comp = vnode.type;
              const name = getComponentName(
                isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp
              );
              const { include, exclude, max } = props;
              if (
                (include && (!name || !matches(include, name))) ||
                (exclude && name && matches(exclude, name))
              ) {
                current = vnode;
                return rawVNode;
              }
              const key = vnode.key == null ? comp : vnode.key;
              const cachedVNode = cache.get(key);
              if (vnode.el) {
                vnode = cloneVNode(vnode);
                if (rawVNode.shapeFlag & 128) {
                  rawVNode.ssContent = vnode;
                }
              }
              pendingCacheKey = key;
              if (cachedVNode) {
                vnode.el = cachedVNode.el;
                vnode.component = cachedVNode.component;
                if (vnode.transition) {
                  setTransitionHooks(vnode, vnode.transition);
                }
                vnode.shapeFlag |= 512;
                keys.delete(key);
                keys.add(key);
              } else {
                keys.add(key);
                if (max && keys.size > parseInt(max, 10)) {
                  pruneCacheEntry(keys.values().next().value);
                }
              }
              vnode.shapeFlag |= 256;
              current = vnode;
              return isSuspense(rawVNode.type) ? rawVNode : vnode;
            };
          },
        };
        const KeepAlive = KeepAliveImpl;
        function matches(pattern, name) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(pattern)
          ) {
            return pattern.some((p) => matches(p, name));
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(
              pattern
            )
          ) {
            return pattern.split(",").includes(name);
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isRegExp"])(
              pattern
            )
          ) {
            return pattern.test(name);
          }
          return false;
        }
        function onActivated(hook, target) {
          registerKeepAliveHook(hook, "a", target);
        }
        function onDeactivated(hook, target) {
          registerKeepAliveHook(hook, "da", target);
        }
        function registerKeepAliveHook(hook, type, target = currentInstance) {
          const wrappedHook =
            hook.__wdc ||
            (hook.__wdc = () => {
              let current = target;
              while (current) {
                if (current.isDeactivated) {
                  return;
                }
                current = current.parent;
              }
              return hook();
            });
          injectHook(type, wrappedHook, target);
          if (target) {
            let current = target.parent;
            while (current && current.parent) {
              if (isKeepAlive(current.parent.vnode)) {
                injectToKeepAliveRoot(wrappedHook, type, target, current);
              }
              current = current.parent;
            }
          }
        }
        function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
          const injected = injectHook(
            type,
            hook,
            keepAliveRoot,
            true
            /* prepend */
          );
          onUnmounted(() => {
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["remove"])(
              keepAliveRoot[type],
              injected
            );
          }, target);
        }
        function resetShapeFlag(vnode) {
          vnode.shapeFlag &= ~256;
          vnode.shapeFlag &= ~512;
        }
        function getInnerChild(vnode) {
          return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
        }

        function injectHook(
          type,
          hook,
          target = currentInstance,
          prepend = false
        ) {
          if (target) {
            const hooks = target[type] || (target[type] = []);
            const wrappedHook =
              hook.__weh ||
              (hook.__weh = (...args) => {
                if (target.isUnmounted) {
                  return;
                }
                Object(
                  _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["pauseTracking"]
                )();
                const reset = setCurrentInstance(target);
                const res = callWithAsyncErrorHandling(
                  hook,
                  target,
                  type,
                  args
                );
                reset();
                Object(
                  _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["resetTracking"]
                )();
                return res;
              });
            if (prepend) {
              hooks.unshift(wrappedHook);
            } else {
              hooks.push(wrappedHook);
            }
            return wrappedHook;
          } else if (true) {
            const apiName = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toHandlerKey"]
            )(ErrorTypeStrings$1[type].replace(/ hook$/, ""));
            warn$1(
              `${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup().` +
                ` If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`
            );
          }
        }
        const createHook =
          (lifecycle) =>
          (hook, target = currentInstance) =>
            // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
            (!isInSSRComponentSetup || lifecycle === "sp") &&
            injectHook(lifecycle, (...args) => hook(...args), target);
        const onBeforeMount = createHook("bm");
        const onMounted = createHook("m");
        const onBeforeUpdate = createHook("bu");
        const onUpdated = createHook("u");
        const onBeforeUnmount = createHook("bum");
        const onUnmounted = createHook("um");
        const onServerPrefetch = createHook("sp");
        const onRenderTriggered = createHook("rtg");
        const onRenderTracked = createHook("rtc");
        function onErrorCaptured(hook, target = currentInstance) {
          injectHook("ec", hook, target);
        }

        function renderList(source, renderItem, cache, index) {
          let ret;
          const cached = cache && cache[index];
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
              source
            ) ||
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(source)
          ) {
            ret = new Array(source.length);
            for (let i = 0, l = source.length; i < l; i++) {
              ret[i] = renderItem(source[i], i, void 0, cached && cached[i]);
            }
          } else if (typeof source === "number") {
            if (true && !Number.isInteger(source)) {
              warn$1(
                `The v-for range expect an integer value but got ${source}.`
              );
            }
            ret = new Array(source);
            for (let i = 0; i < source; i++) {
              ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);
            }
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(source)
          ) {
            if (source[Symbol.iterator]) {
              ret = Array.from(source, (item, i) =>
                renderItem(item, i, void 0, cached && cached[i])
              );
            } else {
              const keys = Object.keys(source);
              ret = new Array(keys.length);
              for (let i = 0, l = keys.length; i < l; i++) {
                const key = keys[i];
                ret[i] = renderItem(source[key], key, i, cached && cached[i]);
              }
            }
          } else {
            ret = [];
          }
          if (cache) {
            cache[index] = ret;
          }
          return ret;
        }

        function createSlots(slots, dynamicSlots) {
          for (let i = 0; i < dynamicSlots.length; i++) {
            const slot = dynamicSlots[i];
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(slot)
            ) {
              for (let j = 0; j < slot.length; j++) {
                slots[slot[j].name] = slot[j].fn;
              }
            } else if (slot) {
              slots[slot.name] = slot.key
                ? (...args) => {
                    const res = slot.fn(...args);
                    if (res) res.key = slot.key;
                    return res;
                  }
                : slot.fn;
            }
          }
          return slots;
        }

        function renderSlot(slots, name, props = {}, fallback, noSlotted) {
          if (
            currentRenderingInstance.isCE ||
            (currentRenderingInstance.parent &&
              isAsyncWrapper(currentRenderingInstance.parent) &&
              currentRenderingInstance.parent.isCE)
          ) {
            if (name !== "default") props.name = name;
            return createVNode("slot", props, fallback && fallback());
          }
          let slot = slots[name];
          if (true && slot && slot.length > 1) {
            warn$1(
              `SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`
            );
            slot = () => [];
          }
          if (slot && slot._c) {
            slot._d = false;
          }
          openBlock();
          const validSlotContent = slot && ensureValidVNode(slot(props));
          const rendered = createBlock(
            Fragment,
            {
              key:
                props.key || // slot content array of a dynamic conditional slot may have a branch
                // key attached in the `createSlots` helper, respect that
                (validSlotContent && validSlotContent.key) ||
                `_${name}`,
            },
            validSlotContent || (fallback ? fallback() : []),
            validSlotContent && slots._ === 1 ? 64 : -2
          );
          if (!noSlotted && rendered.scopeId) {
            rendered.slotScopeIds = [rendered.scopeId + "-s"];
          }
          if (slot && slot._c) {
            slot._d = true;
          }
          return rendered;
        }
        function ensureValidVNode(vnodes) {
          return vnodes.some((child) => {
            if (!isVNode(child)) return true;
            if (child.type === Comment) return false;
            if (child.type === Fragment && !ensureValidVNode(child.children))
              return false;
            return true;
          })
            ? vnodes
            : null;
        }

        function toHandlers(obj, preserveCaseIfNecessary) {
          const ret = {};
          if (
            true &&
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(obj)
          ) {
            warn$1(`v-on with no argument expects an object value.`);
            return ret;
          }
          for (const key in obj) {
            ret[
              preserveCaseIfNecessary && /[A-Z]/.test(key)
                ? `on:${key}`
                : Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toHandlerKey"]
                  )(key)
            ] = obj[key];
          }
          return ret;
        }

        const getPublicInstance = (i) => {
          if (!i) return null;
          if (isStatefulComponent(i)) return getExposeProxy(i) || i.proxy;
          return getPublicInstance(i.parent);
        };
        const publicPropertiesMap =
          // Move PURE marker to new line to workaround compiler discarding it
          // due to type annotation
          /* @__PURE__ */ Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
          )(/* @__PURE__ */ Object.create(null), {
            $: (i) => i,
            $el: (i) => i.vnode.el,
            $data: (i) => i.data,
            $props: (i) =>
              true
                ? Object(
                    _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                      "shallowReadonly"
                    ]
                  )(i.props)
                : undefined,
            $attrs: (i) =>
              true
                ? Object(
                    _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                      "shallowReadonly"
                    ]
                  )(i.attrs)
                : undefined,
            $slots: (i) =>
              true
                ? Object(
                    _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                      "shallowReadonly"
                    ]
                  )(i.slots)
                : undefined,
            $refs: (i) =>
              true
                ? Object(
                    _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                      "shallowReadonly"
                    ]
                  )(i.refs)
                : undefined,
            $parent: (i) => getPublicInstance(i.parent),
            $root: (i) => getPublicInstance(i.root),
            $emit: (i) => i.emit,
            $options: (i) => (true ? resolveMergedOptions(i) : undefined),
            $forceUpdate: (i) =>
              i.f ||
              (i.f = () => {
                i.effect.dirty = true;
                queueJob(i.update);
              }),
            $nextTick: (i) => i.n || (i.n = nextTick.bind(i.proxy)),
            $watch: (i) => (true ? instanceWatch.bind(i) : undefined),
          });
        const isReservedPrefix = (key) => key === "_" || key === "$";
        const hasSetupBinding = (state, key) =>
          state !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"] &&
          !state.__isScriptSetup &&
          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
            state,
            key
          );
        const PublicInstanceProxyHandlers = {
          get({ _: instance }, key) {
            if (key === "__v_skip") {
              return true;
            }
            const {
              ctx,
              setupState,
              data,
              props,
              accessCache,
              type,
              appContext,
            } = instance;
            if (true && key === "__isVue") {
              return true;
            }
            let normalizedProps;
            if (key[0] !== "$") {
              const n = accessCache[key];
              if (n !== void 0) {
                switch (n) {
                  case 1 /* SETUP */:
                    return setupState[key];
                  case 2 /* DATA */:
                    return data[key];
                  case 4 /* CONTEXT */:
                    return ctx[key];
                  case 3 /* PROPS */:
                    return props[key];
                }
              } else if (hasSetupBinding(setupState, key)) {
                accessCache[key] = 1 /* SETUP */;
                return setupState[key];
              } else if (
                data !==
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"] &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  data,
                  key
                )
              ) {
                accessCache[key] = 2 /* DATA */;
                return data[key];
              } else if (
                // only cache other properties when instance has declared (thus stable)
                // props
                (normalizedProps = instance.propsOptions[0]) &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  normalizedProps,
                  key
                )
              ) {
                accessCache[key] = 3 /* PROPS */;
                return props[key];
              } else if (
                ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"] &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  ctx,
                  key
                )
              ) {
                accessCache[key] = 4 /* CONTEXT */;
                return ctx[key];
              } else if (false || shouldCacheAccess) {
                accessCache[key] = 0 /* OTHER */;
              }
            }
            const publicGetter = publicPropertiesMap[key];
            let cssModule, globalProperties;
            if (publicGetter) {
              if (key === "$attrs") {
                Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["track"])(
                  instance.attrs,
                  "get",
                  ""
                );
                true && markAttrsAccessed();
              } else if (true && key === "$slots") {
                Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["track"])(
                  instance,
                  "get",
                  key
                );
              }
              return publicGetter(instance);
            } else if (
              // css module (injected by vue-loader)
              (cssModule = type.__cssModules) &&
              (cssModule = cssModule[key])
            ) {
              return cssModule;
            } else if (
              ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"] &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                ctx,
                key
              )
            ) {
              accessCache[key] = 4 /* CONTEXT */;
              return ctx[key];
            } else if (
              // global properties
              ((globalProperties = appContext.config.globalProperties),
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                globalProperties,
                key
              ))
            ) {
              {
                return globalProperties[key];
              }
            } else if (
              true &&
              currentRenderingInstance &&
              (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(
                key
              ) || // #1091 avoid internal isRef/isVNode checks on component instance leading
                // to infinite warning loop
                key.indexOf("__v") !== 0)
            ) {
              if (
                data !==
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"] &&
                isReservedPrefix(key[0]) &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  data,
                  key
                )
              ) {
                warn$1(
                  `Property ${JSON.stringify(
                    key
                  )} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`
                );
              } else if (instance === currentRenderingInstance) {
                warn$1(
                  `Property ${JSON.stringify(
                    key
                  )} was accessed during render but is not defined on instance.`
                );
              }
            }
          },
          set({ _: instance }, key, value) {
            const { data, setupState, ctx } = instance;
            if (hasSetupBinding(setupState, key)) {
              setupState[key] = value;
              return true;
            } else if (
              true &&
              setupState.__isScriptSetup &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                setupState,
                key
              )
            ) {
              warn$1(
                `Cannot mutate <script setup> binding "${key}" from Options API.`
              );
              return false;
            } else if (
              data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"] &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                data,
                key
              )
            ) {
              data[key] = value;
              return true;
            } else if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                instance.props,
                key
              )
            ) {
              true &&
                warn$1(
                  `Attempting to mutate prop "${key}". Props are readonly.`
                );
              return false;
            }
            if (key[0] === "$" && key.slice(1) in instance) {
              true &&
                warn$1(
                  `Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`
                );
              return false;
            } else {
              if (true && key in instance.appContext.config.globalProperties) {
                Object.defineProperty(ctx, key, {
                  enumerable: true,
                  configurable: true,
                  value,
                });
              } else {
                ctx[key] = value;
              }
            }
            return true;
          },
          has(
            {
              _: {
                data,
                setupState,
                accessCache,
                ctx,
                appContext,
                propsOptions,
              },
            },
            key
          ) {
            let normalizedProps;
            return (
              !!accessCache[key] ||
              (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"] &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  data,
                  key
                )) ||
              hasSetupBinding(setupState, key) ||
              ((normalizedProps = propsOptions[0]) &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  normalizedProps,
                  key
                )) ||
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                ctx,
                key
              ) ||
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                publicPropertiesMap,
                key
              ) ||
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                appContext.config.globalProperties,
                key
              )
            );
          },
          defineProperty(target, key, descriptor) {
            if (descriptor.get != null) {
              target._.accessCache[key] = 0;
            } else if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                descriptor,
                "value"
              )
            ) {
              this.set(target, key, descriptor.value, null);
            }
            return Reflect.defineProperty(target, key, descriptor);
          },
        };
        if (true) {
          PublicInstanceProxyHandlers.ownKeys = (target) => {
            warn$1(
              `Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`
            );
            return Reflect.ownKeys(target);
          };
        }
        const RuntimeCompiledPublicInstanceProxyHandlers =
          /* @__PURE__ */ Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
          )({}, PublicInstanceProxyHandlers, {
            get(target, key) {
              if (key === Symbol.unscopables) {
                return;
              }
              return PublicInstanceProxyHandlers.get(target, key, target);
            },
            has(_, key) {
              const has =
                key[0] !== "_" &&
                !Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isGloballyAllowed"]
                )(key);
              if (true && !has && PublicInstanceProxyHandlers.has(_, key)) {
                warn$1(
                  `Property ${JSON.stringify(
                    key
                  )} should not start with _ which is a reserved prefix for Vue internals.`
                );
              }
              return has;
            },
          });
        function createDevRenderContext(instance) {
          const target = {};
          Object.defineProperty(target, `_`, {
            configurable: true,
            enumerable: false,
            get: () => instance,
          });
          Object.keys(publicPropertiesMap).forEach((key) => {
            Object.defineProperty(target, key, {
              configurable: true,
              enumerable: false,
              get: () => publicPropertiesMap[key](instance),
              // intercepted by the proxy so no need for implementation,
              // but needed to prevent set errors
              set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"],
            });
          });
          return target;
        }
        function exposePropsOnRenderContext(instance) {
          const {
            ctx,
            propsOptions: [propsOptions],
          } = instance;
          if (propsOptions) {
            Object.keys(propsOptions).forEach((key) => {
              Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: () => instance.props[key],
                set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"],
              });
            });
          }
        }
        function exposeSetupStateOnRenderContext(instance) {
          const { ctx, setupState } = instance;
          Object.keys(
            Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"])(
              setupState
            )
          ).forEach((key) => {
            if (!setupState.__isScriptSetup) {
              if (isReservedPrefix(key[0])) {
                warn$1(
                  `setup() return property ${JSON.stringify(
                    key
                  )} should not start with "$" or "_" which are reserved prefixes for Vue internals.`
                );
                return;
              }
              Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: () => setupState[key],
                set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"],
              });
            }
          });
        }

        const warnRuntimeUsage = (method) =>
          warn$1(
            `${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`
          );
        function defineProps() {
          if (true) {
            warnRuntimeUsage(`defineProps`);
          }
          return null;
        }
        function defineEmits() {
          if (true) {
            warnRuntimeUsage(`defineEmits`);
          }
          return null;
        }
        function defineExpose(exposed) {
          if (true) {
            warnRuntimeUsage(`defineExpose`);
          }
        }
        function defineOptions(options) {
          if (true) {
            warnRuntimeUsage(`defineOptions`);
          }
        }
        function defineSlots() {
          if (true) {
            warnRuntimeUsage(`defineSlots`);
          }
          return null;
        }
        function defineModel() {
          if (true) {
            warnRuntimeUsage("defineModel");
          }
        }
        function withDefaults(props, defaults) {
          if (true) {
            warnRuntimeUsage(`withDefaults`);
          }
          return null;
        }
        function useSlots() {
          return getContext().slots;
        }
        function useAttrs() {
          return getContext().attrs;
        }
        function getContext() {
          const i = getCurrentInstance();
          if (true && !i) {
            warn$1(`useContext() called without active instance.`);
          }
          return i.setupContext || (i.setupContext = createSetupContext(i));
        }
        function normalizePropsOrEmits(props) {
          return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
            props
          )
            ? props.reduce(
                (normalized, p) => ((normalized[p] = null), normalized),
                {}
              )
            : props;
        }
        function mergeDefaults(raw, defaults) {
          const props = normalizePropsOrEmits(raw);
          for (const key in defaults) {
            if (key.startsWith("__skip")) continue;
            let opt = props[key];
            if (opt) {
              if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                  opt
                ) ||
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                  opt
                )
              ) {
                opt = props[key] = { type: opt, default: defaults[key] };
              } else {
                opt.default = defaults[key];
              }
            } else if (opt === null) {
              opt = props[key] = { default: defaults[key] };
            } else if (true) {
              warn$1(
                `props default key "${key}" has no corresponding declaration.`
              );
            }
            if (opt && defaults[`__skip_${key}`]) {
              opt.skipFactory = true;
            }
          }
          return props;
        }
        function mergeModels(a, b) {
          if (!a || !b) return a || b;
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(a) &&
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(b)
          )
            return a.concat(b);
          return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
            {},
            normalizePropsOrEmits(a),
            normalizePropsOrEmits(b)
          );
        }
        function createPropsRestProxy(props, excludedKeys) {
          const ret = {};
          for (const key in props) {
            if (!excludedKeys.includes(key)) {
              Object.defineProperty(ret, key, {
                enumerable: true,
                get: () => props[key],
              });
            }
          }
          return ret;
        }
        function withAsyncContext(getAwaitable) {
          const ctx = getCurrentInstance();
          if (true && !ctx) {
            warn$1(
              `withAsyncContext called without active current instance. This is likely a bug.`
            );
          }
          let awaitable = getAwaitable();
          unsetCurrentInstance();
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isPromise"])(
              awaitable
            )
          ) {
            awaitable = awaitable.catch((e) => {
              setCurrentInstance(ctx);
              throw e;
            });
          }
          return [awaitable, () => setCurrentInstance(ctx)];
        }

        function createDuplicateChecker() {
          const cache = /* @__PURE__ */ Object.create(null);
          return (type, key) => {
            if (cache[key]) {
              warn$1(
                `${type} property "${key}" is already defined in ${cache[key]}.`
              );
            } else {
              cache[key] = type;
            }
          };
        }
        let shouldCacheAccess = true;
        function applyOptions(instance) {
          const options = resolveMergedOptions(instance);
          const publicThis = instance.proxy;
          const ctx = instance.ctx;
          shouldCacheAccess = false;
          if (options.beforeCreate) {
            callHook(options.beforeCreate, instance, "bc");
          }
          const {
            // state
            data: dataOptions,
            computed: computedOptions,
            methods,
            watch: watchOptions,
            provide: provideOptions,
            inject: injectOptions,
            // lifecycle
            created,
            beforeMount,
            mounted,
            beforeUpdate,
            updated,
            activated,
            deactivated,
            beforeDestroy,
            beforeUnmount,
            destroyed,
            unmounted,
            render,
            renderTracked,
            renderTriggered,
            errorCaptured,
            serverPrefetch,
            // public API
            expose,
            inheritAttrs,
            // assets
            components,
            directives,
            filters,
          } = options;
          const checkDuplicateProperties = true
            ? createDuplicateChecker()
            : undefined;
          if (true) {
            const [propsOptions] = instance.propsOptions;
            if (propsOptions) {
              for (const key in propsOptions) {
                checkDuplicateProperties("Props" /* PROPS */, key);
              }
            }
          }
          if (injectOptions) {
            resolveInjections(injectOptions, ctx, checkDuplicateProperties);
          }
          if (methods) {
            for (const key in methods) {
              const methodHandler = methods[key];
              if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                  methodHandler
                )
              ) {
                if (true) {
                  Object.defineProperty(ctx, key, {
                    value: methodHandler.bind(publicThis),
                    configurable: true,
                    enumerable: true,
                    writable: true,
                  });
                } else {
                }
                if (true) {
                  checkDuplicateProperties("Methods" /* METHODS */, key);
                }
              } else if (true) {
                warn$1(
                  `Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`
                );
              }
            }
          }
          if (dataOptions) {
            if (
              true &&
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                dataOptions
              )
            ) {
              warn$1(
                `The data option must be a function. Plain object usage is no longer supported.`
              );
            }
            const data = dataOptions.call(publicThis, publicThis);
            if (
              true &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isPromise"])(
                data
              )
            ) {
              warn$1(
                `data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`
              );
            }
            if (
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(
                data
              )
            ) {
              true && warn$1(`data() should return an object.`);
            } else {
              instance.data = Object(
                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["reactive"]
              )(data);
              if (true) {
                for (const key in data) {
                  checkDuplicateProperties("Data" /* DATA */, key);
                  if (!isReservedPrefix(key[0])) {
                    Object.defineProperty(ctx, key, {
                      configurable: true,
                      enumerable: true,
                      get: () => data[key],
                      set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"],
                    });
                  }
                }
              }
            }
          }
          shouldCacheAccess = true;
          if (computedOptions) {
            for (const key in computedOptions) {
              const opt = computedOptions[key];
              const get = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"]
              )(opt)
                ? opt.bind(publicThis, publicThis)
                : Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"]
                  )(opt.get)
                ? opt.get.bind(publicThis, publicThis)
                : _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
              if (
                true &&
                get === _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"]
              ) {
                warn$1(`Computed property "${key}" has no getter.`);
              }
              const set =
                !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                  opt
                ) &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                  opt.set
                )
                  ? opt.set.bind(publicThis)
                  : true
                  ? () => {
                      warn$1(
                        `Write operation failed: computed property "${key}" is readonly.`
                      );
                    }
                  : undefined;
              const c = computed({
                get,
                set,
              });
              Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: () => c.value,
                set: (v) => (c.value = v),
              });
              if (true) {
                checkDuplicateProperties("Computed" /* COMPUTED */, key);
              }
            }
          }
          if (watchOptions) {
            for (const key in watchOptions) {
              createWatcher(watchOptions[key], ctx, publicThis, key);
            }
          }
          if (provideOptions) {
            const provides = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"]
            )(provideOptions)
              ? provideOptions.call(publicThis)
              : provideOptions;
            Reflect.ownKeys(provides).forEach((key) => {
              provide(key, provides[key]);
            });
          }
          if (created) {
            callHook(created, instance, "c");
          }
          function registerLifecycleHook(register, hook) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(hook)
            ) {
              hook.forEach((_hook) => register(_hook.bind(publicThis)));
            } else if (hook) {
              register(hook.bind(publicThis));
            }
          }
          registerLifecycleHook(onBeforeMount, beforeMount);
          registerLifecycleHook(onMounted, mounted);
          registerLifecycleHook(onBeforeUpdate, beforeUpdate);
          registerLifecycleHook(onUpdated, updated);
          registerLifecycleHook(onActivated, activated);
          registerLifecycleHook(onDeactivated, deactivated);
          registerLifecycleHook(onErrorCaptured, errorCaptured);
          registerLifecycleHook(onRenderTracked, renderTracked);
          registerLifecycleHook(onRenderTriggered, renderTriggered);
          registerLifecycleHook(onBeforeUnmount, beforeUnmount);
          registerLifecycleHook(onUnmounted, unmounted);
          registerLifecycleHook(onServerPrefetch, serverPrefetch);
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(expose)
          ) {
            if (expose.length) {
              const exposed = instance.exposed || (instance.exposed = {});
              expose.forEach((key) => {
                Object.defineProperty(exposed, key, {
                  get: () => publicThis[key],
                  set: (val) => (publicThis[key] = val),
                });
              });
            } else if (!instance.exposed) {
              instance.exposed = {};
            }
          }
          if (
            render &&
            instance.render === _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"]
          ) {
            instance.render = render;
          }
          if (inheritAttrs != null) {
            instance.inheritAttrs = inheritAttrs;
          }
          if (components) instance.components = components;
          if (directives) instance.directives = directives;
        }
        function resolveInjections(
          injectOptions,
          ctx,
          checkDuplicateProperties = _vue_shared__WEBPACK_IMPORTED_MODULE_1__[
            "NOOP"
          ]
        ) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
              injectOptions
            )
          ) {
            injectOptions = normalizeInject(injectOptions);
          }
          for (const key in injectOptions) {
            const opt = injectOptions[key];
            let injected;
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(opt)
            ) {
              if ("default" in opt) {
                injected = inject(opt.from || key, opt.default, true);
              } else {
                injected = inject(opt.from || key);
              }
            } else {
              injected = inject(opt);
            }
            if (
              Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"])(
                injected
              )
            ) {
              Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: () => injected.value,
                set: (v) => (injected.value = v),
              });
            } else {
              ctx[key] = injected;
            }
            if (true) {
              checkDuplicateProperties("Inject" /* INJECT */, key);
            }
          }
        }
        function callHook(hook, instance, type) {
          callWithAsyncErrorHandling(
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(hook)
              ? hook.map((h) => h.bind(instance.proxy))
              : hook.bind(instance.proxy),
            instance,
            type
          );
        }
        function createWatcher(raw, ctx, publicThis, key) {
          const getter = key.includes(".")
            ? createPathGetter(publicThis, key)
            : () => publicThis[key];
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(raw)
          ) {
            const handler = ctx[raw];
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                handler
              )
            ) {
              watch(getter, handler);
            } else if (true) {
              warn$1(
                `Invalid watch handler specified by key "${raw}"`,
                handler
              );
            }
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(raw)
          ) {
            watch(getter, raw.bind(publicThis));
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(raw)
          ) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(raw)
            ) {
              raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
            } else {
              const handler = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"]
              )(raw.handler)
                ? raw.handler.bind(publicThis)
                : ctx[raw.handler];
              if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                  handler
                )
              ) {
                watch(getter, handler, raw);
              } else if (true) {
                warn$1(
                  `Invalid watch handler specified by key "${raw.handler}"`,
                  handler
                );
              }
            }
          } else if (true) {
            warn$1(`Invalid watch option: "${key}"`, raw);
          }
        }
        function resolveMergedOptions(instance) {
          const base = instance.type;
          const { mixins, extends: extendsOptions } = base;
          const {
            mixins: globalMixins,
            optionsCache: cache,
            config: { optionMergeStrategies },
          } = instance.appContext;
          const cached = cache.get(base);
          let resolved;
          if (cached) {
            resolved = cached;
          } else if (!globalMixins.length && !mixins && !extendsOptions) {
            {
              resolved = base;
            }
          } else {
            resolved = {};
            if (globalMixins.length) {
              globalMixins.forEach((m) =>
                mergeOptions(resolved, m, optionMergeStrategies, true)
              );
            }
            mergeOptions(resolved, base, optionMergeStrategies);
          }
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(base)
          ) {
            cache.set(base, resolved);
          }
          return resolved;
        }
        function mergeOptions(to, from, strats, asMixin = false) {
          const { mixins, extends: extendsOptions } = from;
          if (extendsOptions) {
            mergeOptions(to, extendsOptions, strats, true);
          }
          if (mixins) {
            mixins.forEach((m) => mergeOptions(to, m, strats, true));
          }
          for (const key in from) {
            if (asMixin && key === "expose") {
              true &&
                warn$1(
                  `"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`
                );
            } else {
              const strat =
                internalOptionMergeStrats[key] || (strats && strats[key]);
              to[key] = strat ? strat(to[key], from[key]) : from[key];
            }
          }
          return to;
        }
        const internalOptionMergeStrats = {
          data: mergeDataFn,
          props: mergeEmitsOrPropsOptions,
          emits: mergeEmitsOrPropsOptions,
          // objects
          methods: mergeObjectOptions,
          computed: mergeObjectOptions,
          // lifecycle
          beforeCreate: mergeAsArray,
          created: mergeAsArray,
          beforeMount: mergeAsArray,
          mounted: mergeAsArray,
          beforeUpdate: mergeAsArray,
          updated: mergeAsArray,
          beforeDestroy: mergeAsArray,
          beforeUnmount: mergeAsArray,
          destroyed: mergeAsArray,
          unmounted: mergeAsArray,
          activated: mergeAsArray,
          deactivated: mergeAsArray,
          errorCaptured: mergeAsArray,
          serverPrefetch: mergeAsArray,
          // assets
          components: mergeObjectOptions,
          directives: mergeObjectOptions,
          // watch
          watch: mergeWatchOptions,
          // provide / inject
          provide: mergeDataFn,
          inject: mergeInject,
        };
        function mergeDataFn(to, from) {
          if (!from) {
            return to;
          }
          if (!to) {
            return from;
          }
          return function mergedDataFn() {
            return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(to)
                ? to.call(this, this)
                : to,
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                from
              )
                ? from.call(this, this)
                : from
            );
          };
        }
        function mergeInject(to, from) {
          return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
        }
        function normalizeInject(raw) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(raw)
          ) {
            const res = {};
            for (let i = 0; i < raw.length; i++) {
              res[raw[i]] = raw[i];
            }
            return res;
          }
          return raw;
        }
        function mergeAsArray(to, from) {
          return to ? [...new Set([].concat(to, from))] : from;
        }
        function mergeObjectOptions(to, from) {
          return to
            ? Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                /* @__PURE__ */ Object.create(null),
                to,
                from
              )
            : from;
        }
        function mergeEmitsOrPropsOptions(to, from) {
          if (to) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(to) &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(from)
            ) {
              return [.../* @__PURE__ */ new Set([...to, ...from])];
            }
            return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
              /* @__PURE__ */ Object.create(null),
              normalizePropsOrEmits(to),
              normalizePropsOrEmits(from != null ? from : {})
            );
          } else {
            return from;
          }
        }
        function mergeWatchOptions(to, from) {
          if (!to) return from;
          if (!from) return to;
          const merged = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
          )(/* @__PURE__ */ Object.create(null), to);
          for (const key in from) {
            merged[key] = mergeAsArray(to[key], from[key]);
          }
          return merged;
        }

        function createAppContext() {
          return {
            app: null,
            config: {
              isNativeTag: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NO"],
              performance: false,
              globalProperties: {},
              optionMergeStrategies: {},
              errorHandler: void 0,
              warnHandler: void 0,
              compilerOptions: {},
            },
            mixins: [],
            components: {},
            directives: {},
            provides: /* @__PURE__ */ Object.create(null),
            optionsCache: /* @__PURE__ */ new WeakMap(),
            propsCache: /* @__PURE__ */ new WeakMap(),
            emitsCache: /* @__PURE__ */ new WeakMap(),
          };
        }
        let uid$1 = 0;
        function createAppAPI(render, hydrate) {
          return function createApp(rootComponent, rootProps = null) {
            if (
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                rootComponent
              )
            ) {
              rootComponent = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
              )({}, rootComponent);
            }
            if (
              rootProps != null &&
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(
                rootProps
              )
            ) {
              true &&
                warn$1(`root props passed to app.mount() must be an object.`);
              rootProps = null;
            }
            const context = createAppContext();
            const installedPlugins = /* @__PURE__ */ new WeakSet();
            let isMounted = false;
            const app = (context.app = {
              _uid: uid$1++,
              _component: rootComponent,
              _props: rootProps,
              _container: null,
              _context: context,
              _instance: null,
              version,
              get config() {
                return context.config;
              },
              set config(v) {
                if (true) {
                  warn$1(
                    `app.config cannot be replaced. Modify individual options instead.`
                  );
                }
              },
              use(plugin, ...options) {
                if (installedPlugins.has(plugin)) {
                  true &&
                    warn$1(`Plugin has already been applied to target app.`);
                } else if (
                  plugin &&
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"]
                  )(plugin.install)
                ) {
                  installedPlugins.add(plugin);
                  plugin.install(app, ...options);
                } else if (
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"]
                  )(plugin)
                ) {
                  installedPlugins.add(plugin);
                  plugin(app, ...options);
                } else if (true) {
                  warn$1(
                    `A plugin must either be a function or an object with an "install" function.`
                  );
                }
                return app;
              },
              mixin(mixin) {
                if (true) {
                  if (!context.mixins.includes(mixin)) {
                    context.mixins.push(mixin);
                  } else if (true) {
                    warn$1(
                      "Mixin has already been applied to target app" +
                        (mixin.name ? `: ${mixin.name}` : "")
                    );
                  }
                } else {
                }
                return app;
              },
              component(name, component) {
                if (true) {
                  validateComponentName(name, context.config);
                }
                if (!component) {
                  return context.components[name];
                }
                if (true && context.components[name]) {
                  warn$1(
                    `Component "${name}" has already been registered in target app.`
                  );
                }
                context.components[name] = component;
                return app;
              },
              directive(name, directive) {
                if (true) {
                  validateDirectiveName(name);
                }
                if (!directive) {
                  return context.directives[name];
                }
                if (true && context.directives[name]) {
                  warn$1(
                    `Directive "${name}" has already been registered in target app.`
                  );
                }
                context.directives[name] = directive;
                return app;
              },
              mount(rootContainer, isHydrate, namespace) {
                if (!isMounted) {
                  if (true && rootContainer.__vue_app__) {
                    warn$1(
                      `There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`
                    );
                  }
                  const vnode = createVNode(rootComponent, rootProps);
                  vnode.appContext = context;
                  if (namespace === true) {
                    namespace = "svg";
                  } else if (namespace === false) {
                    namespace = void 0;
                  }
                  if (true) {
                    context.reload = () => {
                      render(cloneVNode(vnode), rootContainer, namespace);
                    };
                  }
                  if (isHydrate && hydrate) {
                    hydrate(vnode, rootContainer);
                  } else {
                    render(vnode, rootContainer, namespace);
                  }
                  isMounted = true;
                  app._container = rootContainer;
                  rootContainer.__vue_app__ = app;
                  if (true) {
                    app._instance = vnode.component;
                    devtoolsInitApp(app, version);
                  }
                  return (
                    getExposeProxy(vnode.component) || vnode.component.proxy
                  );
                } else if (true) {
                  warn$1(
                    `App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``
                  );
                }
              },
              unmount() {
                if (isMounted) {
                  render(null, app._container);
                  if (true) {
                    app._instance = null;
                    devtoolsUnmountApp(app);
                  }
                  delete app._container.__vue_app__;
                } else if (true) {
                  warn$1(`Cannot unmount an app that is not mounted.`);
                }
              },
              provide(key, value) {
                if (true && key in context.provides) {
                  warn$1(
                    `App already provides property with key "${String(
                      key
                    )}". It will be overwritten with the new value.`
                  );
                }
                context.provides[key] = value;
                return app;
              },
              runWithContext(fn) {
                const lastApp = currentApp;
                currentApp = app;
                try {
                  return fn();
                } finally {
                  currentApp = lastApp;
                }
              },
            });
            return app;
          };
        }
        let currentApp = null;

        function provide(key, value) {
          if (!currentInstance) {
            if (true) {
              warn$1(`provide() can only be used inside setup().`);
            }
          } else {
            let provides = currentInstance.provides;
            const parentProvides =
              currentInstance.parent && currentInstance.parent.provides;
            if (parentProvides === provides) {
              provides = currentInstance.provides =
                Object.create(parentProvides);
            }
            provides[key] = value;
          }
        }
        function inject(key, defaultValue, treatDefaultAsFactory = false) {
          const instance = currentInstance || currentRenderingInstance;
          if (instance || currentApp) {
            const provides = instance
              ? instance.parent == null
                ? instance.vnode.appContext &&
                  instance.vnode.appContext.provides
                : instance.parent.provides
              : currentApp._context.provides;
            if (provides && key in provides) {
              return provides[key];
            } else if (arguments.length > 1) {
              return treatDefaultAsFactory &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                  defaultValue
                )
                ? defaultValue.call(instance && instance.proxy)
                : defaultValue;
            } else if (true) {
              warn$1(`injection "${String(key)}" not found.`);
            }
          } else if (true) {
            warn$1(
              `inject() can only be used inside setup() or functional components.`
            );
          }
        }
        function hasInjectionContext() {
          return !!(currentInstance || currentRenderingInstance || currentApp);
        }

        const internalObjectProto = {};
        const createInternalObject = () => Object.create(internalObjectProto);
        const isInternalObject = (obj) =>
          Object.getPrototypeOf(obj) === internalObjectProto;

        function initProps(instance, rawProps, isStateful, isSSR = false) {
          const props = {};
          const attrs = createInternalObject();
          instance.propsDefaults = /* @__PURE__ */ Object.create(null);
          setFullProps(instance, rawProps, props, attrs);
          for (const key in instance.propsOptions[0]) {
            if (!(key in props)) {
              props[key] = void 0;
            }
          }
          if (true) {
            validateProps(rawProps || {}, props, instance);
          }
          if (isStateful) {
            instance.props = isSSR
              ? props
              : Object(
                  _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                    "shallowReactive"
                  ]
                )(props);
          } else {
            if (!instance.type.props) {
              instance.props = attrs;
            } else {
              instance.props = props;
            }
          }
          instance.attrs = attrs;
        }
        function isInHmrContext(instance) {
          while (instance) {
            if (instance.type.__hmrId) return true;
            instance = instance.parent;
          }
        }
        function updateProps(instance, rawProps, rawPrevProps, optimized) {
          const {
            props,
            attrs,
            vnode: { patchFlag },
          } = instance;
          const rawCurrentProps = Object(
            _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"]
          )(props);
          const [options] = instance.propsOptions;
          let hasAttrsChanged = false;
          if (
            // always force full diff in dev
            // - #1942 if hmr is enabled with sfc component
            // - vite#872 non-sfc component used by sfc component
            !(true && isInHmrContext(instance)) &&
            (optimized || patchFlag > 0) &&
            !(patchFlag & 16)
          ) {
            if (patchFlag & 8) {
              const propsToUpdate = instance.vnode.dynamicProps;
              for (let i = 0; i < propsToUpdate.length; i++) {
                let key = propsToUpdate[i];
                if (isEmitListener(instance.emitsOptions, key)) {
                  continue;
                }
                const value = rawProps[key];
                if (options) {
                  if (
                    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                      attrs,
                      key
                    )
                  ) {
                    if (value !== attrs[key]) {
                      attrs[key] = value;
                      hasAttrsChanged = true;
                    }
                  } else {
                    const camelizedKey = Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"]
                    )(key);
                    props[camelizedKey] = resolvePropValue(
                      options,
                      rawCurrentProps,
                      camelizedKey,
                      value,
                      instance,
                      false
                    );
                  }
                } else {
                  if (value !== attrs[key]) {
                    attrs[key] = value;
                    hasAttrsChanged = true;
                  }
                }
              }
            }
          } else {
            if (setFullProps(instance, rawProps, props, attrs)) {
              hasAttrsChanged = true;
            }
            let kebabKey;
            for (const key in rawCurrentProps) {
              if (
                !rawProps || // for camelCase
                (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  rawProps,
                  key
                ) && // it's possible the original props was passed in as kebab-case
                  // and converted to camelCase (#955)
                  ((kebabKey = Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"]
                  )(key)) === key ||
                    !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                      rawProps,
                      kebabKey
                    )))
              ) {
                if (options) {
                  if (
                    rawPrevProps && // for camelCase
                    (rawPrevProps[key] !== void 0 || // for kebab-case
                      rawPrevProps[kebabKey] !== void 0)
                  ) {
                    props[key] = resolvePropValue(
                      options,
                      rawCurrentProps,
                      key,
                      void 0,
                      instance,
                      true
                    );
                  }
                } else {
                  delete props[key];
                }
              }
            }
            if (attrs !== rawCurrentProps) {
              for (const key in attrs) {
                if (
                  !rawProps ||
                  (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                    rawProps,
                    key
                  ) &&
                    true)
                ) {
                  delete attrs[key];
                  hasAttrsChanged = true;
                }
              }
            }
          }
          if (hasAttrsChanged) {
            Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["trigger"])(
              instance.attrs,
              "set",
              ""
            );
          }
          if (true) {
            validateProps(rawProps || {}, props, instance);
          }
        }
        function setFullProps(instance, rawProps, props, attrs) {
          const [options, needCastKeys] = instance.propsOptions;
          let hasAttrsChanged = false;
          let rawCastValues;
          if (rawProps) {
            for (let key in rawProps) {
              if (
                Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isReservedProp"]
                )(key)
              ) {
                continue;
              }
              const value = rawProps[key];
              let camelKey;
              if (
                options &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  options,
                  (camelKey = Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"]
                  )(key))
                )
              ) {
                if (!needCastKeys || !needCastKeys.includes(camelKey)) {
                  props[camelKey] = value;
                } else {
                  (rawCastValues || (rawCastValues = {}))[camelKey] = value;
                }
              } else if (!isEmitListener(instance.emitsOptions, key)) {
                if (!(key in attrs) || value !== attrs[key]) {
                  attrs[key] = value;
                  hasAttrsChanged = true;
                }
              }
            }
          }
          if (needCastKeys) {
            const rawCurrentProps = Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"]
            )(props);
            const castValues =
              rawCastValues ||
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"];
            for (let i = 0; i < needCastKeys.length; i++) {
              const key = needCastKeys[i];
              props[key] = resolvePropValue(
                options,
                rawCurrentProps,
                key,
                castValues[key],
                instance,
                !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  castValues,
                  key
                )
              );
            }
          }
          return hasAttrsChanged;
        }
        function resolvePropValue(
          options,
          props,
          key,
          value,
          instance,
          isAbsent
        ) {
          const opt = options[key];
          if (opt != null) {
            const hasDefault = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"]
            )(opt, "default");
            if (hasDefault && value === void 0) {
              const defaultValue = opt.default;
              if (
                opt.type !== Function &&
                !opt.skipFactory &&
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                  defaultValue
                )
              ) {
                const { propsDefaults } = instance;
                if (key in propsDefaults) {
                  value = propsDefaults[key];
                } else {
                  const reset = setCurrentInstance(instance);
                  value = propsDefaults[key] = defaultValue.call(null, props);
                  reset();
                }
              } else {
                value = defaultValue;
              }
            }
            if (opt[0 /* shouldCast */]) {
              if (isAbsent && !hasDefault) {
                value = false;
              } else if (
                opt[1 /* shouldCastTrue */] &&
                (value === "" ||
                  value ===
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"]
                    )(key))
              ) {
                value = true;
              }
            }
          }
          return value;
        }
        function normalizePropsOptions(comp, appContext, asMixin = false) {
          const cache = appContext.propsCache;
          const cached = cache.get(comp);
          if (cached) {
            return cached;
          }
          const raw = comp.props;
          const normalized = {};
          const needCastKeys = [];
          let hasExtends = false;
          if (
            true &&
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              comp
            )
          ) {
            const extendProps = (raw2) => {
              hasExtends = true;
              const [props, keys] = normalizePropsOptions(
                raw2,
                appContext,
                true
              );
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                normalized,
                props
              );
              if (keys) needCastKeys.push(...keys);
            };
            if (!asMixin && appContext.mixins.length) {
              appContext.mixins.forEach(extendProps);
            }
            if (comp.extends) {
              extendProps(comp.extends);
            }
            if (comp.mixins) {
              comp.mixins.forEach(extendProps);
            }
          }
          if (!raw && !hasExtends) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(comp)
            ) {
              cache.set(
                comp,
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_ARR"]
              );
            }
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_ARR"];
          }
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(raw)
          ) {
            for (let i = 0; i < raw.length; i++) {
              if (
                true &&
                !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(
                  raw[i]
                )
              ) {
                warn$1(
                  `props must be strings when using array syntax.`,
                  raw[i]
                );
              }
              const normalizedKey = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"]
              )(raw[i]);
              if (validatePropName(normalizedKey)) {
                normalized[normalizedKey] =
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"];
              }
            }
          } else if (raw) {
            if (
              true &&
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(raw)
            ) {
              warn$1(`invalid props options`, raw);
            }
            for (const key in raw) {
              const normalizedKey = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"]
              )(key);
              if (validatePropName(normalizedKey)) {
                const opt = raw[key];
                const prop = (normalized[normalizedKey] =
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                    opt
                  ) ||
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"]
                  )(opt)
                    ? { type: opt }
                    : Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
                      )({}, opt));
                if (prop) {
                  const booleanIndex = getTypeIndex(Boolean, prop.type);
                  const stringIndex = getTypeIndex(String, prop.type);
                  prop[0 /* shouldCast */] = booleanIndex > -1;
                  prop[1 /* shouldCastTrue */] =
                    stringIndex < 0 || booleanIndex < stringIndex;
                  if (
                    booleanIndex > -1 ||
                    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                      prop,
                      "default"
                    )
                  ) {
                    needCastKeys.push(normalizedKey);
                  }
                }
              }
            }
          }
          const res = [normalized, needCastKeys];
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(comp)
          ) {
            cache.set(comp, res);
          }
          return res;
        }
        function validatePropName(key) {
          if (
            key[0] !== "$" &&
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isReservedProp"])(
              key
            )
          ) {
            return true;
          } else if (true) {
            warn$1(`Invalid prop name: "${key}" is a reserved property.`);
          }
          return false;
        }
        function getType(ctor) {
          if (ctor === null) {
            return "null";
          }
          if (typeof ctor === "function") {
            return ctor.name || "";
          } else if (typeof ctor === "object") {
            const name = ctor.constructor && ctor.constructor.name;
            return name || "";
          }
          return "";
        }
        function isSameType(a, b) {
          return getType(a) === getType(b);
        }
        function getTypeIndex(type, expectedTypes) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
              expectedTypes
            )
          ) {
            return expectedTypes.findIndex((t) => isSameType(t, type));
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              expectedTypes
            )
          ) {
            return isSameType(expectedTypes, type) ? 0 : -1;
          }
          return -1;
        }
        function validateProps(rawProps, props, instance) {
          const resolvedValues = Object(
            _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"]
          )(props);
          const options = instance.propsOptions[0];
          for (const key in options) {
            let opt = options[key];
            if (opt == null) continue;
            validateProp(
              key,
              resolvedValues[key],
              opt,
              true
                ? Object(
                    _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                      "shallowReadonly"
                    ]
                  )(resolvedValues)
                : undefined,
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                rawProps,
                key
              ) &&
                !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  rawProps,
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"])(
                    key
                  )
                )
            );
          }
        }
        function validateProp(name, value, prop, props, isAbsent) {
          const { type, required, validator, skipCheck } = prop;
          if (required && isAbsent) {
            warn$1('Missing required prop: "' + name + '"');
            return;
          }
          if (value == null && !required) {
            return;
          }
          if (type != null && type !== true && !skipCheck) {
            let isValid = false;
            const types = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"]
            )(type)
              ? type
              : [type];
            const expectedTypes = [];
            for (let i = 0; i < types.length && !isValid; i++) {
              const { valid, expectedType } = assertType(value, types[i]);
              expectedTypes.push(expectedType || "");
              isValid = valid;
            }
            if (!isValid) {
              warn$1(getInvalidTypeMessage(name, value, expectedTypes));
              return;
            }
          }
          if (validator && !validator(value, props)) {
            warn$1(
              'Invalid prop: custom validator check failed for prop "' +
                name +
                '".'
            );
          }
        }
        const isSimpleType = /* @__PURE__ */ Object(
          _vue_shared__WEBPACK_IMPORTED_MODULE_1__["makeMap"]
        )("String,Number,Boolean,Function,Symbol,BigInt");
        function assertType(value, type) {
          let valid;
          const expectedType = getType(type);
          if (isSimpleType(expectedType)) {
            const t = typeof value;
            valid = t === expectedType.toLowerCase();
            if (!valid && t === "object") {
              valid = value instanceof type;
            }
          } else if (expectedType === "Object") {
            valid = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"]
            )(value);
          } else if (expectedType === "Array") {
            valid = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
              value
            );
          } else if (expectedType === "null") {
            valid = value === null;
          } else {
            valid = value instanceof type;
          }
          return {
            valid,
            expectedType,
          };
        }
        function getInvalidTypeMessage(name, value, expectedTypes) {
          if (expectedTypes.length === 0) {
            return `Prop type [] for prop "${name}" won't match anything. Did you mean to use type Array instead?`;
          }
          let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes
            .map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["capitalize"])
            .join(" | ")}`;
          const expectedType = expectedTypes[0];
          const receivedType = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toRawType"]
          )(value);
          const expectedValue = styleValue(value, expectedType);
          const receivedValue = styleValue(value, receivedType);
          if (
            expectedTypes.length === 1 &&
            isExplicable(expectedType) &&
            !isBoolean(expectedType, receivedType)
          ) {
            message += ` with value ${expectedValue}`;
          }
          message += `, got ${receivedType} `;
          if (isExplicable(receivedType)) {
            message += `with value ${receivedValue}.`;
          }
          return message;
        }
        function styleValue(value, type) {
          if (type === "String") {
            return `"${value}"`;
          } else if (type === "Number") {
            return `${Number(value)}`;
          } else {
            return `${value}`;
          }
        }
        function isExplicable(type) {
          const explicitTypes = ["string", "number", "boolean"];
          return explicitTypes.some((elem) => type.toLowerCase() === elem);
        }
        function isBoolean(...args) {
          return args.some((elem) => elem.toLowerCase() === "boolean");
        }

        const isInternalKey = (key) => key[0] === "_" || key === "$stable";
        const normalizeSlotValue = (value) =>
          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)
            ? value.map(normalizeVNode)
            : [normalizeVNode(value)];
        const normalizeSlot = (key, rawSlot, ctx) => {
          if (rawSlot._n) {
            return rawSlot;
          }
          const normalized = withCtx((...args) => {
            if (
              true &&
              currentInstance &&
              (!ctx || ctx.root === currentInstance.root)
            ) {
              warn$1(
                `Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`
              );
            }
            return normalizeSlotValue(rawSlot(...args));
          }, ctx);
          normalized._c = false;
          return normalized;
        };
        const normalizeObjectSlots = (rawSlots, slots, instance) => {
          const ctx = rawSlots._ctx;
          for (const key in rawSlots) {
            if (isInternalKey(key)) continue;
            const value = rawSlots[key];
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                value
              )
            ) {
              slots[key] = normalizeSlot(key, value, ctx);
            } else if (value != null) {
              if (true) {
                warn$1(
                  `Non-function value encountered for slot "${key}". Prefer function slots for better performance.`
                );
              }
              const normalized = normalizeSlotValue(value);
              slots[key] = () => normalized;
            }
          }
        };
        const normalizeVNodeSlots = (instance, children) => {
          if (true && !isKeepAlive(instance.vnode) && true) {
            warn$1(
              `Non-function value encountered for default slot. Prefer function slots for better performance.`
            );
          }
          const normalized = normalizeSlotValue(children);
          instance.slots.default = () => normalized;
        };
        const initSlots = (instance, children) => {
          const slots = (instance.slots = createInternalObject());
          if (instance.vnode.shapeFlag & 32) {
            const type = children._;
            if (type) {
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                slots,
                children
              );
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["def"])(
                slots,
                "_",
                type,
                true
              );
            } else {
              normalizeObjectSlots(children, slots);
            }
          } else if (children) {
            normalizeVNodeSlots(instance, children);
          }
        };
        const updateSlots = (instance, children, optimized) => {
          const { vnode, slots } = instance;
          let needDeletionCheck = true;
          let deletionComparisonTarget =
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"];
          if (vnode.shapeFlag & 32) {
            const type = children._;
            if (type) {
              if (true && isHmrUpdating) {
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                  slots,
                  children
                );
                Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["trigger"])(
                  instance,
                  "set",
                  "$slots"
                );
              } else if (optimized && type === 1) {
                needDeletionCheck = false;
              } else {
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                  slots,
                  children
                );
                if (!optimized && type === 1) {
                  delete slots._;
                }
              }
            } else {
              needDeletionCheck = !children.$stable;
              normalizeObjectSlots(children, slots);
            }
            deletionComparisonTarget = children;
          } else if (children) {
            normalizeVNodeSlots(instance, children);
            deletionComparisonTarget = { default: 1 };
          }
          if (needDeletionCheck) {
            for (const key in slots) {
              if (
                !isInternalKey(key) &&
                deletionComparisonTarget[key] == null
              ) {
                delete slots[key];
              }
            }
          }
        };

        function setRef(
          rawRef,
          oldRawRef,
          parentSuspense,
          vnode,
          isUnmount = false
        ) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(rawRef)
          ) {
            rawRef.forEach((r, i) =>
              setRef(
                r,
                oldRawRef &&
                  (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                    oldRawRef
                  )
                    ? oldRawRef[i]
                    : oldRawRef),
                parentSuspense,
                vnode,
                isUnmount
              )
            );
            return;
          }
          if (isAsyncWrapper(vnode) && !isUnmount) {
            return;
          }
          const refValue =
            vnode.shapeFlag & 4
              ? getExposeProxy(vnode.component) || vnode.component.proxy
              : vnode.el;
          const value = isUnmount ? null : refValue;
          const { i: owner, r: ref } = rawRef;
          if (true && !owner) {
            warn$1(
              `Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`
            );
            return;
          }
          const oldRef = oldRawRef && oldRawRef.r;
          const refs =
            owner.refs === _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"]
              ? (owner.refs = {})
              : owner.refs;
          const setupState = owner.setupState;
          if (oldRef != null && oldRef !== ref) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(
                oldRef
              )
            ) {
              refs[oldRef] = null;
              if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                  setupState,
                  oldRef
                )
              ) {
                setupState[oldRef] = null;
              }
            } else if (
              Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"])(
                oldRef
              )
            ) {
              oldRef.value = null;
            }
          }
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(ref)
          ) {
            callWithErrorHandling(ref, owner, 12, [value, refs]);
          } else {
            const _isString = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"]
            )(ref);
            const _isRef = Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"]
            )(ref);
            if (_isString || _isRef) {
              const doSet = () => {
                if (rawRef.f) {
                  const existing = _isString
                    ? Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"]
                      )(setupState, ref)
                      ? setupState[ref]
                      : refs[ref]
                    : ref.value;
                  if (isUnmount) {
                    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                      existing
                    ) &&
                      Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["remove"]
                      )(existing, refValue);
                  } else {
                    if (
                      !Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"]
                      )(existing)
                    ) {
                      if (_isString) {
                        refs[ref] = [refValue];
                        if (
                          Object(
                            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"]
                          )(setupState, ref)
                        ) {
                          setupState[ref] = refs[ref];
                        }
                      } else {
                        ref.value = [refValue];
                        if (rawRef.k) refs[rawRef.k] = ref.value;
                      }
                    } else if (!existing.includes(refValue)) {
                      existing.push(refValue);
                    }
                  }
                } else if (_isString) {
                  refs[ref] = value;
                  if (
                    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasOwn"])(
                      setupState,
                      ref
                    )
                  ) {
                    setupState[ref] = value;
                  }
                } else if (_isRef) {
                  ref.value = value;
                  if (rawRef.k) refs[rawRef.k] = value;
                } else if (true) {
                  warn$1("Invalid template ref type:", ref, `(${typeof ref})`);
                }
              };
              if (value) {
                doSet.id = -1;
                queuePostRenderEffect(doSet, parentSuspense);
              } else {
                doSet();
              }
            } else if (true) {
              warn$1("Invalid template ref type:", ref, `(${typeof ref})`);
            }
          }
        }

        let hasMismatch = false;
        const isSVGContainer = (container) =>
          container.namespaceURI.includes("svg") &&
          container.tagName !== "foreignObject";
        const isMathMLContainer = (container) =>
          container.namespaceURI.includes("MathML");
        const getContainerType = (container) => {
          if (isSVGContainer(container)) return "svg";
          if (isMathMLContainer(container)) return "mathml";
          return void 0;
        };
        const isComment = (node) => node.nodeType === 8; /* COMMENT */
        function createHydrationFunctions(rendererInternals) {
          const {
            mt: mountComponent,
            p: patch,
            o: {
              patchProp,
              createText,
              nextSibling,
              parentNode,
              remove,
              insert,
              createComment,
            },
          } = rendererInternals;
          const hydrate = (vnode, container) => {
            if (!container.hasChildNodes()) {
              true &&
                warn$1(
                  `Attempting to hydrate existing markup but container is empty. Performing full mount instead.`
                );
              patch(null, vnode, container);
              flushPostFlushCbs();
              container._vnode = vnode;
              return;
            }
            hasMismatch = false;
            hydrateNode(container.firstChild, vnode, null, null, null);
            flushPostFlushCbs();
            container._vnode = vnode;
            if (hasMismatch && true) {
              console.error(`Hydration completed but contains mismatches.`);
            }
          };
          const hydrateNode = (
            node,
            vnode,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized = false
          ) => {
            optimized = optimized || !!vnode.dynamicChildren;
            const isFragmentStart = isComment(node) && node.data === "[";
            const onMismatch = () =>
              handleMismatch(
                node,
                vnode,
                parentComponent,
                parentSuspense,
                slotScopeIds,
                isFragmentStart
              );
            const { type, ref, shapeFlag, patchFlag } = vnode;
            let domType = node.nodeType;
            vnode.el = node;
            if (true) {
              if (!("__vnode" in node)) {
                Object.defineProperty(node, "__vnode", {
                  value: vnode,
                  enumerable: false,
                });
              }
              if (!("__vueParentComponent" in node)) {
                Object.defineProperty(node, "__vueParentComponent", {
                  value: parentComponent,
                  enumerable: false,
                });
              }
            }
            if (patchFlag === -2) {
              optimized = false;
              vnode.dynamicChildren = null;
            }
            let nextNode = null;
            switch (type) {
              case Text:
                if (domType !== 3 /* TEXT */) {
                  if (vnode.children === "") {
                    insert((vnode.el = createText("")), parentNode(node), node);
                    nextNode = node;
                  } else {
                    nextNode = onMismatch();
                  }
                } else {
                  if (node.data !== vnode.children) {
                    hasMismatch = true;
                    true &&
                      warn$1(
                        `Hydration text mismatch in`,
                        node.parentNode,
                        `
  - rendered on server: ${JSON.stringify(node.data)}
  - expected on client: ${JSON.stringify(vnode.children)}`
                      );
                    node.data = vnode.children;
                  }
                  nextNode = nextSibling(node);
                }
                break;
              case Comment:
                if (isTemplateNode(node)) {
                  nextNode = nextSibling(node);
                  replaceNode(
                    (vnode.el = node.content.firstChild),
                    node,
                    parentComponent
                  );
                } else if (domType !== 8 /* COMMENT */ || isFragmentStart) {
                  nextNode = onMismatch();
                } else {
                  nextNode = nextSibling(node);
                }
                break;
              case Static:
                if (isFragmentStart) {
                  node = nextSibling(node);
                  domType = node.nodeType;
                }
                if (domType === 1 /* ELEMENT */ || domType === 3 /* TEXT */) {
                  nextNode = node;
                  const needToAdoptContent = !vnode.children.length;
                  for (let i = 0; i < vnode.staticCount; i++) {
                    if (needToAdoptContent)
                      vnode.children +=
                        nextNode.nodeType === 1 /* ELEMENT */
                          ? nextNode.outerHTML
                          : nextNode.data;
                    if (i === vnode.staticCount - 1) {
                      vnode.anchor = nextNode;
                    }
                    nextNode = nextSibling(nextNode);
                  }
                  return isFragmentStart ? nextSibling(nextNode) : nextNode;
                } else {
                  onMismatch();
                }
                break;
              case Fragment:
                if (!isFragmentStart) {
                  nextNode = onMismatch();
                } else {
                  nextNode = hydrateFragment(
                    node,
                    vnode,
                    parentComponent,
                    parentSuspense,
                    slotScopeIds,
                    optimized
                  );
                }
                break;
              default:
                if (shapeFlag & 1) {
                  if (
                    (domType !== 1 /* ELEMENT */ ||
                      vnode.type.toLowerCase() !==
                        node.tagName.toLowerCase()) &&
                    !isTemplateNode(node)
                  ) {
                    nextNode = onMismatch();
                  } else {
                    nextNode = hydrateElement(
                      node,
                      vnode,
                      parentComponent,
                      parentSuspense,
                      slotScopeIds,
                      optimized
                    );
                  }
                } else if (shapeFlag & 6) {
                  vnode.slotScopeIds = slotScopeIds;
                  const container = parentNode(node);
                  if (isFragmentStart) {
                    nextNode = locateClosingAnchor(node);
                  } else if (
                    isComment(node) &&
                    node.data === "teleport start"
                  ) {
                    nextNode = locateClosingAnchor(
                      node,
                      node.data,
                      "teleport end"
                    );
                  } else {
                    nextNode = nextSibling(node);
                  }
                  mountComponent(
                    vnode,
                    container,
                    null,
                    parentComponent,
                    parentSuspense,
                    getContainerType(container),
                    optimized
                  );
                  if (isAsyncWrapper(vnode)) {
                    let subTree;
                    if (isFragmentStart) {
                      subTree = createVNode(Fragment);
                      subTree.anchor = nextNode
                        ? nextNode.previousSibling
                        : container.lastChild;
                    } else {
                      subTree =
                        node.nodeType === 3
                          ? createTextVNode("")
                          : createVNode("div");
                    }
                    subTree.el = node;
                    vnode.component.subTree = subTree;
                  }
                } else if (shapeFlag & 64) {
                  if (domType !== 8 /* COMMENT */) {
                    nextNode = onMismatch();
                  } else {
                    nextNode = vnode.type.hydrate(
                      node,
                      vnode,
                      parentComponent,
                      parentSuspense,
                      slotScopeIds,
                      optimized,
                      rendererInternals,
                      hydrateChildren
                    );
                  }
                } else if (shapeFlag & 128) {
                  nextNode = vnode.type.hydrate(
                    node,
                    vnode,
                    parentComponent,
                    parentSuspense,
                    getContainerType(parentNode(node)),
                    slotScopeIds,
                    optimized,
                    rendererInternals,
                    hydrateNode
                  );
                } else if (true) {
                  warn$1("Invalid HostVNode type:", type, `(${typeof type})`);
                }
            }
            if (ref != null) {
              setRef(ref, null, parentSuspense, vnode);
            }
            return nextNode;
          };
          const hydrateElement = (
            el,
            vnode,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized
          ) => {
            optimized = optimized || !!vnode.dynamicChildren;
            const { type, props, patchFlag, shapeFlag, dirs, transition } =
              vnode;
            const forcePatch = type === "input" || type === "option";
            if (true) {
              if (dirs) {
                invokeDirectiveHook(vnode, null, parentComponent, "created");
              }
              let needCallTransitionHooks = false;
              if (isTemplateNode(el)) {
                needCallTransitionHooks =
                  needTransition(parentSuspense, transition) &&
                  parentComponent &&
                  parentComponent.vnode.props &&
                  parentComponent.vnode.props.appear;
                const content = el.content.firstChild;
                if (needCallTransitionHooks) {
                  transition.beforeEnter(content);
                }
                replaceNode(content, el, parentComponent);
                vnode.el = el = content;
              }
              if (
                shapeFlag & 16 && // skip if element has innerHTML / textContent
                !(props && (props.innerHTML || props.textContent))
              ) {
                let next = hydrateChildren(
                  el.firstChild,
                  vnode,
                  el,
                  parentComponent,
                  parentSuspense,
                  slotScopeIds,
                  optimized
                );
                let hasWarned = false;
                while (next) {
                  hasMismatch = true;
                  if (true && !hasWarned) {
                    warn$1(
                      `Hydration children mismatch on`,
                      el,
                      `
Server rendered element contains more child nodes than client vdom.`
                    );
                    hasWarned = true;
                  }
                  const cur = next;
                  next = next.nextSibling;
                  remove(cur);
                }
              } else if (shapeFlag & 8) {
                if (el.textContent !== vnode.children) {
                  hasMismatch = true;
                  true &&
                    warn$1(
                      `Hydration text content mismatch on`,
                      el,
                      `
  - rendered on server: ${el.textContent}
  - expected on client: ${vnode.children}`
                    );
                  el.textContent = vnode.children;
                }
              }
              if (props) {
                if (true) {
                  for (const key in props) {
                    if (
                      true &&
                      propHasMismatch(
                        el,
                        key,
                        props[key],
                        vnode,
                        parentComponent
                      )
                    ) {
                      hasMismatch = true;
                    }
                    if (
                      (forcePatch &&
                        (key.endsWith("value") || key === "indeterminate")) ||
                      (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isOn"])(
                        key
                      ) &&
                        !Object(
                          _vue_shared__WEBPACK_IMPORTED_MODULE_1__[
                            "isReservedProp"
                          ]
                        )(key)) || // force hydrate v-bind with .prop modifiers
                      key[0] === "."
                    ) {
                      patchProp(
                        el,
                        key,
                        null,
                        props[key],
                        void 0,
                        void 0,
                        parentComponent
                      );
                    }
                  }
                } else {
                }
              }
              let vnodeHooks;
              if ((vnodeHooks = props && props.onVnodeBeforeMount)) {
                invokeVNodeHook(vnodeHooks, parentComponent, vnode);
              }
              if (dirs) {
                invokeDirectiveHook(
                  vnode,
                  null,
                  parentComponent,
                  "beforeMount"
                );
              }
              if (
                (vnodeHooks = props && props.onVnodeMounted) ||
                dirs ||
                needCallTransitionHooks
              ) {
                queueEffectWithSuspense(() => {
                  vnodeHooks &&
                    invokeVNodeHook(vnodeHooks, parentComponent, vnode);
                  needCallTransitionHooks && transition.enter(el);
                  dirs &&
                    invokeDirectiveHook(
                      vnode,
                      null,
                      parentComponent,
                      "mounted"
                    );
                }, parentSuspense);
              }
            }
            return el.nextSibling;
          };
          const hydrateChildren = (
            node,
            parentVNode,
            container,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized
          ) => {
            optimized = optimized || !!parentVNode.dynamicChildren;
            const children = parentVNode.children;
            const l = children.length;
            let hasWarned = false;
            for (let i = 0; i < l; i++) {
              const vnode = optimized
                ? children[i]
                : (children[i] = normalizeVNode(children[i]));
              if (node) {
                node = hydrateNode(
                  node,
                  vnode,
                  parentComponent,
                  parentSuspense,
                  slotScopeIds,
                  optimized
                );
              } else if (vnode.type === Text && !vnode.children) {
                continue;
              } else {
                hasMismatch = true;
                if (true && !hasWarned) {
                  warn$1(
                    `Hydration children mismatch on`,
                    container,
                    `
Server rendered element contains fewer child nodes than client vdom.`
                  );
                  hasWarned = true;
                }
                patch(
                  null,
                  vnode,
                  container,
                  null,
                  parentComponent,
                  parentSuspense,
                  getContainerType(container),
                  slotScopeIds
                );
              }
            }
            return node;
          };
          const hydrateFragment = (
            node,
            vnode,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized
          ) => {
            const { slotScopeIds: fragmentSlotScopeIds } = vnode;
            if (fragmentSlotScopeIds) {
              slotScopeIds = slotScopeIds
                ? slotScopeIds.concat(fragmentSlotScopeIds)
                : fragmentSlotScopeIds;
            }
            const container = parentNode(node);
            const next = hydrateChildren(
              nextSibling(node),
              vnode,
              container,
              parentComponent,
              parentSuspense,
              slotScopeIds,
              optimized
            );
            if (next && isComment(next) && next.data === "]") {
              return nextSibling((vnode.anchor = next));
            } else {
              hasMismatch = true;
              insert((vnode.anchor = createComment(`]`)), container, next);
              return next;
            }
          };
          const handleMismatch = (
            node,
            vnode,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            isFragment
          ) => {
            hasMismatch = true;
            true &&
              warn$1(
                `Hydration node mismatch:
- rendered on server:`,
                node,
                node.nodeType === 3 /* TEXT */
                  ? `(text)`
                  : isComment(node) && node.data === "["
                  ? `(start of fragment)`
                  : ``,
                `
- expected on client:`,
                vnode.type
              );
            vnode.el = null;
            if (isFragment) {
              const end = locateClosingAnchor(node);
              while (true) {
                const next2 = nextSibling(node);
                if (next2 && next2 !== end) {
                  remove(next2);
                } else {
                  break;
                }
              }
            }
            const next = nextSibling(node);
            const container = parentNode(node);
            remove(node);
            patch(
              null,
              vnode,
              container,
              next,
              parentComponent,
              parentSuspense,
              getContainerType(container),
              slotScopeIds
            );
            return next;
          };
          const locateClosingAnchor = (node, open = "[", close = "]") => {
            let match = 0;
            while (node) {
              node = nextSibling(node);
              if (node && isComment(node)) {
                if (node.data === open) match++;
                if (node.data === close) {
                  if (match === 0) {
                    return nextSibling(node);
                  } else {
                    match--;
                  }
                }
              }
            }
            return node;
          };
          const replaceNode = (newNode, oldNode, parentComponent) => {
            const parentNode2 = oldNode.parentNode;
            if (parentNode2) {
              parentNode2.replaceChild(newNode, oldNode);
            }
            let parent = parentComponent;
            while (parent) {
              if (parent.vnode.el === oldNode) {
                parent.vnode.el = parent.subTree.el = newNode;
              }
              parent = parent.parent;
            }
          };
          const isTemplateNode = (node) => {
            return (
              node.nodeType === 1 /* ELEMENT */ &&
              node.tagName.toLowerCase() === "template"
            );
          };
          return [hydrate, hydrateNode];
        }
        function propHasMismatch(el, key, clientValue, vnode, instance) {
          var _a;
          let mismatchType;
          let mismatchKey;
          let actual;
          let expected;
          if (key === "class") {
            actual = el.getAttribute("class");
            expected = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["normalizeClass"]
            )(clientValue);
            if (!isSetEqual(toClassSet(actual || ""), toClassSet(expected))) {
              mismatchType = mismatchKey = `class`;
            }
          } else if (key === "style") {
            actual = el.getAttribute("style") || "";
            expected = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"]
            )(clientValue)
              ? clientValue
              : Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["stringifyStyle"]
                )(
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["normalizeStyle"]
                  )(clientValue)
                );
            const actualMap = toStyleMap(actual);
            const expectedMap = toStyleMap(expected);
            if (vnode.dirs) {
              for (const { dir, value } of vnode.dirs) {
                if (dir.name === "show" && !value) {
                  expectedMap.set("display", "none");
                }
              }
            }
            const root = instance == null ? void 0 : instance.subTree;
            if (
              vnode === root ||
              ((root == null ? void 0 : root.type) === Fragment &&
                root.children.includes(vnode))
            ) {
              const cssVars =
                (_a = instance == null ? void 0 : instance.getCssVars) == null
                  ? void 0
                  : _a.call(instance);
              for (const key2 in cssVars) {
                expectedMap.set(`--${key2}`, String(cssVars[key2]));
              }
            }
            if (!isMapEqual(actualMap, expectedMap)) {
              mismatchType = mismatchKey = "style";
            }
          } else if (
            (el instanceof SVGElement &&
              Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isKnownSvgAttr"]
              )(key)) ||
            (el instanceof HTMLElement &&
              (Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isBooleanAttr"]
              )(key) ||
                Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isKnownHtmlAttr"]
                )(key)))
          ) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isBooleanAttr"])(
                key
              )
            ) {
              actual = el.hasAttribute(key);
              expected = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["includeBooleanAttr"]
              )(clientValue);
            } else if (clientValue == null) {
              actual = el.hasAttribute(key);
              expected = false;
            } else {
              if (el.hasAttribute(key)) {
                actual = el.getAttribute(key);
              } else if (key === "value" && el.tagName === "TEXTAREA") {
                actual = el.value;
              } else {
                actual = false;
              }
              expected = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__[
                  "isRenderableAttrValue"
                ]
              )(clientValue)
                ? String(clientValue)
                : false;
            }
            if (actual !== expected) {
              mismatchType = `attribute`;
              mismatchKey = key;
            }
          }
          if (mismatchType) {
            const format = (v) =>
              v === false ? `(not rendered)` : `${mismatchKey}="${v}"`;
            const preSegment = `Hydration ${mismatchType} mismatch on`;
            const postSegment = `
  - rendered on server: ${format(actual)}
  - expected on client: ${format(expected)}
  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.
  You should fix the source of the mismatch.`;
            {
              warn$1(preSegment, el, postSegment);
            }
            return true;
          }
          return false;
        }
        function toClassSet(str) {
          return new Set(str.trim().split(/\s+/));
        }
        function isSetEqual(a, b) {
          if (a.size !== b.size) {
            return false;
          }
          for (const s of a) {
            if (!b.has(s)) {
              return false;
            }
          }
          return true;
        }
        function toStyleMap(str) {
          const styleMap = /* @__PURE__ */ new Map();
          for (const item of str.split(";")) {
            let [key, value] = item.split(":");
            key = key == null ? void 0 : key.trim();
            value = value == null ? void 0 : value.trim();
            if (key && value) {
              styleMap.set(key, value);
            }
          }
          return styleMap;
        }
        function isMapEqual(a, b) {
          if (a.size !== b.size) {
            return false;
          }
          for (const [key, value] of a) {
            if (value !== b.get(key)) {
              return false;
            }
          }
          return true;
        }

        let supported;
        let perf;
        function startMeasure(instance, type) {
          if (instance.appContext.config.performance && isSupported()) {
            perf.mark(`vue-${type}-${instance.uid}`);
          }
          if (true) {
            devtoolsPerfStart(
              instance,
              type,
              isSupported() ? perf.now() : Date.now()
            );
          }
        }
        function endMeasure(instance, type) {
          if (instance.appContext.config.performance && isSupported()) {
            const startTag = `vue-${type}-${instance.uid}`;
            const endTag = startTag + `:end`;
            perf.mark(endTag);
            perf.measure(
              `<${formatComponentName(instance, instance.type)}> ${type}`,
              startTag,
              endTag
            );
            perf.clearMarks(startTag);
            perf.clearMarks(endTag);
          }
          if (true) {
            devtoolsPerfEnd(
              instance,
              type,
              isSupported() ? perf.now() : Date.now()
            );
          }
        }
        function isSupported() {
          if (supported !== void 0) {
            return supported;
          }
          if (typeof window !== "undefined" && window.performance) {
            supported = true;
            perf = window.performance;
          } else {
            supported = false;
          }
          return supported;
        }

        function initFeatureFlags() {
          const needWarn = [];
          if (false) {
          }
          if (false) {
          }
          if (typeof __VUE_PROD_HYDRATION_MISMATCH_DETAILS__ !== "boolean") {
            true && needWarn.push(`__VUE_PROD_HYDRATION_MISMATCH_DETAILS__`);
            Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["getGlobalThis"]
            )().__VUE_PROD_HYDRATION_MISMATCH_DETAILS__ = false;
          }
          if (true && needWarn.length) {
            const multi = needWarn.length > 1;
            console.warn(
              `Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${
                multi ? `are` : `is`
              } not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`
            );
          }
        }

        const queuePostRenderEffect = queueEffectWithSuspense;
        function createRenderer(options) {
          return baseCreateRenderer(options);
        }
        function createHydrationRenderer(options) {
          return baseCreateRenderer(options, createHydrationFunctions);
        }
        function baseCreateRenderer(options, createHydrationFns) {
          {
            initFeatureFlags();
          }
          const target = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["getGlobalThis"]
          )();
          target.__VUE__ = true;
          if (true) {
            setDevtoolsHook$1(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
          }
          const {
            insert: hostInsert,
            remove: hostRemove,
            patchProp: hostPatchProp,
            createElement: hostCreateElement,
            createText: hostCreateText,
            createComment: hostCreateComment,
            setText: hostSetText,
            setElementText: hostSetElementText,
            parentNode: hostParentNode,
            nextSibling: hostNextSibling,
            setScopeId:
              hostSetScopeId = _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"],
            insertStaticContent: hostInsertStaticContent,
          } = options;
          const patch = (
            n1,
            n2,
            container,
            anchor = null,
            parentComponent = null,
            parentSuspense = null,
            namespace = void 0,
            slotScopeIds = null,
            optimized = true && isHmrUpdating ? false : !!n2.dynamicChildren
          ) => {
            if (n1 === n2) {
              return;
            }
            if (n1 && !isSameVNodeType(n1, n2)) {
              anchor = getNextHostNode(n1);
              unmount(n1, parentComponent, parentSuspense, true);
              n1 = null;
            }
            if (n2.patchFlag === -2) {
              optimized = false;
              n2.dynamicChildren = null;
            }
            const { type, ref, shapeFlag } = n2;
            switch (type) {
              case Text:
                processText(n1, n2, container, anchor);
                break;
              case Comment:
                processCommentNode(n1, n2, container, anchor);
                break;
              case Static:
                if (n1 == null) {
                  mountStaticNode(n2, container, anchor, namespace);
                } else if (true) {
                  patchStaticNode(n1, n2, container, namespace);
                }
                break;
              case Fragment:
                processFragment(
                  n1,
                  n2,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  namespace,
                  slotScopeIds,
                  optimized
                );
                break;
              default:
                if (shapeFlag & 1) {
                  processElement(
                    n1,
                    n2,
                    container,
                    anchor,
                    parentComponent,
                    parentSuspense,
                    namespace,
                    slotScopeIds,
                    optimized
                  );
                } else if (shapeFlag & 6) {
                  processComponent(
                    n1,
                    n2,
                    container,
                    anchor,
                    parentComponent,
                    parentSuspense,
                    namespace,
                    slotScopeIds,
                    optimized
                  );
                } else if (shapeFlag & 64) {
                  type.process(
                    n1,
                    n2,
                    container,
                    anchor,
                    parentComponent,
                    parentSuspense,
                    namespace,
                    slotScopeIds,
                    optimized,
                    internals
                  );
                } else if (shapeFlag & 128) {
                  type.process(
                    n1,
                    n2,
                    container,
                    anchor,
                    parentComponent,
                    parentSuspense,
                    namespace,
                    slotScopeIds,
                    optimized,
                    internals
                  );
                } else if (true) {
                  warn$1("Invalid VNode type:", type, `(${typeof type})`);
                }
            }
            if (ref != null && parentComponent) {
              setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
            }
          };
          const processText = (n1, n2, container, anchor) => {
            if (n1 == null) {
              hostInsert(
                (n2.el = hostCreateText(n2.children)),
                container,
                anchor
              );
            } else {
              const el = (n2.el = n1.el);
              if (n2.children !== n1.children) {
                hostSetText(el, n2.children);
              }
            }
          };
          const processCommentNode = (n1, n2, container, anchor) => {
            if (n1 == null) {
              hostInsert(
                (n2.el = hostCreateComment(n2.children || "")),
                container,
                anchor
              );
            } else {
              n2.el = n1.el;
            }
          };
          const mountStaticNode = (n2, container, anchor, namespace) => {
            [n2.el, n2.anchor] = hostInsertStaticContent(
              n2.children,
              container,
              anchor,
              namespace,
              n2.el,
              n2.anchor
            );
          };
          const patchStaticNode = (n1, n2, container, namespace) => {
            if (n2.children !== n1.children) {
              const anchor = hostNextSibling(n1.anchor);
              removeStaticNode(n1);
              [n2.el, n2.anchor] = hostInsertStaticContent(
                n2.children,
                container,
                anchor,
                namespace
              );
            } else {
              n2.el = n1.el;
              n2.anchor = n1.anchor;
            }
          };
          const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
            let next;
            while (el && el !== anchor) {
              next = hostNextSibling(el);
              hostInsert(el, container, nextSibling);
              el = next;
            }
            hostInsert(anchor, container, nextSibling);
          };
          const removeStaticNode = ({ el, anchor }) => {
            let next;
            while (el && el !== anchor) {
              next = hostNextSibling(el);
              hostRemove(el);
              el = next;
            }
            hostRemove(anchor);
          };
          const processElement = (
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          ) => {
            if (n2.type === "svg") {
              namespace = "svg";
            } else if (n2.type === "math") {
              namespace = "mathml";
            }
            if (n1 == null) {
              mountElement(
                n2,
                container,
                anchor,
                parentComponent,
                parentSuspense,
                namespace,
                slotScopeIds,
                optimized
              );
            } else {
              patchElement(
                n1,
                n2,
                parentComponent,
                parentSuspense,
                namespace,
                slotScopeIds,
                optimized
              );
            }
          };
          const mountElement = (
            vnode,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          ) => {
            let el;
            let vnodeHook;
            const { props, shapeFlag, transition, dirs } = vnode;
            el = vnode.el = hostCreateElement(
              vnode.type,
              namespace,
              props && props.is,
              props
            );
            if (shapeFlag & 8) {
              hostSetElementText(el, vnode.children);
            } else if (shapeFlag & 16) {
              mountChildren(
                vnode.children,
                el,
                null,
                parentComponent,
                parentSuspense,
                resolveChildrenNamespace(vnode, namespace),
                slotScopeIds,
                optimized
              );
            }
            if (dirs) {
              invokeDirectiveHook(vnode, null, parentComponent, "created");
            }
            setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
            if (props) {
              for (const key in props) {
                if (
                  key !== "value" &&
                  !Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isReservedProp"]
                  )(key)
                ) {
                  hostPatchProp(
                    el,
                    key,
                    null,
                    props[key],
                    namespace,
                    vnode.children,
                    parentComponent,
                    parentSuspense,
                    unmountChildren
                  );
                }
              }
              if ("value" in props) {
                hostPatchProp(el, "value", null, props.value, namespace);
              }
              if ((vnodeHook = props.onVnodeBeforeMount)) {
                invokeVNodeHook(vnodeHook, parentComponent, vnode);
              }
            }
            if (true) {
              Object.defineProperty(el, "__vnode", {
                value: vnode,
                enumerable: false,
              });
              Object.defineProperty(el, "__vueParentComponent", {
                value: parentComponent,
                enumerable: false,
              });
            }
            if (dirs) {
              invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
            }
            const needCallTransitionHooks = needTransition(
              parentSuspense,
              transition
            );
            if (needCallTransitionHooks) {
              transition.beforeEnter(el);
            }
            hostInsert(el, container, anchor);
            if (
              (vnodeHook = props && props.onVnodeMounted) ||
              needCallTransitionHooks ||
              dirs
            ) {
              queuePostRenderEffect(() => {
                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
                needCallTransitionHooks && transition.enter(el);
                dirs &&
                  invokeDirectiveHook(vnode, null, parentComponent, "mounted");
              }, parentSuspense);
            }
          };
          const setScopeId = (
            el,
            vnode,
            scopeId,
            slotScopeIds,
            parentComponent
          ) => {
            if (scopeId) {
              hostSetScopeId(el, scopeId);
            }
            if (slotScopeIds) {
              for (let i = 0; i < slotScopeIds.length; i++) {
                hostSetScopeId(el, slotScopeIds[i]);
              }
            }
            if (parentComponent) {
              let subTree = parentComponent.subTree;
              if (true && subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
                subTree = filterSingleRoot(subTree.children) || subTree;
              }
              if (vnode === subTree) {
                const parentVNode = parentComponent.vnode;
                setScopeId(
                  el,
                  parentVNode,
                  parentVNode.scopeId,
                  parentVNode.slotScopeIds,
                  parentComponent.parent
                );
              }
            }
          };
          const mountChildren = (
            children,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            start = 0
          ) => {
            for (let i = start; i < children.length; i++) {
              const child = (children[i] = optimized
                ? cloneIfMounted(children[i])
                : normalizeVNode(children[i]));
              patch(
                null,
                child,
                container,
                anchor,
                parentComponent,
                parentSuspense,
                namespace,
                slotScopeIds,
                optimized
              );
            }
          };
          const patchElement = (
            n1,
            n2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          ) => {
            const el = (n2.el = n1.el);
            let { patchFlag, dynamicChildren, dirs } = n2;
            patchFlag |= n1.patchFlag & 16;
            const oldProps =
              n1.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"];
            const newProps =
              n2.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"];
            let vnodeHook;
            parentComponent && toggleRecurse(parentComponent, false);
            if ((vnodeHook = newProps.onVnodeBeforeUpdate)) {
              invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
            }
            if (dirs) {
              invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
            }
            parentComponent && toggleRecurse(parentComponent, true);
            if (true && isHmrUpdating) {
              patchFlag = 0;
              optimized = false;
              dynamicChildren = null;
            }
            if (dynamicChildren) {
              patchBlockChildren(
                n1.dynamicChildren,
                dynamicChildren,
                el,
                parentComponent,
                parentSuspense,
                resolveChildrenNamespace(n2, namespace),
                slotScopeIds
              );
              if (true) {
                traverseStaticChildren(n1, n2);
              }
            } else if (!optimized) {
              patchChildren(
                n1,
                n2,
                el,
                null,
                parentComponent,
                parentSuspense,
                resolveChildrenNamespace(n2, namespace),
                slotScopeIds,
                false
              );
            }
            if (patchFlag > 0) {
              if (patchFlag & 16) {
                patchProps(
                  el,
                  n2,
                  oldProps,
                  newProps,
                  parentComponent,
                  parentSuspense,
                  namespace
                );
              } else {
                if (patchFlag & 2) {
                  if (oldProps.class !== newProps.class) {
                    hostPatchProp(el, "class", null, newProps.class, namespace);
                  }
                }
                if (patchFlag & 4) {
                  hostPatchProp(
                    el,
                    "style",
                    oldProps.style,
                    newProps.style,
                    namespace
                  );
                }
                if (patchFlag & 8) {
                  const propsToUpdate = n2.dynamicProps;
                  for (let i = 0; i < propsToUpdate.length; i++) {
                    const key = propsToUpdate[i];
                    const prev = oldProps[key];
                    const next = newProps[key];
                    if (next !== prev || key === "value") {
                      hostPatchProp(
                        el,
                        key,
                        prev,
                        next,
                        namespace,
                        n1.children,
                        parentComponent,
                        parentSuspense,
                        unmountChildren
                      );
                    }
                  }
                }
              }
              if (patchFlag & 1) {
                if (n1.children !== n2.children) {
                  hostSetElementText(el, n2.children);
                }
              }
            } else if (!optimized && dynamicChildren == null) {
              patchProps(
                el,
                n2,
                oldProps,
                newProps,
                parentComponent,
                parentSuspense,
                namespace
              );
            }
            if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
              queuePostRenderEffect(() => {
                vnodeHook &&
                  invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
                dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
              }, parentSuspense);
            }
          };
          const patchBlockChildren = (
            oldChildren,
            newChildren,
            fallbackContainer,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds
          ) => {
            for (let i = 0; i < newChildren.length; i++) {
              const oldVNode = oldChildren[i];
              const newVNode = newChildren[i];
              const container =
                // oldVNode may be an errored async setup() component inside Suspense
                // which will not have a mounted element
                oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
                // of the Fragment itself so it can move its children.
                (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
                  // which also requires the correct parent container
                  !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
                  oldVNode.shapeFlag & (6 | 64))
                  ? hostParentNode(oldVNode.el)
                  : // In other cases, the parent container is not actually used so we
                    // just pass the block element here to avoid a DOM parentNode call.
                    fallbackContainer;
              patch(
                oldVNode,
                newVNode,
                container,
                null,
                parentComponent,
                parentSuspense,
                namespace,
                slotScopeIds,
                true
              );
            }
          };
          const patchProps = (
            el,
            vnode,
            oldProps,
            newProps,
            parentComponent,
            parentSuspense,
            namespace
          ) => {
            if (oldProps !== newProps) {
              if (
                oldProps !==
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"]
              ) {
                for (const key in oldProps) {
                  if (
                    !Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isReservedProp"]
                    )(key) &&
                    !(key in newProps)
                  ) {
                    hostPatchProp(
                      el,
                      key,
                      oldProps[key],
                      null,
                      namespace,
                      vnode.children,
                      parentComponent,
                      parentSuspense,
                      unmountChildren
                    );
                  }
                }
              }
              for (const key in newProps) {
                if (
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isReservedProp"]
                  )(key)
                )
                  continue;
                const next = newProps[key];
                const prev = oldProps[key];
                if (next !== prev && key !== "value") {
                  hostPatchProp(
                    el,
                    key,
                    prev,
                    next,
                    namespace,
                    vnode.children,
                    parentComponent,
                    parentSuspense,
                    unmountChildren
                  );
                }
              }
              if ("value" in newProps) {
                hostPatchProp(
                  el,
                  "value",
                  oldProps.value,
                  newProps.value,
                  namespace
                );
              }
            }
          };
          const processFragment = (
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          ) => {
            const fragmentStartAnchor = (n2.el = n1
              ? n1.el
              : hostCreateText(""));
            const fragmentEndAnchor = (n2.anchor = n1
              ? n1.anchor
              : hostCreateText(""));
            let {
              patchFlag,
              dynamicChildren,
              slotScopeIds: fragmentSlotScopeIds,
            } = n2;
            if (
              true && // #5523 dev root fragment may inherit directives
              (isHmrUpdating || patchFlag & 2048)
            ) {
              patchFlag = 0;
              optimized = false;
              dynamicChildren = null;
            }
            if (fragmentSlotScopeIds) {
              slotScopeIds = slotScopeIds
                ? slotScopeIds.concat(fragmentSlotScopeIds)
                : fragmentSlotScopeIds;
            }
            if (n1 == null) {
              hostInsert(fragmentStartAnchor, container, anchor);
              hostInsert(fragmentEndAnchor, container, anchor);
              mountChildren(
                // #10007
                // such fragment like `<></>` will be compiled into
                // a fragment which doesn't have a children.
                // In this case fallback to an empty array
                n2.children || [],
                container,
                fragmentEndAnchor,
                parentComponent,
                parentSuspense,
                namespace,
                slotScopeIds,
                optimized
              );
            } else {
              if (
                patchFlag > 0 &&
                patchFlag & 64 &&
                dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
                // of renderSlot() with no valid children
                n1.dynamicChildren
              ) {
                patchBlockChildren(
                  n1.dynamicChildren,
                  dynamicChildren,
                  container,
                  parentComponent,
                  parentSuspense,
                  namespace,
                  slotScopeIds
                );
                if (true) {
                  traverseStaticChildren(n1, n2);
                } else {
                }
              } else {
                patchChildren(
                  n1,
                  n2,
                  container,
                  fragmentEndAnchor,
                  parentComponent,
                  parentSuspense,
                  namespace,
                  slotScopeIds,
                  optimized
                );
              }
            }
          };
          const processComponent = (
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          ) => {
            n2.slotScopeIds = slotScopeIds;
            if (n1 == null) {
              if (n2.shapeFlag & 512) {
                parentComponent.ctx.activate(
                  n2,
                  container,
                  anchor,
                  namespace,
                  optimized
                );
              } else {
                mountComponent(
                  n2,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  namespace,
                  optimized
                );
              }
            } else {
              updateComponent(n1, n2, optimized);
            }
          };
          const mountComponent = (
            initialVNode,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            optimized
          ) => {
            const instance = (initialVNode.component = createComponentInstance(
              initialVNode,
              parentComponent,
              parentSuspense
            ));
            if (true && instance.type.__hmrId) {
              registerHMR(instance);
            }
            if (true) {
              pushWarningContext(initialVNode);
              startMeasure(instance, `mount`);
            }
            if (isKeepAlive(initialVNode)) {
              instance.ctx.renderer = internals;
            }
            {
              if (true) {
                startMeasure(instance, `init`);
              }
              setupComponent(instance);
              if (true) {
                endMeasure(instance, `init`);
              }
            }
            if (instance.asyncDep) {
              parentSuspense &&
                parentSuspense.registerDep(instance, setupRenderEffect);
              if (!initialVNode.el) {
                const placeholder = (instance.subTree = createVNode(Comment));
                processCommentNode(null, placeholder, container, anchor);
              }
            } else {
              setupRenderEffect(
                instance,
                initialVNode,
                container,
                anchor,
                parentSuspense,
                namespace,
                optimized
              );
            }
            if (true) {
              popWarningContext();
              endMeasure(instance, `mount`);
            }
          };
          const updateComponent = (n1, n2, optimized) => {
            const instance = (n2.component = n1.component);
            if (shouldUpdateComponent(n1, n2, optimized)) {
              if (instance.asyncDep && !instance.asyncResolved) {
                if (true) {
                  pushWarningContext(n2);
                }
                updateComponentPreRender(instance, n2, optimized);
                if (true) {
                  popWarningContext();
                }
                return;
              } else {
                instance.next = n2;
                invalidateJob(instance.update);
                instance.effect.dirty = true;
                instance.update();
              }
            } else {
              n2.el = n1.el;
              instance.vnode = n2;
            }
          };
          const setupRenderEffect = (
            instance,
            initialVNode,
            container,
            anchor,
            parentSuspense,
            namespace,
            optimized
          ) => {
            const componentUpdateFn = () => {
              if (!instance.isMounted) {
                let vnodeHook;
                const { el, props } = initialVNode;
                const { bm, m, parent } = instance;
                const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
                toggleRecurse(instance, false);
                if (bm) {
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["invokeArrayFns"]
                  )(bm);
                }
                if (
                  !isAsyncWrapperVNode &&
                  (vnodeHook = props && props.onVnodeBeforeMount)
                ) {
                  invokeVNodeHook(vnodeHook, parent, initialVNode);
                }
                toggleRecurse(instance, true);
                if (el && hydrateNode) {
                  const hydrateSubTree = () => {
                    if (true) {
                      startMeasure(instance, `render`);
                    }
                    instance.subTree = renderComponentRoot(instance);
                    if (true) {
                      endMeasure(instance, `render`);
                    }
                    if (true) {
                      startMeasure(instance, `hydrate`);
                    }
                    hydrateNode(
                      el,
                      instance.subTree,
                      instance,
                      parentSuspense,
                      null
                    );
                    if (true) {
                      endMeasure(instance, `hydrate`);
                    }
                  };
                  if (isAsyncWrapperVNode) {
                    initialVNode.type.__asyncLoader().then(
                      // note: we are moving the render call into an async callback,
                      // which means it won't track dependencies - but it's ok because
                      // a server-rendered async wrapper is already in resolved state
                      // and it will never need to change.
                      () => !instance.isUnmounted && hydrateSubTree()
                    );
                  } else {
                    hydrateSubTree();
                  }
                } else {
                  if (true) {
                    startMeasure(instance, `render`);
                  }
                  const subTree = (instance.subTree =
                    renderComponentRoot(instance));
                  if (true) {
                    endMeasure(instance, `render`);
                  }
                  if (true) {
                    startMeasure(instance, `patch`);
                  }
                  patch(
                    null,
                    subTree,
                    container,
                    anchor,
                    instance,
                    parentSuspense,
                    namespace
                  );
                  if (true) {
                    endMeasure(instance, `patch`);
                  }
                  initialVNode.el = subTree.el;
                }
                if (m) {
                  queuePostRenderEffect(m, parentSuspense);
                }
                if (
                  !isAsyncWrapperVNode &&
                  (vnodeHook = props && props.onVnodeMounted)
                ) {
                  const scopedInitialVNode = initialVNode;
                  queuePostRenderEffect(
                    () =>
                      invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
                    parentSuspense
                  );
                }
                if (
                  initialVNode.shapeFlag & 256 ||
                  (parent &&
                    isAsyncWrapper(parent.vnode) &&
                    parent.vnode.shapeFlag & 256)
                ) {
                  instance.a &&
                    queuePostRenderEffect(instance.a, parentSuspense);
                }
                instance.isMounted = true;
                if (true) {
                  devtoolsComponentAdded(instance);
                }
                initialVNode = container = anchor = null;
              } else {
                let { next, bu, u, parent, vnode } = instance;
                {
                  const nonHydratedAsyncRoot =
                    locateNonHydratedAsyncRoot(instance);
                  if (nonHydratedAsyncRoot) {
                    if (next) {
                      next.el = vnode.el;
                      updateComponentPreRender(instance, next, optimized);
                    }
                    nonHydratedAsyncRoot.asyncDep.then(() => {
                      if (!instance.isUnmounted) {
                        componentUpdateFn();
                      }
                    });
                    return;
                  }
                }
                let originNext = next;
                let vnodeHook;
                if (true) {
                  pushWarningContext(next || instance.vnode);
                }
                toggleRecurse(instance, false);
                if (next) {
                  next.el = vnode.el;
                  updateComponentPreRender(instance, next, optimized);
                } else {
                  next = vnode;
                }
                if (bu) {
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["invokeArrayFns"]
                  )(bu);
                }
                if (
                  (vnodeHook = next.props && next.props.onVnodeBeforeUpdate)
                ) {
                  invokeVNodeHook(vnodeHook, parent, next, vnode);
                }
                toggleRecurse(instance, true);
                if (true) {
                  startMeasure(instance, `render`);
                }
                const nextTree = renderComponentRoot(instance);
                if (true) {
                  endMeasure(instance, `render`);
                }
                const prevTree = instance.subTree;
                instance.subTree = nextTree;
                if (true) {
                  startMeasure(instance, `patch`);
                }
                patch(
                  prevTree,
                  nextTree,
                  // parent may have changed if it's in a teleport
                  hostParentNode(prevTree.el),
                  // anchor may have changed if it's in a fragment
                  getNextHostNode(prevTree),
                  instance,
                  parentSuspense,
                  namespace
                );
                if (true) {
                  endMeasure(instance, `patch`);
                }
                next.el = nextTree.el;
                if (originNext === null) {
                  updateHOCHostEl(instance, nextTree.el);
                }
                if (u) {
                  queuePostRenderEffect(u, parentSuspense);
                }
                if ((vnodeHook = next.props && next.props.onVnodeUpdated)) {
                  queuePostRenderEffect(
                    () => invokeVNodeHook(vnodeHook, parent, next, vnode),
                    parentSuspense
                  );
                }
                if (true) {
                  devtoolsComponentUpdated(instance);
                }
                if (true) {
                  popWarningContext();
                }
              }
            };
            const effect = (instance.effect =
              new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                "ReactiveEffect"
              ](
                componentUpdateFn,
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"],
                () => queueJob(update),
                instance.scope
                // track it in component's effect scope
              ));
            const update = (instance.update = () => {
              if (effect.dirty) {
                effect.run();
              }
            });
            update.id = instance.uid;
            toggleRecurse(instance, true);
            if (true) {
              effect.onTrack = instance.rtc
                ? (e) =>
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["invokeArrayFns"]
                    )(instance.rtc, e)
                : void 0;
              effect.onTrigger = instance.rtg
                ? (e) =>
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["invokeArrayFns"]
                    )(instance.rtg, e)
                : void 0;
              update.ownerInstance = instance;
            }
            update();
          };
          const updateComponentPreRender = (instance, nextVNode, optimized) => {
            nextVNode.component = instance;
            const prevProps = instance.vnode.props;
            instance.vnode = nextVNode;
            instance.next = null;
            updateProps(instance, nextVNode.props, prevProps, optimized);
            updateSlots(instance, nextVNode.children, optimized);
            Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["pauseTracking"]
            )();
            flushPreFlushCbs(instance);
            Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["resetTracking"]
            )();
          };
          const patchChildren = (
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized = false
          ) => {
            const c1 = n1 && n1.children;
            const prevShapeFlag = n1 ? n1.shapeFlag : 0;
            const c2 = n2.children;
            const { patchFlag, shapeFlag } = n2;
            if (patchFlag > 0) {
              if (patchFlag & 128) {
                patchKeyedChildren(
                  c1,
                  c2,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  namespace,
                  slotScopeIds,
                  optimized
                );
                return;
              } else if (patchFlag & 256) {
                patchUnkeyedChildren(
                  c1,
                  c2,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  namespace,
                  slotScopeIds,
                  optimized
                );
                return;
              }
            }
            if (shapeFlag & 8) {
              if (prevShapeFlag & 16) {
                unmountChildren(c1, parentComponent, parentSuspense);
              }
              if (c2 !== c1) {
                hostSetElementText(container, c2);
              }
            } else {
              if (prevShapeFlag & 16) {
                if (shapeFlag & 16) {
                  patchKeyedChildren(
                    c1,
                    c2,
                    container,
                    anchor,
                    parentComponent,
                    parentSuspense,
                    namespace,
                    slotScopeIds,
                    optimized
                  );
                } else {
                  unmountChildren(c1, parentComponent, parentSuspense, true);
                }
              } else {
                if (prevShapeFlag & 8) {
                  hostSetElementText(container, "");
                }
                if (shapeFlag & 16) {
                  mountChildren(
                    c2,
                    container,
                    anchor,
                    parentComponent,
                    parentSuspense,
                    namespace,
                    slotScopeIds,
                    optimized
                  );
                }
              }
            }
          };
          const patchUnkeyedChildren = (
            c1,
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          ) => {
            c1 = c1 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_ARR"];
            c2 = c2 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_ARR"];
            const oldLength = c1.length;
            const newLength = c2.length;
            const commonLength = Math.min(oldLength, newLength);
            let i;
            for (i = 0; i < commonLength; i++) {
              const nextChild = (c2[i] = optimized
                ? cloneIfMounted(c2[i])
                : normalizeVNode(c2[i]));
              patch(
                c1[i],
                nextChild,
                container,
                null,
                parentComponent,
                parentSuspense,
                namespace,
                slotScopeIds,
                optimized
              );
            }
            if (oldLength > newLength) {
              unmountChildren(
                c1,
                parentComponent,
                parentSuspense,
                true,
                false,
                commonLength
              );
            } else {
              mountChildren(
                c2,
                container,
                anchor,
                parentComponent,
                parentSuspense,
                namespace,
                slotScopeIds,
                optimized,
                commonLength
              );
            }
          };
          const patchKeyedChildren = (
            c1,
            c2,
            container,
            parentAnchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          ) => {
            let i = 0;
            const l2 = c2.length;
            let e1 = c1.length - 1;
            let e2 = l2 - 1;
            while (i <= e1 && i <= e2) {
              const n1 = c1[i];
              const n2 = (c2[i] = optimized
                ? cloneIfMounted(c2[i])
                : normalizeVNode(c2[i]));
              if (isSameVNodeType(n1, n2)) {
                patch(
                  n1,
                  n2,
                  container,
                  null,
                  parentComponent,
                  parentSuspense,
                  namespace,
                  slotScopeIds,
                  optimized
                );
              } else {
                break;
              }
              i++;
            }
            while (i <= e1 && i <= e2) {
              const n1 = c1[e1];
              const n2 = (c2[e2] = optimized
                ? cloneIfMounted(c2[e2])
                : normalizeVNode(c2[e2]));
              if (isSameVNodeType(n1, n2)) {
                patch(
                  n1,
                  n2,
                  container,
                  null,
                  parentComponent,
                  parentSuspense,
                  namespace,
                  slotScopeIds,
                  optimized
                );
              } else {
                break;
              }
              e1--;
              e2--;
            }
            if (i > e1) {
              if (i <= e2) {
                const nextPos = e2 + 1;
                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
                while (i <= e2) {
                  patch(
                    null,
                    (c2[i] = optimized
                      ? cloneIfMounted(c2[i])
                      : normalizeVNode(c2[i])),
                    container,
                    anchor,
                    parentComponent,
                    parentSuspense,
                    namespace,
                    slotScopeIds,
                    optimized
                  );
                  i++;
                }
              }
            } else if (i > e2) {
              while (i <= e1) {
                unmount(c1[i], parentComponent, parentSuspense, true);
                i++;
              }
            } else {
              const s1 = i;
              const s2 = i;
              const keyToNewIndexMap = /* @__PURE__ */ new Map();
              for (i = s2; i <= e2; i++) {
                const nextChild = (c2[i] = optimized
                  ? cloneIfMounted(c2[i])
                  : normalizeVNode(c2[i]));
                if (nextChild.key != null) {
                  if (true && keyToNewIndexMap.has(nextChild.key)) {
                    warn$1(
                      `Duplicate keys found during update:`,
                      JSON.stringify(nextChild.key),
                      `Make sure keys are unique.`
                    );
                  }
                  keyToNewIndexMap.set(nextChild.key, i);
                }
              }
              let j;
              let patched = 0;
              const toBePatched = e2 - s2 + 1;
              let moved = false;
              let maxNewIndexSoFar = 0;
              const newIndexToOldIndexMap = new Array(toBePatched);
              for (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0;
              for (i = s1; i <= e1; i++) {
                const prevChild = c1[i];
                if (patched >= toBePatched) {
                  unmount(prevChild, parentComponent, parentSuspense, true);
                  continue;
                }
                let newIndex;
                if (prevChild.key != null) {
                  newIndex = keyToNewIndexMap.get(prevChild.key);
                } else {
                  for (j = s2; j <= e2; j++) {
                    if (
                      newIndexToOldIndexMap[j - s2] === 0 &&
                      isSameVNodeType(prevChild, c2[j])
                    ) {
                      newIndex = j;
                      break;
                    }
                  }
                }
                if (newIndex === void 0) {
                  unmount(prevChild, parentComponent, parentSuspense, true);
                } else {
                  newIndexToOldIndexMap[newIndex - s2] = i + 1;
                  if (newIndex >= maxNewIndexSoFar) {
                    maxNewIndexSoFar = newIndex;
                  } else {
                    moved = true;
                  }
                  patch(
                    prevChild,
                    c2[newIndex],
                    container,
                    null,
                    parentComponent,
                    parentSuspense,
                    namespace,
                    slotScopeIds,
                    optimized
                  );
                  patched++;
                }
              }
              const increasingNewIndexSequence = moved
                ? getSequence(newIndexToOldIndexMap)
                : _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_ARR"];
              j = increasingNewIndexSequence.length - 1;
              for (i = toBePatched - 1; i >= 0; i--) {
                const nextIndex = s2 + i;
                const nextChild = c2[nextIndex];
                const anchor =
                  nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
                if (newIndexToOldIndexMap[i] === 0) {
                  patch(
                    null,
                    nextChild,
                    container,
                    anchor,
                    parentComponent,
                    parentSuspense,
                    namespace,
                    slotScopeIds,
                    optimized
                  );
                } else if (moved) {
                  if (j < 0 || i !== increasingNewIndexSequence[j]) {
                    move(nextChild, container, anchor, 2);
                  } else {
                    j--;
                  }
                }
              }
            }
          };
          const move = (
            vnode,
            container,
            anchor,
            moveType,
            parentSuspense = null
          ) => {
            const { el, type, transition, children, shapeFlag } = vnode;
            if (shapeFlag & 6) {
              move(vnode.component.subTree, container, anchor, moveType);
              return;
            }
            if (shapeFlag & 128) {
              vnode.suspense.move(container, anchor, moveType);
              return;
            }
            if (shapeFlag & 64) {
              type.move(vnode, container, anchor, internals);
              return;
            }
            if (type === Fragment) {
              hostInsert(el, container, anchor);
              for (let i = 0; i < children.length; i++) {
                move(children[i], container, anchor, moveType);
              }
              hostInsert(vnode.anchor, container, anchor);
              return;
            }
            if (type === Static) {
              moveStaticNode(vnode, container, anchor);
              return;
            }
            const needTransition2 =
              moveType !== 2 && shapeFlag & 1 && transition;
            if (needTransition2) {
              if (moveType === 0) {
                transition.beforeEnter(el);
                hostInsert(el, container, anchor);
                queuePostRenderEffect(
                  () => transition.enter(el),
                  parentSuspense
                );
              } else {
                const { leave, delayLeave, afterLeave } = transition;
                const remove2 = () => hostInsert(el, container, anchor);
                const performLeave = () => {
                  leave(el, () => {
                    remove2();
                    afterLeave && afterLeave();
                  });
                };
                if (delayLeave) {
                  delayLeave(el, remove2, performLeave);
                } else {
                  performLeave();
                }
              }
            } else {
              hostInsert(el, container, anchor);
            }
          };
          const unmount = (
            vnode,
            parentComponent,
            parentSuspense,
            doRemove = false,
            optimized = false
          ) => {
            const {
              type,
              props,
              ref,
              children,
              dynamicChildren,
              shapeFlag,
              patchFlag,
              dirs,
            } = vnode;
            if (ref != null) {
              setRef(ref, null, parentSuspense, vnode, true);
            }
            if (shapeFlag & 256) {
              parentComponent.ctx.deactivate(vnode);
              return;
            }
            const shouldInvokeDirs = shapeFlag & 1 && dirs;
            const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
            let vnodeHook;
            if (
              shouldInvokeVnodeHook &&
              (vnodeHook = props && props.onVnodeBeforeUnmount)
            ) {
              invokeVNodeHook(vnodeHook, parentComponent, vnode);
            }
            if (shapeFlag & 6) {
              unmountComponent(vnode.component, parentSuspense, doRemove);
            } else {
              if (shapeFlag & 128) {
                vnode.suspense.unmount(parentSuspense, doRemove);
                return;
              }
              if (shouldInvokeDirs) {
                invokeDirectiveHook(
                  vnode,
                  null,
                  parentComponent,
                  "beforeUnmount"
                );
              }
              if (shapeFlag & 64) {
                vnode.type.remove(
                  vnode,
                  parentComponent,
                  parentSuspense,
                  optimized,
                  internals,
                  doRemove
                );
              } else if (
                dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
                (type !== Fragment || (patchFlag > 0 && patchFlag & 64))
              ) {
                unmountChildren(
                  dynamicChildren,
                  parentComponent,
                  parentSuspense,
                  false,
                  true
                );
              } else if (
                (type === Fragment && patchFlag & (128 | 256)) ||
                (!optimized && shapeFlag & 16)
              ) {
                unmountChildren(children, parentComponent, parentSuspense);
              }
              if (doRemove) {
                remove(vnode);
              }
            }
            if (
              (shouldInvokeVnodeHook &&
                (vnodeHook = props && props.onVnodeUnmounted)) ||
              shouldInvokeDirs
            ) {
              queuePostRenderEffect(() => {
                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
                shouldInvokeDirs &&
                  invokeDirectiveHook(
                    vnode,
                    null,
                    parentComponent,
                    "unmounted"
                  );
              }, parentSuspense);
            }
          };
          const remove = (vnode) => {
            const { type, el, anchor, transition } = vnode;
            if (type === Fragment) {
              if (
                true &&
                vnode.patchFlag > 0 &&
                vnode.patchFlag & 2048 &&
                transition &&
                !transition.persisted
              ) {
                vnode.children.forEach((child) => {
                  if (child.type === Comment) {
                    hostRemove(child.el);
                  } else {
                    remove(child);
                  }
                });
              } else {
                removeFragment(el, anchor);
              }
              return;
            }
            if (type === Static) {
              removeStaticNode(vnode);
              return;
            }
            const performRemove = () => {
              hostRemove(el);
              if (
                transition &&
                !transition.persisted &&
                transition.afterLeave
              ) {
                transition.afterLeave();
              }
            };
            if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
              const { leave, delayLeave } = transition;
              const performLeave = () => leave(el, performRemove);
              if (delayLeave) {
                delayLeave(vnode.el, performRemove, performLeave);
              } else {
                performLeave();
              }
            } else {
              performRemove();
            }
          };
          const removeFragment = (cur, end) => {
            let next;
            while (cur !== end) {
              next = hostNextSibling(cur);
              hostRemove(cur);
              cur = next;
            }
            hostRemove(end);
          };
          const unmountComponent = (instance, parentSuspense, doRemove) => {
            if (true && instance.type.__hmrId) {
              unregisterHMR(instance);
            }
            const { bum, scope, update, subTree, um } = instance;
            if (bum) {
              Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["invokeArrayFns"]
              )(bum);
            }
            scope.stop();
            if (update) {
              update.active = false;
              unmount(subTree, instance, parentSuspense, doRemove);
            }
            if (um) {
              queuePostRenderEffect(um, parentSuspense);
            }
            queuePostRenderEffect(() => {
              instance.isUnmounted = true;
            }, parentSuspense);
            if (
              parentSuspense &&
              parentSuspense.pendingBranch &&
              !parentSuspense.isUnmounted &&
              instance.asyncDep &&
              !instance.asyncResolved &&
              instance.suspenseId === parentSuspense.pendingId
            ) {
              parentSuspense.deps--;
              if (parentSuspense.deps === 0) {
                parentSuspense.resolve();
              }
            }
            if (true) {
              devtoolsComponentRemoved(instance);
            }
          };
          const unmountChildren = (
            children,
            parentComponent,
            parentSuspense,
            doRemove = false,
            optimized = false,
            start = 0
          ) => {
            for (let i = start; i < children.length; i++) {
              unmount(
                children[i],
                parentComponent,
                parentSuspense,
                doRemove,
                optimized
              );
            }
          };
          const getNextHostNode = (vnode) => {
            if (vnode.shapeFlag & 6) {
              return getNextHostNode(vnode.component.subTree);
            }
            if (vnode.shapeFlag & 128) {
              return vnode.suspense.next();
            }
            return hostNextSibling(vnode.anchor || vnode.el);
          };
          let isFlushing = false;
          const render = (vnode, container, namespace) => {
            if (vnode == null) {
              if (container._vnode) {
                unmount(container._vnode, null, null, true);
              }
            } else {
              patch(
                container._vnode || null,
                vnode,
                container,
                null,
                null,
                null,
                namespace
              );
            }
            if (!isFlushing) {
              isFlushing = true;
              flushPreFlushCbs();
              flushPostFlushCbs();
              isFlushing = false;
            }
            container._vnode = vnode;
          };
          const internals = {
            p: patch,
            um: unmount,
            m: move,
            r: remove,
            mt: mountComponent,
            mc: mountChildren,
            pc: patchChildren,
            pbc: patchBlockChildren,
            n: getNextHostNode,
            o: options,
          };
          let hydrate;
          let hydrateNode;
          if (createHydrationFns) {
            [hydrate, hydrateNode] = createHydrationFns(internals);
          }
          return {
            render,
            hydrate,
            createApp: createAppAPI(render, hydrate),
          };
        }
        function resolveChildrenNamespace({ type, props }, currentNamespace) {
          return (currentNamespace === "svg" && type === "foreignObject") ||
            (currentNamespace === "mathml" &&
              type === "annotation-xml" &&
              props &&
              props.encoding &&
              props.encoding.includes("html"))
            ? void 0
            : currentNamespace;
        }
        function toggleRecurse({ effect, update }, allowed) {
          effect.allowRecurse = update.allowRecurse = allowed;
        }
        function needTransition(parentSuspense, transition) {
          return (
            (!parentSuspense ||
              (parentSuspense && !parentSuspense.pendingBranch)) &&
            transition &&
            !transition.persisted
          );
        }
        function traverseStaticChildren(n1, n2, shallow = false) {
          const ch1 = n1.children;
          const ch2 = n2.children;
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(ch1) &&
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(ch2)
          ) {
            for (let i = 0; i < ch1.length; i++) {
              const c1 = ch1[i];
              let c2 = ch2[i];
              if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
                if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
                  c2 = ch2[i] = cloneIfMounted(ch2[i]);
                  c2.el = c1.el;
                }
                if (!shallow) traverseStaticChildren(c1, c2);
              }
              if (c2.type === Text) {
                c2.el = c1.el;
              }
              if (true && c2.type === Comment && !c2.el) {
                c2.el = c1.el;
              }
            }
          }
        }
        function getSequence(arr) {
          const p = arr.slice();
          const result = [0];
          let i, j, u, v, c;
          const len = arr.length;
          for (i = 0; i < len; i++) {
            const arrI = arr[i];
            if (arrI !== 0) {
              j = result[result.length - 1];
              if (arr[j] < arrI) {
                p[i] = j;
                result.push(i);
                continue;
              }
              u = 0;
              v = result.length - 1;
              while (u < v) {
                c = (u + v) >> 1;
                if (arr[result[c]] < arrI) {
                  u = c + 1;
                } else {
                  v = c;
                }
              }
              if (arrI < arr[result[u]]) {
                if (u > 0) {
                  p[i] = result[u - 1];
                }
                result[u] = i;
              }
            }
          }
          u = result.length;
          v = result[u - 1];
          while (u-- > 0) {
            result[u] = v;
            v = p[v];
          }
          return result;
        }
        function locateNonHydratedAsyncRoot(instance) {
          const subComponent = instance.subTree.component;
          if (subComponent) {
            if (subComponent.asyncDep && !subComponent.asyncResolved) {
              return subComponent;
            } else {
              return locateNonHydratedAsyncRoot(subComponent);
            }
          }
        }

        const isTeleport = (type) => type.__isTeleport;
        const isTeleportDisabled = (props) =>
          props && (props.disabled || props.disabled === "");
        const isTargetSVG = (target) =>
          typeof SVGElement !== "undefined" && target instanceof SVGElement;
        const isTargetMathML = (target) =>
          typeof MathMLElement === "function" &&
          target instanceof MathMLElement;
        const resolveTarget = (props, select) => {
          const targetSelector = props && props.to;
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(
              targetSelector
            )
          ) {
            if (!select) {
              true &&
                warn$1(
                  `Current renderer does not support string target for Teleports. (missing querySelector renderer option)`
                );
              return null;
            } else {
              const target = select(targetSelector);
              if (!target) {
                true &&
                  warn$1(
                    `Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`
                  );
              }
              return target;
            }
          } else {
            if (true && !targetSelector && !isTeleportDisabled(props)) {
              warn$1(`Invalid Teleport target: ${targetSelector}`);
            }
            return targetSelector;
          }
        };
        const TeleportImpl = {
          name: "Teleport",
          __isTeleport: true,
          process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          ) {
            const {
              mc: mountChildren,
              pc: patchChildren,
              pbc: patchBlockChildren,
              o: { insert, querySelector, createText, createComment },
            } = internals;
            const disabled = isTeleportDisabled(n2.props);
            let { shapeFlag, children, dynamicChildren } = n2;
            if (true && isHmrUpdating) {
              optimized = false;
              dynamicChildren = null;
            }
            if (n1 == null) {
              const placeholder = (n2.el = true
                ? createComment("teleport start")
                : undefined);
              const mainAnchor = (n2.anchor = true
                ? createComment("teleport end")
                : undefined);
              insert(placeholder, container, anchor);
              insert(mainAnchor, container, anchor);
              const target = (n2.target = resolveTarget(
                n2.props,
                querySelector
              ));
              const targetAnchor = (n2.targetAnchor = createText(""));
              if (target) {
                insert(targetAnchor, target);
                if (namespace === "svg" || isTargetSVG(target)) {
                  namespace = "svg";
                } else if (namespace === "mathml" || isTargetMathML(target)) {
                  namespace = "mathml";
                }
              } else if (true && !disabled) {
                warn$1(
                  "Invalid Teleport target on mount:",
                  target,
                  `(${typeof target})`
                );
              }
              const mount = (container2, anchor2) => {
                if (shapeFlag & 16) {
                  mountChildren(
                    children,
                    container2,
                    anchor2,
                    parentComponent,
                    parentSuspense,
                    namespace,
                    slotScopeIds,
                    optimized
                  );
                }
              };
              if (disabled) {
                mount(container, mainAnchor);
              } else if (target) {
                mount(target, targetAnchor);
              }
            } else {
              n2.el = n1.el;
              const mainAnchor = (n2.anchor = n1.anchor);
              const target = (n2.target = n1.target);
              const targetAnchor = (n2.targetAnchor = n1.targetAnchor);
              const wasDisabled = isTeleportDisabled(n1.props);
              const currentContainer = wasDisabled ? container : target;
              const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
              if (namespace === "svg" || isTargetSVG(target)) {
                namespace = "svg";
              } else if (namespace === "mathml" || isTargetMathML(target)) {
                namespace = "mathml";
              }
              if (dynamicChildren) {
                patchBlockChildren(
                  n1.dynamicChildren,
                  dynamicChildren,
                  currentContainer,
                  parentComponent,
                  parentSuspense,
                  namespace,
                  slotScopeIds
                );
                traverseStaticChildren(n1, n2, true);
              } else if (!optimized) {
                patchChildren(
                  n1,
                  n2,
                  currentContainer,
                  currentAnchor,
                  parentComponent,
                  parentSuspense,
                  namespace,
                  slotScopeIds,
                  false
                );
              }
              if (disabled) {
                if (!wasDisabled) {
                  moveTeleport(n2, container, mainAnchor, internals, 1);
                } else {
                  if (n2.props && n1.props && n2.props.to !== n1.props.to) {
                    n2.props.to = n1.props.to;
                  }
                }
              } else {
                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
                  const nextTarget = (n2.target = resolveTarget(
                    n2.props,
                    querySelector
                  ));
                  if (nextTarget) {
                    moveTeleport(n2, nextTarget, null, internals, 0);
                  } else if (true) {
                    warn$1(
                      "Invalid Teleport target on update:",
                      target,
                      `(${typeof target})`
                    );
                  }
                } else if (wasDisabled) {
                  moveTeleport(n2, target, targetAnchor, internals, 1);
                }
              }
            }
            updateCssVars(n2);
          },
          remove(
            vnode,
            parentComponent,
            parentSuspense,
            optimized,
            { um: unmount, o: { remove: hostRemove } },
            doRemove
          ) {
            const { shapeFlag, children, anchor, targetAnchor, target, props } =
              vnode;
            if (target) {
              hostRemove(targetAnchor);
            }
            doRemove && hostRemove(anchor);
            if (shapeFlag & 16) {
              const shouldRemove = doRemove || !isTeleportDisabled(props);
              for (let i = 0; i < children.length; i++) {
                const child = children[i];
                unmount(
                  child,
                  parentComponent,
                  parentSuspense,
                  shouldRemove,
                  !!child.dynamicChildren
                );
              }
            }
          },
          move: moveTeleport,
          hydrate: hydrateTeleport,
        };
        function moveTeleport(
          vnode,
          container,
          parentAnchor,
          { o: { insert }, m: move },
          moveType = 2
        ) {
          if (moveType === 0) {
            insert(vnode.targetAnchor, container, parentAnchor);
          }
          const { el, anchor, shapeFlag, children, props } = vnode;
          const isReorder = moveType === 2;
          if (isReorder) {
            insert(el, container, parentAnchor);
          }
          if (!isReorder || isTeleportDisabled(props)) {
            if (shapeFlag & 16) {
              for (let i = 0; i < children.length; i++) {
                move(children[i], container, parentAnchor, 2);
              }
            }
          }
          if (isReorder) {
            insert(anchor, container, parentAnchor);
          }
        }
        function hydrateTeleport(
          node,
          vnode,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized,
          { o: { nextSibling, parentNode, querySelector } },
          hydrateChildren
        ) {
          const target = (vnode.target = resolveTarget(
            vnode.props,
            querySelector
          ));
          if (target) {
            const targetNode = target._lpa || target.firstChild;
            if (vnode.shapeFlag & 16) {
              if (isTeleportDisabled(vnode.props)) {
                vnode.anchor = hydrateChildren(
                  nextSibling(node),
                  vnode,
                  parentNode(node),
                  parentComponent,
                  parentSuspense,
                  slotScopeIds,
                  optimized
                );
                vnode.targetAnchor = targetNode;
              } else {
                vnode.anchor = nextSibling(node);
                let targetAnchor = targetNode;
                while (targetAnchor) {
                  targetAnchor = nextSibling(targetAnchor);
                  if (
                    targetAnchor &&
                    targetAnchor.nodeType === 8 &&
                    targetAnchor.data === "teleport anchor"
                  ) {
                    vnode.targetAnchor = targetAnchor;
                    target._lpa =
                      vnode.targetAnchor && nextSibling(vnode.targetAnchor);
                    break;
                  }
                }
                hydrateChildren(
                  targetNode,
                  vnode,
                  target,
                  parentComponent,
                  parentSuspense,
                  slotScopeIds,
                  optimized
                );
              }
            }
            updateCssVars(vnode);
          }
          return vnode.anchor && nextSibling(vnode.anchor);
        }
        const Teleport = TeleportImpl;
        function updateCssVars(vnode) {
          const ctx = vnode.ctx;
          if (ctx && ctx.ut) {
            let node = vnode.children[0].el;
            while (node && node !== vnode.targetAnchor) {
              if (node.nodeType === 1)
                node.setAttribute("data-v-owner", ctx.uid);
              node = node.nextSibling;
            }
            ctx.ut();
          }
        }

        const Fragment = Symbol.for("v-fgt");
        const Text = Symbol.for("v-txt");
        const Comment = Symbol.for("v-cmt");
        const Static = Symbol.for("v-stc");
        const blockStack = [];
        let currentBlock = null;
        function openBlock(disableTracking = false) {
          blockStack.push((currentBlock = disableTracking ? null : []));
        }
        function closeBlock() {
          blockStack.pop();
          currentBlock = blockStack[blockStack.length - 1] || null;
        }
        let isBlockTreeEnabled = 1;
        function setBlockTracking(value) {
          isBlockTreeEnabled += value;
        }
        function setupBlock(vnode) {
          vnode.dynamicChildren =
            isBlockTreeEnabled > 0
              ? currentBlock ||
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_ARR"]
              : null;
          closeBlock();
          if (isBlockTreeEnabled > 0 && currentBlock) {
            currentBlock.push(vnode);
          }
          return vnode;
        }
        function createElementBlock(
          type,
          props,
          children,
          patchFlag,
          dynamicProps,
          shapeFlag
        ) {
          return setupBlock(
            createBaseVNode(
              type,
              props,
              children,
              patchFlag,
              dynamicProps,
              shapeFlag,
              true
            )
          );
        }
        function createBlock(type, props, children, patchFlag, dynamicProps) {
          return setupBlock(
            createVNode(type, props, children, patchFlag, dynamicProps, true)
          );
        }
        function isVNode(value) {
          return value ? value.__v_isVNode === true : false;
        }
        function isSameVNodeType(n1, n2) {
          if (true && n2.shapeFlag & 6 && hmrDirtyComponents.has(n2.type)) {
            n1.shapeFlag &= ~256;
            n2.shapeFlag &= ~512;
            return false;
          }
          return n1.type === n2.type && n1.key === n2.key;
        }
        let vnodeArgsTransformer;
        function transformVNodeArgs(transformer) {
          vnodeArgsTransformer = transformer;
        }
        const createVNodeWithArgsTransform = (...args) => {
          return _createVNode(
            ...(vnodeArgsTransformer
              ? vnodeArgsTransformer(args, currentRenderingInstance)
              : args)
          );
        };
        const normalizeKey = ({ key }) => (key != null ? key : null);
        const normalizeRef = ({ ref, ref_key, ref_for }) => {
          if (typeof ref === "number") {
            ref = "" + ref;
          }
          return ref != null
            ? Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(
                ref
              ) ||
              Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"])(
                ref
              ) ||
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                ref
              )
              ? {
                  i: currentRenderingInstance,
                  r: ref,
                  k: ref_key,
                  f: !!ref_for,
                }
              : ref
            : null;
        };
        function createBaseVNode(
          type,
          props = null,
          children = null,
          patchFlag = 0,
          dynamicProps = null,
          shapeFlag = type === Fragment ? 0 : 1,
          isBlockNode = false,
          needFullChildrenNormalization = false
        ) {
          const vnode = {
            __v_isVNode: true,
            __v_skip: true,
            type,
            props,
            key: props && normalizeKey(props),
            ref: props && normalizeRef(props),
            scopeId: currentScopeId,
            slotScopeIds: null,
            children,
            component: null,
            suspense: null,
            ssContent: null,
            ssFallback: null,
            dirs: null,
            transition: null,
            el: null,
            anchor: null,
            target: null,
            targetAnchor: null,
            staticCount: 0,
            shapeFlag,
            patchFlag,
            dynamicProps,
            dynamicChildren: null,
            appContext: null,
            ctx: currentRenderingInstance,
          };
          if (needFullChildrenNormalization) {
            normalizeChildren(vnode, children);
            if (shapeFlag & 128) {
              type.normalize(vnode);
            }
          } else if (children) {
            vnode.shapeFlag |= Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"]
            )(children)
              ? 8
              : 16;
          }
          if (true && vnode.key !== vnode.key) {
            warn$1(
              `VNode created with invalid key (NaN). VNode type:`,
              vnode.type
            );
          }
          if (
            isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
            !isBlockNode && // has current parent block
            currentBlock && // presence of a patch flag indicates this node needs patching on updates.
            // component nodes also should always be patched, because even if the
            // component doesn't need to update, it needs to persist the instance on to
            // the next vnode so that it can be properly unmounted later.
            (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
            // vnode should not be considered dynamic due to handler caching.
            vnode.patchFlag !== 32
          ) {
            currentBlock.push(vnode);
          }
          return vnode;
        }
        const createVNode = true ? createVNodeWithArgsTransform : undefined;
        function _createVNode(
          type,
          props = null,
          children = null,
          patchFlag = 0,
          dynamicProps = null,
          isBlockNode = false
        ) {
          if (!type || type === NULL_DYNAMIC_COMPONENT) {
            if (true && !type) {
              warn$1(`Invalid vnode type when creating vnode: ${type}.`);
            }
            type = Comment;
          }
          if (isVNode(type)) {
            const cloned = cloneVNode(
              type,
              props,
              true
              /* mergeRef: true */
            );
            if (children) {
              normalizeChildren(cloned, children);
            }
            if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
              if (cloned.shapeFlag & 6) {
                currentBlock[currentBlock.indexOf(type)] = cloned;
              } else {
                currentBlock.push(cloned);
              }
            }
            cloned.patchFlag |= -2;
            return cloned;
          }
          if (isClassComponent(type)) {
            type = type.__vccOpts;
          }
          if (props) {
            props = guardReactiveProps(props);
            let { class: klass, style } = props;
            if (
              klass &&
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(
                klass
              )
            ) {
              props.class = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["normalizeClass"]
              )(klass);
            }
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(
                style
              )
            ) {
              if (
                Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isProxy"])(
                  style
                ) &&
                !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                  style
                )
              ) {
                style = Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
                )({}, style);
              }
              props.style = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["normalizeStyle"]
              )(style);
            }
          }
          const shapeFlag = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"]
          )(type)
            ? 1
            : isSuspense(type)
            ? 128
            : isTeleport(type)
            ? 64
            : Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(type)
            ? 4
            : Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                type
              )
            ? 2
            : 0;
          if (
            true &&
            shapeFlag & 4 &&
            Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isProxy"])(
              type
            )
          ) {
            type = Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"]
            )(type);
            warn$1(
              `Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`,
              `
Component that was made reactive: `,
              type
            );
          }
          return createBaseVNode(
            type,
            props,
            children,
            patchFlag,
            dynamicProps,
            shapeFlag,
            isBlockNode,
            true
          );
        }
        function guardReactiveProps(props) {
          if (!props) return null;
          return Object(
            _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isProxy"]
          )(props) || isInternalObject(props)
            ? Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                {},
                props
              )
            : props;
        }
        function cloneVNode(
          vnode,
          extraProps,
          mergeRef = false,
          cloneTransition = false
        ) {
          const { props, ref, patchFlag, children, transition } = vnode;
          const mergedProps = extraProps
            ? mergeProps(props || {}, extraProps)
            : props;
          const cloned = {
            __v_isVNode: true,
            __v_skip: true,
            type: vnode.type,
            props: mergedProps,
            key: mergedProps && normalizeKey(mergedProps),
            ref:
              extraProps && extraProps.ref
                ? // #2078 in the case of <component :is="vnode" ref="extra"/>
                  // if the vnode itself already has a ref, cloneVNode will need to merge
                  // the refs so the single vnode can be set on multiple refs
                  mergeRef && ref
                  ? Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                      ref
                    )
                    ? ref.concat(normalizeRef(extraProps))
                    : [ref, normalizeRef(extraProps)]
                  : normalizeRef(extraProps)
                : ref,
            scopeId: vnode.scopeId,
            slotScopeIds: vnode.slotScopeIds,
            children:
              true &&
              patchFlag === -1 &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                children
              )
                ? children.map(deepCloneVNode)
                : children,
            target: vnode.target,
            targetAnchor: vnode.targetAnchor,
            staticCount: vnode.staticCount,
            shapeFlag: vnode.shapeFlag,
            // if the vnode is cloned with extra props, we can no longer assume its
            // existing patch flag to be reliable and need to add the FULL_PROPS flag.
            // note: preserve flag for fragments since they use the flag for children
            // fast paths only.
            patchFlag:
              extraProps && vnode.type !== Fragment
                ? patchFlag === -1
                  ? 16
                  : patchFlag | 16
                : patchFlag,
            dynamicProps: vnode.dynamicProps,
            dynamicChildren: vnode.dynamicChildren,
            appContext: vnode.appContext,
            dirs: vnode.dirs,
            transition,
            // These should technically only be non-null on mounted VNodes. However,
            // they *should* be copied for kept-alive vnodes. So we just always copy
            // them since them being non-null during a mount doesn't affect the logic as
            // they will simply be overwritten.
            component: vnode.component,
            suspense: vnode.suspense,
            ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
            ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
            el: vnode.el,
            anchor: vnode.anchor,
            ctx: vnode.ctx,
            ce: vnode.ce,
          };
          if (transition && cloneTransition) {
            cloned.transition = transition.clone(cloned);
          }
          return cloned;
        }
        function deepCloneVNode(vnode) {
          const cloned = cloneVNode(vnode);
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
              vnode.children
            )
          ) {
            cloned.children = vnode.children.map(deepCloneVNode);
          }
          return cloned;
        }
        function createTextVNode(text = " ", flag = 0) {
          return createVNode(Text, null, text, flag);
        }
        function createStaticVNode(content, numberOfNodes) {
          const vnode = createVNode(Static, null, content);
          vnode.staticCount = numberOfNodes;
          return vnode;
        }
        function createCommentVNode(text = "", asBlock = false) {
          return asBlock
            ? (openBlock(), createBlock(Comment, null, text))
            : createVNode(Comment, null, text);
        }
        function normalizeVNode(child) {
          if (child == null || typeof child === "boolean") {
            return createVNode(Comment);
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(child)
          ) {
            return createVNode(
              Fragment,
              null,
              // #3666, avoid reference pollution when reusing vnode
              child.slice()
            );
          } else if (typeof child === "object") {
            return cloneIfMounted(child);
          } else {
            return createVNode(Text, null, String(child));
          }
        }
        function cloneIfMounted(child) {
          return (child.el === null && child.patchFlag !== -1) || child.memo
            ? child
            : cloneVNode(child);
        }
        function normalizeChildren(vnode, children) {
          let type = 0;
          const { shapeFlag } = vnode;
          if (children == null) {
            children = null;
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
              children
            )
          ) {
            type = 16;
          } else if (typeof children === "object") {
            if (shapeFlag & (1 | 64)) {
              const slot = children.default;
              if (slot) {
                slot._c && (slot._d = false);
                normalizeChildren(vnode, slot());
                slot._c && (slot._d = true);
              }
              return;
            } else {
              type = 32;
              const slotFlag = children._;
              if (!slotFlag && !isInternalObject(children)) {
                children._ctx = currentRenderingInstance;
              } else if (slotFlag === 3 && currentRenderingInstance) {
                if (currentRenderingInstance.slots._ === 1) {
                  children._ = 1;
                } else {
                  children._ = 2;
                  vnode.patchFlag |= 1024;
                }
              }
            }
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              children
            )
          ) {
            children = { default: children, _ctx: currentRenderingInstance };
            type = 32;
          } else {
            children = String(children);
            if (shapeFlag & 64) {
              type = 16;
              children = [createTextVNode(children)];
            } else {
              type = 8;
            }
          }
          vnode.children = children;
          vnode.shapeFlag |= type;
        }
        function mergeProps(...args) {
          const ret = {};
          for (let i = 0; i < args.length; i++) {
            const toMerge = args[i];
            for (const key in toMerge) {
              if (key === "class") {
                if (ret.class !== toMerge.class) {
                  ret.class = Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["normalizeClass"]
                  )([ret.class, toMerge.class]);
                }
              } else if (key === "style") {
                ret.style = Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["normalizeStyle"]
                )([ret.style, toMerge.style]);
              } else if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isOn"])(key)
              ) {
                const existing = ret[key];
                const incoming = toMerge[key];
                if (
                  incoming &&
                  existing !== incoming &&
                  !(
                    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                      existing
                    ) && existing.includes(incoming)
                  )
                ) {
                  ret[key] = existing
                    ? [].concat(existing, incoming)
                    : incoming;
                }
              } else if (key !== "") {
                ret[key] = toMerge[key];
              }
            }
          }
          return ret;
        }
        function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
          callWithAsyncErrorHandling(hook, instance, 7, [vnode, prevVNode]);
        }

        const emptyAppContext = createAppContext();
        let uid = 0;
        function createComponentInstance(vnode, parent, suspense) {
          const type = vnode.type;
          const appContext =
            (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
          const instance = {
            uid: uid++,
            vnode,
            type,
            parent,
            appContext,
            root: null,
            // to be immediately set
            next: null,
            subTree: null,
            // will be set synchronously right after creation
            effect: null,
            update: null,
            // will be set synchronously right after creation
            scope: new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
              "EffectScope"
            ](
              true
              /* detached */
            ),
            render: null,
            proxy: null,
            exposed: null,
            exposeProxy: null,
            withProxy: null,
            provides: parent
              ? parent.provides
              : Object.create(appContext.provides),
            accessCache: null,
            renderCache: [],
            // local resolved assets
            components: null,
            directives: null,
            // resolved props and emits options
            propsOptions: normalizePropsOptions(type, appContext),
            emitsOptions: normalizeEmitsOptions(type, appContext),
            // emit
            emit: null,
            // to be set immediately
            emitted: null,
            // props default value
            propsDefaults:
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"],
            // inheritAttrs
            inheritAttrs: type.inheritAttrs,
            // state
            ctx: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"],
            data: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"],
            props: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"],
            attrs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"],
            slots: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"],
            refs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"],
            setupState: _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"],
            setupContext: null,
            attrsProxy: null,
            slotsProxy: null,
            // suspense related
            suspense,
            suspenseId: suspense ? suspense.pendingId : 0,
            asyncDep: null,
            asyncResolved: false,
            // lifecycle hooks
            // not using enums here because it results in computed properties
            isMounted: false,
            isUnmounted: false,
            isDeactivated: false,
            bc: null,
            c: null,
            bm: null,
            m: null,
            bu: null,
            u: null,
            um: null,
            bum: null,
            da: null,
            a: null,
            rtg: null,
            rtc: null,
            ec: null,
            sp: null,
          };
          if (true) {
            instance.ctx = createDevRenderContext(instance);
          } else {
          }
          instance.root = parent ? parent.root : instance;
          instance.emit = emit.bind(null, instance);
          if (vnode.ce) {
            vnode.ce(instance);
          }
          return instance;
        }
        let currentInstance = null;
        const getCurrentInstance = () =>
          currentInstance || currentRenderingInstance;
        let internalSetCurrentInstance;
        let setInSSRSetupState;
        {
          const g = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["getGlobalThis"]
          )();
          const registerGlobalSetter = (key, setter) => {
            let setters;
            if (!(setters = g[key])) setters = g[key] = [];
            setters.push(setter);
            return (v) => {
              if (setters.length > 1) setters.forEach((set) => set(v));
              else setters[0](v);
            };
          };
          internalSetCurrentInstance = registerGlobalSetter(
            `__VUE_INSTANCE_SETTERS__`,
            (v) => (currentInstance = v)
          );
          setInSSRSetupState = registerGlobalSetter(
            `__VUE_SSR_SETTERS__`,
            (v) => (isInSSRComponentSetup = v)
          );
        }
        const setCurrentInstance = (instance) => {
          const prev = currentInstance;
          internalSetCurrentInstance(instance);
          instance.scope.on();
          return () => {
            instance.scope.off();
            internalSetCurrentInstance(prev);
          };
        };
        const unsetCurrentInstance = () => {
          currentInstance && currentInstance.scope.off();
          internalSetCurrentInstance(null);
        };
        const isBuiltInTag = /* @__PURE__ */ Object(
          _vue_shared__WEBPACK_IMPORTED_MODULE_1__["makeMap"]
        )("slot,component");
        function validateComponentName(name, { isNativeTag }) {
          if (isBuiltInTag(name) || isNativeTag(name)) {
            warn$1(
              "Do not use built-in or reserved HTML elements as component id: " +
                name
            );
          }
        }
        function isStatefulComponent(instance) {
          return instance.vnode.shapeFlag & 4;
        }
        let isInSSRComponentSetup = false;
        function setupComponent(instance, isSSR = false) {
          isSSR && setInSSRSetupState(isSSR);
          const { props, children } = instance.vnode;
          const isStateful = isStatefulComponent(instance);
          initProps(instance, props, isStateful, isSSR);
          initSlots(instance, children);
          const setupResult = isStateful
            ? setupStatefulComponent(instance, isSSR)
            : void 0;
          isSSR && setInSSRSetupState(false);
          return setupResult;
        }
        function setupStatefulComponent(instance, isSSR) {
          var _a;
          const Component = instance.type;
          if (true) {
            if (Component.name) {
              validateComponentName(Component.name, instance.appContext.config);
            }
            if (Component.components) {
              const names = Object.keys(Component.components);
              for (let i = 0; i < names.length; i++) {
                validateComponentName(names[i], instance.appContext.config);
              }
            }
            if (Component.directives) {
              const names = Object.keys(Component.directives);
              for (let i = 0; i < names.length; i++) {
                validateDirectiveName(names[i]);
              }
            }
            if (Component.compilerOptions && isRuntimeOnly()) {
              warn$1(
                `"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`
              );
            }
          }
          instance.accessCache = /* @__PURE__ */ Object.create(null);
          instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
          if (true) {
            exposePropsOnRenderContext(instance);
          }
          const { setup } = Component;
          if (setup) {
            const setupContext = (instance.setupContext =
              setup.length > 1 ? createSetupContext(instance) : null);
            const reset = setCurrentInstance(instance);
            Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["pauseTracking"]
            )();
            const setupResult = callWithErrorHandling(setup, instance, 0, [
              true
                ? Object(
                    _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[
                      "shallowReadonly"
                    ]
                  )(instance.props)
                : undefined,
              setupContext,
            ]);
            Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["resetTracking"]
            )();
            reset();
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isPromise"])(
                setupResult
              )
            ) {
              setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
              if (isSSR) {
                return setupResult
                  .then((resolvedResult) => {
                    handleSetupResult(instance, resolvedResult, isSSR);
                  })
                  .catch((e) => {
                    handleError(e, instance, 0);
                  });
              } else {
                instance.asyncDep = setupResult;
                if (true && !instance.suspense) {
                  const name = (_a = Component.name) != null ? _a : "Anonymous";
                  warn$1(
                    `Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`
                  );
                }
              }
            } else {
              handleSetupResult(instance, setupResult, isSSR);
            }
          } else {
            finishComponentSetup(instance, isSSR);
          }
        }
        function handleSetupResult(instance, setupResult, isSSR) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              setupResult
            )
          ) {
            if (instance.type.__ssrInlineRender) {
              instance.ssrRender = setupResult;
            } else {
              instance.render = setupResult;
            }
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(
              setupResult
            )
          ) {
            if (true && isVNode(setupResult)) {
              warn$1(
                `setup() should not return VNodes directly - return a render function instead.`
              );
            }
            if (true) {
              instance.devtoolsRawSetupState = setupResult;
            }
            instance.setupState = Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["proxyRefs"]
            )(setupResult);
            if (true) {
              exposeSetupStateOnRenderContext(instance);
            }
          } else if (true && setupResult !== void 0) {
            warn$1(
              `setup() should return an object. Received: ${
                setupResult === null ? "null" : typeof setupResult
              }`
            );
          }
          finishComponentSetup(instance, isSSR);
        }
        let compile;
        let installWithProxy;
        function registerRuntimeCompiler(_compile) {
          compile = _compile;
          installWithProxy = (i) => {
            if (i.render._rc) {
              i.withProxy = new Proxy(
                i.ctx,
                RuntimeCompiledPublicInstanceProxyHandlers
              );
            }
          };
        }
        const isRuntimeOnly = () => !compile;
        function finishComponentSetup(instance, isSSR, skipOptions) {
          const Component = instance.type;
          if (!instance.render) {
            if (!isSSR && compile && !Component.render) {
              const template =
                Component.template || resolveMergedOptions(instance).template;
              if (template) {
                if (true) {
                  startMeasure(instance, `compile`);
                }
                const { isCustomElement, compilerOptions } =
                  instance.appContext.config;
                const {
                  delimiters,
                  compilerOptions: componentCompilerOptions,
                } = Component;
                const finalCompilerOptions = Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
                )(
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                    {
                      isCustomElement,
                      delimiters,
                    },
                    compilerOptions
                  ),
                  componentCompilerOptions
                );
                Component.render = compile(template, finalCompilerOptions);
                if (true) {
                  endMeasure(instance, `compile`);
                }
              }
            }
            instance.render =
              Component.render ||
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
            if (installWithProxy) {
              installWithProxy(instance);
            }
          }
          if (true) {
            const reset = setCurrentInstance(instance);
            Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["pauseTracking"]
            )();
            try {
              applyOptions(instance);
            } finally {
              Object(
                _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["resetTracking"]
              )();
              reset();
            }
          }
          if (
            true &&
            !Component.render &&
            instance.render ===
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"] &&
            !isSSR
          ) {
            if (!compile && Component.template) {
              warn$1(
                `Component provided template option but runtime compilation is not supported in this build of Vue.` +
                  ` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
              );
            } else {
              warn$1(`Component is missing template or render function.`);
            }
          }
        }
        const attrsProxyHandlers = true
          ? {
              get(target, key) {
                markAttrsAccessed();
                Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["track"])(
                  target,
                  "get",
                  ""
                );
                return target[key];
              },
              set() {
                warn$1(`setupContext.attrs is readonly.`);
                return false;
              },
              deleteProperty() {
                warn$1(`setupContext.attrs is readonly.`);
                return false;
              },
            }
          : undefined;
        function getSlotsProxy(instance) {
          return (
            instance.slotsProxy ||
            (instance.slotsProxy = new Proxy(instance.slots, {
              get(target, key) {
                Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["track"])(
                  instance,
                  "get",
                  "$slots"
                );
                return target[key];
              },
            }))
          );
        }
        function createSetupContext(instance) {
          const expose = (exposed) => {
            if (true) {
              if (instance.exposed) {
                warn$1(`expose() should be called only once per setup().`);
              }
              if (exposed != null) {
                let exposedType = typeof exposed;
                if (exposedType === "object") {
                  if (
                    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                      exposed
                    )
                  ) {
                    exposedType = "array";
                  } else if (
                    Object(
                      _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"]
                    )(exposed)
                  ) {
                    exposedType = "ref";
                  }
                }
                if (exposedType !== "object") {
                  warn$1(
                    `expose() should be passed a plain object, received ${exposedType}.`
                  );
                }
              }
            }
            instance.exposed = exposed || {};
          };
          if (true) {
            let attrsProxy;
            return Object.freeze({
              get attrs() {
                return (
                  attrsProxy ||
                  (attrsProxy = new Proxy(instance.attrs, attrsProxyHandlers))
                );
              },
              get slots() {
                return getSlotsProxy(instance);
              },
              get emit() {
                return (event, ...args) => instance.emit(event, ...args);
              },
              expose,
            });
          } else {
          }
        }
        function getExposeProxy(instance) {
          if (instance.exposed) {
            return (
              instance.exposeProxy ||
              (instance.exposeProxy = new Proxy(
                Object(
                  _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["proxyRefs"]
                )(
                  Object(
                    _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["markRaw"]
                  )(instance.exposed)
                ),
                {
                  get(target, key) {
                    if (key in target) {
                      return target[key];
                    } else if (key in publicPropertiesMap) {
                      return publicPropertiesMap[key](instance);
                    }
                  },
                  has(target, key) {
                    return key in target || key in publicPropertiesMap;
                  },
                }
              ))
            );
          }
        }
        const classifyRE = /(?:^|[-_])(\w)/g;
        const classify = (str) =>
          str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
        function getComponentName(Component, includeInferred = true) {
          return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
            Component
          )
            ? Component.displayName || Component.name
            : Component.name || (includeInferred && Component.__name);
        }
        function formatComponentName(instance, Component, isRoot = false) {
          let name = getComponentName(Component);
          if (!name && Component.__file) {
            const match = Component.__file.match(/([^/\\]+)\.\w+$/);
            if (match) {
              name = match[1];
            }
          }
          if (!name && instance && instance.parent) {
            const inferFromRegistry = (registry) => {
              for (const key in registry) {
                if (registry[key] === Component) {
                  return key;
                }
              }
            };
            name =
              inferFromRegistry(
                instance.components || instance.parent.type.components
              ) || inferFromRegistry(instance.appContext.components);
          }
          return name ? classify(name) : isRoot ? `App` : `Anonymous`;
        }
        function isClassComponent(value) {
          return (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              value
            ) && "__vccOpts" in value
          );
        }

        const computed = (getterOrOptions, debugOptions) => {
          const c = Object(
            _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["computed"]
          )(getterOrOptions, debugOptions, isInSSRComponentSetup);
          if (true) {
            const i = getCurrentInstance();
            if (i && i.appContext.config.warnRecursiveComputed) {
              c._warnRecursive = true;
            }
          }
          return c;
        };

        function useModel(
          props,
          name,
          options = _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"]
        ) {
          const i = getCurrentInstance();
          if (true && !i) {
            warn$1(`useModel() called without active instance.`);
            return Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["ref"]
            )();
          }
          if (true && !i.propsOptions[0][name]) {
            warn$1(
              `useModel() called with prop "${name}" which is not declared.`
            );
            return Object(
              _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["ref"]
            )();
          }
          const camelizedName = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"]
          )(name);
          const hyphenatedName = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"]
          )(name);
          const res = Object(
            _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["customRef"]
          )((track, trigger) => {
            let localValue;
            watchSyncEffect(() => {
              const propValue = props[name];
              if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasChanged"])(
                  localValue,
                  propValue
                )
              ) {
                localValue = propValue;
                trigger();
              }
            });
            return {
              get() {
                track();
                return options.get ? options.get(localValue) : localValue;
              },
              set(value) {
                const rawProps = i.vnode.props;
                if (
                  !(
                    rawProps && // check if parent has passed v-model
                    (name in rawProps ||
                      camelizedName in rawProps ||
                      hyphenatedName in rawProps) &&
                    (`onUpdate:${name}` in rawProps ||
                      `onUpdate:${camelizedName}` in rawProps ||
                      `onUpdate:${hyphenatedName}` in rawProps)
                  ) &&
                  Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasChanged"]
                  )(value, localValue)
                ) {
                  localValue = value;
                  trigger();
                }
                i.emit(
                  `update:${name}`,
                  options.set ? options.set(value) : value
                );
              },
            };
          });
          const modifierKey =
            name === "modelValue" ? "modelModifiers" : `${name}Modifiers`;
          res[Symbol.iterator] = () => {
            let i2 = 0;
            return {
              next() {
                if (i2 < 2) {
                  return {
                    value: i2++ ? props[modifierKey] || {} : res,
                    done: false,
                  };
                } else {
                  return { done: true };
                }
              },
            };
          };
          return res;
        }

        function h(type, propsOrChildren, children) {
          const l = arguments.length;
          if (l === 2) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(
                propsOrChildren
              ) &&
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                propsOrChildren
              )
            ) {
              if (isVNode(propsOrChildren)) {
                return createVNode(type, null, [propsOrChildren]);
              }
              return createVNode(type, propsOrChildren);
            } else {
              return createVNode(type, null, propsOrChildren);
            }
          } else {
            if (l > 3) {
              children = Array.prototype.slice.call(arguments, 2);
            } else if (l === 3 && isVNode(children)) {
              children = [children];
            }
            return createVNode(type, propsOrChildren, children);
          }
        }

        function initCustomFormatter() {
          if (false || typeof window === "undefined") {
            return;
          }
          const vueStyle = { style: "color:#3ba776" };
          const numberStyle = { style: "color:#1677ff" };
          const stringStyle = { style: "color:#f5222d" };
          const keywordStyle = { style: "color:#eb2f96" };
          const formatter = {
            header(obj) {
              if (
                !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(
                  obj
                )
              ) {
                return null;
              }
              if (obj.__isVue) {
                return ["div", vueStyle, `VueInstance`];
              } else if (
                Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isRef"])(
                  obj
                )
              ) {
                return [
                  "div",
                  {},
                  ["span", vueStyle, genRefFlag(obj)],
                  "<",
                  formatValue(obj.value),
                  `>`,
                ];
              } else if (
                Object(
                  _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isReactive"]
                )(obj)
              ) {
                return [
                  "div",
                  {},
                  [
                    "span",
                    vueStyle,
                    Object(
                      _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isShallow"]
                    )(obj)
                      ? "ShallowReactive"
                      : "Reactive",
                  ],
                  "<",
                  formatValue(obj),
                  `>${
                    Object(
                      _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isReadonly"]
                    )(obj)
                      ? ` (readonly)`
                      : ``
                  }`,
                ];
              } else if (
                Object(
                  _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isReadonly"]
                )(obj)
              ) {
                return [
                  "div",
                  {},
                  [
                    "span",
                    vueStyle,
                    Object(
                      _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isShallow"]
                    )(obj)
                      ? "ShallowReadonly"
                      : "Readonly",
                  ],
                  "<",
                  formatValue(obj),
                  ">",
                ];
              }
              return null;
            },
            hasBody(obj) {
              return obj && obj.__isVue;
            },
            body(obj) {
              if (obj && obj.__isVue) {
                return ["div", {}, ...formatInstance(obj.$)];
              }
            },
          };
          function formatInstance(instance) {
            const blocks = [];
            if (instance.type.props && instance.props) {
              blocks.push(
                createInstanceBlock(
                  "props",
                  Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"])(
                    instance.props
                  )
                )
              );
            }
            if (
              instance.setupState !==
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"]
            ) {
              blocks.push(createInstanceBlock("setup", instance.setupState));
            }
            if (
              instance.data !==
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"]
            ) {
              blocks.push(
                createInstanceBlock(
                  "data",
                  Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"])(
                    instance.data
                  )
                )
              );
            }
            const computed = extractKeys(instance, "computed");
            if (computed) {
              blocks.push(createInstanceBlock("computed", computed));
            }
            const injected = extractKeys(instance, "inject");
            if (injected) {
              blocks.push(createInstanceBlock("injected", injected));
            }
            blocks.push([
              "div",
              {},
              [
                "span",
                {
                  style: keywordStyle.style + ";opacity:0.66",
                },
                "$ (internal): ",
              ],
              ["object", { object: instance }],
            ]);
            return blocks;
          }
          function createInstanceBlock(type, target) {
            target = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
              {},
              target
            );
            if (!Object.keys(target).length) {
              return ["span", {}];
            }
            return [
              "div",
              { style: "line-height:1.25em;margin-bottom:0.6em" },
              [
                "div",
                {
                  style: "color:#476582",
                },
                type,
              ],
              [
                "div",
                {
                  style: "padding-left:1.25em",
                },
                ...Object.keys(target).map((key) => {
                  return [
                    "div",
                    {},
                    ["span", keywordStyle, key + ": "],
                    formatValue(target[key], false),
                  ];
                }),
              ],
            ];
          }
          function formatValue(v, asRaw = true) {
            if (typeof v === "number") {
              return ["span", numberStyle, v];
            } else if (typeof v === "string") {
              return ["span", stringStyle, JSON.stringify(v)];
            } else if (typeof v === "boolean") {
              return ["span", keywordStyle, v];
            } else if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(v)
            ) {
              return [
                "object",
                {
                  object: asRaw
                    ? Object(
                        _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["toRaw"]
                      )(v)
                    : v,
                },
              ];
            } else {
              return ["span", stringStyle, String(v)];
            }
          }
          function extractKeys(instance, type) {
            const Comp = instance.type;
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                Comp
              )
            ) {
              return;
            }
            const extracted = {};
            for (const key in instance.ctx) {
              if (isKeyOfType(Comp, key, type)) {
                extracted[key] = instance.ctx[key];
              }
            }
            return extracted;
          }
          function isKeyOfType(Comp, key, type) {
            const opts = Comp[type];
            if (
              (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                opts
              ) &&
                opts.includes(key)) ||
              (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(
                opts
              ) &&
                key in opts)
            ) {
              return true;
            }
            if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
              return true;
            }
            if (
              Comp.mixins &&
              Comp.mixins.some((m) => isKeyOfType(m, key, type))
            ) {
              return true;
            }
          }
          function genRefFlag(v) {
            if (
              Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__["isShallow"])(
                v
              )
            ) {
              return `ShallowRef`;
            }
            if (v.effect) {
              return `ComputedRef`;
            }
            return `Ref`;
          }
          if (window.devtoolsFormatters) {
            window.devtoolsFormatters.push(formatter);
          } else {
            window.devtoolsFormatters = [formatter];
          }
        }

        function withMemo(memo, render, cache, index) {
          const cached = cache[index];
          if (cached && isMemoSame(cached, memo)) {
            return cached;
          }
          const ret = render();
          ret.memo = memo.slice();
          return (cache[index] = ret);
        }
        function isMemoSame(cached, memo) {
          const prev = cached.memo;
          if (prev.length != memo.length) {
            return false;
          }
          for (let i = 0; i < prev.length; i++) {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hasChanged"])(
                prev[i],
                memo[i]
              )
            ) {
              return false;
            }
          }
          if (isBlockTreeEnabled > 0 && currentBlock) {
            currentBlock.push(cached);
          }
          return true;
        }

        const version = "3.4.27";
        const warn = true ? warn$1 : undefined;
        const ErrorTypeStrings = ErrorTypeStrings$1;
        const devtools = true ? devtools$1 : undefined;
        const setDevtoolsHook = true ? setDevtoolsHook$1 : undefined;
        const _ssrUtils = {
          createComponentInstance,
          setupComponent,
          renderComponentRoot,
          setCurrentRenderingInstance,
          isVNode: isVNode,
          normalizeVNode,
        };
        const ssrUtils = _ssrUtils;
        const resolveFilter = null;
        const compatUtils = null;
        const DeprecationTypes = null;

        /***/
      },

    /***/ "./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js":
      /*!***********************************************************************!*\
  !*** ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js ***!
  \***********************************************************************/
      /*! exports provided: EffectScope, ReactiveEffect, TrackOpTypes, TriggerOpTypes, customRef, effect, effectScope, getCurrentScope, isProxy, isReactive, isReadonly, isRef, isShallow, markRaw, onScopeDispose, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, toRef, toRefs, toValue, triggerRef, unref, camelize, capitalize, normalizeClass, normalizeProps, normalizeStyle, toDisplayString, toHandlerKey, BaseTransition, BaseTransitionPropsValidators, Comment, DeprecationTypes, ErrorCodes, ErrorTypeStrings, Fragment, KeepAlive, Static, Suspense, Teleport, Text, assertNumber, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, compatUtils, computed, createBlock, createCommentVNode, createElementBlock, createElementVNode, createHydrationRenderer, createPropsRestProxy, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, defineEmits, defineExpose, defineModel, defineOptions, defineProps, defineSlots, devtools, getCurrentInstance, getTransitionRawChildren, guardReactiveProps, h, handleError, hasInjectionContext, initCustomFormatter, inject, isMemoSame, isRuntimeOnly, isVNode, mergeDefaults, mergeModels, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveFilter, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useAttrs, useModel, useSSRContext, useSlots, useTransitionState, version, warn, watch, watchEffect, watchPostEffect, watchSyncEffect, withAsyncContext, withCtx, withDefaults, withDirectives, withMemo, withScopeId, Transition, TransitionGroup, VueElement, createApp, createSSRApp, defineCustomElement, defineSSRCustomElement, hydrate, initDirectivesForSSR, render, useCssModule, useCssVars, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, vShow, withKeys, withModifiers */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Transition",
          function () {
            return Transition;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TransitionGroup",
          function () {
            return TransitionGroup;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "VueElement",
          function () {
            return VueElement;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createApp",
          function () {
            return createApp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createSSRApp",
          function () {
            return createSSRApp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "defineCustomElement",
          function () {
            return defineCustomElement;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "defineSSRCustomElement",
          function () {
            return defineSSRCustomElement;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "hydrate",
          function () {
            return hydrate;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "initDirectivesForSSR",
          function () {
            return initDirectivesForSSR;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "render",
          function () {
            return render;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "useCssModule",
          function () {
            return useCssModule;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "useCssVars",
          function () {
            return useCssVars;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "vModelCheckbox",
          function () {
            return vModelCheckbox;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "vModelDynamic",
          function () {
            return vModelDynamic;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "vModelRadio",
          function () {
            return vModelRadio;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "vModelSelect",
          function () {
            return vModelSelect;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "vModelText",
          function () {
            return vModelText;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "vShow",
          function () {
            return vShow;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "withKeys",
          function () {
            return withKeys;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "withModifiers",
          function () {
            return withModifiers;
          }
        );
        /* harmony import */ var _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @vue/runtime-core */ "./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"
          );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "EffectScope",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "EffectScope"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ReactiveEffect",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "ReactiveEffect"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TrackOpTypes",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "TrackOpTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TriggerOpTypes",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "TriggerOpTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "customRef",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["customRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "effect",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["effect"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "effectScope",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "effectScope"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getCurrentScope",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "getCurrentScope"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isProxy",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["isProxy"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isReactive",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["isReactive"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isReadonly",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["isReadonly"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isRef",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["isRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isShallow",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["isShallow"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "markRaw",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["markRaw"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onScopeDispose",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onScopeDispose"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "proxyRefs",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["proxyRefs"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "reactive",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["reactive"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "readonly",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["readonly"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ref",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["ref"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowReactive",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "shallowReactive"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowReadonly",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "shallowReadonly"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowRef",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["shallowRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "stop",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["stop"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toRaw",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["toRaw"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toRef",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["toRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toRefs",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["toRefs"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toValue",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["toValue"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "triggerRef",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["triggerRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "unref",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["unref"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "camelize",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["camelize"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "capitalize",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["capitalize"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "normalizeClass",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "normalizeClass"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "normalizeProps",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "normalizeProps"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "normalizeStyle",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "normalizeStyle"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toDisplayString",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "toDisplayString"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toHandlerKey",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "toHandlerKey"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "BaseTransition",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "BaseTransition"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "BaseTransitionPropsValidators",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "BaseTransitionPropsValidators"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Comment",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["Comment"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "DeprecationTypes",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "DeprecationTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ErrorCodes",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["ErrorCodes"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ErrorTypeStrings",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "ErrorTypeStrings"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Fragment",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["Fragment"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "KeepAlive",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["KeepAlive"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Static",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["Static"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Suspense",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["Suspense"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Teleport",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["Teleport"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Text",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["Text"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "assertNumber",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "assertNumber"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "callWithAsyncErrorHandling",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "callWithAsyncErrorHandling"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "callWithErrorHandling",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "callWithErrorHandling"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "cloneVNode",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["cloneVNode"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "compatUtils",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "compatUtils"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "computed",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["computed"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createBlock",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createBlock"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createCommentVNode",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createCommentVNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createElementBlock",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createElementBlock"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createElementVNode",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createElementVNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createHydrationRenderer",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createHydrationRenderer"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createPropsRestProxy",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createPropsRestProxy"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createRenderer",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createRenderer"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createSlots",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createSlots"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createStaticVNode",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createStaticVNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createTextVNode",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createTextVNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createVNode",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "createVNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineAsyncComponent",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "defineAsyncComponent"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineComponent",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "defineComponent"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineEmits",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "defineEmits"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineExpose",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "defineExpose"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineModel",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "defineModel"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineOptions",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "defineOptions"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineProps",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "defineProps"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineSlots",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "defineSlots"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "devtools",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["devtools"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getCurrentInstance",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "getCurrentInstance"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getTransitionRawChildren",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "getTransitionRawChildren"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "guardReactiveProps",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "guardReactiveProps"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "h",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["h"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "handleError",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "handleError"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "hasInjectionContext",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "hasInjectionContext"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "initCustomFormatter",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "initCustomFormatter"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "inject",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["inject"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isMemoSame",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["isMemoSame"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isRuntimeOnly",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "isRuntimeOnly"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isVNode",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["isVNode"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "mergeDefaults",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "mergeDefaults"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "mergeModels",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "mergeModels"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "mergeProps",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["mergeProps"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "nextTick",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["nextTick"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onActivated",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onActivated"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onBeforeMount",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onBeforeMount"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onBeforeUnmount",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onBeforeUnmount"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onBeforeUpdate",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onBeforeUpdate"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onDeactivated",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onDeactivated"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onErrorCaptured",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onErrorCaptured"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onMounted",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["onMounted"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onRenderTracked",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onRenderTracked"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onRenderTriggered",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onRenderTriggered"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onServerPrefetch",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onServerPrefetch"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onUnmounted",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "onUnmounted"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onUpdated",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["onUpdated"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "openBlock",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["openBlock"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "popScopeId",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["popScopeId"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "provide",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["provide"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "pushScopeId",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "pushScopeId"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "queuePostFlushCb",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "queuePostFlushCb"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "registerRuntimeCompiler",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "registerRuntimeCompiler"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "renderList",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["renderList"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "renderSlot",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["renderSlot"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveComponent",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "resolveComponent"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveDirective",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "resolveDirective"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveDynamicComponent",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "resolveDynamicComponent"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveFilter",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "resolveFilter"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveTransitionHooks",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "resolveTransitionHooks"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "setBlockTracking",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "setBlockTracking"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "setDevtoolsHook",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "setDevtoolsHook"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "setTransitionHooks",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "setTransitionHooks"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ssrContextKey",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "ssrContextKey"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ssrUtils",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["ssrUtils"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toHandlers",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["toHandlers"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "transformVNodeArgs",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "transformVNodeArgs"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useAttrs",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["useAttrs"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useModel",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["useModel"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useSSRContext",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "useSSRContext"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useSlots",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["useSlots"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useTransitionState",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "useTransitionState"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "version",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["version"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "warn",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "watch",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["watch"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "watchEffect",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "watchEffect"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "watchPostEffect",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "watchPostEffect"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "watchSyncEffect",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "watchSyncEffect"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withAsyncContext",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "withAsyncContext"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withCtx",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["withCtx"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withDefaults",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "withDefaults"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withDirectives",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "withDirectives"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withMemo",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["withMemo"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withScopeId",
          function () {
            return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "withScopeId"
            ];
          }
        );

        /* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! @vue/shared */ "./node_modules/@vue/shared/dist/shared.esm-bundler.js"
          );
        /**
         * @vue/runtime-dom v3.4.27
         * (c) 2018-present Yuxi (Evan) You and Vue contributors
         * @license MIT
         **/

        const svgNS = "http://www.w3.org/2000/svg";
        const mathmlNS = "http://www.w3.org/1998/Math/MathML";
        const doc = typeof document !== "undefined" ? document : null;
        const templateContainer =
          doc && /* @__PURE__ */ doc.createElement("template");
        const nodeOps = {
          insert: (child, parent, anchor) => {
            parent.insertBefore(child, anchor || null);
          },
          remove: (child) => {
            const parent = child.parentNode;
            if (parent) {
              parent.removeChild(child);
            }
          },
          createElement: (tag, namespace, is, props) => {
            const el =
              namespace === "svg"
                ? doc.createElementNS(svgNS, tag)
                : namespace === "mathml"
                ? doc.createElementNS(mathmlNS, tag)
                : doc.createElement(tag, is ? { is } : void 0);
            if (tag === "select" && props && props.multiple != null) {
              el.setAttribute("multiple", props.multiple);
            }
            return el;
          },
          createText: (text) => doc.createTextNode(text),
          createComment: (text) => doc.createComment(text),
          setText: (node, text) => {
            node.nodeValue = text;
          },
          setElementText: (el, text) => {
            el.textContent = text;
          },
          parentNode: (node) => node.parentNode,
          nextSibling: (node) => node.nextSibling,
          querySelector: (selector) => doc.querySelector(selector),
          setScopeId(el, id) {
            el.setAttribute(id, "");
          },
          // __UNSAFE__
          // Reason: innerHTML.
          // Static content here can only come from compiled templates.
          // As long as the user only uses trusted templates, this is safe.
          insertStaticContent(content, parent, anchor, namespace, start, end) {
            const before = anchor ? anchor.previousSibling : parent.lastChild;
            if (start && (start === end || start.nextSibling)) {
              while (true) {
                parent.insertBefore(start.cloneNode(true), anchor);
                if (start === end || !(start = start.nextSibling)) break;
              }
            } else {
              templateContainer.innerHTML =
                namespace === "svg"
                  ? `<svg>${content}</svg>`
                  : namespace === "mathml"
                  ? `<math>${content}</math>`
                  : content;
              const template = templateContainer.content;
              if (namespace === "svg" || namespace === "mathml") {
                const wrapper = template.firstChild;
                while (wrapper.firstChild) {
                  template.appendChild(wrapper.firstChild);
                }
                template.removeChild(wrapper);
              }
              parent.insertBefore(template, anchor);
            }
            return [
              // first
              before ? before.nextSibling : parent.firstChild,
              // last
              anchor ? anchor.previousSibling : parent.lastChild,
            ];
          },
        };

        const TRANSITION = "transition";
        const ANIMATION = "animation";
        const vtcKey = Symbol("_vtc");
        const Transition = (props, { slots }) =>
          Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["h"])(
            _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["BaseTransition"],
            resolveTransitionProps(props),
            slots
          );
        Transition.displayName = "Transition";
        const DOMTransitionPropsValidators = {
          name: String,
          type: String,
          css: {
            type: Boolean,
            default: true,
          },
          duration: [String, Number, Object],
          enterFromClass: String,
          enterActiveClass: String,
          enterToClass: String,
          appearFromClass: String,
          appearActiveClass: String,
          appearToClass: String,
          leaveFromClass: String,
          leaveActiveClass: String,
          leaveToClass: String,
        };
        const TransitionPropsValidators = (Transition.props =
          /* @__PURE__ */ Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
          )(
            {},
            _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
              "BaseTransitionPropsValidators"
            ],
            DOMTransitionPropsValidators
          ));
        const callHook = (hook, args = []) => {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(hook)
          ) {
            hook.forEach((h2) => h2(...args));
          } else if (hook) {
            hook(...args);
          }
        };
        const hasExplicitCallback = (hook) => {
          return hook
            ? Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(hook)
              ? hook.some((h2) => h2.length > 1)
              : hook.length > 1
            : false;
        };
        function resolveTransitionProps(rawProps) {
          const baseProps = {};
          for (const key in rawProps) {
            if (!(key in DOMTransitionPropsValidators)) {
              baseProps[key] = rawProps[key];
            }
          }
          if (rawProps.css === false) {
            return baseProps;
          }
          const {
            name = "v",
            type,
            duration,
            enterFromClass = `${name}-enter-from`,
            enterActiveClass = `${name}-enter-active`,
            enterToClass = `${name}-enter-to`,
            appearFromClass = enterFromClass,
            appearActiveClass = enterActiveClass,
            appearToClass = enterToClass,
            leaveFromClass = `${name}-leave-from`,
            leaveActiveClass = `${name}-leave-active`,
            leaveToClass = `${name}-leave-to`,
          } = rawProps;
          const durations = normalizeDuration(duration);
          const enterDuration = durations && durations[0];
          const leaveDuration = durations && durations[1];
          const {
            onBeforeEnter,
            onEnter,
            onEnterCancelled,
            onLeave,
            onLeaveCancelled,
            onBeforeAppear = onBeforeEnter,
            onAppear = onEnter,
            onAppearCancelled = onEnterCancelled,
          } = baseProps;
          const finishEnter = (el, isAppear, done) => {
            removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
            removeTransitionClass(
              el,
              isAppear ? appearActiveClass : enterActiveClass
            );
            done && done();
          };
          const finishLeave = (el, done) => {
            el._isLeaving = false;
            removeTransitionClass(el, leaveFromClass);
            removeTransitionClass(el, leaveToClass);
            removeTransitionClass(el, leaveActiveClass);
            done && done();
          };
          const makeEnterHook = (isAppear) => {
            return (el, done) => {
              const hook = isAppear ? onAppear : onEnter;
              const resolve = () => finishEnter(el, isAppear, done);
              callHook(hook, [el, resolve]);
              nextFrame(() => {
                removeTransitionClass(
                  el,
                  isAppear ? appearFromClass : enterFromClass
                );
                addTransitionClass(el, isAppear ? appearToClass : enterToClass);
                if (!hasExplicitCallback(hook)) {
                  whenTransitionEnds(el, type, enterDuration, resolve);
                }
              });
            };
          };
          return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
            baseProps,
            {
              onBeforeEnter(el) {
                callHook(onBeforeEnter, [el]);
                addTransitionClass(el, enterFromClass);
                addTransitionClass(el, enterActiveClass);
              },
              onBeforeAppear(el) {
                callHook(onBeforeAppear, [el]);
                addTransitionClass(el, appearFromClass);
                addTransitionClass(el, appearActiveClass);
              },
              onEnter: makeEnterHook(false),
              onAppear: makeEnterHook(true),
              onLeave(el, done) {
                el._isLeaving = true;
                const resolve = () => finishLeave(el, done);
                addTransitionClass(el, leaveFromClass);
                addTransitionClass(el, leaveActiveClass);
                forceReflow();
                nextFrame(() => {
                  if (!el._isLeaving) {
                    return;
                  }
                  removeTransitionClass(el, leaveFromClass);
                  addTransitionClass(el, leaveToClass);
                  if (!hasExplicitCallback(onLeave)) {
                    whenTransitionEnds(el, type, leaveDuration, resolve);
                  }
                });
                callHook(onLeave, [el, resolve]);
              },
              onEnterCancelled(el) {
                finishEnter(el, false);
                callHook(onEnterCancelled, [el]);
              },
              onAppearCancelled(el) {
                finishEnter(el, true);
                callHook(onAppearCancelled, [el]);
              },
              onLeaveCancelled(el) {
                finishLeave(el);
                callHook(onLeaveCancelled, [el]);
              },
            }
          );
        }
        function normalizeDuration(duration) {
          if (duration == null) {
            return null;
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isObject"])(
              duration
            )
          ) {
            return [NumberOf(duration.enter), NumberOf(duration.leave)];
          } else {
            const n = NumberOf(duration);
            return [n, n];
          }
        }
        function NumberOf(val) {
          const res = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toNumber"]
          )(val);
          if (true) {
            Object(
              _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["assertNumber"]
            )(res, "<transition> explicit duration");
          }
          return res;
        }
        function addTransitionClass(el, cls) {
          cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
          (el[vtcKey] || (el[vtcKey] = /* @__PURE__ */ new Set())).add(cls);
        }
        function removeTransitionClass(el, cls) {
          cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
          const _vtc = el[vtcKey];
          if (_vtc) {
            _vtc.delete(cls);
            if (!_vtc.size) {
              el[vtcKey] = void 0;
            }
          }
        }
        function nextFrame(cb) {
          requestAnimationFrame(() => {
            requestAnimationFrame(cb);
          });
        }
        let endId = 0;
        function whenTransitionEnds(
          el,
          expectedType,
          explicitTimeout,
          resolve
        ) {
          const id = (el._endId = ++endId);
          const resolveIfNotStale = () => {
            if (id === el._endId) {
              resolve();
            }
          };
          if (explicitTimeout) {
            return setTimeout(resolveIfNotStale, explicitTimeout);
          }
          const { type, timeout, propCount } = getTransitionInfo(
            el,
            expectedType
          );
          if (!type) {
            return resolve();
          }
          const endEvent = type + "end";
          let ended = 0;
          const end = () => {
            el.removeEventListener(endEvent, onEnd);
            resolveIfNotStale();
          };
          const onEnd = (e) => {
            if (e.target === el && ++ended >= propCount) {
              end();
            }
          };
          setTimeout(() => {
            if (ended < propCount) {
              end();
            }
          }, timeout + 1);
          el.addEventListener(endEvent, onEnd);
        }
        function getTransitionInfo(el, expectedType) {
          const styles = window.getComputedStyle(el);
          const getStyleProperties = (key) => (styles[key] || "").split(", ");
          const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
          const transitionDurations = getStyleProperties(
            `${TRANSITION}Duration`
          );
          const transitionTimeout = getTimeout(
            transitionDelays,
            transitionDurations
          );
          const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
          const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
          const animationTimeout = getTimeout(
            animationDelays,
            animationDurations
          );
          let type = null;
          let timeout = 0;
          let propCount = 0;
          if (expectedType === TRANSITION) {
            if (transitionTimeout > 0) {
              type = TRANSITION;
              timeout = transitionTimeout;
              propCount = transitionDurations.length;
            }
          } else if (expectedType === ANIMATION) {
            if (animationTimeout > 0) {
              type = ANIMATION;
              timeout = animationTimeout;
              propCount = animationDurations.length;
            }
          } else {
            timeout = Math.max(transitionTimeout, animationTimeout);
            type =
              timeout > 0
                ? transitionTimeout > animationTimeout
                  ? TRANSITION
                  : ANIMATION
                : null;
            propCount = type
              ? type === TRANSITION
                ? transitionDurations.length
                : animationDurations.length
              : 0;
          }
          const hasTransform =
            type === TRANSITION &&
            /\b(transform|all)(,|$)/.test(
              getStyleProperties(`${TRANSITION}Property`).toString()
            );
          return {
            type,
            timeout,
            propCount,
            hasTransform,
          };
        }
        function getTimeout(delays, durations) {
          while (delays.length < durations.length) {
            delays = delays.concat(delays);
          }
          return Math.max(
            ...durations.map((d, i) => toMs(d) + toMs(delays[i]))
          );
        }
        function toMs(s) {
          if (s === "auto") return 0;
          return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
        }
        function forceReflow() {
          return document.body.offsetHeight;
        }

        function patchClass(el, value, isSVG) {
          const transitionClasses = el[vtcKey];
          if (transitionClasses) {
            value = (
              value ? [value, ...transitionClasses] : [...transitionClasses]
            ).join(" ");
          }
          if (value == null) {
            el.removeAttribute("class");
          } else if (isSVG) {
            el.setAttribute("class", value);
          } else {
            el.className = value;
          }
        }

        const vShowOriginalDisplay = Symbol("_vod");
        const vShowHidden = Symbol("_vsh");
        const vShow = {
          beforeMount(el, { value }, { transition }) {
            el[vShowOriginalDisplay] =
              el.style.display === "none" ? "" : el.style.display;
            if (transition && value) {
              transition.beforeEnter(el);
            } else {
              setDisplay(el, value);
            }
          },
          mounted(el, { value }, { transition }) {
            if (transition && value) {
              transition.enter(el);
            }
          },
          updated(el, { value, oldValue }, { transition }) {
            if (!value === !oldValue) return;
            if (transition) {
              if (value) {
                transition.beforeEnter(el);
                setDisplay(el, true);
                transition.enter(el);
              } else {
                transition.leave(el, () => {
                  setDisplay(el, false);
                });
              }
            } else {
              setDisplay(el, value);
            }
          },
          beforeUnmount(el, { value }) {
            setDisplay(el, value);
          },
        };
        if (true) {
          vShow.name = "show";
        }
        function setDisplay(el, value) {
          el.style.display = value ? el[vShowOriginalDisplay] : "none";
          el[vShowHidden] = !value;
        }
        function initVShowForSSR() {
          vShow.getSSRProps = ({ value }) => {
            if (!value) {
              return { style: { display: "none" } };
            }
          };
        }

        const CSS_VAR_TEXT = Symbol(true ? "CSS_VAR_TEXT" : undefined);
        function useCssVars(getter) {
          const instance = Object(
            _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["getCurrentInstance"]
          )();
          if (!instance) {
            true &&
              Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                `useCssVars is called without current active component instance.`
              );
            return;
          }
          const updateTeleports = (instance.ut = (
            vars = getter(instance.proxy)
          ) => {
            Array.from(
              document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)
            ).forEach((node) => setVarsOnNode(node, vars));
          });
          if (true) {
            instance.getCssVars = () => getter(instance.proxy);
          }
          const setVars = () => {
            const vars = getter(instance.proxy);
            setVarsOnVNode(instance.subTree, vars);
            updateTeleports(vars);
          };
          Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["onMounted"])(
            () => {
              Object(
                _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                  "watchPostEffect"
                ]
              )(setVars);
              const ob = new MutationObserver(setVars);
              ob.observe(instance.subTree.el.parentNode, { childList: true });
              Object(
                _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["onUnmounted"]
              )(() => ob.disconnect());
            }
          );
        }
        function setVarsOnVNode(vnode, vars) {
          if (vnode.shapeFlag & 128) {
            const suspense = vnode.suspense;
            vnode = suspense.activeBranch;
            if (suspense.pendingBranch && !suspense.isHydrating) {
              suspense.effects.push(() => {
                setVarsOnVNode(suspense.activeBranch, vars);
              });
            }
          }
          while (vnode.component) {
            vnode = vnode.component.subTree;
          }
          if (vnode.shapeFlag & 1 && vnode.el) {
            setVarsOnNode(vnode.el, vars);
          } else if (
            vnode.type ===
            _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["Fragment"]
          ) {
            vnode.children.forEach((c) => setVarsOnVNode(c, vars));
          } else if (
            vnode.type ===
            _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["Static"]
          ) {
            let { el, anchor } = vnode;
            while (el) {
              setVarsOnNode(el, vars);
              if (el === anchor) break;
              el = el.nextSibling;
            }
          }
        }
        function setVarsOnNode(el, vars) {
          if (el.nodeType === 1) {
            const style = el.style;
            let cssText = "";
            for (const key in vars) {
              style.setProperty(`--${key}`, vars[key]);
              cssText += `--${key}: ${vars[key]};`;
            }
            style[CSS_VAR_TEXT] = cssText;
          }
        }

        const displayRE = /(^|;)\s*display\s*:/;
        function patchStyle(el, prev, next) {
          const style = el.style;
          const isCssString = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"]
          )(next);
          let hasControlledDisplay = false;
          if (next && !isCssString) {
            if (prev) {
              if (
                !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(
                  prev
                )
              ) {
                for (const key in prev) {
                  if (next[key] == null) {
                    setStyle(style, key, "");
                  }
                }
              } else {
                for (const prevStyle of prev.split(";")) {
                  const key = prevStyle.slice(0, prevStyle.indexOf(":")).trim();
                  if (next[key] == null) {
                    setStyle(style, key, "");
                  }
                }
              }
            }
            for (const key in next) {
              if (key === "display") {
                hasControlledDisplay = true;
              }
              setStyle(style, key, next[key]);
            }
          } else {
            if (isCssString) {
              if (prev !== next) {
                const cssVarText = style[CSS_VAR_TEXT];
                if (cssVarText) {
                  next += ";" + cssVarText;
                }
                style.cssText = next;
                hasControlledDisplay = displayRE.test(next);
              }
            } else if (prev) {
              el.removeAttribute("style");
            }
          }
          if (vShowOriginalDisplay in el) {
            el[vShowOriginalDisplay] = hasControlledDisplay
              ? style.display
              : "";
            if (el[vShowHidden]) {
              style.display = "none";
            }
          }
        }
        const semicolonRE = /[^\\];\s*$/;
        const importantRE = /\s*!important$/;
        function setStyle(style, name, val) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(val)
          ) {
            val.forEach((v) => setStyle(style, name, v));
          } else {
            if (val == null) val = "";
            if (true) {
              if (semicolonRE.test(val)) {
                Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                  `Unexpected semicolon at the end of '${name}' style value: '${val}'`
                );
              }
            }
            if (name.startsWith("--")) {
              style.setProperty(name, val);
            } else {
              const prefixed = autoPrefix(style, name);
              if (importantRE.test(val)) {
                style.setProperty(
                  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"])(
                    prefixed
                  ),
                  val.replace(importantRE, ""),
                  "important"
                );
              } else {
                style[prefixed] = val;
              }
            }
          }
        }
        const prefixes = ["Webkit", "Moz", "ms"];
        const prefixCache = {};
        function autoPrefix(style, rawName) {
          const cached = prefixCache[rawName];
          if (cached) {
            return cached;
          }
          let name = Object(
            _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["camelize"]
          )(rawName);
          if (name !== "filter" && name in style) {
            return (prefixCache[rawName] = name);
          }
          name = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["capitalize"])(
            name
          );
          for (let i = 0; i < prefixes.length; i++) {
            const prefixed = prefixes[i] + name;
            if (prefixed in style) {
              return (prefixCache[rawName] = prefixed);
            }
          }
          return rawName;
        }

        const xlinkNS = "http://www.w3.org/1999/xlink";
        function patchAttr(el, key, value, isSVG, instance) {
          if (isSVG && key.startsWith("xlink:")) {
            if (value == null) {
              el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
            } else {
              el.setAttributeNS(xlinkNS, key, value);
            }
          } else {
            const isBoolean = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isSpecialBooleanAttr"]
            )(key);
            if (
              value == null ||
              (isBoolean &&
                !Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["includeBooleanAttr"]
                )(value))
            ) {
              el.removeAttribute(key);
            } else {
              el.setAttribute(key, isBoolean ? "" : value);
            }
          }
        }

        function patchDOMProp(
          el,
          key,
          value,
          prevChildren,
          parentComponent,
          parentSuspense,
          unmountChildren
        ) {
          if (key === "innerHTML" || key === "textContent") {
            if (prevChildren) {
              unmountChildren(prevChildren, parentComponent, parentSuspense);
            }
            el[key] = value == null ? "" : value;
            return;
          }
          const tag = el.tagName;
          if (
            key === "value" &&
            tag !== "PROGRESS" && // custom elements may use _value internally
            !tag.includes("-")
          ) {
            const oldValue =
              tag === "OPTION" ? el.getAttribute("value") || "" : el.value;
            const newValue = value == null ? "" : value;
            if (oldValue !== newValue || !("_value" in el)) {
              el.value = newValue;
            }
            if (value == null) {
              el.removeAttribute(key);
            }
            el._value = value;
            return;
          }
          let needRemove = false;
          if (value === "" || value == null) {
            const type = typeof el[key];
            if (type === "boolean") {
              value = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["includeBooleanAttr"]
              )(value);
            } else if (value == null && type === "string") {
              value = "";
              needRemove = true;
            } else if (type === "number") {
              value = 0;
              needRemove = true;
            }
          }
          try {
            el[key] = value;
          } catch (e) {
            if (true && !needRemove) {
              Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                `Failed setting prop "${key}" on <${tag.toLowerCase()}>: value ${value} is invalid.`,
                e
              );
            }
          }
          needRemove && el.removeAttribute(key);
        }

        function addEventListener(el, event, handler, options) {
          el.addEventListener(event, handler, options);
        }
        function removeEventListener(el, event, handler, options) {
          el.removeEventListener(event, handler, options);
        }
        const veiKey = Symbol("_vei");
        function patchEvent(
          el,
          rawName,
          prevValue,
          nextValue,
          instance = null
        ) {
          const invokers = el[veiKey] || (el[veiKey] = {});
          const existingInvoker = invokers[rawName];
          if (nextValue && existingInvoker) {
            existingInvoker.value = true
              ? sanitizeEventValue(nextValue, rawName)
              : undefined;
          } else {
            const [name, options] = parseName(rawName);
            if (nextValue) {
              const invoker = (invokers[rawName] = createInvoker(
                true ? sanitizeEventValue(nextValue, rawName) : undefined,
                instance
              ));
              addEventListener(el, name, invoker, options);
            } else if (existingInvoker) {
              removeEventListener(el, name, existingInvoker, options);
              invokers[rawName] = void 0;
            }
          }
        }
        const optionsModifierRE = /(?:Once|Passive|Capture)$/;
        function parseName(name) {
          let options;
          if (optionsModifierRE.test(name)) {
            options = {};
            let m;
            while ((m = name.match(optionsModifierRE))) {
              name = name.slice(0, name.length - m[0].length);
              options[m[0].toLowerCase()] = true;
            }
          }
          const event =
            name[2] === ":"
              ? name.slice(3)
              : Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"])(
                  name.slice(2)
                );
          return [event, options];
        }
        let cachedNow = 0;
        const p = /* @__PURE__ */ Promise.resolve();
        const getNow = () =>
          cachedNow ||
          (p.then(() => (cachedNow = 0)), (cachedNow = Date.now()));
        function createInvoker(initialValue, instance) {
          const invoker = (e) => {
            if (!e._vts) {
              e._vts = Date.now();
            } else if (e._vts <= invoker.attached) {
              return;
            }
            Object(
              _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                "callWithAsyncErrorHandling"
              ]
            )(patchStopImmediatePropagation(e, invoker.value), instance, 5, [
              e,
            ]);
          };
          invoker.value = initialValue;
          invoker.attached = getNow();
          return invoker;
        }
        function sanitizeEventValue(value, propName) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
              value
            ) ||
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)
          ) {
            return value;
          }
          Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
            `Wrong type passed as event handler to ${propName} - did you forget @ or : in front of your prop?
Expected function or array of functions, received type ${typeof value}.`
          );
          return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
        }
        function patchStopImmediatePropagation(e, value) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)
          ) {
            const originalStop = e.stopImmediatePropagation;
            e.stopImmediatePropagation = () => {
              originalStop.call(e);
              e._stopped = true;
            };
            return value.map((fn) => (e2) => !e2._stopped && fn && fn(e2));
          } else {
            return value;
          }
        }

        const isNativeOn = (key) =>
          key.charCodeAt(0) === 111 &&
          key.charCodeAt(1) === 110 && // lowercase letter
          key.charCodeAt(2) > 96 &&
          key.charCodeAt(2) < 123;
        const patchProp = (
          el,
          key,
          prevValue,
          nextValue,
          namespace,
          prevChildren,
          parentComponent,
          parentSuspense,
          unmountChildren
        ) => {
          const isSVG = namespace === "svg";
          if (key === "class") {
            patchClass(el, nextValue, isSVG);
          } else if (key === "style") {
            patchStyle(el, prevValue, nextValue);
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isOn"])(key)
          ) {
            if (
              !Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isModelListener"]
              )(key)
            ) {
              patchEvent(el, key, prevValue, nextValue, parentComponent);
            }
          } else if (
            key[0] === "."
              ? ((key = key.slice(1)), true)
              : key[0] === "^"
              ? ((key = key.slice(1)), false)
              : shouldSetAsProp(el, key, nextValue, isSVG)
          ) {
            patchDOMProp(
              el,
              key,
              nextValue,
              prevChildren,
              parentComponent,
              parentSuspense,
              unmountChildren
            );
          } else {
            if (key === "true-value") {
              el._trueValue = nextValue;
            } else if (key === "false-value") {
              el._falseValue = nextValue;
            }
            patchAttr(el, key, nextValue, isSVG);
          }
        };
        function shouldSetAsProp(el, key, value, isSVG) {
          if (isSVG) {
            if (key === "innerHTML" || key === "textContent") {
              return true;
            }
            if (
              key in el &&
              isNativeOn(key) &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                value
              )
            ) {
              return true;
            }
            return false;
          }
          if (
            key === "spellcheck" ||
            key === "draggable" ||
            key === "translate"
          ) {
            return false;
          }
          if (key === "form") {
            return false;
          }
          if (key === "list" && el.tagName === "INPUT") {
            return false;
          }
          if (key === "type" && el.tagName === "TEXTAREA") {
            return false;
          }
          if (key === "width" || key === "height") {
            const tag = el.tagName;
            if (
              tag === "IMG" ||
              tag === "VIDEO" ||
              tag === "CANVAS" ||
              tag === "SOURCE"
            ) {
              return false;
            }
          }
          if (
            isNativeOn(key) &&
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(value)
          ) {
            return false;
          }
          return key in el;
        }

        /*! #__NO_SIDE_EFFECTS__ */
        // @__NO_SIDE_EFFECTS__
        function defineCustomElement(options, hydrate2) {
          const Comp = Object(
            _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["defineComponent"]
          )(options);
          class VueCustomElement extends VueElement {
            constructor(initialProps) {
              super(Comp, initialProps, hydrate2);
            }
          }
          VueCustomElement.def = Comp;
          return VueCustomElement;
        }
        /*! #__NO_SIDE_EFFECTS__ */
        const defineSSRCustomElement = /* @__NO_SIDE_EFFECTS__ */ (options) => {
          return /* @__PURE__ */ defineCustomElement(options, hydrate);
        };
        const BaseClass =
          typeof HTMLElement !== "undefined" ? HTMLElement : class {};
        class VueElement extends BaseClass {
          constructor(_def, _props = {}, hydrate2) {
            super();
            this._def = _def;
            this._props = _props;
            /**
             * @internal
             */
            this._instance = null;
            this._connected = false;
            this._resolved = false;
            this._numberProps = null;
            this._ob = null;
            if (this.shadowRoot && hydrate2) {
              hydrate2(this._createVNode(), this.shadowRoot);
            } else {
              if (true && this.shadowRoot) {
                Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                  `Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use \`defineSSRCustomElement\`.`
                );
              }
              this.attachShadow({ mode: "open" });
              if (!this._def.__asyncLoader) {
                this._resolveProps(this._def);
              }
            }
          }
          connectedCallback() {
            this._connected = true;
            if (!this._instance) {
              if (this._resolved) {
                this._update();
              } else {
                this._resolveDef();
              }
            }
          }
          disconnectedCallback() {
            this._connected = false;
            if (this._ob) {
              this._ob.disconnect();
              this._ob = null;
            }
            Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["nextTick"])(
              () => {
                if (!this._connected) {
                  render(null, this.shadowRoot);
                  this._instance = null;
                }
              }
            );
          }
          /**
           * resolve inner component definition (handle possible async component)
           */
          _resolveDef() {
            this._resolved = true;
            for (let i = 0; i < this.attributes.length; i++) {
              this._setAttr(this.attributes[i].name);
            }
            this._ob = new MutationObserver((mutations) => {
              for (const m of mutations) {
                this._setAttr(m.attributeName);
              }
            });
            this._ob.observe(this, { attributes: true });
            const resolve = (def, isAsync = false) => {
              const { props, styles } = def;
              let numberProps;
              if (
                props &&
                !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                  props
                )
              ) {
                for (const key in props) {
                  const opt = props[key];
                  if (opt === Number || (opt && opt.type === Number)) {
                    if (key in this._props) {
                      this._props[key] = Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toNumber"]
                      )(this._props[key]);
                    }
                    (numberProps ||
                      (numberProps = /* @__PURE__ */ Object.create(null)))[
                      Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"]
                      )(key)
                    ] = true;
                  }
                }
              }
              this._numberProps = numberProps;
              if (isAsync) {
                this._resolveProps(def);
              }
              this._applyStyles(styles);
              this._update();
            };
            const asyncDef = this._def.__asyncLoader;
            if (asyncDef) {
              asyncDef().then((def) => resolve(def, true));
            } else {
              resolve(this._def);
            }
          }
          _resolveProps(def) {
            const { props } = def;
            const declaredPropKeys = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"]
            )(props)
              ? props
              : Object.keys(props || {});
            for (const key of Object.keys(this)) {
              if (key[0] !== "_" && declaredPropKeys.includes(key)) {
                this._setProp(key, this[key], true, false);
              }
            }
            for (const key of declaredPropKeys.map(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"]
            )) {
              Object.defineProperty(this, key, {
                get() {
                  return this._getProp(key);
                },
                set(val) {
                  this._setProp(key, val);
                },
              });
            }
          }
          _setAttr(key) {
            let value = this.hasAttribute(key)
              ? this.getAttribute(key)
              : void 0;
            const camelKey = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["camelize"]
            )(key);
            if (this._numberProps && this._numberProps[camelKey]) {
              value = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["toNumber"]
              )(value);
            }
            this._setProp(camelKey, value, false);
          }
          /**
           * @internal
           */
          _getProp(key) {
            return this._props[key];
          }
          /**
           * @internal
           */
          _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
            if (val !== this._props[key]) {
              this._props[key] = val;
              if (shouldUpdate && this._instance) {
                this._update();
              }
              if (shouldReflect) {
                if (val === true) {
                  this.setAttribute(
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"]
                    )(key),
                    ""
                  );
                } else if (typeof val === "string" || typeof val === "number") {
                  this.setAttribute(
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"]
                    )(key),
                    val + ""
                  );
                } else if (!val) {
                  this.removeAttribute(
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"]
                    )(key)
                  );
                }
              }
            }
          }
          _update() {
            render(this._createVNode(), this.shadowRoot);
          }
          _createVNode() {
            const vnode = Object(
              _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["createVNode"]
            )(
              this._def,
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"])(
                {},
                this._props
              )
            );
            if (!this._instance) {
              vnode.ce = (instance) => {
                this._instance = instance;
                instance.isCE = true;
                if (true) {
                  instance.ceReload = (newStyles) => {
                    if (this._styles) {
                      this._styles.forEach((s) =>
                        this.shadowRoot.removeChild(s)
                      );
                      this._styles.length = 0;
                    }
                    this._applyStyles(newStyles);
                    this._instance = null;
                    this._update();
                  };
                }
                const dispatch = (event, args) => {
                  this.dispatchEvent(
                    new CustomEvent(event, {
                      detail: args,
                    })
                  );
                };
                instance.emit = (event, ...args) => {
                  dispatch(event, args);
                  if (
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"]
                    )(event) !== event
                  ) {
                    dispatch(
                      Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"]
                      )(event),
                      args
                    );
                  }
                };
                let parent = this;
                while (
                  (parent = parent && (parent.parentNode || parent.host))
                ) {
                  if (parent instanceof VueElement) {
                    instance.parent = parent._instance;
                    instance.provides = parent._instance.provides;
                    break;
                  }
                }
              };
            }
            return vnode;
          }
          _applyStyles(styles) {
            if (styles) {
              styles.forEach((css) => {
                const s = document.createElement("style");
                s.textContent = css;
                this.shadowRoot.appendChild(s);
                if (true) {
                  (this._styles || (this._styles = [])).push(s);
                }
              });
            }
          }
        }

        function useCssModule(name = "$style") {
          {
            const instance = Object(
              _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                "getCurrentInstance"
              ]
            )();
            if (!instance) {
              true &&
                Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                  `useCssModule must be called inside setup()`
                );
              return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"];
            }
            const modules = instance.type.__cssModules;
            if (!modules) {
              true &&
                Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                  `Current instance does not have CSS modules injected.`
                );
              return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"];
            }
            const mod = modules[name];
            if (!mod) {
              true &&
                Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                  `Current instance does not have CSS module named "${name}".`
                );
              return _vue_shared__WEBPACK_IMPORTED_MODULE_1__["EMPTY_OBJ"];
            }
            return mod;
          }
        }

        const positionMap = /* @__PURE__ */ new WeakMap();
        const newPositionMap = /* @__PURE__ */ new WeakMap();
        const moveCbKey = Symbol("_moveCb");
        const enterCbKey = Symbol("_enterCb");
        const TransitionGroupImpl = {
          name: "TransitionGroup",
          props: /* @__PURE__ */ Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
          )({}, TransitionPropsValidators, {
            tag: String,
            moveClass: String,
          }),
          setup(props, { slots }) {
            const instance = Object(
              _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                "getCurrentInstance"
              ]
            )();
            const state = Object(
              _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                "useTransitionState"
              ]
            )();
            let prevChildren;
            let children;
            Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["onUpdated"])(
              () => {
                if (!prevChildren.length) {
                  return;
                }
                const moveClass =
                  props.moveClass || `${props.name || "v"}-move`;
                if (
                  !hasCSSTransform(
                    prevChildren[0].el,
                    instance.vnode.el,
                    moveClass
                  )
                ) {
                  return;
                }
                prevChildren.forEach(callPendingCbs);
                prevChildren.forEach(recordPosition);
                const movedChildren = prevChildren.filter(applyTranslation);
                forceReflow();
                movedChildren.forEach((c) => {
                  const el = c.el;
                  const style = el.style;
                  addTransitionClass(el, moveClass);
                  style.transform =
                    style.webkitTransform =
                    style.transitionDuration =
                      "";
                  const cb = (el[moveCbKey] = (e) => {
                    if (e && e.target !== el) {
                      return;
                    }
                    if (!e || /transform$/.test(e.propertyName)) {
                      el.removeEventListener("transitionend", cb);
                      el[moveCbKey] = null;
                      removeTransitionClass(el, moveClass);
                    }
                  });
                  el.addEventListener("transitionend", cb);
                });
              }
            );
            return () => {
              const rawProps = Object(
                _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["toRaw"]
              )(props);
              const cssTransitionProps = resolveTransitionProps(rawProps);
              let tag =
                rawProps.tag ||
                _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["Fragment"];
              prevChildren = [];
              if (children) {
                for (let i = 0; i < children.length; i++) {
                  const child = children[i];
                  if (child.el && child.el instanceof Element) {
                    prevChildren.push(child);
                    Object(
                      _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                        "setTransitionHooks"
                      ]
                    )(
                      child,
                      Object(
                        _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                          "resolveTransitionHooks"
                        ]
                      )(child, cssTransitionProps, state, instance)
                    );
                    positionMap.set(child, child.el.getBoundingClientRect());
                  }
                }
              }
              children = slots.default
                ? Object(
                    _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                      "getTransitionRawChildren"
                    ]
                  )(slots.default())
                : [];
              for (let i = 0; i < children.length; i++) {
                const child = children[i];
                if (child.key != null) {
                  Object(
                    _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                      "setTransitionHooks"
                    ]
                  )(
                    child,
                    Object(
                      _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                        "resolveTransitionHooks"
                      ]
                    )(child, cssTransitionProps, state, instance)
                  );
                } else if (true) {
                  Object(
                    _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"]
                  )(`<TransitionGroup> children must be keyed.`);
                }
              }
              return Object(
                _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["createVNode"]
              )(tag, null, children);
            };
          },
        };
        const removeMode = (props) => delete props.mode;
        /* @__PURE__ */ removeMode(TransitionGroupImpl.props);
        const TransitionGroup = TransitionGroupImpl;
        function callPendingCbs(c) {
          const el = c.el;
          if (el[moveCbKey]) {
            el[moveCbKey]();
          }
          if (el[enterCbKey]) {
            el[enterCbKey]();
          }
        }
        function recordPosition(c) {
          newPositionMap.set(c, c.el.getBoundingClientRect());
        }
        function applyTranslation(c) {
          const oldPos = positionMap.get(c);
          const newPos = newPositionMap.get(c);
          const dx = oldPos.left - newPos.left;
          const dy = oldPos.top - newPos.top;
          if (dx || dy) {
            const s = c.el.style;
            s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
            s.transitionDuration = "0s";
            return c;
          }
        }
        function hasCSSTransform(el, root, moveClass) {
          const clone = el.cloneNode();
          const _vtc = el[vtcKey];
          if (_vtc) {
            _vtc.forEach((cls) => {
              cls.split(/\s+/).forEach((c) => c && clone.classList.remove(c));
            });
          }
          moveClass.split(/\s+/).forEach((c) => c && clone.classList.add(c));
          clone.style.display = "none";
          const container = root.nodeType === 1 ? root : root.parentNode;
          container.appendChild(clone);
          const { hasTransform } = getTransitionInfo(clone);
          container.removeChild(clone);
          return hasTransform;
        }

        const getModelAssigner = (vnode) => {
          const fn = vnode.props["onUpdate:modelValue"] || false;
          return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(fn)
            ? (value) =>
                Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["invokeArrayFns"]
                )(fn, value)
            : fn;
        };
        function onCompositionStart(e) {
          e.target.composing = true;
        }
        function onCompositionEnd(e) {
          const target = e.target;
          if (target.composing) {
            target.composing = false;
            target.dispatchEvent(new Event("input"));
          }
        }
        const assignKey = Symbol("_assign");
        const vModelText = {
          created(el, { modifiers: { lazy, trim, number } }, vnode) {
            el[assignKey] = getModelAssigner(vnode);
            const castToNumber =
              number || (vnode.props && vnode.props.type === "number");
            addEventListener(el, lazy ? "change" : "input", (e) => {
              if (e.target.composing) return;
              let domValue = el.value;
              if (trim) {
                domValue = domValue.trim();
              }
              if (castToNumber) {
                domValue = Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseToNumber"]
                )(domValue);
              }
              el[assignKey](domValue);
            });
            if (trim) {
              addEventListener(el, "change", () => {
                el.value = el.value.trim();
              });
            }
            if (!lazy) {
              addEventListener(el, "compositionstart", onCompositionStart);
              addEventListener(el, "compositionend", onCompositionEnd);
              addEventListener(el, "change", onCompositionEnd);
            }
          },
          // set value on mounted so it's after min/max for type="range"
          mounted(el, { value }) {
            el.value = value == null ? "" : value;
          },
          beforeUpdate(
            el,
            { value, modifiers: { lazy, trim, number } },
            vnode
          ) {
            el[assignKey] = getModelAssigner(vnode);
            if (el.composing) return;
            const elValue =
              (number || el.type === "number") && !/^0\d/.test(el.value)
                ? Object(
                    _vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseToNumber"]
                  )(el.value)
                : el.value;
            const newValue = value == null ? "" : value;
            if (elValue === newValue) {
              return;
            }
            if (document.activeElement === el && el.type !== "range") {
              if (lazy) {
                return;
              }
              if (trim && el.value.trim() === newValue) {
                return;
              }
            }
            el.value = newValue;
          },
        };
        const vModelCheckbox = {
          // #4096 array checkboxes need to be deep traversed
          deep: true,
          created(el, _, vnode) {
            el[assignKey] = getModelAssigner(vnode);
            addEventListener(el, "change", () => {
              const modelValue = el._modelValue;
              const elementValue = getValue(el);
              const checked = el.checked;
              const assign = el[assignKey];
              if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(
                  modelValue
                )
              ) {
                const index = Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseIndexOf"]
                )(modelValue, elementValue);
                const found = index !== -1;
                if (checked && !found) {
                  assign(modelValue.concat(elementValue));
                } else if (!checked && found) {
                  const filtered = [...modelValue];
                  filtered.splice(index, 1);
                  assign(filtered);
                }
              } else if (
                Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isSet"])(
                  modelValue
                )
              ) {
                const cloned = new Set(modelValue);
                if (checked) {
                  cloned.add(elementValue);
                } else {
                  cloned.delete(elementValue);
                }
                assign(cloned);
              } else {
                assign(getCheckboxValue(el, checked));
              }
            });
          },
          // set initial checked on mount to wait for true-value/false-value
          mounted: setChecked,
          beforeUpdate(el, binding, vnode) {
            el[assignKey] = getModelAssigner(vnode);
            setChecked(el, binding, vnode);
          },
        };
        function setChecked(el, { value, oldValue }, vnode) {
          el._modelValue = value;
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)
          ) {
            el.checked =
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseIndexOf"])(
                value,
                vnode.props.value
              ) > -1;
          } else if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isSet"])(value)
          ) {
            el.checked = value.has(vnode.props.value);
          } else if (value !== oldValue) {
            el.checked = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseEqual"]
            )(value, getCheckboxValue(el, true));
          }
        }
        const vModelRadio = {
          created(el, { value }, vnode) {
            el.checked = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseEqual"]
            )(value, vnode.props.value);
            el[assignKey] = getModelAssigner(vnode);
            addEventListener(el, "change", () => {
              el[assignKey](getValue(el));
            });
          },
          beforeUpdate(el, { value, oldValue }, vnode) {
            el[assignKey] = getModelAssigner(vnode);
            if (value !== oldValue) {
              el.checked = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseEqual"]
              )(value, vnode.props.value);
            }
          },
        };
        const vModelSelect = {
          // <select multiple> value need to be deep traversed
          deep: true,
          created(el, { value, modifiers: { number } }, vnode) {
            const isSetModel = Object(
              _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isSet"]
            )(value);
            addEventListener(el, "change", () => {
              const selectedVal = Array.prototype.filter
                .call(el.options, (o) => o.selected)
                .map((o) =>
                  number
                    ? Object(
                        _vue_shared__WEBPACK_IMPORTED_MODULE_1__[
                          "looseToNumber"
                        ]
                      )(getValue(o))
                    : getValue(o)
                );
              el[assignKey](
                el.multiple
                  ? isSetModel
                    ? new Set(selectedVal)
                    : selectedVal
                  : selectedVal[0]
              );
              el._assigning = true;
              Object(
                _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["nextTick"]
              )(() => {
                el._assigning = false;
              });
            });
            el[assignKey] = getModelAssigner(vnode);
          },
          // set value in mounted & updated because <select> relies on its children
          // <option>s.
          mounted(el, { value, modifiers: { number } }) {
            setSelected(el, value);
          },
          beforeUpdate(el, _binding, vnode) {
            el[assignKey] = getModelAssigner(vnode);
          },
          updated(el, { value, modifiers: { number } }) {
            if (!el._assigning) {
              setSelected(el, value);
            }
          },
        };
        function setSelected(el, value, number) {
          const isMultiple = el.multiple;
          const isArrayValue = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"]
          )(value);
          if (
            isMultiple &&
            !isArrayValue &&
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isSet"])(value)
          ) {
            true &&
              Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                `<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString
                  .call(value)
                  .slice(8, -1)}.`
              );
            return;
          }
          for (let i = 0, l = el.options.length; i < l; i++) {
            const option = el.options[i];
            const optionValue = getValue(option);
            if (isMultiple) {
              if (isArrayValue) {
                const optionType = typeof optionValue;
                if (optionType === "string" || optionType === "number") {
                  option.selected = value.some(
                    (v) => String(v) === String(optionValue)
                  );
                } else {
                  option.selected =
                    Object(
                      _vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseIndexOf"]
                    )(value, optionValue) > -1;
                }
              } else {
                option.selected = value.has(optionValue);
              }
            } else if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseEqual"])(
                getValue(option),
                value
              )
            ) {
              if (el.selectedIndex !== i) el.selectedIndex = i;
              return;
            }
          }
          if (!isMultiple && el.selectedIndex !== -1) {
            el.selectedIndex = -1;
          }
        }
        function getValue(el) {
          return "_value" in el ? el._value : el.value;
        }
        function getCheckboxValue(el, checked) {
          const key = checked ? "_trueValue" : "_falseValue";
          return key in el ? el[key] : checked;
        }
        const vModelDynamic = {
          created(el, binding, vnode) {
            callModelHook(el, binding, vnode, null, "created");
          },
          mounted(el, binding, vnode) {
            callModelHook(el, binding, vnode, null, "mounted");
          },
          beforeUpdate(el, binding, vnode, prevVNode) {
            callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
          },
          updated(el, binding, vnode, prevVNode) {
            callModelHook(el, binding, vnode, prevVNode, "updated");
          },
        };
        function resolveDynamicModel(tagName, type) {
          switch (tagName) {
            case "SELECT":
              return vModelSelect;
            case "TEXTAREA":
              return vModelText;
            default:
              switch (type) {
                case "checkbox":
                  return vModelCheckbox;
                case "radio":
                  return vModelRadio;
                default:
                  return vModelText;
              }
          }
        }
        function callModelHook(el, binding, vnode, prevVNode, hook) {
          const modelToUse = resolveDynamicModel(
            el.tagName,
            vnode.props && vnode.props.type
          );
          const fn = modelToUse[hook];
          fn && fn(el, binding, vnode, prevVNode);
        }
        function initVModelForSSR() {
          vModelText.getSSRProps = ({ value }) => ({ value });
          vModelRadio.getSSRProps = ({ value }, vnode) => {
            if (
              vnode.props &&
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseEqual"])(
                vnode.props.value,
                value
              )
            ) {
              return { checked: true };
            }
          };
          vModelCheckbox.getSSRProps = ({ value }, vnode) => {
            if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)
            ) {
              if (
                vnode.props &&
                Object(
                  _vue_shared__WEBPACK_IMPORTED_MODULE_1__["looseIndexOf"]
                )(value, vnode.props.value) > -1
              ) {
                return { checked: true };
              }
            } else if (
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isSet"])(value)
            ) {
              if (vnode.props && value.has(vnode.props.value)) {
                return { checked: true };
              }
            } else if (value) {
              return { checked: true };
            }
          };
          vModelDynamic.getSSRProps = (binding, vnode) => {
            if (typeof vnode.type !== "string") {
              return;
            }
            const modelToUse = resolveDynamicModel(
              // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase
              vnode.type.toUpperCase(),
              vnode.props && vnode.props.type
            );
            if (modelToUse.getSSRProps) {
              return modelToUse.getSSRProps(binding, vnode);
            }
          };
        }

        const systemModifiers = ["ctrl", "shift", "alt", "meta"];
        const modifierGuards = {
          stop: (e) => e.stopPropagation(),
          prevent: (e) => e.preventDefault(),
          self: (e) => e.target !== e.currentTarget,
          ctrl: (e) => !e.ctrlKey,
          shift: (e) => !e.shiftKey,
          alt: (e) => !e.altKey,
          meta: (e) => !e.metaKey,
          left: (e) => "button" in e && e.button !== 0,
          middle: (e) => "button" in e && e.button !== 1,
          right: (e) => "button" in e && e.button !== 2,
          exact: (e, modifiers) =>
            systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m)),
        };
        const withModifiers = (fn, modifiers) => {
          const cache = fn._withMods || (fn._withMods = {});
          const cacheKey = modifiers.join(".");
          return (
            cache[cacheKey] ||
            (cache[cacheKey] = (event, ...args) => {
              for (let i = 0; i < modifiers.length; i++) {
                const guard = modifierGuards[modifiers[i]];
                if (guard && guard(event, modifiers)) return;
              }
              return fn(event, ...args);
            })
          );
        };
        const keyNames = {
          esc: "escape",
          space: " ",
          up: "arrow-up",
          left: "arrow-left",
          right: "arrow-right",
          down: "arrow-down",
          delete: "backspace",
        };
        const withKeys = (fn, modifiers) => {
          const cache = fn._withKeys || (fn._withKeys = {});
          const cacheKey = modifiers.join(".");
          return (
            cache[cacheKey] ||
            (cache[cacheKey] = (event) => {
              if (!("key" in event)) {
                return;
              }
              const eventKey = Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_1__["hyphenate"]
              )(event.key);
              if (
                modifiers.some(
                  (k) => k === eventKey || keyNames[k] === eventKey
                )
              ) {
                return fn(event);
              }
            })
          );
        };

        const rendererOptions = /* @__PURE__ */ Object(
          _vue_shared__WEBPACK_IMPORTED_MODULE_1__["extend"]
        )({ patchProp }, nodeOps);
        let renderer;
        let enabledHydration = false;
        function ensureRenderer() {
          return (
            renderer ||
            (renderer = Object(
              _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["createRenderer"]
            )(rendererOptions))
          );
        }
        function ensureHydrationRenderer() {
          renderer = enabledHydration
            ? renderer
            : Object(
                _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[
                  "createHydrationRenderer"
                ]
              )(rendererOptions);
          enabledHydration = true;
          return renderer;
        }
        const render = (...args) => {
          ensureRenderer().render(...args);
        };
        const hydrate = (...args) => {
          ensureHydrationRenderer().hydrate(...args);
        };
        const createApp = (...args) => {
          const app = ensureRenderer().createApp(...args);
          if (true) {
            injectNativeTagCheck(app);
            injectCompilerOptionsCheck(app);
          }
          const { mount } = app;
          app.mount = (containerOrSelector) => {
            const container = normalizeContainer(containerOrSelector);
            if (!container) return;
            const component = app._component;
            if (
              !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(
                component
              ) &&
              !component.render &&
              !component.template
            ) {
              component.template = container.innerHTML;
            }
            container.innerHTML = "";
            const proxy = mount(
              container,
              false,
              resolveRootNamespace(container)
            );
            if (container instanceof Element) {
              container.removeAttribute("v-cloak");
              container.setAttribute("data-v-app", "");
            }
            return proxy;
          };
          return app;
        };
        const createSSRApp = (...args) => {
          const app = ensureHydrationRenderer().createApp(...args);
          if (true) {
            injectNativeTagCheck(app);
            injectCompilerOptionsCheck(app);
          }
          const { mount } = app;
          app.mount = (containerOrSelector) => {
            const container = normalizeContainer(containerOrSelector);
            if (container) {
              return mount(container, true, resolveRootNamespace(container));
            }
          };
          return app;
        };
        function resolveRootNamespace(container) {
          if (container instanceof SVGElement) {
            return "svg";
          }
          if (
            typeof MathMLElement === "function" &&
            container instanceof MathMLElement
          ) {
            return "mathml";
          }
        }
        function injectNativeTagCheck(app) {
          Object.defineProperty(app.config, "isNativeTag", {
            value: (tag) =>
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isHTMLTag"])(
                tag
              ) ||
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isSVGTag"])(
                tag
              ) ||
              Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isMathMLTag"])(
                tag
              ),
            writable: false,
          });
        }
        function injectCompilerOptionsCheck(app) {
          if (
            Object(
              _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["isRuntimeOnly"]
            )()
          ) {
            const isCustomElement = app.config.isCustomElement;
            Object.defineProperty(app.config, "isCustomElement", {
              get() {
                return isCustomElement;
              },
              set() {
                Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                  `The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`
                );
              },
            });
            const compilerOptions = app.config.compilerOptions;
            const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;
            Object.defineProperty(app.config, "compilerOptions", {
              get() {
                Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                  msg
                );
                return compilerOptions;
              },
              set() {
                Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                  msg
                );
              },
            });
          }
        }
        function normalizeContainer(container) {
          if (
            Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__["isString"])(
              container
            )
          ) {
            const res = document.querySelector(container);
            if (true && !res) {
              Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                `Failed to mount app: mount target selector "${container}" returned null.`
              );
            }
            return res;
          }
          if (
            true &&
            window.ShadowRoot &&
            container instanceof window.ShadowRoot &&
            container.mode === "closed"
          ) {
            Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__["warn"])(
              `mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`
            );
          }
          return container;
        }
        let ssrDirectiveInitialized = false;
        const initDirectivesForSSR = () => {
          if (!ssrDirectiveInitialized) {
            ssrDirectiveInitialized = true;
            initVModelForSSR();
            initVShowForSSR();
          }
        };

        /***/
      },

    /***/ "./node_modules/@vue/shared/dist/shared.esm-bundler.js":
      /*!*************************************************************!*\
  !*** ./node_modules/@vue/shared/dist/shared.esm-bundler.js ***!
  \*************************************************************/
      /*! exports provided: EMPTY_ARR, EMPTY_OBJ, NO, NOOP, PatchFlagNames, PatchFlags, ShapeFlags, SlotFlags, camelize, capitalize, def, escapeHtml, escapeHtmlComment, extend, genPropsAccessExp, generateCodeFrame, getGlobalThis, hasChanged, hasOwn, hyphenate, includeBooleanAttr, invokeArrayFns, isArray, isBooleanAttr, isBuiltInDirective, isDate, isFunction, isGloballyAllowed, isGloballyWhitelisted, isHTMLTag, isIntegerKey, isKnownHtmlAttr, isKnownSvgAttr, isMap, isMathMLTag, isModelListener, isObject, isOn, isPlainObject, isPromise, isRegExp, isRenderableAttrValue, isReservedProp, isSSRSafeAttrName, isSVGTag, isSet, isSpecialBooleanAttr, isString, isSymbol, isVoidTag, looseEqual, looseIndexOf, looseToNumber, makeMap, normalizeClass, normalizeProps, normalizeStyle, objectToString, parseStringStyle, propsToAttrMap, remove, slotFlagsText, stringifyStyle, toDisplayString, toHandlerKey, toNumber, toRawType, toTypeString */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function (global) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "EMPTY_ARR",
            function () {
              return EMPTY_ARR;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "EMPTY_OBJ",
            function () {
              return EMPTY_OBJ;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "NO",
            function () {
              return NO;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "NOOP",
            function () {
              return NOOP;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "PatchFlagNames",
            function () {
              return PatchFlagNames;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "PatchFlags",
            function () {
              return PatchFlags;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "ShapeFlags",
            function () {
              return ShapeFlags;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "SlotFlags",
            function () {
              return SlotFlags;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "camelize",
            function () {
              return camelize;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "capitalize",
            function () {
              return capitalize;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "def",
            function () {
              return def;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "escapeHtml",
            function () {
              return escapeHtml;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "escapeHtmlComment",
            function () {
              return escapeHtmlComment;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "extend",
            function () {
              return extend;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "genPropsAccessExp",
            function () {
              return genPropsAccessExp;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "generateCodeFrame",
            function () {
              return generateCodeFrame;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "getGlobalThis",
            function () {
              return getGlobalThis;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "hasChanged",
            function () {
              return hasChanged;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "hasOwn",
            function () {
              return hasOwn;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "hyphenate",
            function () {
              return hyphenate;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "includeBooleanAttr",
            function () {
              return includeBooleanAttr;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "invokeArrayFns",
            function () {
              return invokeArrayFns;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isArray",
            function () {
              return isArray;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isBooleanAttr",
            function () {
              return isBooleanAttr;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isBuiltInDirective",
            function () {
              return isBuiltInDirective;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isDate",
            function () {
              return isDate;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isFunction",
            function () {
              return isFunction;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isGloballyAllowed",
            function () {
              return isGloballyAllowed;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isGloballyWhitelisted",
            function () {
              return isGloballyWhitelisted;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isHTMLTag",
            function () {
              return isHTMLTag;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isIntegerKey",
            function () {
              return isIntegerKey;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isKnownHtmlAttr",
            function () {
              return isKnownHtmlAttr;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isKnownSvgAttr",
            function () {
              return isKnownSvgAttr;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isMap",
            function () {
              return isMap;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isMathMLTag",
            function () {
              return isMathMLTag;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isModelListener",
            function () {
              return isModelListener;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isObject",
            function () {
              return isObject;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isOn",
            function () {
              return isOn;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isPlainObject",
            function () {
              return isPlainObject;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isPromise",
            function () {
              return isPromise;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isRegExp",
            function () {
              return isRegExp;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isRenderableAttrValue",
            function () {
              return isRenderableAttrValue;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isReservedProp",
            function () {
              return isReservedProp;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isSSRSafeAttrName",
            function () {
              return isSSRSafeAttrName;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isSVGTag",
            function () {
              return isSVGTag;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isSet",
            function () {
              return isSet;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isSpecialBooleanAttr",
            function () {
              return isSpecialBooleanAttr;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isString",
            function () {
              return isString;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isSymbol",
            function () {
              return isSymbol;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "isVoidTag",
            function () {
              return isVoidTag;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "looseEqual",
            function () {
              return looseEqual;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "looseIndexOf",
            function () {
              return looseIndexOf;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "looseToNumber",
            function () {
              return looseToNumber;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "makeMap",
            function () {
              return makeMap;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "normalizeClass",
            function () {
              return normalizeClass;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "normalizeProps",
            function () {
              return normalizeProps;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "normalizeStyle",
            function () {
              return normalizeStyle;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "objectToString",
            function () {
              return objectToString;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "parseStringStyle",
            function () {
              return parseStringStyle;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "propsToAttrMap",
            function () {
              return propsToAttrMap;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "remove",
            function () {
              return remove;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "slotFlagsText",
            function () {
              return slotFlagsText;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "stringifyStyle",
            function () {
              return stringifyStyle;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "toDisplayString",
            function () {
              return toDisplayString;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "toHandlerKey",
            function () {
              return toHandlerKey;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "toNumber",
            function () {
              return toNumber;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "toRawType",
            function () {
              return toRawType;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "toTypeString",
            function () {
              return toTypeString;
            }
          );
          /**
           * @vue/shared v3.4.27
           * (c) 2018-present Yuxi (Evan) You and Vue contributors
           * @license MIT
           **/
          /*! #__NO_SIDE_EFFECTS__ */
          // @__NO_SIDE_EFFECTS__
          function makeMap(str, expectsLowerCase) {
            const set = new Set(str.split(","));
            return expectsLowerCase
              ? (val) => set.has(val.toLowerCase())
              : (val) => set.has(val);
          }

          const EMPTY_OBJ = true ? Object.freeze({}) : undefined;
          const EMPTY_ARR = true ? Object.freeze([]) : undefined;
          const NOOP = () => {};
          const NO = () => false;
          const isOn = (key) =>
            key.charCodeAt(0) === 111 &&
            key.charCodeAt(1) === 110 && // uppercase letter
            (key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
          const isModelListener = (key) => key.startsWith("onUpdate:");
          const extend = Object.assign;
          const remove = (arr, el) => {
            const i = arr.indexOf(el);
            if (i > -1) {
              arr.splice(i, 1);
            }
          };
          const hasOwnProperty = Object.prototype.hasOwnProperty;
          const hasOwn = (val, key) => hasOwnProperty.call(val, key);
          const isArray = Array.isArray;
          const isMap = (val) => toTypeString(val) === "[object Map]";
          const isSet = (val) => toTypeString(val) === "[object Set]";
          const isDate = (val) => toTypeString(val) === "[object Date]";
          const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
          const isFunction = (val) => typeof val === "function";
          const isString = (val) => typeof val === "string";
          const isSymbol = (val) => typeof val === "symbol";
          const isObject = (val) => val !== null && typeof val === "object";
          const isPromise = (val) => {
            return (
              (isObject(val) || isFunction(val)) &&
              isFunction(val.then) &&
              isFunction(val.catch)
            );
          };
          const objectToString = Object.prototype.toString;
          const toTypeString = (value) => objectToString.call(value);
          const toRawType = (value) => {
            return toTypeString(value).slice(8, -1);
          };
          const isPlainObject = (val) =>
            toTypeString(val) === "[object Object]";
          const isIntegerKey = (key) =>
            isString(key) &&
            key !== "NaN" &&
            key[0] !== "-" &&
            "" + parseInt(key, 10) === key;
          const isReservedProp = /* @__PURE__ */ makeMap(
            // the leading comma is intentional so empty string "" is also included
            ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
          );
          const isBuiltInDirective = /* @__PURE__ */ makeMap(
            "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
          );
          const cacheStringFunction = (fn) => {
            const cache = /* @__PURE__ */ Object.create(null);
            return (str) => {
              const hit = cache[str];
              return hit || (cache[str] = fn(str));
            };
          };
          const camelizeRE = /-(\w)/g;
          const camelize = cacheStringFunction((str) => {
            return str.replace(camelizeRE, (_, c) =>
              c ? c.toUpperCase() : ""
            );
          });
          const hyphenateRE = /\B([A-Z])/g;
          const hyphenate = cacheStringFunction((str) =>
            str.replace(hyphenateRE, "-$1").toLowerCase()
          );
          const capitalize = cacheStringFunction((str) => {
            return str.charAt(0).toUpperCase() + str.slice(1);
          });
          const toHandlerKey = cacheStringFunction((str) => {
            const s = str ? `on${capitalize(str)}` : ``;
            return s;
          });
          const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
          const invokeArrayFns = (fns, arg) => {
            for (let i = 0; i < fns.length; i++) {
              fns[i](arg);
            }
          };
          const def = (obj, key, value, writable = false) => {
            Object.defineProperty(obj, key, {
              configurable: true,
              enumerable: false,
              writable,
              value,
            });
          };
          const looseToNumber = (val) => {
            const n = parseFloat(val);
            return isNaN(n) ? val : n;
          };
          const toNumber = (val) => {
            const n = isString(val) ? Number(val) : NaN;
            return isNaN(n) ? val : n;
          };
          let _globalThis;
          const getGlobalThis = () => {
            return (
              _globalThis ||
              (_globalThis =
                typeof globalThis !== "undefined"
                  ? globalThis
                  : typeof self !== "undefined"
                  ? self
                  : typeof window !== "undefined"
                  ? window
                  : typeof global !== "undefined"
                  ? global
                  : {})
            );
          };
          const identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
          function genPropsAccessExp(name) {
            return identRE.test(name)
              ? `__props.${name}`
              : `__props[${JSON.stringify(name)}]`;
          }

          const PatchFlags = {
            TEXT: 1,
            1: "TEXT",
            CLASS: 2,
            2: "CLASS",
            STYLE: 4,
            4: "STYLE",
            PROPS: 8,
            8: "PROPS",
            FULL_PROPS: 16,
            16: "FULL_PROPS",
            NEED_HYDRATION: 32,
            32: "NEED_HYDRATION",
            STABLE_FRAGMENT: 64,
            64: "STABLE_FRAGMENT",
            KEYED_FRAGMENT: 128,
            128: "KEYED_FRAGMENT",
            UNKEYED_FRAGMENT: 256,
            256: "UNKEYED_FRAGMENT",
            NEED_PATCH: 512,
            512: "NEED_PATCH",
            DYNAMIC_SLOTS: 1024,
            1024: "DYNAMIC_SLOTS",
            DEV_ROOT_FRAGMENT: 2048,
            2048: "DEV_ROOT_FRAGMENT",
            HOISTED: -1,
            "-1": "HOISTED",
            BAIL: -2,
            "-2": "BAIL",
          };
          const PatchFlagNames = {
            [1]: `TEXT`,
            [2]: `CLASS`,
            [4]: `STYLE`,
            [8]: `PROPS`,
            [16]: `FULL_PROPS`,
            [32]: `NEED_HYDRATION`,
            [64]: `STABLE_FRAGMENT`,
            [128]: `KEYED_FRAGMENT`,
            [256]: `UNKEYED_FRAGMENT`,
            [512]: `NEED_PATCH`,
            [1024]: `DYNAMIC_SLOTS`,
            [2048]: `DEV_ROOT_FRAGMENT`,
            [-1]: `HOISTED`,
            [-2]: `BAIL`,
          };

          const ShapeFlags = {
            ELEMENT: 1,
            1: "ELEMENT",
            FUNCTIONAL_COMPONENT: 2,
            2: "FUNCTIONAL_COMPONENT",
            STATEFUL_COMPONENT: 4,
            4: "STATEFUL_COMPONENT",
            TEXT_CHILDREN: 8,
            8: "TEXT_CHILDREN",
            ARRAY_CHILDREN: 16,
            16: "ARRAY_CHILDREN",
            SLOTS_CHILDREN: 32,
            32: "SLOTS_CHILDREN",
            TELEPORT: 64,
            64: "TELEPORT",
            SUSPENSE: 128,
            128: "SUSPENSE",
            COMPONENT_SHOULD_KEEP_ALIVE: 256,
            256: "COMPONENT_SHOULD_KEEP_ALIVE",
            COMPONENT_KEPT_ALIVE: 512,
            512: "COMPONENT_KEPT_ALIVE",
            COMPONENT: 6,
            6: "COMPONENT",
          };

          const SlotFlags = {
            STABLE: 1,
            1: "STABLE",
            DYNAMIC: 2,
            2: "DYNAMIC",
            FORWARDED: 3,
            3: "FORWARDED",
          };
          const slotFlagsText = {
            [1]: "STABLE",
            [2]: "DYNAMIC",
            [3]: "FORWARDED",
          };

          const GLOBALS_ALLOWED =
            "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error";
          const isGloballyAllowed = /* @__PURE__ */ makeMap(GLOBALS_ALLOWED);
          const isGloballyWhitelisted = isGloballyAllowed;

          const range = 2;
          function generateCodeFrame(source, start = 0, end = source.length) {
            let lines = source.split(/(\r?\n)/);
            const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
            lines = lines.filter((_, idx) => idx % 2 === 0);
            let count = 0;
            const res = [];
            for (let i = 0; i < lines.length; i++) {
              count +=
                lines[i].length +
                ((newlineSequences[i] && newlineSequences[i].length) || 0);
              if (count >= start) {
                for (let j = i - range; j <= i + range || end > count; j++) {
                  if (j < 0 || j >= lines.length) continue;
                  const line = j + 1;
                  res.push(
                    `${line}${" ".repeat(
                      Math.max(3 - String(line).length, 0)
                    )}|  ${lines[j]}`
                  );
                  const lineLength = lines[j].length;
                  const newLineSeqLength =
                    (newlineSequences[j] && newlineSequences[j].length) || 0;
                  if (j === i) {
                    const pad =
                      start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(
                      1,
                      end > count ? lineLength - pad : end - start
                    );
                    res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                  } else if (j > i) {
                    if (end > count) {
                      const length = Math.max(
                        Math.min(end - count, lineLength),
                        1
                      );
                      res.push(`   |  ` + "^".repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                  }
                }
                break;
              }
            }
            return res.join("\n");
          }

          function normalizeStyle(value) {
            if (isArray(value)) {
              const res = {};
              for (let i = 0; i < value.length; i++) {
                const item = value[i];
                const normalized = isString(item)
                  ? parseStringStyle(item)
                  : normalizeStyle(item);
                if (normalized) {
                  for (const key in normalized) {
                    res[key] = normalized[key];
                  }
                }
              }
              return res;
            } else if (isString(value) || isObject(value)) {
              return value;
            }
          }
          const listDelimiterRE = /;(?![^(]*\))/g;
          const propertyDelimiterRE = /:([^]+)/;
          const styleCommentRE = /\/\*[^]*?\*\//g;
          function parseStringStyle(cssText) {
            const ret = {};
            cssText
              .replace(styleCommentRE, "")
              .split(listDelimiterRE)
              .forEach((item) => {
                if (item) {
                  const tmp = item.split(propertyDelimiterRE);
                  tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
                }
              });
            return ret;
          }
          function stringifyStyle(styles) {
            let ret = "";
            if (!styles || isString(styles)) {
              return ret;
            }
            for (const key in styles) {
              const value = styles[key];
              if (isString(value) || typeof value === "number") {
                const normalizedKey = key.startsWith(`--`)
                  ? key
                  : hyphenate(key);
                ret += `${normalizedKey}:${value};`;
              }
            }
            return ret;
          }
          function normalizeClass(value) {
            let res = "";
            if (isString(value)) {
              res = value;
            } else if (isArray(value)) {
              for (let i = 0; i < value.length; i++) {
                const normalized = normalizeClass(value[i]);
                if (normalized) {
                  res += normalized + " ";
                }
              }
            } else if (isObject(value)) {
              for (const name in value) {
                if (value[name]) {
                  res += name + " ";
                }
              }
            }
            return res.trim();
          }
          function normalizeProps(props) {
            if (!props) return null;
            let { class: klass, style } = props;
            if (klass && !isString(klass)) {
              props.class = normalizeClass(klass);
            }
            if (style) {
              props.style = normalizeStyle(style);
            }
            return props;
          }

          const HTML_TAGS =
            "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
          const SVG_TAGS =
            "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
          const MATH_TAGS =
            "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
          const VOID_TAGS =
            "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
          const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
          const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
          const isMathMLTag = /* @__PURE__ */ makeMap(MATH_TAGS);
          const isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);

          const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
          const isSpecialBooleanAttr =
            /* @__PURE__ */ makeMap(specialBooleanAttrs);
          const isBooleanAttr = /* @__PURE__ */ makeMap(
            specialBooleanAttrs +
              `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`
          );
          function includeBooleanAttr(value) {
            return !!value || value === "";
          }
          const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
          const attrValidationCache = {};
          function isSSRSafeAttrName(name) {
            if (attrValidationCache.hasOwnProperty(name)) {
              return attrValidationCache[name];
            }
            const isUnsafe = unsafeAttrCharRE.test(name);
            if (isUnsafe) {
              console.error(`unsafe attribute name: ${name}`);
            }
            return (attrValidationCache[name] = !isUnsafe);
          }
          const propsToAttrMap = {
            acceptCharset: "accept-charset",
            className: "class",
            htmlFor: "for",
            httpEquiv: "http-equiv",
          };
          const isKnownHtmlAttr = /* @__PURE__ */ makeMap(
            `accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`
          );
          const isKnownSvgAttr = /* @__PURE__ */ makeMap(
            `xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`
          );
          function isRenderableAttrValue(value) {
            if (value == null) {
              return false;
            }
            const type = typeof value;
            return type === "string" || type === "number" || type === "boolean";
          }

          const escapeRE = /["'&<>]/;
          function escapeHtml(string) {
            const str = "" + string;
            const match = escapeRE.exec(str);
            if (!match) {
              return str;
            }
            let html = "";
            let escaped;
            let index;
            let lastIndex = 0;
            for (index = match.index; index < str.length; index++) {
              switch (str.charCodeAt(index)) {
                case 34:
                  escaped = "&quot;";
                  break;
                case 38:
                  escaped = "&amp;";
                  break;
                case 39:
                  escaped = "&#39;";
                  break;
                case 60:
                  escaped = "&lt;";
                  break;
                case 62:
                  escaped = "&gt;";
                  break;
                default:
                  continue;
              }
              if (lastIndex !== index) {
                html += str.slice(lastIndex, index);
              }
              lastIndex = index + 1;
              html += escaped;
            }
            return lastIndex !== index
              ? html + str.slice(lastIndex, index)
              : html;
          }
          const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
          function escapeHtmlComment(src) {
            return src.replace(commentStripRE, "");
          }

          function looseCompareArrays(a, b) {
            if (a.length !== b.length) return false;
            let equal = true;
            for (let i = 0; equal && i < a.length; i++) {
              equal = looseEqual(a[i], b[i]);
            }
            return equal;
          }
          function looseEqual(a, b) {
            if (a === b) return true;
            let aValidType = isDate(a);
            let bValidType = isDate(b);
            if (aValidType || bValidType) {
              return aValidType && bValidType
                ? a.getTime() === b.getTime()
                : false;
            }
            aValidType = isSymbol(a);
            bValidType = isSymbol(b);
            if (aValidType || bValidType) {
              return a === b;
            }
            aValidType = isArray(a);
            bValidType = isArray(b);
            if (aValidType || bValidType) {
              return aValidType && bValidType
                ? looseCompareArrays(a, b)
                : false;
            }
            aValidType = isObject(a);
            bValidType = isObject(b);
            if (aValidType || bValidType) {
              if (!aValidType || !bValidType) {
                return false;
              }
              const aKeysCount = Object.keys(a).length;
              const bKeysCount = Object.keys(b).length;
              if (aKeysCount !== bKeysCount) {
                return false;
              }
              for (const key in a) {
                const aHasKey = a.hasOwnProperty(key);
                const bHasKey = b.hasOwnProperty(key);
                if (
                  (aHasKey && !bHasKey) ||
                  (!aHasKey && bHasKey) ||
                  !looseEqual(a[key], b[key])
                ) {
                  return false;
                }
              }
            }
            return String(a) === String(b);
          }
          function looseIndexOf(arr, val) {
            return arr.findIndex((item) => looseEqual(item, val));
          }

          const toDisplayString = (val) => {
            return isString(val)
              ? val
              : val == null
              ? ""
              : isArray(val) ||
                (isObject(val) &&
                  (val.toString === objectToString ||
                    !isFunction(val.toString)))
              ? JSON.stringify(val, replacer, 2)
              : String(val);
          };
          const replacer = (_key, val) => {
            if (val && val.__v_isRef) {
              return replacer(_key, val.value);
            } else if (isMap(val)) {
              return {
                [`Map(${val.size})`]: [...val.entries()].reduce(
                  (entries, [key, val2], i) => {
                    entries[stringifySymbol(key, i) + " =>"] = val2;
                    return entries;
                  },
                  {}
                ),
              };
            } else if (isSet(val)) {
              return {
                [`Set(${val.size})`]: [...val.values()].map((v) =>
                  stringifySymbol(v)
                ),
              };
            } else if (isSymbol(val)) {
              return stringifySymbol(val);
            } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
              return String(val);
            }
            return val;
          };
          const stringifySymbol = (v, i = "") => {
            var _a;
            return (
              // Symbol.description in es2019+ so we need to cast here to pass
              // the lib: es2016 check
              isSymbol(v)
                ? `Symbol(${(_a = v.description) != null ? _a : i})`
                : v
            );
          };

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
          )
        );

        /***/
      },

    /***/ "./node_modules/axios/index.js":
      /*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
      /*! exports provided: default, Axios, AxiosError, CanceledError, isCancel, CancelToken, VERSION, all, Cancel, isAxiosError, spread, toFormData, AxiosHeaders, HttpStatusCode, formToJSON, getAdapter, mergeConfig */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Axios",
          function () {
            return Axios;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "AxiosError",
          function () {
            return AxiosError;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CanceledError",
          function () {
            return CanceledError;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isCancel",
          function () {
            return isCancel;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CancelToken",
          function () {
            return CancelToken;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "VERSION",
          function () {
            return VERSION;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "all",
          function () {
            return all;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Cancel",
          function () {
            return Cancel;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "isAxiosError",
          function () {
            return isAxiosError;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "spread",
          function () {
            return spread;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "toFormData",
          function () {
            return toFormData;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "AxiosHeaders",
          function () {
            return AxiosHeaders;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "HttpStatusCode",
          function () {
            return HttpStatusCode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "formToJSON",
          function () {
            return formToJSON;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getAdapter",
          function () {
            return getAdapter;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "mergeConfig",
          function () {
            return mergeConfig;
          }
        );
        /* harmony import */ var _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./lib/axios.js */ "./node_modules/axios/lib/axios.js"
          );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"];
          }
        );

        // This module is intended to unwrap Axios default export as named.
        // Keep top-level export same with static properties
        // so that it can keep same with es module or cjs
        const {
          Axios,
          AxiosError,
          CanceledError,
          isCancel,
          CancelToken,
          VERSION,
          all,
          Cancel,
          isAxiosError,
          spread,
          toFormData,
          AxiosHeaders,
          HttpStatusCode,
          formToJSON,
          getAdapter,
          mergeConfig,
        } = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"];

        /***/
      },

    /***/ "./node_modules/axios/lib/adapters/adapters.js":
      /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/adapters/adapters.js ***!
  \*****************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _http_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./http.js */ "./node_modules/axios/lib/helpers/null.js"
          );
        /* harmony import */ var _xhr_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./xhr.js */ "./node_modules/axios/lib/adapters/xhr.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );

        const knownAdapters = {
          http: _http_js__WEBPACK_IMPORTED_MODULE_1__["default"],
          xhr: _xhr_js__WEBPACK_IMPORTED_MODULE_2__["default"],
        };

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
          knownAdapters,
          (fn, value) => {
            if (fn) {
              try {
                Object.defineProperty(fn, "name", { value });
              } catch (e) {
                // eslint-disable-next-line no-empty
              }
              Object.defineProperty(fn, "adapterName", { value });
            }
          }
        );

        const renderReason = (reason) => `- ${reason}`;

        const isResolvedHandle = (adapter) =>
          _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(
            adapter
          ) ||
          adapter === null ||
          adapter === false;

        /* harmony default export */ __webpack_exports__["default"] = {
          getAdapter: (adapters) => {
            adapters = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
              "default"
            ].isArray(adapters)
              ? adapters
              : [adapters];

            const { length } = adapters;
            let nameOrAdapter;
            let adapter;

            const rejectedReasons = {};

            for (let i = 0; i < length; i++) {
              nameOrAdapter = adapters[i];
              let id;

              adapter = nameOrAdapter;

              if (!isResolvedHandle(nameOrAdapter)) {
                adapter =
                  knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

                if (adapter === undefined) {
                  throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__[
                    "default"
                  ](`Unknown adapter '${id}'`);
                }
              }

              if (adapter) {
                break;
              }

              rejectedReasons[id || "#" + i] = adapter;
            }

            if (!adapter) {
              const reasons = Object.entries(rejectedReasons).map(
                ([id, state]) =>
                  `adapter ${id} ` +
                  (state === false
                    ? "is not supported by the environment"
                    : "is not available in the build")
              );

              let s = length
                ? reasons.length > 1
                  ? "since :\n" + reasons.map(renderReason).join("\n")
                  : " " + renderReason(reasons[0])
                : "as no adapter specified";

              throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__[
                "default"
              ](
                `There is no suitable adapter to dispatch the request ` + s,
                "ERR_NOT_SUPPORT"
              );
            }

            return adapter;
          },
          adapters: knownAdapters,
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/adapters/xhr.js":
      /*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _core_settle_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./../core/settle.js */ "./node_modules/axios/lib/core/settle.js"
          );
        /* harmony import */ var _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./../helpers/cookies.js */ "./node_modules/axios/lib/helpers/cookies.js"
          );
        /* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js"
          );
        /* harmony import */ var _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../core/buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js"
          );
        /* harmony import */ var _helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./../helpers/isURLSameOrigin.js */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js"
          );
        /* harmony import */ var _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ../defaults/transitional.js */ "./node_modules/axios/lib/defaults/transitional.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );
        /* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js"
          );
        /* harmony import */ var _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! ../helpers/parseProtocol.js */ "./node_modules/axios/lib/helpers/parseProtocol.js"
          );
        /* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js"
          );
        /* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_11__ =
          __webpack_require__(
            /*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );
        /* harmony import */ var _helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_12__ =
          __webpack_require__(
            /*! ../helpers/speedometer.js */ "./node_modules/axios/lib/helpers/speedometer.js"
          );

        function progressEventReducer(listener, isDownloadStream) {
          let bytesNotified = 0;
          const _speedometer = Object(
            _helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_12__["default"]
          )(50, 250);

          return (e) => {
            const loaded = e.loaded;
            const total = e.lengthComputable ? e.total : undefined;
            const progressBytes = loaded - bytesNotified;
            const rate = _speedometer(progressBytes);
            const inRange = loaded <= total;

            bytesNotified = loaded;

            const data = {
              loaded,
              total,
              progress: total ? loaded / total : undefined,
              bytes: progressBytes,
              rate: rate ? rate : undefined,
              estimated:
                rate && total && inRange ? (total - loaded) / rate : undefined,
              event: e,
            };

            data[isDownloadStream ? "download" : "upload"] = true;

            listener(data);
          };
        }

        const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";

        /* harmony default export */ __webpack_exports__["default"] =
          isXHRAdapterSupported &&
          function (config) {
            return new Promise(function dispatchXhrRequest(resolve, reject) {
              let requestData = config.data;
              const requestHeaders =
                _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_11__["default"]
                  .from(config.headers)
                  .normalize();
              let { responseType, withXSRFToken } = config;
              let onCanceled;
              function done() {
                if (config.cancelToken) {
                  config.cancelToken.unsubscribe(onCanceled);
                }

                if (config.signal) {
                  config.signal.removeEventListener("abort", onCanceled);
                }
              }

              let contentType;

              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(
                  requestData
                )
              ) {
                if (
                  _platform_index_js__WEBPACK_IMPORTED_MODULE_10__["default"]
                    .hasStandardBrowserEnv ||
                  _platform_index_js__WEBPACK_IMPORTED_MODULE_10__["default"]
                    .hasStandardBrowserWebWorkerEnv
                ) {
                  requestHeaders.setContentType(false); // Let the browser set it
                } else if (
                  (contentType = requestHeaders.getContentType()) !== false
                ) {
                  // fix semicolon duplication issue for ReactNative FormData implementation
                  const [type, ...tokens] = contentType
                    ? contentType
                        .split(";")
                        .map((token) => token.trim())
                        .filter(Boolean)
                    : [];
                  requestHeaders.setContentType(
                    [type || "multipart/form-data", ...tokens].join("; ")
                  );
                }
              }

              let request = new XMLHttpRequest();

              // HTTP basic authentication
              if (config.auth) {
                const username = config.auth.username || "";
                const password = config.auth.password
                  ? unescape(encodeURIComponent(config.auth.password))
                  : "";
                requestHeaders.set(
                  "Authorization",
                  "Basic " + btoa(username + ":" + password)
                );
              }

              const fullPath = Object(
                _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__["default"]
              )(config.baseURL, config.url);

              request.open(
                config.method.toUpperCase(),
                Object(
                  _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_3__["default"]
                )(fullPath, config.params, config.paramsSerializer),
                true
              );

              // Set the request timeout in MS
              request.timeout = config.timeout;

              function onloadend() {
                if (!request) {
                  return;
                }
                // Prepare the response
                const responseHeaders =
                  _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_11__[
                    "default"
                  ].from(
                    "getAllResponseHeaders" in request &&
                      request.getAllResponseHeaders()
                  );
                const responseData =
                  !responseType ||
                  responseType === "text" ||
                  responseType === "json"
                    ? request.responseText
                    : request.response;
                const response = {
                  data: responseData,
                  status: request.status,
                  statusText: request.statusText,
                  headers: responseHeaders,
                  config,
                  request,
                };

                Object(_core_settle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(
                  function _resolve(value) {
                    resolve(value);
                    done();
                  },
                  function _reject(err) {
                    reject(err);
                    done();
                  },
                  response
                );

                // Clean up request
                request = null;
              }

              if ("onloadend" in request) {
                // Use onloadend if available
                request.onloadend = onloadend;
              } else {
                // Listen for ready state to emulate onloadend
                request.onreadystatechange = function handleLoad() {
                  if (!request || request.readyState !== 4) {
                    return;
                  }

                  // The request errored out and we didn't get a response, this will be
                  // handled by onerror instead
                  // With one exception: request that using file: protocol, most browsers
                  // will return status as 0 even though it's a successful request
                  if (
                    request.status === 0 &&
                    !(
                      request.responseURL &&
                      request.responseURL.indexOf("file:") === 0
                    )
                  ) {
                    return;
                  }
                  // readystate handler is calling before onerror or ontimeout handlers,
                  // so we should call onloadend on the next 'tick'
                  setTimeout(onloadend);
                };
              }

              // Handle browser request cancellation (as opposed to a manual cancellation)
              request.onabort = function handleAbort() {
                if (!request) {
                  return;
                }

                reject(
                  new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                    "default"
                  ](
                    "Request aborted",
                    _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                      "default"
                    ].ECONNABORTED,
                    config,
                    request
                  )
                );

                // Clean up request
                request = null;
              };

              // Handle low level network errors
              request.onerror = function handleError() {
                // Real errors are hidden from us by the browser
                // onerror should only fire if it's a network error
                reject(
                  new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                    "default"
                  ](
                    "Network Error",
                    _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                      "default"
                    ].ERR_NETWORK,
                    config,
                    request
                  )
                );

                // Clean up request
                request = null;
              };

              // Handle timeout
              request.ontimeout = function handleTimeout() {
                let timeoutErrorMessage = config.timeout
                  ? "timeout of " + config.timeout + "ms exceeded"
                  : "timeout exceeded";
                const transitional =
                  config.transitional ||
                  _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_6__[
                    "default"
                  ];
                if (config.timeoutErrorMessage) {
                  timeoutErrorMessage = config.timeoutErrorMessage;
                }
                reject(
                  new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                    "default"
                  ](
                    timeoutErrorMessage,
                    transitional.clarifyTimeoutError
                      ? _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                          "default"
                        ].ETIMEDOUT
                      : _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                          "default"
                        ].ECONNABORTED,
                    config,
                    request
                  )
                );

                // Clean up request
                request = null;
              };

              // Add xsrf header
              // This is only done if running in a standard browser environment.
              // Specifically not if we're in a web worker, or react-native.
              if (
                _platform_index_js__WEBPACK_IMPORTED_MODULE_10__["default"]
                  .hasStandardBrowserEnv
              ) {
                withXSRFToken &&
                  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(
                    withXSRFToken
                  ) &&
                  (withXSRFToken = withXSRFToken(config));

                if (
                  withXSRFToken ||
                  (withXSRFToken !== false &&
                    Object(
                      _helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_5__[
                        "default"
                      ]
                    )(fullPath))
                ) {
                  // Add xsrf header
                  const xsrfValue =
                    config.xsrfHeaderName &&
                    config.xsrfCookieName &&
                    _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_2__[
                      "default"
                    ].read(config.xsrfCookieName);

                  if (xsrfValue) {
                    requestHeaders.set(config.xsrfHeaderName, xsrfValue);
                  }
                }
              }

              // Remove Content-Type if data is undefined
              requestData === undefined && requestHeaders.setContentType(null);

              // Add headers to the request
              if ("setRequestHeader" in request) {
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
                  requestHeaders.toJSON(),
                  function setRequestHeader(val, key) {
                    request.setRequestHeader(key, val);
                  }
                );
              }

              // Add withCredentials to request if needed
              if (
                !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(
                  config.withCredentials
                )
              ) {
                request.withCredentials = !!config.withCredentials;
              }

              // Add responseType to request if needed
              if (responseType && responseType !== "json") {
                request.responseType = config.responseType;
              }

              // Handle progress if needed
              if (typeof config.onDownloadProgress === "function") {
                request.addEventListener(
                  "progress",
                  progressEventReducer(config.onDownloadProgress, true)
                );
              }

              // Not all browsers support upload events
              if (
                typeof config.onUploadProgress === "function" &&
                request.upload
              ) {
                request.upload.addEventListener(
                  "progress",
                  progressEventReducer(config.onUploadProgress)
                );
              }

              if (config.cancelToken || config.signal) {
                // Handle cancellation
                // eslint-disable-next-line func-names
                onCanceled = (cancel) => {
                  if (!request) {
                    return;
                  }
                  reject(
                    !cancel || cancel.type
                      ? new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_8__[
                          "default"
                        ](null, config, request)
                      : cancel
                  );
                  request.abort();
                  request = null;
                };

                config.cancelToken && config.cancelToken.subscribe(onCanceled);
                if (config.signal) {
                  config.signal.aborted
                    ? onCanceled()
                    : config.signal.addEventListener("abort", onCanceled);
                }
              }

              const protocol = Object(
                _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_9__[
                  "default"
                ]
              )(fullPath);

              if (
                protocol &&
                _platform_index_js__WEBPACK_IMPORTED_MODULE_10__[
                  "default"
                ].protocols.indexOf(protocol) === -1
              ) {
                reject(
                  new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                    "default"
                  ](
                    "Unsupported protocol " + protocol + ":",
                    _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__[
                      "default"
                    ].ERR_BAD_REQUEST,
                    config
                  )
                );
                return;
              }

              // Send the request
              request.send(requestData || null);
            });
          };

        /***/
      },

    /***/ "./node_modules/axios/lib/axios.js":
      /*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js"
          );
        /* harmony import */ var _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./core/Axios.js */ "./node_modules/axios/lib/core/Axios.js"
          );
        /* harmony import */ var _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./core/mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js"
          );
        /* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./defaults/index.js */ "./node_modules/axios/lib/defaults/index.js"
          );
        /* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js"
          );
        /* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ./cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js"
          );
        /* harmony import */ var _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ./cancel/CancelToken.js */ "./node_modules/axios/lib/cancel/CancelToken.js"
          );
        /* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! ./cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js"
          );
        /* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! ./env/data.js */ "./node_modules/axios/lib/env/data.js"
          );
        /* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! ./helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_11__ =
          __webpack_require__(
            /*! ./core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );
        /* harmony import */ var _helpers_spread_js__WEBPACK_IMPORTED_MODULE_12__ =
          __webpack_require__(
            /*! ./helpers/spread.js */ "./node_modules/axios/lib/helpers/spread.js"
          );
        /* harmony import */ var _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_13__ =
          __webpack_require__(
            /*! ./helpers/isAxiosError.js */ "./node_modules/axios/lib/helpers/isAxiosError.js"
          );
        /* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_14__ =
          __webpack_require__(
            /*! ./core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );
        /* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__ =
          __webpack_require__(
            /*! ./adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js"
          );
        /* harmony import */ var _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__ =
          __webpack_require__(
            /*! ./helpers/HttpStatusCode.js */ "./node_modules/axios/lib/helpers/HttpStatusCode.js"
          );

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         *
         * @returns {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
          const context = new _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__[
            "default"
          ](defaultConfig);
          const instance = Object(
            _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__["default"]
          )(
            _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"].prototype
              .request,
            context
          );

          // Copy axios.prototype to instance
          _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].extend(
            instance,
            _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"].prototype,
            context,
            { allOwnKeys: true }
          );

          // Copy context to instance
          _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].extend(
            instance,
            context,
            null,
            { allOwnKeys: true }
          );

          // Factory for creating new instances
          instance.create = function create(instanceConfig) {
            return createInstance(
              Object(
                _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"]
              )(defaultConfig, instanceConfig)
            );
          };

          return instance;
        }

        // Create the default instance to be exported
        const axios = createInstance(
          _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"]
        );

        // Expose Axios class to allow class inheritance
        axios.Axios = _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"];

        // Expose Cancel & CancelToken
        axios.CanceledError =
          _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_6__["default"];
        axios.CancelToken =
          _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_7__["default"];
        axios.isCancel =
          _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_8__["default"];
        axios.VERSION = _env_data_js__WEBPACK_IMPORTED_MODULE_9__["VERSION"];
        axios.toFormData =
          _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_10__["default"];

        // Expose AxiosError class
        axios.AxiosError =
          _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_11__["default"];

        // alias for CanceledError for backward compatibility
        axios.Cancel = axios.CanceledError;

        // Expose all/spread
        axios.all = function all(promises) {
          return Promise.all(promises);
        };

        axios.spread =
          _helpers_spread_js__WEBPACK_IMPORTED_MODULE_12__["default"];

        // Expose isAxiosError
        axios.isAxiosError =
          _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_13__["default"];

        // Expose mergeConfig
        axios.mergeConfig =
          _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"];

        axios.AxiosHeaders =
          _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_14__["default"];

        axios.formToJSON = (thing) =>
          Object(
            _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_5__["default"]
          )(
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(thing)
              ? new FormData(thing)
              : thing
          );

        axios.getAdapter =
          _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__[
            "default"
          ].getAdapter;

        axios.HttpStatusCode =
          _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__["default"];

        axios.default = axios;

        // this module should only have a default export
        /* harmony default export */ __webpack_exports__["default"] = axios;

        /***/
      },

    /***/ "./node_modules/axios/lib/cancel/CancelToken.js":
      /*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js"
          );

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @param {Function} executor The executor function.
         *
         * @returns {CancelToken}
         */
        class CancelToken {
          constructor(executor) {
            if (typeof executor !== "function") {
              throw new TypeError("executor must be a function.");
            }

            let resolvePromise;

            this.promise = new Promise(function promiseExecutor(resolve) {
              resolvePromise = resolve;
            });

            const token = this;

            // eslint-disable-next-line func-names
            this.promise.then((cancel) => {
              if (!token._listeners) return;

              let i = token._listeners.length;

              while (i-- > 0) {
                token._listeners[i](cancel);
              }
              token._listeners = null;
            });

            // eslint-disable-next-line func-names
            this.promise.then = (onfulfilled) => {
              let _resolve;
              // eslint-disable-next-line func-names
              const promise = new Promise((resolve) => {
                token.subscribe(resolve);
                _resolve = resolve;
              }).then(onfulfilled);

              promise.cancel = function reject() {
                token.unsubscribe(_resolve);
              };

              return promise;
            };

            executor(function cancel(message, config, request) {
              if (token.reason) {
                // Cancellation has already been requested
                return;
              }

              token.reason = new _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ](message, config, request);
              resolvePromise(token.reason);
            });
          }

          /**
           * Throws a `CanceledError` if cancellation has been requested.
           */
          throwIfRequested() {
            if (this.reason) {
              throw this.reason;
            }
          }

          /**
           * Subscribe to the cancel signal
           */

          subscribe(listener) {
            if (this.reason) {
              listener(this.reason);
              return;
            }

            if (this._listeners) {
              this._listeners.push(listener);
            } else {
              this._listeners = [listener];
            }
          }

          /**
           * Unsubscribe from the cancel signal
           */

          unsubscribe(listener) {
            if (!this._listeners) {
              return;
            }
            const index = this._listeners.indexOf(listener);
            if (index !== -1) {
              this._listeners.splice(index, 1);
            }
          }

          /**
           * Returns an object that contains a new `CancelToken` and a function that, when called,
           * cancels the `CancelToken`.
           */
          static source() {
            let cancel;
            const token = new CancelToken(function executor(c) {
              cancel = c;
            });
            return {
              token,
              cancel,
            };
          }
        }

        /* harmony default export */ __webpack_exports__["default"] =
          CancelToken;

        /***/
      },

    /***/ "./node_modules/axios/lib/cancel/CanceledError.js":
      /*!********************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CanceledError.js ***!
  \********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        /**
         * A `CanceledError` is an object that is thrown when an operation is canceled.
         *
         * @param {string=} message The message.
         * @param {Object=} config The config.
         * @param {Object=} request The request.
         *
         * @returns {CanceledError} The created error.
         */
        function CanceledError(message, config, request) {
          // eslint-disable-next-line no-eq-null,eqeqeq
          _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(
            this,
            message == null ? "canceled" : message,
            _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"]
              .ERR_CANCELED,
            config,
            request
          );
          this.name = "CanceledError";
        }

        _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].inherits(
          CanceledError,
          _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"],
          {
            __CANCEL__: true,
          }
        );

        /* harmony default export */ __webpack_exports__["default"] =
          CanceledError;

        /***/
      },

    /***/ "./node_modules/axios/lib/cancel/isCancel.js":
      /*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return isCancel;
          }
        );

        function isCancel(value) {
          return !!(value && value.__CANCEL__);
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/core/Axios.js":
      /*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js"
          );
        /* harmony import */ var _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./InterceptorManager.js */ "./node_modules/axios/lib/core/InterceptorManager.js"
          );
        /* harmony import */ var _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./dispatchRequest.js */ "./node_modules/axios/lib/core/dispatchRequest.js"
          );
        /* harmony import */ var _mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js"
          );
        /* harmony import */ var _buildFullPath_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js"
          );
        /* harmony import */ var _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ../helpers/validator.js */ "./node_modules/axios/lib/helpers/validator.js"
          );
        /* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );

        const validators =
          _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__["default"]
            .validators;

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         *
         * @return {Axios} A new instance of Axios
         */
        class Axios {
          constructor(instanceConfig) {
            this.defaults = instanceConfig;
            this.interceptors = {
              request: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_2__[
                "default"
              ](),
              response: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_2__[
                "default"
              ](),
            };
          }

          /**
           * Dispatch a request
           *
           * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
           * @param {?Object} config
           *
           * @returns {Promise} The Promise to be fulfilled
           */
          async request(configOrUrl, config) {
            try {
              return await this._request(configOrUrl, config);
            } catch (err) {
              if (err instanceof Error) {
                let dummy;

                Error.captureStackTrace
                  ? Error.captureStackTrace((dummy = {}))
                  : (dummy = new Error());

                // slice off the Error: ... line
                const stack = dummy.stack
                  ? dummy.stack.replace(/^.+\n/, "")
                  : "";

                if (!err.stack) {
                  err.stack = stack;
                  // match without the 2 top stack lines
                } else if (
                  stack &&
                  !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))
                ) {
                  err.stack += "\n" + stack;
                }
              }

              throw err;
            }
          }

          _request(configOrUrl, config) {
            /*eslint no-param-reassign:0*/
            // Allow for axios('example/url'[, config]) a la fetch API
            if (typeof configOrUrl === "string") {
              config = config || {};
              config.url = configOrUrl;
            } else {
              config = configOrUrl || {};
            }

            config = Object(
              _mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"]
            )(this.defaults, config);

            const { transitional, paramsSerializer, headers } = config;

            if (transitional !== undefined) {
              _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__[
                "default"
              ].assertOptions(
                transitional,
                {
                  silentJSONParsing: validators.transitional(
                    validators.boolean
                  ),
                  forcedJSONParsing: validators.transitional(
                    validators.boolean
                  ),
                  clarifyTimeoutError: validators.transitional(
                    validators.boolean
                  ),
                },
                false
              );
            }

            if (paramsSerializer != null) {
              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(
                  paramsSerializer
                )
              ) {
                config.paramsSerializer = {
                  serialize: paramsSerializer,
                };
              } else {
                _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__[
                  "default"
                ].assertOptions(
                  paramsSerializer,
                  {
                    encode: validators.function,
                    serialize: validators.function,
                  },
                  true
                );
              }
            }

            // Set config.method
            config.method = (
              config.method ||
              this.defaults.method ||
              "get"
            ).toLowerCase();

            // Flatten headers
            let contextHeaders =
              headers &&
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].merge(
                headers.common,
                headers[config.method]
              );

            headers &&
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
                ["delete", "get", "head", "post", "put", "patch", "common"],
                (method) => {
                  delete headers[method];
                }
              );

            config.headers = _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_7__[
              "default"
            ].concat(contextHeaders, headers);

            // filter out skipped interceptors
            const requestInterceptorChain = [];
            let synchronousRequestInterceptors = true;
            this.interceptors.request.forEach(
              function unshiftRequestInterceptors(interceptor) {
                if (
                  typeof interceptor.runWhen === "function" &&
                  interceptor.runWhen(config) === false
                ) {
                  return;
                }

                synchronousRequestInterceptors =
                  synchronousRequestInterceptors && interceptor.synchronous;

                requestInterceptorChain.unshift(
                  interceptor.fulfilled,
                  interceptor.rejected
                );
              }
            );

            const responseInterceptorChain = [];
            this.interceptors.response.forEach(
              function pushResponseInterceptors(interceptor) {
                responseInterceptorChain.push(
                  interceptor.fulfilled,
                  interceptor.rejected
                );
              }
            );

            let promise;
            let i = 0;
            let len;

            if (!synchronousRequestInterceptors) {
              const chain = [
                _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_3__[
                  "default"
                ].bind(this),
                undefined,
              ];
              chain.unshift.apply(chain, requestInterceptorChain);
              chain.push.apply(chain, responseInterceptorChain);
              len = chain.length;

              promise = Promise.resolve(config);

              while (i < len) {
                promise = promise.then(chain[i++], chain[i++]);
              }

              return promise;
            }

            len = requestInterceptorChain.length;

            let newConfig = config;

            i = 0;

            while (i < len) {
              const onFulfilled = requestInterceptorChain[i++];
              const onRejected = requestInterceptorChain[i++];
              try {
                newConfig = onFulfilled(newConfig);
              } catch (error) {
                onRejected.call(this, error);
                break;
              }
            }

            try {
              promise = _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_3__[
                "default"
              ].call(this, newConfig);
            } catch (error) {
              return Promise.reject(error);
            }

            i = 0;
            len = responseInterceptorChain.length;

            while (i < len) {
              promise = promise.then(
                responseInterceptorChain[i++],
                responseInterceptorChain[i++]
              );
            }

            return promise;
          }

          getUri(config) {
            config = Object(
              _mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"]
            )(this.defaults, config);
            const fullPath = Object(
              _buildFullPath_js__WEBPACK_IMPORTED_MODULE_5__["default"]
            )(config.baseURL, config.url);
            return Object(
              _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_1__["default"]
            )(fullPath, config.params, config.paramsSerializer);
          }
        }

        // Provide aliases for supported request methods
        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
          ["delete", "get", "head", "options"],
          function forEachMethodNoData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, config) {
              return this.request(
                Object(_mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"])(
                  config || {},
                  {
                    method,
                    url,
                    data: (config || {}).data,
                  }
                )
              );
            };
          }
        );

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
          ["post", "put", "patch"],
          function forEachMethodWithData(method) {
            /*eslint func-names:0*/

            function generateHTTPMethod(isForm) {
              return function httpMethod(url, data, config) {
                return this.request(
                  Object(
                    _mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"]
                  )(config || {}, {
                    method,
                    headers: isForm
                      ? {
                          "Content-Type": "multipart/form-data",
                        }
                      : {},
                    url,
                    data,
                  })
                );
              };
            }

            Axios.prototype[method] = generateHTTPMethod();

            Axios.prototype[method + "Form"] = generateHTTPMethod(true);
          }
        );

        /* harmony default export */ __webpack_exports__["default"] = Axios;

        /***/
      },

    /***/ "./node_modules/axios/lib/core/AxiosError.js":
      /*!***************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosError.js ***!
  \***************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [config] The config.
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         *
         * @returns {Error} The created error.
         */
        function AxiosError(message, code, config, request, response) {
          Error.call(this);

          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          } else {
            this.stack = new Error().stack;
          }

          this.message = message;
          this.name = "AxiosError";
          code && (this.code = code);
          config && (this.config = config);
          request && (this.request = request);
          response && (this.response = response);
        }

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].inherits(
          AxiosError,
          Error,
          {
            toJSON: function toJSON() {
              return {
                // Standard
                message: this.message,
                name: this.name,
                // Microsoft
                description: this.description,
                number: this.number,
                // Mozilla
                fileName: this.fileName,
                lineNumber: this.lineNumber,
                columnNumber: this.columnNumber,
                stack: this.stack,
                // Axios
                config: _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].toJSONObject(this.config),
                code: this.code,
                status:
                  this.response && this.response.status
                    ? this.response.status
                    : null,
              };
            },
          }
        );

        const prototype = AxiosError.prototype;
        const descriptors = {};

        [
          "ERR_BAD_OPTION_VALUE",
          "ERR_BAD_OPTION",
          "ECONNABORTED",
          "ETIMEDOUT",
          "ERR_NETWORK",
          "ERR_FR_TOO_MANY_REDIRECTS",
          "ERR_DEPRECATED",
          "ERR_BAD_RESPONSE",
          "ERR_BAD_REQUEST",
          "ERR_CANCELED",
          "ERR_NOT_SUPPORT",
          "ERR_INVALID_URL",
          // eslint-disable-next-line func-names
        ].forEach((code) => {
          descriptors[code] = { value: code };
        });

        Object.defineProperties(AxiosError, descriptors);
        Object.defineProperty(prototype, "isAxiosError", { value: true });

        // eslint-disable-next-line func-names
        AxiosError.from = (
          error,
          code,
          config,
          request,
          response,
          customProps
        ) => {
          const axiosError = Object.create(prototype);

          _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(
            error,
            axiosError,
            function filter(obj) {
              return obj !== Error.prototype;
            },
            (prop) => {
              return prop !== "isAxiosError";
            }
          );

          AxiosError.call(
            axiosError,
            error.message,
            code,
            config,
            request,
            response
          );

          axiosError.cause = error;

          axiosError.name = error.name;

          customProps && Object.assign(axiosError, customProps);

          return axiosError;
        };

        /* harmony default export */ __webpack_exports__["default"] =
          AxiosError;

        /***/
      },

    /***/ "./node_modules/axios/lib/core/AxiosHeaders.js":
      /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosHeaders.js ***!
  \*****************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../helpers/parseHeaders.js */ "./node_modules/axios/lib/helpers/parseHeaders.js"
          );

        const $internals = Symbol("internals");

        function normalizeHeader(header) {
          return header && String(header).trim().toLowerCase();
        }

        function normalizeValue(value) {
          if (value === false || value == null) {
            return value;
          }

          return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(
            value
          )
            ? value.map(normalizeValue)
            : String(value);
        }

        function parseTokens(str) {
          const tokens = Object.create(null);
          const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
          let match;

          while ((match = tokensRE.exec(str))) {
            tokens[match[1]] = match[2];
          }

          return tokens;
        }

        const isValidHeaderName = (str) =>
          /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

        function matchHeaderValue(
          context,
          value,
          header,
          filter,
          isHeaderNameFilter
        ) {
          if (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(filter)
          ) {
            return filter.call(this, value, header);
          }

          if (isHeaderNameFilter) {
            value = header;
          }

          if (
            !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(value)
          )
            return;

          if (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(filter)
          ) {
            return value.indexOf(filter) !== -1;
          }

          if (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(filter)
          ) {
            return filter.test(value);
          }
        }

        function formatHeader(header) {
          return header
            .trim()
            .toLowerCase()
            .replace(/([a-z\d])(\w*)/g, (w, char, str) => {
              return char.toUpperCase() + str;
            });
        }

        function buildAccessors(obj, header) {
          const accessorName = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
            "default"
          ].toCamelCase(" " + header);

          ["get", "set", "has"].forEach((methodName) => {
            Object.defineProperty(obj, methodName + accessorName, {
              value: function (arg1, arg2, arg3) {
                return this[methodName].call(this, header, arg1, arg2, arg3);
              },
              configurable: true,
            });
          });
        }

        class AxiosHeaders {
          constructor(headers) {
            headers && this.set(headers);
          }

          set(header, valueOrRewrite, rewrite) {
            const self = this;

            function setHeader(_value, _header, _rewrite) {
              const lHeader = normalizeHeader(_header);

              if (!lHeader) {
                throw new Error("header name must be a non-empty string");
              }

              const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].findKey(self, lHeader);

              if (
                !key ||
                self[key] === undefined ||
                _rewrite === true ||
                (_rewrite === undefined && self[key] !== false)
              ) {
                self[key || _header] = normalizeValue(_value);
              }
            }

            const setHeaders = (headers, _rewrite) =>
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
                headers,
                (_value, _header) => setHeader(_value, _header, _rewrite)
              );

            if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(
                header
              ) ||
              header instanceof this.constructor
            ) {
              setHeaders(header, valueOrRewrite);
            } else if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(
                header
              ) &&
              (header = header.trim()) &&
              !isValidHeaderName(header)
            ) {
              setHeaders(
                Object(
                  _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__[
                    "default"
                  ]
                )(header),
                valueOrRewrite
              );
            } else {
              header != null && setHeader(valueOrRewrite, header, rewrite);
            }

            return this;
          }

          get(header, parser) {
            header = normalizeHeader(header);

            if (header) {
              const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].findKey(this, header);

              if (key) {
                const value = this[key];

                if (!parser) {
                  return value;
                }

                if (parser === true) {
                  return parseTokens(value);
                }

                if (
                  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(
                    parser
                  )
                ) {
                  return parser.call(this, value, key);
                }

                if (
                  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(
                    parser
                  )
                ) {
                  return parser.exec(value);
                }

                throw new TypeError("parser must be boolean|regexp|function");
              }
            }
          }

          has(header, matcher) {
            header = normalizeHeader(header);

            if (header) {
              const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].findKey(this, header);

              return !!(
                key &&
                this[key] !== undefined &&
                (!matcher || matchHeaderValue(this, this[key], key, matcher))
              );
            }

            return false;
          }

          delete(header, matcher) {
            const self = this;
            let deleted = false;

            function deleteHeader(_header) {
              _header = normalizeHeader(_header);

              if (_header) {
                const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].findKey(self, _header);

                if (
                  key &&
                  (!matcher || matchHeaderValue(self, self[key], key, matcher))
                ) {
                  delete self[key];

                  deleted = true;
                }
              }
            }

            if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)
            ) {
              header.forEach(deleteHeader);
            } else {
              deleteHeader(header);
            }

            return deleted;
          }

          clear(matcher) {
            const keys = Object.keys(this);
            let i = keys.length;
            let deleted = false;

            while (i--) {
              const key = keys[i];
              if (
                !matcher ||
                matchHeaderValue(this, this[key], key, matcher, true)
              ) {
                delete this[key];
                deleted = true;
              }
            }

            return deleted;
          }

          normalize(format) {
            const self = this;
            const headers = {};

            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
              this,
              (value, header) => {
                const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].findKey(headers, header);

                if (key) {
                  self[key] = normalizeValue(value);
                  delete self[header];
                  return;
                }

                const normalized = format
                  ? formatHeader(header)
                  : String(header).trim();

                if (normalized !== header) {
                  delete self[header];
                }

                self[normalized] = normalizeValue(value);

                headers[normalized] = true;
              }
            );

            return this;
          }

          concat(...targets) {
            return this.constructor.concat(this, ...targets);
          }

          toJSON(asStrings) {
            const obj = Object.create(null);

            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
              this,
              (value, header) => {
                value != null &&
                  value !== false &&
                  (obj[header] =
                    asStrings &&
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(
                      value
                    )
                      ? value.join(", ")
                      : value);
              }
            );

            return obj;
          }

          [Symbol.iterator]() {
            return Object.entries(this.toJSON())[Symbol.iterator]();
          }

          toString() {
            return Object.entries(this.toJSON())
              .map(([header, value]) => header + ": " + value)
              .join("\n");
          }

          get [Symbol.toStringTag]() {
            return "AxiosHeaders";
          }

          static from(thing) {
            return thing instanceof this ? thing : new this(thing);
          }

          static concat(first, ...targets) {
            const computed = new this(first);

            targets.forEach((target) => computed.set(target));

            return computed;
          }

          static accessor(header) {
            const internals =
              (this[$internals] =
              this[$internals] =
                {
                  accessors: {},
                });

            const accessors = internals.accessors;
            const prototype = this.prototype;

            function defineAccessor(_header) {
              const lHeader = normalizeHeader(_header);

              if (!accessors[lHeader]) {
                buildAccessors(prototype, _header);
                accessors[lHeader] = true;
              }
            }

            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)
              ? header.forEach(defineAccessor)
              : defineAccessor(header);

            return this;
          }
        }

        AxiosHeaders.accessor([
          "Content-Type",
          "Content-Length",
          "Accept",
          "Accept-Encoding",
          "User-Agent",
          "Authorization",
        ]);

        // reserved names hotfix
        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].reduceDescriptors(
          AxiosHeaders.prototype,
          ({ value }, key) => {
            let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
            return {
              get: () => value,
              set(headerValue) {
                this[mapped] = headerValue;
              },
            };
          }
        );

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(
          AxiosHeaders
        );

        /* harmony default export */ __webpack_exports__["default"] =
          AxiosHeaders;

        /***/
      },

    /***/ "./node_modules/axios/lib/core/InterceptorManager.js":
      /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        class InterceptorManager {
          constructor() {
            this.handlers = [];
          }

          /**
           * Add a new interceptor to the stack
           *
           * @param {Function} fulfilled The function to handle `then` for a `Promise`
           * @param {Function} rejected The function to handle `reject` for a `Promise`
           *
           * @return {Number} An ID used to remove interceptor later
           */
          use(fulfilled, rejected, options) {
            this.handlers.push({
              fulfilled,
              rejected,
              synchronous: options ? options.synchronous : false,
              runWhen: options ? options.runWhen : null,
            });
            return this.handlers.length - 1;
          }

          /**
           * Remove an interceptor from the stack
           *
           * @param {Number} id The ID that was returned by `use`
           *
           * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
           */
          eject(id) {
            if (this.handlers[id]) {
              this.handlers[id] = null;
            }
          }

          /**
           * Clear all interceptors from the stack
           *
           * @returns {void}
           */
          clear() {
            if (this.handlers) {
              this.handlers = [];
            }
          }

          /**
           * Iterate over all the registered interceptors
           *
           * This method is particularly useful for skipping over any
           * interceptors that may have become `null` calling `eject`.
           *
           * @param {Function} fn The function to call for each interceptor
           *
           * @returns {void}
           */
          forEach(fn) {
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
              this.handlers,
              function forEachHandler(h) {
                if (h !== null) {
                  fn(h);
                }
              }
            );
          }
        }

        /* harmony default export */ __webpack_exports__["default"] =
          InterceptorManager;

        /***/
      },

    /***/ "./node_modules/axios/lib/core/buildFullPath.js":
      /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return buildFullPath;
          }
        );
        /* harmony import */ var _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../helpers/isAbsoluteURL.js */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js"
          );
        /* harmony import */ var _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../helpers/combineURLs.js */ "./node_modules/axios/lib/helpers/combineURLs.js"
          );

        /**
         * Creates a new URL by combining the baseURL with the requestedURL,
         * only when the requestedURL is not already an absolute URL.
         * If the requestURL is absolute, this function returns the requestedURL untouched.
         *
         * @param {string} baseURL The base URL
         * @param {string} requestedURL Absolute or relative URL to combine
         *
         * @returns {string} The combined full path
         */
        function buildFullPath(baseURL, requestedURL) {
          if (
            baseURL &&
            !Object(
              _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__["default"]
            )(requestedURL)
          ) {
            return Object(
              _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__["default"]
            )(baseURL, requestedURL);
          }
          return requestedURL;
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/core/dispatchRequest.js":
      /*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return dispatchRequest;
          }
        );
        /* harmony import */ var _transformData_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./transformData.js */ "./node_modules/axios/lib/core/transformData.js"
          );
        /* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js"
          );
        /* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js"
          );
        /* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js"
          );
        /* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );
        /* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ../adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js"
          );

        /**
         * Throws a `CanceledError` if cancellation has been requested.
         *
         * @param {Object} config The config that is to be used for the request
         *
         * @returns {void}
         */
        function throwIfCancellationRequested(config) {
          if (config.cancelToken) {
            config.cancelToken.throwIfRequested();
          }

          if (config.signal && config.signal.aborted) {
            throw new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_3__[
              "default"
            ](null, config);
          }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         *
         * @returns {Promise} The Promise to be fulfilled
         */
        function dispatchRequest(config) {
          throwIfCancellationRequested(config);

          config.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__[
            "default"
          ].from(config.headers);

          // Transform request data
          config.data = _transformData_js__WEBPACK_IMPORTED_MODULE_0__[
            "default"
          ].call(config, config.transformRequest);

          if (["post", "put", "patch"].indexOf(config.method) !== -1) {
            config.headers.setContentType(
              "application/x-www-form-urlencoded",
              false
            );
          }

          const adapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_5__[
            "default"
          ].getAdapter(
            config.adapter ||
              _defaults_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].adapter
          );

          return adapter(config).then(
            function onAdapterResolution(response) {
              throwIfCancellationRequested(config);

              // Transform response data
              response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].call(config, config.transformResponse, response);

              response.headers =
                _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__[
                  "default"
                ].from(response.headers);

              return response;
            },
            function onAdapterRejection(reason) {
              if (
                !Object(
                  _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_1__["default"]
                )(reason)
              ) {
                throwIfCancellationRequested(config);

                // Transform response data
                if (reason && reason.response) {
                  reason.response.data =
                    _transformData_js__WEBPACK_IMPORTED_MODULE_0__[
                      "default"
                    ].call(config, config.transformResponse, reason.response);
                  reason.response.headers =
                    _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__[
                      "default"
                    ].from(reason.response.headers);
                }
              }

              return Promise.reject(reason);
            }
          );
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/core/mergeConfig.js":
      /*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return mergeConfig;
          }
        );
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );

        const headersToObject = (thing) =>
          thing instanceof
          _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"]
            ? { ...thing }
            : thing;

        /**
         * Config-specific merge-function which creates a new config-object
         * by merging two configuration objects together.
         *
         * @param {Object} config1
         * @param {Object} config2
         *
         * @returns {Object} New object resulting from merging config2 to config1
         */
        function mergeConfig(config1, config2) {
          // eslint-disable-next-line no-param-reassign
          config2 = config2 || {};
          const config = {};

          function getMergedValue(target, source, caseless) {
            if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(
                target
              ) &&
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(
                source
              )
            ) {
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].merge.call({ caseless }, target, source);
            } else if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(
                source
              )
            ) {
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].merge(
                {},
                source
              );
            } else if (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(source)
            ) {
              return source.slice();
            }
            return source;
          }

          // eslint-disable-next-line consistent-return
          function mergeDeepProperties(a, b, caseless) {
            if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(b)
            ) {
              return getMergedValue(a, b, caseless);
            } else if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(a)
            ) {
              return getMergedValue(undefined, a, caseless);
            }
          }

          // eslint-disable-next-line consistent-return
          function valueFromConfig2(a, b) {
            if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(b)
            ) {
              return getMergedValue(undefined, b);
            }
          }

          // eslint-disable-next-line consistent-return
          function defaultToConfig2(a, b) {
            if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(b)
            ) {
              return getMergedValue(undefined, b);
            } else if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(a)
            ) {
              return getMergedValue(undefined, a);
            }
          }

          // eslint-disable-next-line consistent-return
          function mergeDirectKeys(a, b, prop) {
            if (prop in config2) {
              return getMergedValue(a, b);
            } else if (prop in config1) {
              return getMergedValue(undefined, a);
            }
          }

          const mergeMap = {
            url: valueFromConfig2,
            method: valueFromConfig2,
            data: valueFromConfig2,
            baseURL: defaultToConfig2,
            transformRequest: defaultToConfig2,
            transformResponse: defaultToConfig2,
            paramsSerializer: defaultToConfig2,
            timeout: defaultToConfig2,
            timeoutMessage: defaultToConfig2,
            withCredentials: defaultToConfig2,
            withXSRFToken: defaultToConfig2,
            adapter: defaultToConfig2,
            responseType: defaultToConfig2,
            xsrfCookieName: defaultToConfig2,
            xsrfHeaderName: defaultToConfig2,
            onUploadProgress: defaultToConfig2,
            onDownloadProgress: defaultToConfig2,
            decompress: defaultToConfig2,
            maxContentLength: defaultToConfig2,
            maxBodyLength: defaultToConfig2,
            beforeRedirect: defaultToConfig2,
            transport: defaultToConfig2,
            httpAgent: defaultToConfig2,
            httpsAgent: defaultToConfig2,
            cancelToken: defaultToConfig2,
            socketPath: defaultToConfig2,
            responseEncoding: defaultToConfig2,
            validateStatus: mergeDirectKeys,
            headers: (a, b) =>
              mergeDeepProperties(headersToObject(a), headersToObject(b), true),
          };

          _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
            Object.keys(Object.assign({}, config1, config2)),
            function computeConfigValue(prop) {
              const merge = mergeMap[prop] || mergeDeepProperties;
              const configValue = merge(config1[prop], config2[prop], prop);
              (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(
                configValue
              ) &&
                merge !== mergeDirectKeys) ||
                (config[prop] = configValue);
            }
          );

          return config;
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/core/settle.js":
      /*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return settle;
          }
        );
        /* harmony import */ var _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         *
         * @returns {object} The response.
         */
        function settle(resolve, reject, response) {
          const validateStatus = response.config.validateStatus;
          if (
            !response.status ||
            !validateStatus ||
            validateStatus(response.status)
          ) {
            resolve(response);
          } else {
            reject(
              new _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"](
                "Request failed with status code " + response.status,
                [
                  _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"]
                    .ERR_BAD_REQUEST,
                  _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"]
                    .ERR_BAD_RESPONSE,
                ][Math.floor(response.status / 100) - 4],
                response.config,
                response.request,
                response
              )
            );
          }
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/core/transformData.js":
      /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return transformData;
          }
        );
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js"
          );
        /* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js"
          );

        /**
         * Transform the data for a request or a response
         *
         * @param {Array|Function} fns A single function or Array of functions
         * @param {?Object} response The response object
         *
         * @returns {*} The resulting transformed data
         */
        function transformData(fns, response) {
          const config =
            this || _defaults_index_js__WEBPACK_IMPORTED_MODULE_1__["default"];
          const context = response || config;
          const headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_2__[
            "default"
          ].from(context.headers);
          let data = context.data;

          _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
            fns,
            function transform(fn) {
              data = fn.call(
                config,
                data,
                headers.normalize(),
                response ? response.status : undefined
              );
            }
          );

          headers.normalize();

          return data;
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/defaults/index.js":
      /*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );
        /* harmony import */ var _transitional_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./transitional.js */ "./node_modules/axios/lib/defaults/transitional.js"
          );
        /* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js"
          );
        /* harmony import */ var _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../helpers/toURLEncodedForm.js */ "./node_modules/axios/lib/helpers/toURLEncodedForm.js"
          );
        /* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js"
          );
        /* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ../helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js"
          );

        /**
         * It takes a string, tries to parse it, and if it fails, it returns the stringified version
         * of the input
         *
         * @param {any} rawValue - The value to be stringified.
         * @param {Function} parser - A function that parses a string into a JavaScript object.
         * @param {Function} encoder - A function that takes a value and returns a string.
         *
         * @returns {string} A stringified version of the rawValue.
         */
        function stringifySafely(rawValue, parser, encoder) {
          if (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(rawValue)
          ) {
            try {
              (parser || JSON.parse)(rawValue);
              return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].trim(
                rawValue
              );
            } catch (e) {
              if (e.name !== "SyntaxError") {
                throw e;
              }
            }
          }

          return (encoder || JSON.stringify)(rawValue);
        }

        const defaults = {
          transitional:
            _transitional_js__WEBPACK_IMPORTED_MODULE_2__["default"],

          adapter: ["xhr", "http"],

          transformRequest: [
            function transformRequest(data, headers) {
              const contentType = headers.getContentType() || "";
              const hasJSONContentType =
                contentType.indexOf("application/json") > -1;
              const isObjectPayload =
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(
                  data
                );

              if (
                isObjectPayload &&
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(
                  data
                )
              ) {
                data = new FormData(data);
              }

              const isFormData =
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(
                  data
                );

              if (isFormData) {
                return hasJSONContentType
                  ? JSON.stringify(
                      Object(
                        _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_6__[
                          "default"
                        ]
                      )(data)
                    )
                  : data;
              }

              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(
                  data
                ) ||
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(
                  data
                ) ||
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isStream(
                  data
                ) ||
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFile(
                  data
                ) ||
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(data)
              ) {
                return data;
              }
              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].isArrayBufferView(data)
              ) {
                return data.buffer;
              }
              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].isURLSearchParams(data)
              ) {
                headers.setContentType(
                  "application/x-www-form-urlencoded;charset=utf-8",
                  false
                );
                return data.toString();
              }

              let isFileList;

              if (isObjectPayload) {
                if (
                  contentType.indexOf("application/x-www-form-urlencoded") > -1
                ) {
                  return Object(
                    _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_4__[
                      "default"
                    ]
                  )(data, this.formSerializer).toString();
                }

                if (
                  (isFileList =
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                      "default"
                    ].isFileList(data)) ||
                  contentType.indexOf("multipart/form-data") > -1
                ) {
                  const _FormData = this.env && this.env.FormData;

                  return Object(
                    _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_3__[
                      "default"
                    ]
                  )(
                    isFileList ? { "files[]": data } : data,
                    _FormData && new _FormData(),
                    this.formSerializer
                  );
                }
              }

              if (isObjectPayload || hasJSONContentType) {
                headers.setContentType("application/json", false);
                return stringifySafely(data);
              }

              return data;
            },
          ],

          transformResponse: [
            function transformResponse(data) {
              const transitional = this.transitional || defaults.transitional;
              const forcedJSONParsing =
                transitional && transitional.forcedJSONParsing;
              const JSONRequested = this.responseType === "json";

              if (
                data &&
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(
                  data
                ) &&
                ((forcedJSONParsing && !this.responseType) || JSONRequested)
              ) {
                const silentJSONParsing =
                  transitional && transitional.silentJSONParsing;
                const strictJSONParsing = !silentJSONParsing && JSONRequested;

                try {
                  return JSON.parse(data);
                } catch (e) {
                  if (strictJSONParsing) {
                    if (e.name === "SyntaxError") {
                      throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                        "default"
                      ].from(
                        e,
                        _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                          "default"
                        ].ERR_BAD_RESPONSE,
                        this,
                        null,
                        this.response
                      );
                    }
                    throw e;
                  }
                }
              }

              return data;
            },
          ],

          /**
           * A timeout in milliseconds to abort a request. If set to 0 (default) a
           * timeout is not created.
           */
          timeout: 0,

          xsrfCookieName: "XSRF-TOKEN",
          xsrfHeaderName: "X-XSRF-TOKEN",

          maxContentLength: -1,
          maxBodyLength: -1,

          env: {
            FormData:
              _platform_index_js__WEBPACK_IMPORTED_MODULE_5__["default"].classes
                .FormData,
            Blob: _platform_index_js__WEBPACK_IMPORTED_MODULE_5__["default"]
              .classes.Blob,
          },

          validateStatus: function validateStatus(status) {
            return status >= 200 && status < 300;
          },

          headers: {
            common: {
              Accept: "application/json, text/plain, */*",
              "Content-Type": undefined,
            },
          },
        };

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
          ["delete", "get", "head", "post", "put", "patch"],
          (method) => {
            defaults.headers[method] = {};
          }
        );

        /* harmony default export */ __webpack_exports__["default"] = defaults;

        /***/
      },

    /***/ "./node_modules/axios/lib/defaults/transitional.js":
      /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);

        /* harmony default export */ __webpack_exports__["default"] = {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false,
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/env/data.js":
      /*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
      /*! exports provided: VERSION */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "VERSION",
          function () {
            return VERSION;
          }
        );
        const VERSION = "1.6.8";

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js":
      /*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js ***!
  \****************************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js"
          );

        /**
         * It encodes a string by replacing all characters that are not in the unreserved set with
         * their percent-encoded equivalents
         *
         * @param {string} str - The string to encode.
         *
         * @returns {string} The encoded string.
         */
        function encode(str) {
          const charMap = {
            "!": "%21",
            "'": "%27",
            "(": "%28",
            ")": "%29",
            "~": "%7E",
            "%20": "+",
            "%00": "\x00",
          };
          return encodeURIComponent(str).replace(
            /[!'()~]|%20|%00/g,
            function replacer(match) {
              return charMap[match];
            }
          );
        }

        /**
         * It takes a params object and converts it to a FormData object
         *
         * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
         * @param {Object<string, any>} options - The options object passed to the Axios constructor.
         *
         * @returns {void}
         */
        function AxiosURLSearchParams(params, options) {
          this._pairs = [];

          params &&
            Object(_toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(
              params,
              this,
              options
            );
        }

        const prototype = AxiosURLSearchParams.prototype;

        prototype.append = function append(name, value) {
          this._pairs.push([name, value]);
        };

        prototype.toString = function toString(encoder) {
          const _encode = encoder
            ? function (value) {
                return encoder.call(this, value, encode);
              }
            : encode;

          return this._pairs
            .map(function each(pair) {
              return _encode(pair[0]) + "=" + _encode(pair[1]);
            }, "")
            .join("&");
        };

        /* harmony default export */ __webpack_exports__["default"] =
          AxiosURLSearchParams;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/HttpStatusCode.js":
      /*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/HttpStatusCode.js ***!
  \**********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        const HttpStatusCode = {
          Continue: 100,
          SwitchingProtocols: 101,
          Processing: 102,
          EarlyHints: 103,
          Ok: 200,
          Created: 201,
          Accepted: 202,
          NonAuthoritativeInformation: 203,
          NoContent: 204,
          ResetContent: 205,
          PartialContent: 206,
          MultiStatus: 207,
          AlreadyReported: 208,
          ImUsed: 226,
          MultipleChoices: 300,
          MovedPermanently: 301,
          Found: 302,
          SeeOther: 303,
          NotModified: 304,
          UseProxy: 305,
          Unused: 306,
          TemporaryRedirect: 307,
          PermanentRedirect: 308,
          BadRequest: 400,
          Unauthorized: 401,
          PaymentRequired: 402,
          Forbidden: 403,
          NotFound: 404,
          MethodNotAllowed: 405,
          NotAcceptable: 406,
          ProxyAuthenticationRequired: 407,
          RequestTimeout: 408,
          Conflict: 409,
          Gone: 410,
          LengthRequired: 411,
          PreconditionFailed: 412,
          PayloadTooLarge: 413,
          UriTooLong: 414,
          UnsupportedMediaType: 415,
          RangeNotSatisfiable: 416,
          ExpectationFailed: 417,
          ImATeapot: 418,
          MisdirectedRequest: 421,
          UnprocessableEntity: 422,
          Locked: 423,
          FailedDependency: 424,
          TooEarly: 425,
          UpgradeRequired: 426,
          PreconditionRequired: 428,
          TooManyRequests: 429,
          RequestHeaderFieldsTooLarge: 431,
          UnavailableForLegalReasons: 451,
          InternalServerError: 500,
          NotImplemented: 501,
          BadGateway: 502,
          ServiceUnavailable: 503,
          GatewayTimeout: 504,
          HttpVersionNotSupported: 505,
          VariantAlsoNegotiates: 506,
          InsufficientStorage: 507,
          LoopDetected: 508,
          NotExtended: 510,
          NetworkAuthenticationRequired: 511,
        };

        Object.entries(HttpStatusCode).forEach(([key, value]) => {
          HttpStatusCode[value] = key;
        });

        /* harmony default export */ __webpack_exports__["default"] =
          HttpStatusCode;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/bind.js":
      /*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return bind;
          }
        );

        function bind(fn, thisArg) {
          return function wrap() {
            return fn.apply(thisArg, arguments);
          };
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/buildURL.js":
      /*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return buildURL;
          }
        );
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js"
          );

        /**
         * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
         * URI encoded counterparts
         *
         * @param {string} val The value to be encoded.
         *
         * @returns {string} The encoded value.
         */
        function encode(val) {
          return encodeURIComponent(val)
            .replace(/%3A/gi, ":")
            .replace(/%24/g, "$")
            .replace(/%2C/gi, ",")
            .replace(/%20/g, "+")
            .replace(/%5B/gi, "[")
            .replace(/%5D/gi, "]");
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @param {?object} options
         *
         * @returns {string} The formatted url
         */
        function buildURL(url, params, options) {
          /*eslint no-param-reassign:0*/
          if (!params) {
            return url;
          }

          const _encode = (options && options.encode) || encode;

          const serializeFn = options && options.serialize;

          let serializedParams;

          if (serializeFn) {
            serializedParams = serializeFn(params, options);
          } else {
            serializedParams = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
              "default"
            ].isURLSearchParams(params)
              ? params.toString()
              : new _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ](params, options).toString(_encode);
          }

          if (serializedParams) {
            const hashmarkIndex = url.indexOf("#");

            if (hashmarkIndex !== -1) {
              url = url.slice(0, hashmarkIndex);
            }
            url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
          }

          return url;
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/combineURLs.js":
      /*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return combineURLs;
          }
        );

        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         *
         * @returns {string} The combined URL
         */
        function combineURLs(baseURL, relativeURL) {
          return relativeURL
            ? baseURL.replace(/\/?\/$/, "") +
                "/" +
                relativeURL.replace(/^\/+/, "")
            : baseURL;
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/cookies.js":
      /*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js"
          );

        /* harmony default export */ __webpack_exports__["default"] =
          _platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"]
            .hasStandardBrowserEnv
            ? // Standard browser envs support document.cookie
              {
                write(name, value, expires, path, domain, secure) {
                  const cookie = [name + "=" + encodeURIComponent(value)];

                  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isNumber(
                    expires
                  ) &&
                    cookie.push("expires=" + new Date(expires).toGMTString());

                  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(
                    path
                  ) && cookie.push("path=" + path);

                  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(
                    domain
                  ) && cookie.push("domain=" + domain);

                  secure === true && cookie.push("secure");

                  document.cookie = cookie.join("; ");
                },

                read(name) {
                  const match = document.cookie.match(
                    new RegExp("(^|;\\s*)(" + name + ")=([^;]*)")
                  );
                  return match ? decodeURIComponent(match[3]) : null;
                },

                remove(name) {
                  this.write(name, "", Date.now() - 86400000);
                },
              }
            : // Non-standard browser env (web workers, react-native) lack needed support.
              {
                write() {},
                read() {
                  return null;
                },
                remove() {},
              };

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/formDataToJSON.js":
      /*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/formDataToJSON.js ***!
  \**********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        /**
         * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
         *
         * @param {string} name - The name of the property to get.
         *
         * @returns An array of strings.
         */
        function parsePropPath(name) {
          // foo[x][y][z]
          // foo.x.y.z
          // foo-x-y-z
          // foo x y z
          return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"]
            .matchAll(/\w+|\[(\w*)]/g, name)
            .map((match) => {
              return match[0] === "[]" ? "" : match[1] || match[0];
            });
        }

        /**
         * Convert an array to an object.
         *
         * @param {Array<any>} arr - The array to convert to an object.
         *
         * @returns An object with the same keys and values as the array.
         */
        function arrayToObject(arr) {
          const obj = {};
          const keys = Object.keys(arr);
          let i;
          const len = keys.length;
          let key;
          for (i = 0; i < len; i++) {
            key = keys[i];
            obj[key] = arr[key];
          }
          return obj;
        }

        /**
         * It takes a FormData object and returns a JavaScript object
         *
         * @param {string} formData The FormData object to convert to JSON.
         *
         * @returns {Object<string, any> | null} The converted object.
         */
        function formDataToJSON(formData) {
          function buildPath(path, value, target, index) {
            let name = path[index++];

            if (name === "__proto__") return true;

            const isNumericKey = Number.isFinite(+name);
            const isLast = index >= path.length;
            name =
              !name &&
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target)
                ? target.length
                : name;

            if (isLast) {
              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProp(
                  target,
                  name
                )
              ) {
                target[name] = [target[name], value];
              } else {
                target[name] = value;
              }

              return !isNumericKey;
            }

            if (
              !target[name] ||
              !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(
                target[name]
              )
            ) {
              target[name] = [];
            }

            const result = buildPath(path, value, target[name], index);

            if (
              result &&
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(
                target[name]
              )
            ) {
              target[name] = arrayToObject(target[name]);
            }

            return !isNumericKey;
          }

          if (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(
              formData
            ) &&
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(
              formData.entries
            )
          ) {
            const obj = {};

            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEachEntry(
              formData,
              (name, value) => {
                buildPath(parsePropPath(name), value, obj, 0);
              }
            );

            return obj;
          }

          return null;
        }

        /* harmony default export */ __webpack_exports__["default"] =
          formDataToJSON;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
      /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return isAbsoluteURL;
          }
        );

        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         *
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        function isAbsoluteURL(url) {
          // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
          // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
          // by any combination of letters, digits, plus, period, or hyphen.
          return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
      /*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return isAxiosError;
          }
        );
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        /**
         * Determines whether the payload is an error thrown by Axios
         *
         * @param {*} payload The value to test
         *
         * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
         */
        function isAxiosError(payload) {
          return (
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(
              payload
            ) && payload.isAxiosError === true
          );
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
      /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js"
          );

        /* harmony default export */ __webpack_exports__["default"] =
          _platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"]
            .hasStandardBrowserEnv
            ? // Standard browser envs have full support of the APIs needed to test
              // whether the request URL is of the same origin as current location.
              (function standardBrowserEnv() {
                const msie = /(msie|trident)/i.test(navigator.userAgent);
                const urlParsingNode = document.createElement("a");
                let originURL;

                /**
                 * Parse a URL to discover its components
                 *
                 * @param {String} url The URL to be parsed
                 * @returns {Object}
                 */
                function resolveURL(url) {
                  let href = url;

                  if (msie) {
                    // IE needs attribute set twice to normalize properties
                    urlParsingNode.setAttribute("href", href);
                    href = urlParsingNode.href;
                  }

                  urlParsingNode.setAttribute("href", href);

                  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                  return {
                    href: urlParsingNode.href,
                    protocol: urlParsingNode.protocol
                      ? urlParsingNode.protocol.replace(/:$/, "")
                      : "",
                    host: urlParsingNode.host,
                    search: urlParsingNode.search
                      ? urlParsingNode.search.replace(/^\?/, "")
                      : "",
                    hash: urlParsingNode.hash
                      ? urlParsingNode.hash.replace(/^#/, "")
                      : "",
                    hostname: urlParsingNode.hostname,
                    port: urlParsingNode.port,
                    pathname:
                      urlParsingNode.pathname.charAt(0) === "/"
                        ? urlParsingNode.pathname
                        : "/" + urlParsingNode.pathname,
                  };
                }

                originURL = resolveURL(window.location.href);

                /**
                 * Determine if a URL shares the same origin as the current location
                 *
                 * @param {String} requestURL The URL to test
                 * @returns {boolean} True if URL shares the same origin, otherwise false
                 */
                return function isURLSameOrigin(requestURL) {
                  const parsed = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                    "default"
                  ].isString(requestURL)
                    ? resolveURL(requestURL)
                    : requestURL;
                  return (
                    parsed.protocol === originURL.protocol &&
                    parsed.host === originURL.host
                  );
                };
              })()
            : // Non standard browser envs (web workers, react-native) lack needed support.
              (function nonStandardBrowserEnv() {
                return function isURLSameOrigin() {
                  return true;
                };
              })();

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/null.js":
      /*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/null.js ***!
  \************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        // eslint-disable-next-line strict
        /* harmony default export */ __webpack_exports__["default"] = null;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
      /*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./../utils.js */ "./node_modules/axios/lib/utils.js"
          );

        // RawAxiosHeaders whose duplicates are ignored by node
        // c.f. https://nodejs.org/api/http.html#http_message_headers
        const ignoreDuplicateOf = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
          "default"
        ].toObjectSet([
          "age",
          "authorization",
          "content-length",
          "content-type",
          "etag",
          "expires",
          "from",
          "host",
          "if-modified-since",
          "if-unmodified-since",
          "last-modified",
          "location",
          "max-forwards",
          "proxy-authorization",
          "referer",
          "retry-after",
          "user-agent",
        ]);

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} rawHeaders Headers needing to be parsed
         *
         * @returns {Object} Headers parsed into an object
         */
        /* harmony default export */ __webpack_exports__["default"] = (
          rawHeaders
        ) => {
          const parsed = {};
          let key;
          let val;
          let i;

          rawHeaders &&
            rawHeaders.split("\n").forEach(function parser(line) {
              i = line.indexOf(":");
              key = line.substring(0, i).trim().toLowerCase();
              val = line.substring(i + 1).trim();

              if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
                return;
              }

              if (key === "set-cookie") {
                if (parsed[key]) {
                  parsed[key].push(val);
                } else {
                  parsed[key] = [val];
                }
              } else {
                parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
              }
            });

          return parsed;
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/parseProtocol.js":
      /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseProtocol.js ***!
  \*********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return parseProtocol;
          }
        );

        function parseProtocol(url) {
          const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
          return (match && match[1]) || "";
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/speedometer.js":
      /*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/speedometer.js ***!
  \*******************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);

        /**
         * Calculate data maxRate
         * @param {Number} [samplesCount= 10]
         * @param {Number} [min= 1000]
         * @returns {Function}
         */
        function speedometer(samplesCount, min) {
          samplesCount = samplesCount || 10;
          const bytes = new Array(samplesCount);
          const timestamps = new Array(samplesCount);
          let head = 0;
          let tail = 0;
          let firstSampleTS;

          min = min !== undefined ? min : 1000;

          return function push(chunkLength) {
            const now = Date.now();

            const startedAt = timestamps[tail];

            if (!firstSampleTS) {
              firstSampleTS = now;
            }

            bytes[head] = chunkLength;
            timestamps[head] = now;

            let i = tail;
            let bytesCount = 0;

            while (i !== head) {
              bytesCount += bytes[i++];
              i = i % samplesCount;
            }

            head = (head + 1) % samplesCount;

            if (head === tail) {
              tail = (tail + 1) % samplesCount;
            }

            if (now - firstSampleTS < min) {
              return;
            }

            const passed = startedAt && now - startedAt;

            return passed
              ? Math.round((bytesCount * 1000) / passed)
              : undefined;
          };
        }

        /* harmony default export */ __webpack_exports__["default"] =
          speedometer;

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/spread.js":
      /*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return spread;
          }
        );

        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         *
         * @returns {Function}
         */
        function spread(callback) {
          return function wrap(arr) {
            return callback.apply(null, arr);
          };
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/toFormData.js":
      /*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toFormData.js ***!
  \******************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function (Buffer) {
          /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
            );
          /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
            );
          /* harmony import */ var _platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_2__ =
            __webpack_require__(
              /*! ../platform/node/classes/FormData.js */ "./node_modules/axios/lib/helpers/null.js"
            );

          // temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored

          /**
           * Determines if the given thing is a array or js object.
           *
           * @param {string} thing - The object or array to be visited.
           *
           * @returns {boolean}
           */
          function isVisitable(thing) {
            return (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(
                thing
              ) ||
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(thing)
            );
          }

          /**
           * It removes the brackets from the end of a string
           *
           * @param {string} key - The key of the parameter.
           *
           * @returns {string} the key without the brackets.
           */
          function removeBrackets(key) {
            return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(
              key,
              "[]"
            )
              ? key.slice(0, -2)
              : key;
          }

          /**
           * It takes a path, a key, and a boolean, and returns a string
           *
           * @param {string} path - The path to the current key.
           * @param {string} key - The key of the current object being iterated over.
           * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
           *
           * @returns {string} The path to the current key.
           */
          function renderKey(path, key, dots) {
            if (!path) return key;
            return path
              .concat(key)
              .map(function each(token, i) {
                // eslint-disable-next-line no-param-reassign
                token = removeBrackets(token);
                return !dots && i ? "[" + token + "]" : token;
              })
              .join(dots ? "." : "");
          }

          /**
           * If the array is an array and none of its elements are visitable, then it's a flat array.
           *
           * @param {Array<any>} arr - The array to check
           *
           * @returns {boolean}
           */
          function isFlatArray(arr) {
            return (
              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(arr) &&
              !arr.some(isVisitable)
            );
          }

          const predicates = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
            "default"
          ].toFlatObject(
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            {},
            null,
            function filter(prop) {
              return /^is[A-Z]/.test(prop);
            }
          );

          /**
           * Convert a data object to FormData
           *
           * @param {Object} obj
           * @param {?Object} [formData]
           * @param {?Object} [options]
           * @param {Function} [options.visitor]
           * @param {Boolean} [options.metaTokens = true]
           * @param {Boolean} [options.dots = false]
           * @param {?Boolean} [options.indexes = false]
           *
           * @returns {Object}
           **/

          /**
           * It converts an object into a FormData object
           *
           * @param {Object<any, any>} obj - The object to convert to form data.
           * @param {string} formData - The FormData object to append to.
           * @param {Object<string, any>} options
           *
           * @returns
           */
          function toFormData(obj, formData, options) {
            if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)
            ) {
              throw new TypeError("target must be an object");
            }

            // eslint-disable-next-line no-param-reassign
            formData =
              formData ||
              new (_platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_2__[
                "default"
              ] || FormData)();

            // eslint-disable-next-line no-param-reassign
            options = _utils_js__WEBPACK_IMPORTED_MODULE_0__[
              "default"
            ].toFlatObject(
              options,
              {
                metaTokens: true,
                dots: false,
                indexes: false,
              },
              false,
              function defined(option, source) {
                // eslint-disable-next-line no-eq-null,eqeqeq
                return !_utils_js__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ].isUndefined(source[option]);
              }
            );

            const metaTokens = options.metaTokens;
            // eslint-disable-next-line no-use-before-define
            const visitor = options.visitor || defaultVisitor;
            const dots = options.dots;
            const indexes = options.indexes;
            const _Blob = options.Blob || (typeof Blob !== "undefined" && Blob);
            const useBlob =
              _Blob &&
              _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ].isSpecCompliantForm(formData);

            if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(
                visitor
              )
            ) {
              throw new TypeError("visitor must be a function");
            }

            function convertValue(value) {
              if (value === null) return "";

              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isDate(value)
              ) {
                return value.toISOString();
              }

              if (
                !useBlob &&
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(value)
              ) {
                throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ]("Blob is not supported. Use a Buffer instead.");
              }

              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(
                  value
                ) ||
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray(
                  value
                )
              ) {
                return useBlob && typeof Blob === "function"
                  ? new Blob([value])
                  : Buffer.from(value);
              }

              return value;
            }

            /**
             * Default visitor.
             *
             * @param {*} value
             * @param {String|Number} key
             * @param {Array<String|Number>} path
             * @this {FormData}
             *
             * @returns {boolean} return true to visit the each prop of the value recursively
             */
            function defaultVisitor(value, key, path) {
              let arr = value;

              if (value && !path && typeof value === "object") {
                if (
                  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(
                    key,
                    "{}"
                  )
                ) {
                  // eslint-disable-next-line no-param-reassign
                  key = metaTokens ? key : key.slice(0, -2);
                  // eslint-disable-next-line no-param-reassign
                  value = JSON.stringify(value);
                } else if (
                  (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(
                    value
                  ) &&
                    isFlatArray(value)) ||
                  ((_utils_js__WEBPACK_IMPORTED_MODULE_0__[
                    "default"
                  ].isFileList(value) ||
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(
                      key,
                      "[]"
                    )) &&
                    (arr =
                      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toArray(
                        value
                      )))
                ) {
                  // eslint-disable-next-line no-param-reassign
                  key = removeBrackets(key);

                  arr.forEach(function each(el, index) {
                    !(
                      _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                        "default"
                      ].isUndefined(el) || el === null
                    ) &&
                      formData.append(
                        // eslint-disable-next-line no-nested-ternary
                        indexes === true
                          ? renderKey([key], index, dots)
                          : indexes === null
                          ? key
                          : key + "[]",
                        convertValue(el)
                      );
                  });
                  return false;
                }
              }

              if (isVisitable(value)) {
                return true;
              }

              formData.append(renderKey(path, key, dots), convertValue(value));

              return false;
            }

            const stack = [];

            const exposedHelpers = Object.assign(predicates, {
              defaultVisitor,
              convertValue,
              isVisitable,
            });

            function build(value, path) {
              if (
                _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(
                  value
                )
              )
                return;

              if (stack.indexOf(value) !== -1) {
                throw Error("Circular reference detected in " + path.join("."));
              }

              stack.push(value);

              _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(
                value,
                function each(el, key) {
                  const result =
                    !(
                      _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                        "default"
                      ].isUndefined(el) || el === null
                    ) &&
                    visitor.call(
                      formData,
                      el,
                      _utils_js__WEBPACK_IMPORTED_MODULE_0__[
                        "default"
                      ].isString(key)
                        ? key.trim()
                        : key,
                      path,
                      exposedHelpers
                    );

                  if (result === true) {
                    build(el, path ? path.concat(key) : [key]);
                  }
                }
              );

              stack.pop();
            }

            if (
              !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)
            ) {
              throw new TypeError("data must be an object");
            }

            build(obj);

            return formData;
          }

          /* harmony default export */ __webpack_exports__["default"] =
            toFormData;

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js"
          ).Buffer
        );

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/toURLEncodedForm.js":
      /*!************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toURLEncodedForm.js ***!
  \************************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return toURLEncodedForm;
          }
        );
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../utils.js */ "./node_modules/axios/lib/utils.js"
          );
        /* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js"
          );
        /* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js"
          );

        function toURLEncodedForm(data, options) {
          return Object(_toFormData_js__WEBPACK_IMPORTED_MODULE_1__["default"])(
            data,
            new _platform_index_js__WEBPACK_IMPORTED_MODULE_2__[
              "default"
            ].classes.URLSearchParams(),
            Object.assign(
              {
                visitor: function (value, key, path, helpers) {
                  if (
                    _platform_index_js__WEBPACK_IMPORTED_MODULE_2__["default"]
                      .isNode &&
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(
                      value
                    )
                  ) {
                    this.append(key, value.toString("base64"));
                    return false;
                  }

                  return helpers.defaultVisitor.apply(this, arguments);
                },
              },
              options
            )
          );
        }

        /***/
      },

    /***/ "./node_modules/axios/lib/helpers/validator.js":
      /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../env/data.js */ "./node_modules/axios/lib/env/data.js"
          );
        /* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js"
          );

        const validators = {};

        // eslint-disable-next-line func-names
        ["object", "boolean", "number", "function", "string", "symbol"].forEach(
          (type, i) => {
            validators[type] = function validator(thing) {
              return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
            };
          }
        );

        const deprecatedWarnings = {};

        /**
         * Transitional option validator
         *
         * @param {function|boolean?} validator - set to false if the transitional option has been removed
         * @param {string?} version - deprecated version / removed since version
         * @param {string?} message - some message with additional info
         *
         * @returns {function}
         */
        validators.transitional = function transitional(
          validator,
          version,
          message
        ) {
          function formatMessage(opt, desc) {
            return (
              "[Axios v" +
              _env_data_js__WEBPACK_IMPORTED_MODULE_0__["VERSION"] +
              "] Transitional option '" +
              opt +
              "'" +
              desc +
              (message ? ". " + message : "")
            );
          }

          // eslint-disable-next-line func-names
          return (value, opt, opts) => {
            if (validator === false) {
              throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ](
                formatMessage(
                  opt,
                  " has been removed" + (version ? " in " + version : "")
                ),
                _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ].ERR_DEPRECATED
              );
            }

            if (version && !deprecatedWarnings[opt]) {
              deprecatedWarnings[opt] = true;
              // eslint-disable-next-line no-console
              console.warn(
                formatMessage(
                  opt,
                  " has been deprecated since v" +
                    version +
                    " and will be removed in the near future"
                )
              );
            }

            return validator ? validator(value, opt, opts) : true;
          };
        };

        /**
         * Assert object's properties type
         *
         * @param {object} options
         * @param {object} schema
         * @param {boolean?} allowUnknown
         *
         * @returns {object}
         */

        function assertOptions(options, schema, allowUnknown) {
          if (typeof options !== "object") {
            throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
              "default"
            ](
              "options must be an object",
              _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ].ERR_BAD_OPTION_VALUE
            );
          }
          const keys = Object.keys(options);
          let i = keys.length;
          while (i-- > 0) {
            const opt = keys[i];
            const validator = schema[opt];
            if (validator) {
              const value = options[opt];
              const result =
                value === undefined || validator(value, opt, options);
              if (result !== true) {
                throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ](
                  "option " + opt + " must be " + result,
                  _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                    "default"
                  ].ERR_BAD_OPTION_VALUE
                );
              }
              continue;
            }
            if (allowUnknown !== true) {
              throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                "default"
              ](
                "Unknown option " + opt,
                _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ].ERR_BAD_OPTION
              );
            }
          }
        }

        /* harmony default export */ __webpack_exports__["default"] = {
          assertOptions,
          validators,
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/platform/browser/classes/Blob.js":
      /*!*****************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/Blob.js ***!
  \*****************************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);

        /* harmony default export */ __webpack_exports__["default"] =
          typeof Blob !== "undefined" ? Blob : null;

        /***/
      },

    /***/ "./node_modules/axios/lib/platform/browser/classes/FormData.js":
      /*!*********************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/FormData.js ***!
  \*********************************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);

        /* harmony default export */ __webpack_exports__["default"] =
          typeof FormData !== "undefined" ? FormData : null;

        /***/
      },

    /***/ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js":
      /*!****************************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js ***!
  \****************************************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../../../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js"
          );

        /* harmony default export */ __webpack_exports__["default"] =
          typeof URLSearchParams !== "undefined"
            ? URLSearchParams
            : _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ];

        /***/
      },

    /***/ "./node_modules/axios/lib/platform/browser/index.js":
      /*!**********************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/index.js ***!
  \**********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./classes/URLSearchParams.js */ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js"
          );
        /* harmony import */ var _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./classes/FormData.js */ "./node_modules/axios/lib/platform/browser/classes/FormData.js"
          );
        /* harmony import */ var _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./classes/Blob.js */ "./node_modules/axios/lib/platform/browser/classes/Blob.js"
          );

        /* harmony default export */ __webpack_exports__["default"] = {
          isBrowser: true,
          classes: {
            URLSearchParams:
              _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ],
            FormData:
              _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"],
            Blob: _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__["default"],
          },
          protocols: ["http", "https", "file", "blob", "url", "data"],
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/platform/common/utils.js":
      /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/platform/common/utils.js ***!
  \*********************************************************/
      /*! exports provided: hasBrowserEnv, hasStandardBrowserWebWorkerEnv, hasStandardBrowserEnv */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "hasBrowserEnv",
          function () {
            return hasBrowserEnv;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "hasStandardBrowserWebWorkerEnv",
          function () {
            return hasStandardBrowserWebWorkerEnv;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "hasStandardBrowserEnv",
          function () {
            return hasStandardBrowserEnv;
          }
        );
        const hasBrowserEnv =
          typeof window !== "undefined" && typeof document !== "undefined";

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         * nativescript
         *  navigator.product -> 'NativeScript' or 'NS'
         *
         * @returns {boolean}
         */
        const hasStandardBrowserEnv = ((product) => {
          return (
            hasBrowserEnv &&
            ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0
          );
        })(typeof navigator !== "undefined" && navigator.product);

        /**
         * Determine if we're running in a standard browser webWorker environment
         *
         * Although the `isStandardBrowserEnv` method indicates that
         * `allows axios to run in a web worker`, the WebWorker will still be
         * filtered out due to its judgment standard
         * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
         * This leads to a problem when axios post `FormData` in webWorker
         */
        const hasStandardBrowserWebWorkerEnv = (() => {
          return (
            typeof WorkerGlobalScope !== "undefined" &&
            // eslint-disable-next-line no-undef
            self instanceof WorkerGlobalScope &&
            typeof self.importScripts === "function"
          );
        })();

        /***/
      },

    /***/ "./node_modules/axios/lib/platform/index.js":
      /*!**************************************************!*\
  !*** ./node_modules/axios/lib/platform/index.js ***!
  \**************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _node_index_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./node/index.js */ "./node_modules/axios/lib/platform/browser/index.js"
          );
        /* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./common/utils.js */ "./node_modules/axios/lib/platform/common/utils.js"
          );

        /* harmony default export */ __webpack_exports__["default"] = {
          ..._common_utils_js__WEBPACK_IMPORTED_MODULE_1__,
          ..._node_index_js__WEBPACK_IMPORTED_MODULE_0__["default"],
        };

        /***/
      },

    /***/ "./node_modules/axios/lib/utils.js":
      /*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function (global) {
          /* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js"
            );

          // utils is a library of generic helper functions non-specific to axios

          const { toString } = Object.prototype;
          const { getPrototypeOf } = Object;

          const kindOf = ((cache) => (thing) => {
            const str = toString.call(thing);
            return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
          })(Object.create(null));

          const kindOfTest = (type) => {
            type = type.toLowerCase();
            return (thing) => kindOf(thing) === type;
          };

          const typeOfTest = (type) => (thing) => typeof thing === type;

          /**
           * Determine if a value is an Array
           *
           * @param {Object} val The value to test
           *
           * @returns {boolean} True if value is an Array, otherwise false
           */
          const { isArray } = Array;

          /**
           * Determine if a value is undefined
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if the value is undefined, otherwise false
           */
          const isUndefined = typeOfTest("undefined");

          /**
           * Determine if a value is a Buffer
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a Buffer, otherwise false
           */
          function isBuffer(val) {
            return (
              val !== null &&
              !isUndefined(val) &&
              val.constructor !== null &&
              !isUndefined(val.constructor) &&
              isFunction(val.constructor.isBuffer) &&
              val.constructor.isBuffer(val)
            );
          }

          /**
           * Determine if a value is an ArrayBuffer
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is an ArrayBuffer, otherwise false
           */
          const isArrayBuffer = kindOfTest("ArrayBuffer");

          /**
           * Determine if a value is a view on an ArrayBuffer
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
           */
          function isArrayBufferView(val) {
            let result;
            if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
              result = ArrayBuffer.isView(val);
            } else {
              result = val && val.buffer && isArrayBuffer(val.buffer);
            }
            return result;
          }

          /**
           * Determine if a value is a String
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a String, otherwise false
           */
          const isString = typeOfTest("string");

          /**
           * Determine if a value is a Function
           *
           * @param {*} val The value to test
           * @returns {boolean} True if value is a Function, otherwise false
           */
          const isFunction = typeOfTest("function");

          /**
           * Determine if a value is a Number
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a Number, otherwise false
           */
          const isNumber = typeOfTest("number");

          /**
           * Determine if a value is an Object
           *
           * @param {*} thing The value to test
           *
           * @returns {boolean} True if value is an Object, otherwise false
           */
          const isObject = (thing) =>
            thing !== null && typeof thing === "object";

          /**
           * Determine if a value is a Boolean
           *
           * @param {*} thing The value to test
           * @returns {boolean} True if value is a Boolean, otherwise false
           */
          const isBoolean = (thing) => thing === true || thing === false;

          /**
           * Determine if a value is a plain Object
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a plain Object, otherwise false
           */
          const isPlainObject = (val) => {
            if (kindOf(val) !== "object") {
              return false;
            }

            const prototype = getPrototypeOf(val);
            return (
              (prototype === null ||
                prototype === Object.prototype ||
                Object.getPrototypeOf(prototype) === null) &&
              !(Symbol.toStringTag in val) &&
              !(Symbol.iterator in val)
            );
          };

          /**
           * Determine if a value is a Date
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a Date, otherwise false
           */
          const isDate = kindOfTest("Date");

          /**
           * Determine if a value is a File
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a File, otherwise false
           */
          const isFile = kindOfTest("File");

          /**
           * Determine if a value is a Blob
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a Blob, otherwise false
           */
          const isBlob = kindOfTest("Blob");

          /**
           * Determine if a value is a FileList
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a File, otherwise false
           */
          const isFileList = kindOfTest("FileList");

          /**
           * Determine if a value is a Stream
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a Stream, otherwise false
           */
          const isStream = (val) => isObject(val) && isFunction(val.pipe);

          /**
           * Determine if a value is a FormData
           *
           * @param {*} thing The value to test
           *
           * @returns {boolean} True if value is an FormData, otherwise false
           */
          const isFormData = (thing) => {
            let kind;
            return (
              thing &&
              ((typeof FormData === "function" && thing instanceof FormData) ||
                (isFunction(thing.append) &&
                  ((kind = kindOf(thing)) === "formdata" ||
                    // detect form-data instance
                    (kind === "object" &&
                      isFunction(thing.toString) &&
                      thing.toString() === "[object FormData]"))))
            );
          };

          /**
           * Determine if a value is a URLSearchParams object
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a URLSearchParams object, otherwise false
           */
          const isURLSearchParams = kindOfTest("URLSearchParams");

          /**
           * Trim excess whitespace off the beginning and end of a string
           *
           * @param {String} str The String to trim
           *
           * @returns {String} The String freed of excess whitespace
           */
          const trim = (str) =>
            str.trim
              ? str.trim()
              : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");

          /**
           * Iterate over an Array or an Object invoking a function for each item.
           *
           * If `obj` is an Array callback will be called passing
           * the value, index, and complete array for each item.
           *
           * If 'obj' is an Object callback will be called passing
           * the value, key, and complete object for each property.
           *
           * @param {Object|Array} obj The object to iterate
           * @param {Function} fn The callback to invoke for each item
           *
           * @param {Boolean} [allOwnKeys = false]
           * @returns {any}
           */
          function forEach(obj, fn, { allOwnKeys = false } = {}) {
            // Don't bother if no value provided
            if (obj === null || typeof obj === "undefined") {
              return;
            }

            let i;
            let l;

            // Force an array if not already something iterable
            if (typeof obj !== "object") {
              /*eslint no-param-reassign:0*/
              obj = [obj];
            }

            if (isArray(obj)) {
              // Iterate over array values
              for (i = 0, l = obj.length; i < l; i++) {
                fn.call(null, obj[i], i, obj);
              }
            } else {
              // Iterate over object keys
              const keys = allOwnKeys
                ? Object.getOwnPropertyNames(obj)
                : Object.keys(obj);
              const len = keys.length;
              let key;

              for (i = 0; i < len; i++) {
                key = keys[i];
                fn.call(null, obj[key], key, obj);
              }
            }
          }

          function findKey(obj, key) {
            key = key.toLowerCase();
            const keys = Object.keys(obj);
            let i = keys.length;
            let _key;
            while (i-- > 0) {
              _key = keys[i];
              if (key === _key.toLowerCase()) {
                return _key;
              }
            }
            return null;
          }

          const _global = (() => {
            /*eslint no-undef:0*/
            if (typeof globalThis !== "undefined") return globalThis;
            return typeof self !== "undefined"
              ? self
              : typeof window !== "undefined"
              ? window
              : global;
          })();

          const isContextDefined = (context) =>
            !isUndefined(context) && context !== _global;

          /**
           * Accepts varargs expecting each argument to be an object, then
           * immutably merges the properties of each object and returns result.
           *
           * When multiple objects contain the same key the later object in
           * the arguments list will take precedence.
           *
           * Example:
           *
           * ```js
           * var result = merge({foo: 123}, {foo: 456});
           * console.log(result.foo); // outputs 456
           * ```
           *
           * @param {Object} obj1 Object to merge
           *
           * @returns {Object} Result of all merge properties
           */
          function merge(/* obj1, obj2, obj3, ... */) {
            const { caseless } = (isContextDefined(this) && this) || {};
            const result = {};
            const assignValue = (val, key) => {
              const targetKey = (caseless && findKey(result, key)) || key;
              if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
                result[targetKey] = merge(result[targetKey], val);
              } else if (isPlainObject(val)) {
                result[targetKey] = merge({}, val);
              } else if (isArray(val)) {
                result[targetKey] = val.slice();
              } else {
                result[targetKey] = val;
              }
            };

            for (let i = 0, l = arguments.length; i < l; i++) {
              arguments[i] && forEach(arguments[i], assignValue);
            }
            return result;
          }

          /**
           * Extends object a by mutably adding to it the properties of object b.
           *
           * @param {Object} a The object to be extended
           * @param {Object} b The object to copy properties from
           * @param {Object} thisArg The object to bind function to
           *
           * @param {Boolean} [allOwnKeys]
           * @returns {Object} The resulting value of object a
           */
          const extend = (a, b, thisArg, { allOwnKeys } = {}) => {
            forEach(
              b,
              (val, key) => {
                if (thisArg && isFunction(val)) {
                  a[key] = Object(
                    _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__["default"]
                  )(val, thisArg);
                } else {
                  a[key] = val;
                }
              },
              { allOwnKeys }
            );
            return a;
          };

          /**
           * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
           *
           * @param {string} content with BOM
           *
           * @returns {string} content value without BOM
           */
          const stripBOM = (content) => {
            if (content.charCodeAt(0) === 0xfeff) {
              content = content.slice(1);
            }
            return content;
          };

          /**
           * Inherit the prototype methods from one constructor into another
           * @param {function} constructor
           * @param {function} superConstructor
           * @param {object} [props]
           * @param {object} [descriptors]
           *
           * @returns {void}
           */
          const inherits = (
            constructor,
            superConstructor,
            props,
            descriptors
          ) => {
            constructor.prototype = Object.create(
              superConstructor.prototype,
              descriptors
            );
            constructor.prototype.constructor = constructor;
            Object.defineProperty(constructor, "super", {
              value: superConstructor.prototype,
            });
            props && Object.assign(constructor.prototype, props);
          };

          /**
           * Resolve object with deep prototype chain to a flat object
           * @param {Object} sourceObj source object
           * @param {Object} [destObj]
           * @param {Function|Boolean} [filter]
           * @param {Function} [propFilter]
           *
           * @returns {Object}
           */
          const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
            let props;
            let i;
            let prop;
            const merged = {};

            destObj = destObj || {};
            // eslint-disable-next-line no-eq-null,eqeqeq
            if (sourceObj == null) return destObj;

            do {
              props = Object.getOwnPropertyNames(sourceObj);
              i = props.length;
              while (i-- > 0) {
                prop = props[i];
                if (
                  (!propFilter || propFilter(prop, sourceObj, destObj)) &&
                  !merged[prop]
                ) {
                  destObj[prop] = sourceObj[prop];
                  merged[prop] = true;
                }
              }
              sourceObj = filter !== false && getPrototypeOf(sourceObj);
            } while (
              sourceObj &&
              (!filter || filter(sourceObj, destObj)) &&
              sourceObj !== Object.prototype
            );

            return destObj;
          };

          /**
           * Determines whether a string ends with the characters of a specified string
           *
           * @param {String} str
           * @param {String} searchString
           * @param {Number} [position= 0]
           *
           * @returns {boolean}
           */
          const endsWith = (str, searchString, position) => {
            str = String(str);
            if (position === undefined || position > str.length) {
              position = str.length;
            }
            position -= searchString.length;
            const lastIndex = str.indexOf(searchString, position);
            return lastIndex !== -1 && lastIndex === position;
          };

          /**
           * Returns new array from array like object or null if failed
           *
           * @param {*} [thing]
           *
           * @returns {?Array}
           */
          const toArray = (thing) => {
            if (!thing) return null;
            if (isArray(thing)) return thing;
            let i = thing.length;
            if (!isNumber(i)) return null;
            const arr = new Array(i);
            while (i-- > 0) {
              arr[i] = thing[i];
            }
            return arr;
          };

          /**
           * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
           * thing passed in is an instance of Uint8Array
           *
           * @param {TypedArray}
           *
           * @returns {Array}
           */
          // eslint-disable-next-line func-names
          const isTypedArray = ((TypedArray) => {
            // eslint-disable-next-line func-names
            return (thing) => {
              return TypedArray && thing instanceof TypedArray;
            };
          })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));

          /**
           * For each entry in the object, call the function with the key and value.
           *
           * @param {Object<any, any>} obj - The object to iterate over.
           * @param {Function} fn - The function to call for each entry.
           *
           * @returns {void}
           */
          const forEachEntry = (obj, fn) => {
            const generator = obj && obj[Symbol.iterator];

            const iterator = generator.call(obj);

            let result;

            while ((result = iterator.next()) && !result.done) {
              const pair = result.value;
              fn.call(obj, pair[0], pair[1]);
            }
          };

          /**
           * It takes a regular expression and a string, and returns an array of all the matches
           *
           * @param {string} regExp - The regular expression to match against.
           * @param {string} str - The string to search.
           *
           * @returns {Array<boolean>}
           */
          const matchAll = (regExp, str) => {
            let matches;
            const arr = [];

            while ((matches = regExp.exec(str)) !== null) {
              arr.push(matches);
            }

            return arr;
          };

          /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
          const isHTMLForm = kindOfTest("HTMLFormElement");

          const toCamelCase = (str) => {
            return str
              .toLowerCase()
              .replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
                return p1.toUpperCase() + p2;
              });
          };

          /* Creating a function that will check if an object has a property. */
          const hasOwnProperty = (
            ({ hasOwnProperty }) =>
            (obj, prop) =>
              hasOwnProperty.call(obj, prop)
          )(Object.prototype);

          /**
           * Determine if a value is a RegExp object
           *
           * @param {*} val The value to test
           *
           * @returns {boolean} True if value is a RegExp object, otherwise false
           */
          const isRegExp = kindOfTest("RegExp");

          const reduceDescriptors = (obj, reducer) => {
            const descriptors = Object.getOwnPropertyDescriptors(obj);
            const reducedDescriptors = {};

            forEach(descriptors, (descriptor, name) => {
              let ret;
              if ((ret = reducer(descriptor, name, obj)) !== false) {
                reducedDescriptors[name] = ret || descriptor;
              }
            });

            Object.defineProperties(obj, reducedDescriptors);
          };

          /**
           * Makes all methods read-only
           * @param {Object} obj
           */

          const freezeMethods = (obj) => {
            reduceDescriptors(obj, (descriptor, name) => {
              // skip restricted props in strict mode
              if (
                isFunction(obj) &&
                ["arguments", "caller", "callee"].indexOf(name) !== -1
              ) {
                return false;
              }

              const value = obj[name];

              if (!isFunction(value)) return;

              descriptor.enumerable = false;

              if ("writable" in descriptor) {
                descriptor.writable = false;
                return;
              }

              if (!descriptor.set) {
                descriptor.set = () => {
                  throw Error(
                    "Can not rewrite read-only method '" + name + "'"
                  );
                };
              }
            });
          };

          const toObjectSet = (arrayOrString, delimiter) => {
            const obj = {};

            const define = (arr) => {
              arr.forEach((value) => {
                obj[value] = true;
              });
            };

            isArray(arrayOrString)
              ? define(arrayOrString)
              : define(String(arrayOrString).split(delimiter));

            return obj;
          };

          const noop = () => {};

          const toFiniteNumber = (value, defaultValue) => {
            value = +value;
            return Number.isFinite(value) ? value : defaultValue;
          };

          const ALPHA = "abcdefghijklmnopqrstuvwxyz";

          const DIGIT = "0123456789";

          const ALPHABET = {
            DIGIT,
            ALPHA,
            ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT,
          };

          const generateString = (
            size = 16,
            alphabet = ALPHABET.ALPHA_DIGIT
          ) => {
            let str = "";
            const { length } = alphabet;
            while (size--) {
              str += alphabet[(Math.random() * length) | 0];
            }

            return str;
          };

          /**
           * If the thing is a FormData object, return true, otherwise return false.
           *
           * @param {unknown} thing - The thing to check.
           *
           * @returns {boolean}
           */
          function isSpecCompliantForm(thing) {
            return !!(
              thing &&
              isFunction(thing.append) &&
              thing[Symbol.toStringTag] === "FormData" &&
              thing[Symbol.iterator]
            );
          }

          const toJSONObject = (obj) => {
            const stack = new Array(10);

            const visit = (source, i) => {
              if (isObject(source)) {
                if (stack.indexOf(source) >= 0) {
                  return;
                }

                if (!("toJSON" in source)) {
                  stack[i] = source;
                  const target = isArray(source) ? [] : {};

                  forEach(source, (value, key) => {
                    const reducedValue = visit(value, i + 1);
                    !isUndefined(reducedValue) && (target[key] = reducedValue);
                  });

                  stack[i] = undefined;

                  return target;
                }
              }

              return source;
            };

            return visit(obj, 0);
          };

          const isAsyncFn = kindOfTest("AsyncFunction");

          const isThenable = (thing) =>
            thing &&
            (isObject(thing) || isFunction(thing)) &&
            isFunction(thing.then) &&
            isFunction(thing.catch);

          /* harmony default export */ __webpack_exports__["default"] = {
            isArray,
            isArrayBuffer,
            isBuffer,
            isFormData,
            isArrayBufferView,
            isString,
            isNumber,
            isBoolean,
            isObject,
            isPlainObject,
            isUndefined,
            isDate,
            isFile,
            isBlob,
            isRegExp,
            isFunction,
            isStream,
            isURLSearchParams,
            isTypedArray,
            isFileList,
            forEach,
            merge,
            extend,
            trim,
            stripBOM,
            inherits,
            toFlatObject,
            kindOf,
            kindOfTest,
            endsWith,
            toArray,
            forEachEntry,
            matchAll,
            isHTMLForm,
            hasOwnProperty,
            hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
            reduceDescriptors,
            freezeMethods,
            toObjectSet,
            toCamelCase,
            noop,
            toFiniteNumber,
            findKey,
            global: _global,
            isContextDefined,
            ALPHABET,
            generateString,
            isSpecCompliantForm,
            toJSONObject,
            isAsyncFn,
            isThenable,
          };

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
          )
        );

        /***/
      },

    /***/ "./node_modules/base64-js/index.js":
      /*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
      /*! no static exports found */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        exports.byteLength = byteLength;
        exports.toByteArray = toByteArray;
        exports.fromByteArray = fromByteArray;

        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

        var code =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i];
          revLookup[code.charCodeAt(i)] = i;
        }

        // Support decoding URL-safe base64 strings, as Node.js does.
        // See: https://en.wikipedia.org/wiki/Base64#URL_applications
        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;

        function getLens(b64) {
          var len = b64.length;

          if (len % 4 > 0) {
            throw new Error("Invalid string. Length must be a multiple of 4");
          }

          // Trim off extra bytes after placeholder bytes are found
          // See: https://github.com/beatgammit/base64-js/issues/42
          var validLen = b64.indexOf("=");
          if (validLen === -1) validLen = len;

          var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);

          return [validLen, placeHoldersLen];
        }

        // base64 is 4/3 + up to two characters of the original data
        function byteLength(b64) {
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
        }

        function _byteLength(b64, validLen, placeHoldersLen) {
          return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
        }

        function toByteArray(b64) {
          var tmp;
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];

          var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

          var curByte = 0;

          // if there are placeholders, only get up to the last complete 4 chars
          var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

          var i;
          for (i = 0; i < len; i += 4) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 18) |
              (revLookup[b64.charCodeAt(i + 1)] << 12) |
              (revLookup[b64.charCodeAt(i + 2)] << 6) |
              revLookup[b64.charCodeAt(i + 3)];
            arr[curByte++] = (tmp >> 16) & 0xff;
            arr[curByte++] = (tmp >> 8) & 0xff;
            arr[curByte++] = tmp & 0xff;
          }

          if (placeHoldersLen === 2) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 2) |
              (revLookup[b64.charCodeAt(i + 1)] >> 4);
            arr[curByte++] = tmp & 0xff;
          }

          if (placeHoldersLen === 1) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 10) |
              (revLookup[b64.charCodeAt(i + 1)] << 4) |
              (revLookup[b64.charCodeAt(i + 2)] >> 2);
            arr[curByte++] = (tmp >> 8) & 0xff;
            arr[curByte++] = tmp & 0xff;
          }

          return arr;
        }

        function tripletToBase64(num) {
          return (
            lookup[(num >> 18) & 0x3f] +
            lookup[(num >> 12) & 0x3f] +
            lookup[(num >> 6) & 0x3f] +
            lookup[num & 0x3f]
          );
        }

        function encodeChunk(uint8, start, end) {
          var tmp;
          var output = [];
          for (var i = start; i < end; i += 3) {
            tmp =
              ((uint8[i] << 16) & 0xff0000) +
              ((uint8[i + 1] << 8) & 0xff00) +
              (uint8[i + 2] & 0xff);
            output.push(tripletToBase64(tmp));
          }
          return output.join("");
        }

        function fromByteArray(uint8) {
          var tmp;
          var len = uint8.length;
          var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
          var parts = [];
          var maxChunkLength = 16383; // must be multiple of 3

          // go through the array every three bytes, we'll deal with trailing stuff later
          for (
            var i = 0, len2 = len - extraBytes;
            i < len2;
            i += maxChunkLength
          ) {
            parts.push(
              encodeChunk(
                uint8,
                i,
                i + maxChunkLength > len2 ? len2 : i + maxChunkLength
              )
            );
          }

          // pad the end with zeros, but make sure to not forget the extra bytes
          if (extraBytes === 1) {
            tmp = uint8[len - 1];
            parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "==");
          } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + uint8[len - 1];
            parts.push(
              lookup[tmp >> 10] +
                lookup[(tmp >> 4) & 0x3f] +
                lookup[(tmp << 2) & 0x3f] +
                "="
            );
          }

          return parts.join("");
        }

        /***/
      },

    /***/ "./node_modules/buffer/index.js":
      /*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
      /*! no static exports found */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function (global) {
          /*!
           * The buffer module from node.js, for the browser.
           *
           * @author   Feross Aboukhadijeh <http://feross.org>
           * @license  MIT
           */
          /* eslint-disable no-proto */

          var base64 = __webpack_require__(
            /*! base64-js */ "./node_modules/base64-js/index.js"
          );
          var ieee754 = __webpack_require__(
            /*! ieee754 */ "./node_modules/ieee754/index.js"
          );
          var isArray = __webpack_require__(
            /*! isarray */ "./node_modules/isarray/index.js"
          );

          exports.Buffer = Buffer;
          exports.SlowBuffer = SlowBuffer;
          exports.INSPECT_MAX_BYTES = 50;

          /**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
          Buffer.TYPED_ARRAY_SUPPORT =
            global.TYPED_ARRAY_SUPPORT !== undefined
              ? global.TYPED_ARRAY_SUPPORT
              : typedArraySupport();

          /*
           * Export kMaxLength after typed array support is determined.
           */
          exports.kMaxLength = kMaxLength();

          function typedArraySupport() {
            try {
              var arr = new Uint8Array(1);
              arr.__proto__ = {
                __proto__: Uint8Array.prototype,
                foo: function () {
                  return 42;
                },
              };
              return (
                arr.foo() === 42 && // typed array instances can be augmented
                typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
                arr.subarray(1, 1).byteLength === 0
              ); // ie10 has broken `subarray`
            } catch (e) {
              return false;
            }
          }

          function kMaxLength() {
            return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
          }

          function createBuffer(that, length) {
            if (kMaxLength() < length) {
              throw new RangeError("Invalid typed array length");
            }
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              // Return an augmented `Uint8Array` instance, for best performance
              that = new Uint8Array(length);
              that.__proto__ = Buffer.prototype;
            } else {
              // Fallback: Return an object instance of the Buffer class
              if (that === null) {
                that = new Buffer(length);
              }
              that.length = length;
            }

            return that;
          }

          /**
           * The Buffer constructor returns instances of `Uint8Array` that have their
           * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
           * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
           * and the `Uint8Array` methods. Square bracket notation works as expected -- it
           * returns a single octet.
           *
           * The `Uint8Array` prototype remains unmodified.
           */

          function Buffer(arg, encodingOrOffset, length) {
            if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
              return new Buffer(arg, encodingOrOffset, length);
            }

            // Common case.
            if (typeof arg === "number") {
              if (typeof encodingOrOffset === "string") {
                throw new Error(
                  "If encoding is specified then the first argument must be a string"
                );
              }
              return allocUnsafe(this, arg);
            }
            return from(this, arg, encodingOrOffset, length);
          }

          Buffer.poolSize = 8192; // not used by this implementation

          // TODO: Legacy, not needed anymore. Remove in next major version.
          Buffer._augment = function (arr) {
            arr.__proto__ = Buffer.prototype;
            return arr;
          };

          function from(that, value, encodingOrOffset, length) {
            if (typeof value === "number") {
              throw new TypeError('"value" argument must not be a number');
            }

            if (
              typeof ArrayBuffer !== "undefined" &&
              value instanceof ArrayBuffer
            ) {
              return fromArrayBuffer(that, value, encodingOrOffset, length);
            }

            if (typeof value === "string") {
              return fromString(that, value, encodingOrOffset);
            }

            return fromObject(that, value);
          }

          /**
           * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
           * if value is a number.
           * Buffer.from(str[, encoding])
           * Buffer.from(array)
           * Buffer.from(buffer)
           * Buffer.from(arrayBuffer[, byteOffset[, length]])
           **/
          Buffer.from = function (value, encodingOrOffset, length) {
            return from(null, value, encodingOrOffset, length);
          };

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            Buffer.prototype.__proto__ = Uint8Array.prototype;
            Buffer.__proto__ = Uint8Array;
            if (
              typeof Symbol !== "undefined" &&
              Symbol.species &&
              Buffer[Symbol.species] === Buffer
            ) {
              // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
              Object.defineProperty(Buffer, Symbol.species, {
                value: null,
                configurable: true,
              });
            }
          }

          function assertSize(size) {
            if (typeof size !== "number") {
              throw new TypeError('"size" argument must be a number');
            } else if (size < 0) {
              throw new RangeError('"size" argument must not be negative');
            }
          }

          function alloc(that, size, fill, encoding) {
            assertSize(size);
            if (size <= 0) {
              return createBuffer(that, size);
            }
            if (fill !== undefined) {
              // Only pay attention to encoding if it's a string. This
              // prevents accidentally sending in a number that would
              // be interpretted as a start offset.
              return typeof encoding === "string"
                ? createBuffer(that, size).fill(fill, encoding)
                : createBuffer(that, size).fill(fill);
            }
            return createBuffer(that, size);
          }

          /**
           * Creates a new filled Buffer instance.
           * alloc(size[, fill[, encoding]])
           **/
          Buffer.alloc = function (size, fill, encoding) {
            return alloc(null, size, fill, encoding);
          };

          function allocUnsafe(that, size) {
            assertSize(size);
            that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
            if (!Buffer.TYPED_ARRAY_SUPPORT) {
              for (var i = 0; i < size; ++i) {
                that[i] = 0;
              }
            }
            return that;
          }

          /**
           * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
           * */
          Buffer.allocUnsafe = function (size) {
            return allocUnsafe(null, size);
          };
          /**
           * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
           */
          Buffer.allocUnsafeSlow = function (size) {
            return allocUnsafe(null, size);
          };

          function fromString(that, string, encoding) {
            if (typeof encoding !== "string" || encoding === "") {
              encoding = "utf8";
            }

            if (!Buffer.isEncoding(encoding)) {
              throw new TypeError('"encoding" must be a valid string encoding');
            }

            var length = byteLength(string, encoding) | 0;
            that = createBuffer(that, length);

            var actual = that.write(string, encoding);

            if (actual !== length) {
              // Writing a hex string, for example, that contains invalid characters will
              // cause everything after the first invalid character to be ignored. (e.g.
              // 'abxxcd' will be treated as 'ab')
              that = that.slice(0, actual);
            }

            return that;
          }

          function fromArrayLike(that, array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0;
            that = createBuffer(that, length);
            for (var i = 0; i < length; i += 1) {
              that[i] = array[i] & 255;
            }
            return that;
          }

          function fromArrayBuffer(that, array, byteOffset, length) {
            array.byteLength; // this throws if `array` is not a valid ArrayBuffer

            if (byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError("'offset' is out of bounds");
            }

            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError("'length' is out of bounds");
            }

            if (byteOffset === undefined && length === undefined) {
              array = new Uint8Array(array);
            } else if (length === undefined) {
              array = new Uint8Array(array, byteOffset);
            } else {
              array = new Uint8Array(array, byteOffset, length);
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              // Return an augmented `Uint8Array` instance, for best performance
              that = array;
              that.__proto__ = Buffer.prototype;
            } else {
              // Fallback: Return an object instance of the Buffer class
              that = fromArrayLike(that, array);
            }
            return that;
          }

          function fromObject(that, obj) {
            if (Buffer.isBuffer(obj)) {
              var len = checked(obj.length) | 0;
              that = createBuffer(that, len);

              if (that.length === 0) {
                return that;
              }

              obj.copy(that, 0, 0, len);
              return that;
            }

            if (obj) {
              if (
                (typeof ArrayBuffer !== "undefined" &&
                  obj.buffer instanceof ArrayBuffer) ||
                "length" in obj
              ) {
                if (typeof obj.length !== "number" || isnan(obj.length)) {
                  return createBuffer(that, 0);
                }
                return fromArrayLike(that, obj);
              }

              if (obj.type === "Buffer" && isArray(obj.data)) {
                return fromArrayLike(that, obj.data);
              }
            }

            throw new TypeError(
              "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
            );
          }

          function checked(length) {
            // Note: cannot use `length < kMaxLength()` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= kMaxLength()) {
              throw new RangeError(
                "Attempt to allocate Buffer larger than maximum " +
                  "size: 0x" +
                  kMaxLength().toString(16) +
                  " bytes"
              );
            }
            return length | 0;
          }

          function SlowBuffer(length) {
            if (+length != length) {
              // eslint-disable-line eqeqeq
              length = 0;
            }
            return Buffer.alloc(+length);
          }

          Buffer.isBuffer = function isBuffer(b) {
            return !!(b != null && b._isBuffer);
          };

          Buffer.compare = function compare(a, b) {
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
              throw new TypeError("Arguments must be Buffers");
            }

            if (a === b) return 0;

            var x = a.length;
            var y = b.length;

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i];
                y = b[i];
                break;
              }
            }

            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          };

          Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          };

          Buffer.concat = function concat(list, length) {
            if (!isArray(list)) {
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            }

            if (list.length === 0) {
              return Buffer.alloc(0);
            }

            var i;
            if (length === undefined) {
              length = 0;
              for (i = 0; i < list.length; ++i) {
                length += list[i].length;
              }
            }

            var buffer = Buffer.allocUnsafe(length);
            var pos = 0;
            for (i = 0; i < list.length; ++i) {
              var buf = list[i];
              if (!Buffer.isBuffer(buf)) {
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                );
              }
              buf.copy(buffer, pos);
              pos += buf.length;
            }
            return buffer;
          };

          function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) {
              return string.length;
            }
            if (
              typeof ArrayBuffer !== "undefined" &&
              typeof ArrayBuffer.isView === "function" &&
              (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
            ) {
              return string.byteLength;
            }
            if (typeof string !== "string") {
              string = "" + string;
            }

            var len = string.length;
            if (len === 0) return 0;

            // Use a for loop to avoid recursion
            var loweredCase = false;
            for (;;) {
              switch (encoding) {
                case "ascii":
                case "latin1":
                case "binary":
                  return len;
                case "utf8":
                case "utf-8":
                case undefined:
                  return utf8ToBytes(string).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return len * 2;
                case "hex":
                  return len >>> 1;
                case "base64":
                  return base64ToBytes(string).length;
                default:
                  if (loweredCase) return utf8ToBytes(string).length; // assume utf8
                  encoding = ("" + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          }
          Buffer.byteLength = byteLength;

          function slowToString(encoding, start, end) {
            var loweredCase = false;

            // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.

            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
            if (start === undefined || start < 0) {
              start = 0;
            }
            // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.
            if (start > this.length) {
              return "";
            }

            if (end === undefined || end > this.length) {
              end = this.length;
            }

            if (end <= 0) {
              return "";
            }

            // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
            end >>>= 0;
            start >>>= 0;

            if (end <= start) {
              return "";
            }

            if (!encoding) encoding = "utf8";

            while (true) {
              switch (encoding) {
                case "hex":
                  return hexSlice(this, start, end);

                case "utf8":
                case "utf-8":
                  return utf8Slice(this, start, end);

                case "ascii":
                  return asciiSlice(this, start, end);

                case "latin1":
                case "binary":
                  return latin1Slice(this, start, end);

                case "base64":
                  return base64Slice(this, start, end);

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return utf16leSlice(this, start, end);

                default:
                  if (loweredCase)
                    throw new TypeError("Unknown encoding: " + encoding);
                  encoding = (encoding + "").toLowerCase();
                  loweredCase = true;
              }
            }
          }

          // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
          // Buffer instances.
          Buffer.prototype._isBuffer = true;

          function swap(b, n, m) {
            var i = b[n];
            b[n] = b[m];
            b[m] = i;
          }

          Buffer.prototype.swap16 = function swap16() {
            var len = this.length;
            if (len % 2 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            }
            for (var i = 0; i < len; i += 2) {
              swap(this, i, i + 1);
            }
            return this;
          };

          Buffer.prototype.swap32 = function swap32() {
            var len = this.length;
            if (len % 4 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            }
            for (var i = 0; i < len; i += 4) {
              swap(this, i, i + 3);
              swap(this, i + 1, i + 2);
            }
            return this;
          };

          Buffer.prototype.swap64 = function swap64() {
            var len = this.length;
            if (len % 8 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            }
            for (var i = 0; i < len; i += 8) {
              swap(this, i, i + 7);
              swap(this, i + 1, i + 6);
              swap(this, i + 2, i + 5);
              swap(this, i + 3, i + 4);
            }
            return this;
          };

          Buffer.prototype.toString = function toString() {
            var length = this.length | 0;
            if (length === 0) return "";
            if (arguments.length === 0) return utf8Slice(this, 0, length);
            return slowToString.apply(this, arguments);
          };

          Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b))
              throw new TypeError("Argument must be a Buffer");
            if (this === b) return true;
            return Buffer.compare(this, b) === 0;
          };

          Buffer.prototype.inspect = function inspect() {
            var str = "";
            var max = exports.INSPECT_MAX_BYTES;
            if (this.length > 0) {
              str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
              if (this.length > max) str += " ... ";
            }
            return "<Buffer " + str + ">";
          };

          Buffer.prototype.compare = function compare(
            target,
            start,
            end,
            thisStart,
            thisEnd
          ) {
            if (!Buffer.isBuffer(target)) {
              throw new TypeError("Argument must be a Buffer");
            }

            if (start === undefined) {
              start = 0;
            }
            if (end === undefined) {
              end = target ? target.length : 0;
            }
            if (thisStart === undefined) {
              thisStart = 0;
            }
            if (thisEnd === undefined) {
              thisEnd = this.length;
            }

            if (
              start < 0 ||
              end > target.length ||
              thisStart < 0 ||
              thisEnd > this.length
            ) {
              throw new RangeError("out of range index");
            }

            if (thisStart >= thisEnd && start >= end) {
              return 0;
            }
            if (thisStart >= thisEnd) {
              return -1;
            }
            if (start >= end) {
              return 1;
            }

            start >>>= 0;
            end >>>= 0;
            thisStart >>>= 0;
            thisEnd >>>= 0;

            if (this === target) return 0;

            var x = thisEnd - thisStart;
            var y = end - start;
            var len = Math.min(x, y);

            var thisCopy = this.slice(thisStart, thisEnd);
            var targetCopy = target.slice(start, end);

            for (var i = 0; i < len; ++i) {
              if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i];
                y = targetCopy[i];
                break;
              }
            }

            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          };

          // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
          //
          // Arguments:
          // - buffer - a Buffer to search
          // - val - a string, Buffer, or number
          // - byteOffset - an index into `buffer`; will be clamped to an int32
          // - encoding - an optional encoding, relevant is val is a string
          // - dir - true for indexOf, false for lastIndexOf
          function bidirectionalIndexOf(
            buffer,
            val,
            byteOffset,
            encoding,
            dir
          ) {
            // Empty buffer means no match
            if (buffer.length === 0) return -1;

            // Normalize byteOffset
            if (typeof byteOffset === "string") {
              encoding = byteOffset;
              byteOffset = 0;
            } else if (byteOffset > 0x7fffffff) {
              byteOffset = 0x7fffffff;
            } else if (byteOffset < -0x80000000) {
              byteOffset = -0x80000000;
            }
            byteOffset = +byteOffset; // Coerce to Number.
            if (isNaN(byteOffset)) {
              // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
              byteOffset = dir ? 0 : buffer.length - 1;
            }

            // Normalize byteOffset: negative offsets start from the end of the buffer
            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
            if (byteOffset >= buffer.length) {
              if (dir) return -1;
              else byteOffset = buffer.length - 1;
            } else if (byteOffset < 0) {
              if (dir) byteOffset = 0;
              else return -1;
            }

            // Normalize val
            if (typeof val === "string") {
              val = Buffer.from(val, encoding);
            }

            // Finally, search either indexOf (if dir is true) or lastIndexOf
            if (Buffer.isBuffer(val)) {
              // Special case: looking for empty string/buffer always fails
              if (val.length === 0) {
                return -1;
              }
              return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
            } else if (typeof val === "number") {
              val = val & 0xff; // Search for a byte value [0-255]
              if (
                Buffer.TYPED_ARRAY_SUPPORT &&
                typeof Uint8Array.prototype.indexOf === "function"
              ) {
                if (dir) {
                  return Uint8Array.prototype.indexOf.call(
                    buffer,
                    val,
                    byteOffset
                  );
                } else {
                  return Uint8Array.prototype.lastIndexOf.call(
                    buffer,
                    val,
                    byteOffset
                  );
                }
              }
              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
            }

            throw new TypeError("val must be string, number or Buffer");
          }

          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1;
            var arrLength = arr.length;
            var valLength = val.length;

            if (encoding !== undefined) {
              encoding = String(encoding).toLowerCase();
              if (
                encoding === "ucs2" ||
                encoding === "ucs-2" ||
                encoding === "utf16le" ||
                encoding === "utf-16le"
              ) {
                if (arr.length < 2 || val.length < 2) {
                  return -1;
                }
                indexSize = 2;
                arrLength /= 2;
                valLength /= 2;
                byteOffset /= 2;
              }
            }

            function read(buf, i) {
              if (indexSize === 1) {
                return buf[i];
              } else {
                return buf.readUInt16BE(i * indexSize);
              }
            }

            var i;
            if (dir) {
              var foundIndex = -1;
              for (i = byteOffset; i < arrLength; i++) {
                if (
                  read(arr, i) ===
                  read(val, foundIndex === -1 ? 0 : i - foundIndex)
                ) {
                  if (foundIndex === -1) foundIndex = i;
                  if (i - foundIndex + 1 === valLength)
                    return foundIndex * indexSize;
                } else {
                  if (foundIndex !== -1) i -= i - foundIndex;
                  foundIndex = -1;
                }
              }
            } else {
              if (byteOffset + valLength > arrLength)
                byteOffset = arrLength - valLength;
              for (i = byteOffset; i >= 0; i--) {
                var found = true;
                for (var j = 0; j < valLength; j++) {
                  if (read(arr, i + j) !== read(val, j)) {
                    found = false;
                    break;
                  }
                }
                if (found) return i;
              }
            }

            return -1;
          }

          Buffer.prototype.includes = function includes(
            val,
            byteOffset,
            encoding
          ) {
            return this.indexOf(val, byteOffset, encoding) !== -1;
          };

          Buffer.prototype.indexOf = function indexOf(
            val,
            byteOffset,
            encoding
          ) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
          };

          Buffer.prototype.lastIndexOf = function lastIndexOf(
            val,
            byteOffset,
            encoding
          ) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
          };

          function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0;
            var remaining = buf.length - offset;
            if (!length) {
              length = remaining;
            } else {
              length = Number(length);
              if (length > remaining) {
                length = remaining;
              }
            }

            // must be an even number of digits
            var strLen = string.length;
            if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");

            if (length > strLen / 2) {
              length = strLen / 2;
            }
            for (var i = 0; i < length; ++i) {
              var parsed = parseInt(string.substr(i * 2, 2), 16);
              if (isNaN(parsed)) return i;
              buf[offset + i] = parsed;
            }
            return i;
          }

          function utf8Write(buf, string, offset, length) {
            return blitBuffer(
              utf8ToBytes(string, buf.length - offset),
              buf,
              offset,
              length
            );
          }

          function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length);
          }

          function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length);
          }

          function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length);
          }

          function ucs2Write(buf, string, offset, length) {
            return blitBuffer(
              utf16leToBytes(string, buf.length - offset),
              buf,
              offset,
              length
            );
          }

          Buffer.prototype.write = function write(
            string,
            offset,
            length,
            encoding
          ) {
            // Buffer#write(string)
            if (offset === undefined) {
              encoding = "utf8";
              length = this.length;
              offset = 0;
              // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === "string") {
              encoding = offset;
              length = this.length;
              offset = 0;
              // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
              offset = offset | 0;
              if (isFinite(length)) {
                length = length | 0;
                if (encoding === undefined) encoding = "utf8";
              } else {
                encoding = length;
                length = undefined;
              }
              // legacy write(string, encoding, offset, length) - remove in v0.13
            } else {
              throw new Error(
                "Buffer.write(string, encoding, offset[, length]) is no longer supported"
              );
            }

            var remaining = this.length - offset;
            if (length === undefined || length > remaining) length = remaining;

            if (
              (string.length > 0 && (length < 0 || offset < 0)) ||
              offset > this.length
            ) {
              throw new RangeError("Attempt to write outside buffer bounds");
            }

            if (!encoding) encoding = "utf8";

            var loweredCase = false;
            for (;;) {
              switch (encoding) {
                case "hex":
                  return hexWrite(this, string, offset, length);

                case "utf8":
                case "utf-8":
                  return utf8Write(this, string, offset, length);

                case "ascii":
                  return asciiWrite(this, string, offset, length);

                case "latin1":
                case "binary":
                  return latin1Write(this, string, offset, length);

                case "base64":
                  // Warning: maxLength not taken into account in base64Write
                  return base64Write(this, string, offset, length);

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return ucs2Write(this, string, offset, length);

                default:
                  if (loweredCase)
                    throw new TypeError("Unknown encoding: " + encoding);
                  encoding = ("" + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          };

          Buffer.prototype.toJSON = function toJSON() {
            return {
              type: "Buffer",
              data: Array.prototype.slice.call(this._arr || this, 0),
            };
          };

          function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
              return base64.fromByteArray(buf);
            } else {
              return base64.fromByteArray(buf.slice(start, end));
            }
          }

          function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end);
            var res = [];

            var i = start;
            while (i < end) {
              var firstByte = buf[i];
              var codePoint = null;
              var bytesPerSequence =
                firstByte > 0xef
                  ? 4
                  : firstByte > 0xdf
                  ? 3
                  : firstByte > 0xbf
                  ? 2
                  : 1;

              if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint;

                switch (bytesPerSequence) {
                  case 1:
                    if (firstByte < 0x80) {
                      codePoint = firstByte;
                    }
                    break;
                  case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xc0) === 0x80) {
                      tempCodePoint =
                        ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
                      if (tempCodePoint > 0x7f) {
                        codePoint = tempCodePoint;
                      }
                    }
                    break;
                  case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if (
                      (secondByte & 0xc0) === 0x80 &&
                      (thirdByte & 0xc0) === 0x80
                    ) {
                      tempCodePoint =
                        ((firstByte & 0xf) << 0xc) |
                        ((secondByte & 0x3f) << 0x6) |
                        (thirdByte & 0x3f);
                      if (
                        tempCodePoint > 0x7ff &&
                        (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                      ) {
                        codePoint = tempCodePoint;
                      }
                    }
                    break;
                  case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if (
                      (secondByte & 0xc0) === 0x80 &&
                      (thirdByte & 0xc0) === 0x80 &&
                      (fourthByte & 0xc0) === 0x80
                    ) {
                      tempCodePoint =
                        ((firstByte & 0xf) << 0x12) |
                        ((secondByte & 0x3f) << 0xc) |
                        ((thirdByte & 0x3f) << 0x6) |
                        (fourthByte & 0x3f);
                      if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                        codePoint = tempCodePoint;
                      }
                    }
                }
              }

              if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xfffd;
                bytesPerSequence = 1;
              } else if (codePoint > 0xffff) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000;
                res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
                codePoint = 0xdc00 | (codePoint & 0x3ff);
              }

              res.push(codePoint);
              i += bytesPerSequence;
            }

            return decodeCodePointsArray(res);
          }

          // Based on http://stackoverflow.com/a/22747272/680742, the browser with
          // the lowest limit is Chrome, with 0x10000 args.
          // We go 1 magnitude less, for safety
          var MAX_ARGUMENTS_LENGTH = 0x1000;

          function decodeCodePointsArray(codePoints) {
            var len = codePoints.length;
            if (len <= MAX_ARGUMENTS_LENGTH) {
              return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
            }

            // Decode in chunks to avoid "call stack size exceeded".
            var res = "";
            var i = 0;
            while (i < len) {
              res += String.fromCharCode.apply(
                String,
                codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
              );
            }
            return res;
          }

          function asciiSlice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i] & 0x7f);
            }
            return ret;
          }

          function latin1Slice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i]);
            }
            return ret;
          }

          function hexSlice(buf, start, end) {
            var len = buf.length;

            if (!start || start < 0) start = 0;
            if (!end || end < 0 || end > len) end = len;

            var out = "";
            for (var i = start; i < end; ++i) {
              out += toHex(buf[i]);
            }
            return out;
          }

          function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end);
            var res = "";
            for (var i = 0; i < bytes.length; i += 2) {
              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
            }
            return res;
          }

          Buffer.prototype.slice = function slice(start, end) {
            var len = this.length;
            start = ~~start;
            end = end === undefined ? len : ~~end;

            if (start < 0) {
              start += len;
              if (start < 0) start = 0;
            } else if (start > len) {
              start = len;
            }

            if (end < 0) {
              end += len;
              if (end < 0) end = 0;
            } else if (end > len) {
              end = len;
            }

            if (end < start) end = start;

            var newBuf;
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              newBuf = this.subarray(start, end);
              newBuf.__proto__ = Buffer.prototype;
            } else {
              var sliceLen = end - start;
              newBuf = new Buffer(sliceLen, undefined);
              for (var i = 0; i < sliceLen; ++i) {
                newBuf[i] = this[i + start];
              }
            }

            return newBuf;
          };

          /*
           * Need to make sure that buffer isn't trying to write out of bounds.
           */
          function checkOffset(offset, ext, length) {
            if (offset % 1 !== 0 || offset < 0)
              throw new RangeError("offset is not uint");
            if (offset + ext > length)
              throw new RangeError("Trying to access beyond buffer length");
          }

          Buffer.prototype.readUIntLE = function readUIntLE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);

            var val = this[offset];
            var mul = 1;
            var i = 0;
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }

            return val;
          };

          Buffer.prototype.readUIntBE = function readUIntBE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) {
              checkOffset(offset, byteLength, this.length);
            }

            var val = this[offset + --byteLength];
            var mul = 1;
            while (byteLength > 0 && (mul *= 0x100)) {
              val += this[offset + --byteLength] * mul;
            }

            return val;
          };

          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length);
            return this[offset];
          };

          Buffer.prototype.readUInt16LE = function readUInt16LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] | (this[offset + 1] << 8);
          };

          Buffer.prototype.readUInt16BE = function readUInt16BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            return (this[offset] << 8) | this[offset + 1];
          };

          Buffer.prototype.readUInt32LE = function readUInt32LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);

            return (
              (this[offset] |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16)) +
              this[offset + 3] * 0x1000000
            );
          };

          Buffer.prototype.readUInt32BE = function readUInt32BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);

            return (
              this[offset] * 0x1000000 +
              ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
            );
          };

          Buffer.prototype.readIntLE = function readIntLE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);

            var val = this[offset];
            var mul = 1;
            var i = 0;
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }
            mul *= 0x80;

            if (val >= mul) val -= Math.pow(2, 8 * byteLength);

            return val;
          };

          Buffer.prototype.readIntBE = function readIntBE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);

            var i = byteLength;
            var mul = 1;
            var val = this[offset + --i];
            while (i > 0 && (mul *= 0x100)) {
              val += this[offset + --i] * mul;
            }
            mul *= 0x80;

            if (val >= mul) val -= Math.pow(2, 8 * byteLength);

            return val;
          };

          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length);
            if (!(this[offset] & 0x80)) return this[offset];
            return (0xff - this[offset] + 1) * -1;
          };

          Buffer.prototype.readInt16LE = function readInt16LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset] | (this[offset + 1] << 8);
            return val & 0x8000 ? val | 0xffff0000 : val;
          };

          Buffer.prototype.readInt16BE = function readInt16BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset + 1] | (this[offset] << 8);
            return val & 0x8000 ? val | 0xffff0000 : val;
          };

          Buffer.prototype.readInt32LE = function readInt32LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);

            return (
              this[offset] |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16) |
              (this[offset + 3] << 24)
            );
          };

          Buffer.prototype.readInt32BE = function readInt32BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);

            return (
              (this[offset] << 24) |
              (this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3]
            );
          };

          Buffer.prototype.readFloatLE = function readFloatLE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, true, 23, 4);
          };

          Buffer.prototype.readFloatBE = function readFloatBE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, false, 23, 4);
          };

          Buffer.prototype.readDoubleLE = function readDoubleLE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, true, 52, 8);
          };

          Buffer.prototype.readDoubleBE = function readDoubleBE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, false, 52, 8);
          };

          function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf))
              throw new TypeError(
                '"buffer" argument must be a Buffer instance'
              );
            if (value > max || value < min)
              throw new RangeError('"value" argument is out of bounds');
            if (offset + ext > buf.length)
              throw new RangeError("Index out of range");
          }

          Buffer.prototype.writeUIntLE = function writeUIntLE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            var mul = 1;
            var i = 0;
            this[offset] = value & 0xff;
            while (++i < byteLength && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeUIntBE = function writeUIntBE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            var i = byteLength - 1;
            var mul = 1;
            this[offset + i] = value & 0xff;
            while (--i >= 0 && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeUInt8 = function writeUInt8(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
            this[offset] = value & 0xff;
            return offset + 1;
          };

          function objectWriteUInt16(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffff + value + 1;
            for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
              buf[offset + i] =
                (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                ((littleEndian ? i : 1 - i) * 8);
            }
          }

          Buffer.prototype.writeUInt16LE = function writeUInt16LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
            } else {
              objectWriteUInt16(this, value, offset, true);
            }
            return offset + 2;
          };

          Buffer.prototype.writeUInt16BE = function writeUInt16BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
            } else {
              objectWriteUInt16(this, value, offset, false);
            }
            return offset + 2;
          };

          function objectWriteUInt32(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffffffff + value + 1;
            for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
              buf[offset + i] =
                (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff;
            }
          }

          Buffer.prototype.writeUInt32LE = function writeUInt32LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, true);
            }
            return offset + 4;
          };

          Buffer.prototype.writeUInt32BE = function writeUInt32BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, false);
            }
            return offset + 4;
          };

          Buffer.prototype.writeIntLE = function writeIntLE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);

              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }

            var i = 0;
            var mul = 1;
            var sub = 0;
            this[offset] = value & 0xff;
            while (++i < byteLength && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1;
              }
              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeIntBE = function writeIntBE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);

              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }

            var i = byteLength - 1;
            var mul = 1;
            var sub = 0;
            this[offset + i] = value & 0xff;
            while (--i >= 0 && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1;
              }
              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeInt8 = function writeInt8(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
            if (value < 0) value = 0xff + value + 1;
            this[offset] = value & 0xff;
            return offset + 1;
          };

          Buffer.prototype.writeInt16LE = function writeInt16LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
            } else {
              objectWriteUInt16(this, value, offset, true);
            }
            return offset + 2;
          };

          Buffer.prototype.writeInt16BE = function writeInt16BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
            } else {
              objectWriteUInt16(this, value, offset, false);
            }
            return offset + 2;
          };

          Buffer.prototype.writeInt32LE = function writeInt32LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert)
              checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
            } else {
              objectWriteUInt32(this, value, offset, true);
            }
            return offset + 4;
          };

          Buffer.prototype.writeInt32BE = function writeInt32BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert)
              checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
            if (value < 0) value = 0xffffffff + value + 1;
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, false);
            }
            return offset + 4;
          };

          function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length)
              throw new RangeError("Index out of range");
            if (offset < 0) throw new RangeError("Index out of range");
          }

          function writeFloat(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(
                buf,
                value,
                offset,
                4,
                3.4028234663852886e38,
                -3.4028234663852886e38
              );
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4);
            return offset + 4;
          }

          Buffer.prototype.writeFloatLE = function writeFloatLE(
            value,
            offset,
            noAssert
          ) {
            return writeFloat(this, value, offset, true, noAssert);
          };

          Buffer.prototype.writeFloatBE = function writeFloatBE(
            value,
            offset,
            noAssert
          ) {
            return writeFloat(this, value, offset, false, noAssert);
          };

          function writeDouble(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(
                buf,
                value,
                offset,
                8,
                1.7976931348623157e308,
                -1.7976931348623157e308
              );
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8);
            return offset + 8;
          }

          Buffer.prototype.writeDoubleLE = function writeDoubleLE(
            value,
            offset,
            noAssert
          ) {
            return writeDouble(this, value, offset, true, noAssert);
          };

          Buffer.prototype.writeDoubleBE = function writeDoubleBE(
            value,
            offset,
            noAssert
          ) {
            return writeDouble(this, value, offset, false, noAssert);
          };

          // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
          Buffer.prototype.copy = function copy(
            target,
            targetStart,
            start,
            end
          ) {
            if (!start) start = 0;
            if (!end && end !== 0) end = this.length;
            if (targetStart >= target.length) targetStart = target.length;
            if (!targetStart) targetStart = 0;
            if (end > 0 && end < start) end = start;

            // Copy 0 bytes; we're done
            if (end === start) return 0;
            if (target.length === 0 || this.length === 0) return 0;

            // Fatal error conditions
            if (targetStart < 0) {
              throw new RangeError("targetStart out of bounds");
            }
            if (start < 0 || start >= this.length)
              throw new RangeError("sourceStart out of bounds");
            if (end < 0) throw new RangeError("sourceEnd out of bounds");

            // Are we oob?
            if (end > this.length) end = this.length;
            if (target.length - targetStart < end - start) {
              end = target.length - targetStart + start;
            }

            var len = end - start;
            var i;

            if (this === target && start < targetStart && targetStart < end) {
              // descending copy from end
              for (i = len - 1; i >= 0; --i) {
                target[i + targetStart] = this[i + start];
              }
            } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
              // ascending copy from start
              for (i = 0; i < len; ++i) {
                target[i + targetStart] = this[i + start];
              }
            } else {
              Uint8Array.prototype.set.call(
                target,
                this.subarray(start, start + len),
                targetStart
              );
            }

            return len;
          };

          // Usage:
          //    buffer.fill(number[, offset[, end]])
          //    buffer.fill(buffer[, offset[, end]])
          //    buffer.fill(string[, offset[, end]][, encoding])
          Buffer.prototype.fill = function fill(val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === "string") {
              if (typeof start === "string") {
                encoding = start;
                start = 0;
                end = this.length;
              } else if (typeof end === "string") {
                encoding = end;
                end = this.length;
              }
              if (val.length === 1) {
                var code = val.charCodeAt(0);
                if (code < 256) {
                  val = code;
                }
              }
              if (encoding !== undefined && typeof encoding !== "string") {
                throw new TypeError("encoding must be a string");
              }
              if (
                typeof encoding === "string" &&
                !Buffer.isEncoding(encoding)
              ) {
                throw new TypeError("Unknown encoding: " + encoding);
              }
            } else if (typeof val === "number") {
              val = val & 255;
            }

            // Invalid ranges are not set to a default, so can range check early.
            if (start < 0 || this.length < start || this.length < end) {
              throw new RangeError("Out of range index");
            }

            if (end <= start) {
              return this;
            }

            start = start >>> 0;
            end = end === undefined ? this.length : end >>> 0;

            if (!val) val = 0;

            var i;
            if (typeof val === "number") {
              for (i = start; i < end; ++i) {
                this[i] = val;
              }
            } else {
              var bytes = Buffer.isBuffer(val)
                ? val
                : utf8ToBytes(new Buffer(val, encoding).toString());
              var len = bytes.length;
              for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len];
              }
            }

            return this;
          };

          // HELPER FUNCTIONS
          // ================

          var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

          function base64clean(str) {
            // Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = stringtrim(str).replace(INVALID_BASE64_RE, "");
            // Node converts strings with length < 2 to ''
            if (str.length < 2) return "";
            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
            while (str.length % 4 !== 0) {
              str = str + "=";
            }
            return str;
          }

          function stringtrim(str) {
            if (str.trim) return str.trim();
            return str.replace(/^\s+|\s+$/g, "");
          }

          function toHex(n) {
            if (n < 16) return "0" + n.toString(16);
            return n.toString(16);
          }

          function utf8ToBytes(string, units) {
            units = units || Infinity;
            var codePoint;
            var length = string.length;
            var leadSurrogate = null;
            var bytes = [];

            for (var i = 0; i < length; ++i) {
              codePoint = string.charCodeAt(i);

              // is surrogate component
              if (codePoint > 0xd7ff && codePoint < 0xe000) {
                // last char was a lead
                if (!leadSurrogate) {
                  // no lead yet
                  if (codePoint > 0xdbff) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    continue;
                  } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    continue;
                  }

                  // valid lead
                  leadSurrogate = codePoint;

                  continue;
                }

                // 2 leads in a row
                if (codePoint < 0xdc00) {
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  leadSurrogate = codePoint;
                  continue;
                }

                // valid surrogate pair
                codePoint =
                  (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                  0x10000;
              } else if (leadSurrogate) {
                // valid bmp char, but last char was a lead
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
              }

              leadSurrogate = null;

              // encode utf8
              if (codePoint < 0x80) {
                if ((units -= 1) < 0) break;
                bytes.push(codePoint);
              } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break;
                bytes.push(
                  (codePoint >> 0x6) | 0xc0,
                  (codePoint & 0x3f) | 0x80
                );
              } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break;
                bytes.push(
                  (codePoint >> 0xc) | 0xe0,
                  ((codePoint >> 0x6) & 0x3f) | 0x80,
                  (codePoint & 0x3f) | 0x80
                );
              } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break;
                bytes.push(
                  (codePoint >> 0x12) | 0xf0,
                  ((codePoint >> 0xc) & 0x3f) | 0x80,
                  ((codePoint >> 0x6) & 0x3f) | 0x80,
                  (codePoint & 0x3f) | 0x80
                );
              } else {
                throw new Error("Invalid code point");
              }
            }

            return bytes;
          }

          function asciiToBytes(str) {
            var byteArray = [];
            for (var i = 0; i < str.length; ++i) {
              // Node's code seems to be doing this and not & 0x7F..
              byteArray.push(str.charCodeAt(i) & 0xff);
            }
            return byteArray;
          }

          function utf16leToBytes(str, units) {
            var c, hi, lo;
            var byteArray = [];
            for (var i = 0; i < str.length; ++i) {
              if ((units -= 2) < 0) break;

              c = str.charCodeAt(i);
              hi = c >> 8;
              lo = c % 256;
              byteArray.push(lo);
              byteArray.push(hi);
            }

            return byteArray;
          }

          function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str));
          }

          function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
              if (i + offset >= dst.length || i >= src.length) break;
              dst[i + offset] = src[i];
            }
            return i;
          }

          function isnan(val) {
            return val !== val; // eslint-disable-line no-self-compare
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
          )
        );

        /***/
      },

    /***/ "./node_modules/gsap/CSSPlugin.js":
      /*!****************************************!*\
  !*** ./node_modules/gsap/CSSPlugin.js ***!
  \****************************************/
      /*! exports provided: CSSPlugin, default, _getBBox, _createElement, checkPrefix */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CSSPlugin",
          function () {
            return CSSPlugin;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return CSSPlugin;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_getBBox",
          function () {
            return _getBBox;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_createElement",
          function () {
            return _createElement;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "checkPrefix",
          function () {
            return _checkPropPrefix;
          }
        );
        /* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js"
          );
        /*!
         * CSSPlugin 3.12.5
         * https://gsap.com
         *
         * Copyright 2008-2024, GreenSock. All rights reserved.
         * Subject to the terms at https://gsap.com/standard-license or for
         * Club GSAP members, the agreement issued with that membership.
         * @author: Jack Doyle, jack@greensock.com
         */

        /* eslint-disable */

        var _win,
          _doc,
          _docElement,
          _pluginInitted,
          _tempDiv,
          _tempDivStyler,
          _recentSetterPlugin,
          _reverting,
          _windowExists = function _windowExists() {
            return typeof window !== "undefined";
          },
          _transformProps = {},
          _RAD2DEG = 180 / Math.PI,
          _DEG2RAD = Math.PI / 180,
          _atan2 = Math.atan2,
          _bigNum = 1e8,
          _capsExp = /([A-Z])/g,
          _horizontalExp = /(left|right|width|margin|padding|x)/i,
          _complexExp = /[\s,\(]\S/,
          _propertyAliases = {
            autoAlpha: "opacity,visibility",
            scale: "scaleX,scaleY",
            alpha: "opacity",
          },
          _renderCSSProp = function _renderCSSProp(ratio, data) {
            return data.set(
              data.t,
              data.p,
              Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u,
              data
            );
          },
          _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
            return data.set(
              data.t,
              data.p,
              ratio === 1
                ? data.e
                : Math.round((data.s + data.c * ratio) * 10000) / 10000 +
                    data.u,
              data
            );
          },
          _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(
            ratio,
            data
          ) {
            return data.set(
              data.t,
              data.p,
              ratio
                ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u
                : data.b,
              data
            );
          },
          //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
          _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
            var value = data.s + data.c * ratio;
            data.set(
              data.t,
              data.p,
              ~~(value + (value < 0 ? -0.5 : 0.5)) + data.u,
              data
            );
          },
          _renderNonTweeningValue = function _renderNonTweeningValue(
            ratio,
            data
          ) {
            return data.set(data.t, data.p, ratio ? data.e : data.b, data);
          },
          _renderNonTweeningValueOnlyAtEnd =
            function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
              return data.set(
                data.t,
                data.p,
                ratio !== 1 ? data.b : data.e,
                data
              );
            },
          _setterCSSStyle = function _setterCSSStyle(target, property, value) {
            return (target.style[property] = value);
          },
          _setterCSSProp = function _setterCSSProp(target, property, value) {
            return target.style.setProperty(property, value);
          },
          _setterTransform = function _setterTransform(
            target,
            property,
            value
          ) {
            return (target._gsap[property] = value);
          },
          _setterScale = function _setterScale(target, property, value) {
            return (target._gsap.scaleX = target._gsap.scaleY = value);
          },
          _setterScaleWithRender = function _setterScaleWithRender(
            target,
            property,
            value,
            data,
            ratio
          ) {
            var cache = target._gsap;
            cache.scaleX = cache.scaleY = value;
            cache.renderTransform(ratio, cache);
          },
          _setterTransformWithRender = function _setterTransformWithRender(
            target,
            property,
            value,
            data,
            ratio
          ) {
            var cache = target._gsap;
            cache[property] = value;
            cache.renderTransform(ratio, cache);
          },
          _transformProp = "transform",
          _transformOriginProp = _transformProp + "Origin",
          _saveStyle = function _saveStyle(property, isNotCSS) {
            var _this = this;

            var target = this.target,
              style = target.style,
              cache = target._gsap;

            if (property in _transformProps && style) {
              this.tfm = this.tfm || {};

              if (property !== "transform") {
                property = _propertyAliases[property] || property;
                ~property.indexOf(",")
                  ? property.split(",").forEach(function (a) {
                      return (_this.tfm[a] = _get(target, a));
                    })
                  : (this.tfm[property] = cache.x
                      ? cache[property]
                      : _get(target, property)); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.

                property === _transformOriginProp &&
                  (this.tfm.zOrigin = cache.zOrigin);
              } else {
                return _propertyAliases.transform
                  .split(",")
                  .forEach(function (p) {
                    return _saveStyle.call(_this, p, isNotCSS);
                  });
              }

              if (this.props.indexOf(_transformProp) >= 0) {
                return;
              }

              if (cache.svg) {
                this.svgo = target.getAttribute("data-svg-origin");
                this.props.push(_transformOriginProp, isNotCSS, "");
              }

              property = _transformProp;
            }

            (style || isNotCSS) &&
              this.props.push(property, isNotCSS, style[property]);
          },
          _removeIndependentTransforms = function _removeIndependentTransforms(
            style
          ) {
            if (style.translate) {
              style.removeProperty("translate");
              style.removeProperty("scale");
              style.removeProperty("rotate");
            }
          },
          _revertStyle = function _revertStyle() {
            var props = this.props,
              target = this.target,
              style = target.style,
              cache = target._gsap,
              i,
              p;

            for (i = 0; i < props.length; i += 3) {
              // stored like this: property, isNotCSS, value
              props[i + 1]
                ? (target[props[i]] = props[i + 2])
                : props[i + 2]
                ? (style[props[i]] = props[i + 2])
                : style.removeProperty(
                    props[i].substr(0, 2) === "--"
                      ? props[i]
                      : props[i].replace(_capsExp, "-$1").toLowerCase()
                  );
            }

            if (this.tfm) {
              for (p in this.tfm) {
                cache[p] = this.tfm[p];
              }

              if (cache.svg) {
                cache.renderTransform();
                target.setAttribute("data-svg-origin", this.svgo || "");
              }

              i = _reverting();

              if ((!i || !i.isStart) && !style[_transformProp]) {
                _removeIndependentTransforms(style);

                if (cache.zOrigin && style[_transformOriginProp]) {
                  style[_transformOriginProp] += " " + cache.zOrigin + "px"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.

                  cache.zOrigin = 0;
                  cache.renderTransform();
                }

                cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
              }
            }
          },
          _getStyleSaver = function _getStyleSaver(target, properties) {
            var saver = {
              target: target,
              props: [],
              revert: _revertStyle,
              save: _saveStyle,
            };
            target._gsap ||
              _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"].core.getCache(
                target
              ); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.

            properties &&
              properties.split(",").forEach(function (p) {
                return saver.save(p);
              });
            return saver;
          },
          _supports3D,
          _createElement = function _createElement(type, ns) {
            var e = _doc.createElementNS
              ? _doc.createElementNS(
                  (ns || "http://www.w3.org/1999/xhtml").replace(
                    /^https/,
                    "http"
                  ),
                  type
                )
              : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

            return e && e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
          },
          _getComputedProperty = function _getComputedProperty(
            target,
            property,
            skipPrefixFallback
          ) {
            var cs = getComputedStyle(target);
            return (
              cs[property] ||
              cs.getPropertyValue(
                property.replace(_capsExp, "-$1").toLowerCase()
              ) ||
              cs.getPropertyValue(property) ||
              (!skipPrefixFallback &&
                _getComputedProperty(
                  target,
                  _checkPropPrefix(property) || property,
                  1
                )) ||
              ""
            ); //css variables may not need caps swapped out for dashes and lowercase.
          },
          _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
          _checkPropPrefix = function _checkPropPrefix(
            property,
            element,
            preferPrefix
          ) {
            var e = element || _tempDiv,
              s = e.style,
              i = 5;

            if (property in s && !preferPrefix) {
              return property;
            }

            property = property.charAt(0).toUpperCase() + property.substr(1);

            while (i-- && !(_prefixes[i] + property in s)) {}

            return i < 0
              ? null
              : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
          },
          _initCore = function _initCore() {
            if (_windowExists() && window.document) {
              _win = window;
              _doc = _win.document;
              _docElement = _doc.documentElement;
              _tempDiv = _createElement("div") || {
                style: {},
              };
              _tempDivStyler = _createElement("div");
              _transformProp = _checkPropPrefix(_transformProp);
              _transformOriginProp = _transformProp + "Origin";
              _tempDiv.style.cssText =
                "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

              _supports3D = !!_checkPropPrefix("perspective");
              _reverting =
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"].core
                  .reverting;
              _pluginInitted = 1;
            }
          },
          _getBBoxHack = function _getBBoxHack(swapIfPossible) {
            //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
            var svg = _createElement(
                "svg",
                (this.ownerSVGElement &&
                  this.ownerSVGElement.getAttribute("xmlns")) ||
                  "http://www.w3.org/2000/svg"
              ),
              oldParent = this.parentNode,
              oldSibling = this.nextSibling,
              oldCSS = this.style.cssText,
              bbox;

            _docElement.appendChild(svg);

            svg.appendChild(this);
            this.style.display = "block";

            if (swapIfPossible) {
              try {
                bbox = this.getBBox();
                this._gsapBBox = this.getBBox; //store the original

                this.getBBox = _getBBoxHack;
              } catch (e) {}
            } else if (this._gsapBBox) {
              bbox = this._gsapBBox();
            }

            if (oldParent) {
              if (oldSibling) {
                oldParent.insertBefore(this, oldSibling);
              } else {
                oldParent.appendChild(this);
              }
            }

            _docElement.removeChild(svg);

            this.style.cssText = oldCSS;
            return bbox;
          },
          _getAttributeFallbacks = function _getAttributeFallbacks(
            target,
            attributesArray
          ) {
            var i = attributesArray.length;

            while (i--) {
              if (target.hasAttribute(attributesArray[i])) {
                return target.getAttribute(attributesArray[i]);
              }
            }
          },
          _getBBox = function _getBBox(target) {
            var bounds;

            try {
              bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
            } catch (error) {
              bounds = _getBBoxHack.call(target, true);
            }

            (bounds && (bounds.width || bounds.height)) ||
              target.getBBox === _getBBoxHack ||
              (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

            return bounds && !bounds.width && !bounds.x && !bounds.y
              ? {
                  x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
                  y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
                  width: 0,
                  height: 0,
                }
              : bounds;
          },
          _isSVG = function _isSVG(e) {
            return !!(
              e.getCTM &&
              (!e.parentNode || e.ownerSVGElement) &&
              _getBBox(e)
            );
          },
          //reports if the element is an SVG on which getBBox() actually works
          _removeProperty = function _removeProperty(target, property) {
            if (property) {
              var style = target.style,
                first2Chars;

              if (
                property in _transformProps &&
                property !== _transformOriginProp
              ) {
                property = _transformProp;
              }

              if (style.removeProperty) {
                first2Chars = property.substr(0, 2);

                if (
                  first2Chars === "ms" ||
                  property.substr(0, 6) === "webkit"
                ) {
                  //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
                  property = "-" + property;
                }

                style.removeProperty(
                  first2Chars === "--"
                    ? property
                    : property.replace(_capsExp, "-$1").toLowerCase()
                );
              } else {
                //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
                style.removeAttribute(property);
              }
            }
          },
          _addNonTweeningPT = function _addNonTweeningPT(
            plugin,
            target,
            property,
            beginning,
            end,
            onlySetAtEnd
          ) {
            var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
              "PropTween"
            ](
              plugin._pt,
              target,
              property,
              0,
              1,
              onlySetAtEnd
                ? _renderNonTweeningValueOnlyAtEnd
                : _renderNonTweeningValue
            );
            plugin._pt = pt;
            pt.b = beginning;
            pt.e = end;

            plugin._props.push(property);

            return pt;
          },
          _nonConvertibleUnits = {
            deg: 1,
            rad: 1,
            turn: 1,
          },
          _nonStandardLayouts = {
            grid: 1,
            flex: 1,
          },
          //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
          _convertToUnit = function _convertToUnit(
            target,
            property,
            value,
            unit
          ) {
            var curValue = parseFloat(value) || 0,
              curUnit =
                (value + "").trim().substr((curValue + "").length) || "px",
              // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
              style = _tempDiv.style,
              horizontal = _horizontalExp.test(property),
              isRootSVG = target.tagName.toLowerCase() === "svg",
              measureProperty =
                (isRootSVG ? "client" : "offset") +
                (horizontal ? "Width" : "Height"),
              amount = 100,
              toPixels = unit === "px",
              toPercent = unit === "%",
              px,
              parent,
              cache,
              isSVG;

            if (
              unit === curUnit ||
              !curValue ||
              _nonConvertibleUnits[unit] ||
              _nonConvertibleUnits[curUnit]
            ) {
              return curValue;
            }

            curUnit !== "px" &&
              !toPixels &&
              (curValue = _convertToUnit(target, property, value, "px"));
            isSVG = target.getCTM && _isSVG(target);

            if (
              (toPercent || curUnit === "%") &&
              (_transformProps[property] || ~property.indexOf("adius"))
            ) {
              px = isSVG
                ? target.getBBox()[horizontal ? "width" : "height"]
                : target[measureProperty];
              return Object(
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]
              )(toPercent ? (curValue / px) * amount : (curValue / 100) * px);
            }

            style[horizontal ? "width" : "height"] =
              amount + (toPixels ? curUnit : unit);
            parent =
              ~property.indexOf("adius") ||
              (unit === "em" && target.appendChild && !isRootSVG)
                ? target
                : target.parentNode;

            if (isSVG) {
              parent = (target.ownerSVGElement || {}).parentNode;
            }

            if (!parent || parent === _doc || !parent.appendChild) {
              parent = _doc.body;
            }

            cache = parent._gsap;

            if (
              cache &&
              toPercent &&
              cache.width &&
              horizontal &&
              cache.time ===
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_ticker"].time &&
              !cache.uncache
            ) {
              return Object(
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]
              )((curValue / cache.width) * amount);
            } else {
              if (
                toPercent &&
                (property === "height" || property === "width")
              ) {
                // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.
                var v = target.style[property];
                target.style[property] = amount + unit;
                px = target[measureProperty];
                v
                  ? (target.style[property] = v)
                  : _removeProperty(target, property);
              } else {
                (toPercent || curUnit === "%") &&
                  !_nonStandardLayouts[
                    _getComputedProperty(parent, "display")
                  ] &&
                  (style.position = _getComputedProperty(target, "position"));
                parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

                parent.appendChild(_tempDiv);
                px = _tempDiv[measureProperty];
                parent.removeChild(_tempDiv);
                style.position = "absolute";
              }

              if (horizontal && toPercent) {
                cache = Object(
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_getCache"]
                )(parent);
                cache.time =
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_ticker"].time;
                cache.width = parent[measureProperty];
              }
            }

            return Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(
              toPixels
                ? (px * curValue) / amount
                : px && curValue
                ? (amount / px) * curValue
                : 0
            );
          },
          _get = function _get(target, property, unit, uncache) {
            var value;
            _pluginInitted || _initCore();

            if (property in _propertyAliases && property !== "transform") {
              property = _propertyAliases[property];

              if (~property.indexOf(",")) {
                property = property.split(",")[0];
              }
            }

            if (_transformProps[property] && property !== "transform") {
              value = _parseTransform(target, uncache);
              value =
                property !== "transformOrigin"
                  ? value[property]
                  : value.svg
                  ? value.origin
                  : _firstTwoOnly(
                      _getComputedProperty(target, _transformOriginProp)
                    ) +
                    " " +
                    value.zOrigin +
                    "px";
            } else {
              value = target.style[property];

              if (
                !value ||
                value === "auto" ||
                uncache ||
                ~(value + "").indexOf("calc(")
              ) {
                value =
                  (_specialProps[property] &&
                    _specialProps[property](target, property, unit)) ||
                  _getComputedProperty(target, property) ||
                  Object(
                    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_getProperty"]
                  )(target, property) ||
                  (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
              }
            }

            return unit && !~(value + "").trim().indexOf(" ")
              ? _convertToUnit(target, property, value, unit) + unit
              : value;
          },
          _tweenComplexCSSString = function _tweenComplexCSSString(
            target,
            prop,
            start,
            end
          ) {
            // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
            if (!start || start === "none") {
              // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/
              var p = _checkPropPrefix(prop, target, 1),
                s = p && _getComputedProperty(target, p, 1);

              if (s && s !== start) {
                prop = p;
                start = s;
              } else if (prop === "borderColor") {
                start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
              }
            }

            var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                "PropTween"
              ](
                this._pt,
                target.style,
                prop,
                0,
                1,
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                  "_renderComplexString"
                ]
              ),
              index = 0,
              matchIndex = 0,
              a,
              result,
              startValues,
              startNum,
              color,
              startValue,
              endValue,
              endNum,
              chunk,
              endUnit,
              startUnit,
              endValues;
            pt.b = start;
            pt.e = end;
            start += ""; // ensure values are strings

            end += "";

            if (end === "auto") {
              startValue = target.style[prop];
              target.style[prop] = end;
              end = _getComputedProperty(target, prop) || end;
              startValue
                ? (target.style[prop] = startValue)
                : _removeProperty(target, prop);
            }

            a = [start, end];

            Object(
              _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_colorStringFilter"]
            )(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().

            start = a[0];
            end = a[1];
            startValues =
              start.match(
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_numWithUnitExp"]
              ) || [];
            endValues =
              end.match(
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_numWithUnitExp"]
              ) || [];

            if (endValues.length) {
              while (
                (result =
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                    "_numWithUnitExp"
                  ].exec(end))
              ) {
                endValue = result[0];
                chunk = end.substring(index, result.index);

                if (color) {
                  color = (color + 1) % 5;
                } else if (
                  chunk.substr(-5) === "rgba(" ||
                  chunk.substr(-5) === "hsla("
                ) {
                  color = 1;
                }

                if (
                  endValue !== (startValue = startValues[matchIndex++] || "")
                ) {
                  startNum = parseFloat(startValue) || 0;
                  startUnit = startValue.substr((startNum + "").length);
                  endValue.charAt(1) === "=" &&
                    (endValue =
                      Object(
                        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                          "_parseRelative"
                        ]
                      )(startNum, endValue) + startUnit);
                  endNum = parseFloat(endValue);
                  endUnit = endValue.substr((endNum + "").length);
                  index =
                    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                      "_numWithUnitExp"
                    ].lastIndex - endUnit.length;

                  if (!endUnit) {
                    //if something like "perspective:300" is passed in and we must add a unit to the end
                    endUnit =
                      endUnit ||
                      _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"]
                        .units[prop] ||
                      startUnit;

                    if (index === end.length) {
                      end += endUnit;
                      pt.e += endUnit;
                    }
                  }

                  if (startUnit !== endUnit) {
                    startNum =
                      _convertToUnit(target, prop, startValue, endUnit) || 0;
                  } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

                  pt._pt = {
                    _next: pt._pt,
                    p: chunk || matchIndex === 1 ? chunk : ",",
                    //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
                    s: startNum,
                    c: endNum - startNum,
                    m:
                      (color && color < 4) || prop === "zIndex"
                        ? Math.round
                        : 0,
                  };
                }
              }

              pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
            } else {
              pt.r =
                prop === "display" && end === "none"
                  ? _renderNonTweeningValueOnlyAtEnd
                  : _renderNonTweeningValue;
            }

            _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_relExp"].test(end) &&
              (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

            this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

            return pt;
          },
          _keywordToPercent = {
            top: "0%",
            bottom: "100%",
            left: "0%",
            right: "100%",
            center: "50%",
          },
          _convertKeywordsToPercentages =
            function _convertKeywordsToPercentages(value) {
              var split = value.split(" "),
                x = split[0],
                y = split[1] || "50%";

              if (
                x === "top" ||
                x === "bottom" ||
                y === "left" ||
                y === "right"
              ) {
                //the user provided them in the wrong order, so flip them
                value = x;
                x = y;
                y = value;
              }

              split[0] = _keywordToPercent[x] || x;
              split[1] = _keywordToPercent[y] || y;
              return split.join(" ");
            },
          _renderClearProps = function _renderClearProps(ratio, data) {
            if (data.tween && data.tween._time === data.tween._dur) {
              var target = data.t,
                style = target.style,
                props = data.u,
                cache = target._gsap,
                prop,
                clearTransforms,
                i;

              if (props === "all" || props === true) {
                style.cssText = "";
                clearTransforms = 1;
              } else {
                props = props.split(",");
                i = props.length;

                while (--i > -1) {
                  prop = props[i];

                  if (_transformProps[prop]) {
                    clearTransforms = 1;
                    prop =
                      prop === "transformOrigin"
                        ? _transformOriginProp
                        : _transformProp;
                  }

                  _removeProperty(target, prop);
                }
              }

              if (clearTransforms) {
                _removeProperty(target, _transformProp);

                if (cache) {
                  cache.svg && target.removeAttribute("transform");

                  _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.

                  cache.uncache = 1;

                  _removeIndependentTransforms(style);
                }
              }
            }
          },
          // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
          _specialProps = {
            clearProps: function clearProps(
              plugin,
              target,
              property,
              endValue,
              tween
            ) {
              if (tween.data !== "isFromStart") {
                var pt = (plugin._pt =
                  new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["PropTween"](
                    plugin._pt,
                    target,
                    property,
                    0,
                    0,
                    _renderClearProps
                  ));
                pt.u = endValue;
                pt.pr = -10;
                pt.tween = tween;

                plugin._props.push(property);

                return 1;
              }
            },
            /* className feature (about 0.4kb gzipped).
  , className(plugin, target, property, endValue, tween) {
  	let _renderClassName = (ratio, data) => {
  			data.css.render(ratio, data.css);
  			if (!ratio || ratio === 1) {
  				let inline = data.rmv,
  					target = data.t,
  					p;
  				target.setAttribute("class", ratio ? data.e : data.b);
  				for (p in inline) {
  					_removeProperty(target, p);
  				}
  			}
  		},
  		_getAllStyles = (target) => {
  			let styles = {},
  				computed = getComputedStyle(target),
  				p;
  			for (p in computed) {
  				if (isNaN(p) && p !== "cssText" && p !== "length") {
  					styles[p] = computed[p];
  				}
  			}
  			_setDefaults(styles, _parseTransform(target, 1));
  			return styles;
  		},
  		startClassList = target.getAttribute("class"),
  		style = target.style,
  		cssText = style.cssText,
  		cache = target._gsap,
  		classPT = cache.classPT,
  		inlineToRemoveAtEnd = {},
  		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
  		changingVars = {},
  		startVars = _getAllStyles(target),
  		transformRelated = /(transform|perspective)/i,
  		endVars, p;
  	if (classPT) {
  		classPT.r(1, classPT.d);
  		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
  	}
  	target.setAttribute("class", data.e);
  	endVars = _getAllStyles(target, true);
  	target.setAttribute("class", startClassList);
  	for (p in endVars) {
  		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
  			changingVars[p] = endVars[p];
  			if (!style[p] && style[p] !== "0") {
  				inlineToRemoveAtEnd[p] = 1;
  			}
  		}
  	}
  	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
  	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
  		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
  	}
  	_parseTransform(target, true); //to clear the caching of transforms
  	data.css = new gsap.plugins.css();
  	data.css.init(target, changingVars, tween);
  	plugin._props.push(...data.css._props);
  	return 1;
  }
  */
          },
          /*
           * --------------------------------------------------------------------------------------
           * TRANSFORMS
           * --------------------------------------------------------------------------------------
           */
          _identity2DMatrix = [1, 0, 0, 1, 0, 0],
          _rotationalProperties = {},
          _isNullTransform = function _isNullTransform(value) {
            return (
              value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value
            );
          },
          _getComputedTransformMatrixAsArray =
            function _getComputedTransformMatrixAsArray(target) {
              var matrixString = _getComputedProperty(target, _transformProp);

              return _isNullTransform(matrixString)
                ? _identity2DMatrix
                : matrixString
                    .substr(7)
                    .match(
                      _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_numExp"]
                    )
                    .map(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]);
            },
          _getMatrix = function _getMatrix(target, force2D) {
            var cache =
                target._gsap ||
                Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_getCache"])(
                  target
                ),
              style = target.style,
              matrix = _getComputedTransformMatrixAsArray(target),
              parent,
              nextSibling,
              temp,
              addedToDOM;

            if (cache.svg && target.getAttribute("transform")) {
              temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

              matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
              return matrix.join(",") === "1,0,0,1,0,0"
                ? _identity2DMatrix
                : matrix;
            } else if (
              matrix === _identity2DMatrix &&
              !target.offsetParent &&
              target !== _docElement &&
              !cache.svg
            ) {
              //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
              //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
              temp = style.display;
              style.display = "block";
              parent = target.parentNode;

              if (!parent || !target.offsetParent) {
                // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
                addedToDOM = 1; //flag

                nextSibling = target.nextElementSibling;

                _docElement.appendChild(target); //we must add it to the DOM in order to get values properly
              }

              matrix = _getComputedTransformMatrixAsArray(target);
              temp
                ? (style.display = temp)
                : _removeProperty(target, "display");

              if (addedToDOM) {
                nextSibling
                  ? parent.insertBefore(target, nextSibling)
                  : parent
                  ? parent.appendChild(target)
                  : _docElement.removeChild(target);
              }
            }

            return force2D && matrix.length > 6
              ? [
                  matrix[0],
                  matrix[1],
                  matrix[4],
                  matrix[5],
                  matrix[12],
                  matrix[13],
                ]
              : matrix;
          },
          _applySVGOrigin = function _applySVGOrigin(
            target,
            origin,
            originIsAbsolute,
            smooth,
            matrixArray,
            pluginToAddPropTweensTo
          ) {
            var cache = target._gsap,
              matrix = matrixArray || _getMatrix(target, true),
              xOriginOld = cache.xOrigin || 0,
              yOriginOld = cache.yOrigin || 0,
              xOffsetOld = cache.xOffset || 0,
              yOffsetOld = cache.yOffset || 0,
              a = matrix[0],
              b = matrix[1],
              c = matrix[2],
              d = matrix[3],
              tx = matrix[4],
              ty = matrix[5],
              originSplit = origin.split(" "),
              xOrigin = parseFloat(originSplit[0]) || 0,
              yOrigin = parseFloat(originSplit[1]) || 0,
              bounds,
              determinant,
              x,
              y;

            if (!originIsAbsolute) {
              bounds = _getBBox(target);
              xOrigin =
                bounds.x +
                (~originSplit[0].indexOf("%")
                  ? (xOrigin / 100) * bounds.width
                  : xOrigin);
              yOrigin =
                bounds.y +
                (~(originSplit[1] || originSplit[0]).indexOf("%")
                  ? (yOrigin / 100) * bounds.height
                  : yOrigin); // if (!("xOrigin" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration
              // 	xOrigin -= bounds.x;
              // 	yOrigin -= bounds.y;
              // }
            } else if (
              matrix !== _identity2DMatrix &&
              (determinant = a * d - b * c)
            ) {
              //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
              x =
                xOrigin * (d / determinant) +
                yOrigin * (-c / determinant) +
                (c * ty - d * tx) / determinant;
              y =
                xOrigin * (-b / determinant) +
                yOrigin * (a / determinant) -
                (a * ty - b * tx) / determinant;
              xOrigin = x;
              yOrigin = y; // theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.
            }

            if (smooth || (smooth !== false && cache.smooth)) {
              tx = xOrigin - xOriginOld;
              ty = yOrigin - yOriginOld;
              cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
              cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
            } else {
              cache.xOffset = cache.yOffset = 0;
            }

            cache.xOrigin = xOrigin;
            cache.yOrigin = yOrigin;
            cache.smooth = !!smooth;
            cache.origin = origin;
            cache.originIsAbsolute = !!originIsAbsolute;
            target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

            if (pluginToAddPropTweensTo) {
              _addNonTweeningPT(
                pluginToAddPropTweensTo,
                cache,
                "xOrigin",
                xOriginOld,
                xOrigin
              );

              _addNonTweeningPT(
                pluginToAddPropTweensTo,
                cache,
                "yOrigin",
                yOriginOld,
                yOrigin
              );

              _addNonTweeningPT(
                pluginToAddPropTweensTo,
                cache,
                "xOffset",
                xOffsetOld,
                cache.xOffset
              );

              _addNonTweeningPT(
                pluginToAddPropTweensTo,
                cache,
                "yOffset",
                yOffsetOld,
                cache.yOffset
              );
            }

            target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
          },
          _parseTransform = function _parseTransform(target, uncache) {
            var cache =
              target._gsap ||
              new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["GSCache"](target);

            if ("x" in cache && !uncache && !cache.uncache) {
              return cache;
            }

            var style = target.style,
              invertedScaleX = cache.scaleX < 0,
              px = "px",
              deg = "deg",
              cs = getComputedStyle(target),
              origin =
                _getComputedProperty(target, _transformOriginProp) || "0",
              x,
              y,
              z,
              scaleX,
              scaleY,
              rotation,
              rotationX,
              rotationY,
              skewX,
              skewY,
              perspective,
              xOrigin,
              yOrigin,
              matrix,
              angle,
              cos,
              sin,
              a,
              b,
              c,
              d,
              a12,
              a22,
              t1,
              t2,
              t3,
              a13,
              a23,
              a33,
              a42,
              a43,
              a32;
            x =
              y =
              z =
              rotation =
              rotationX =
              rotationY =
              skewX =
              skewY =
              perspective =
                0;
            scaleX = scaleY = 1;
            cache.svg = !!(target.getCTM && _isSVG(target));

            if (cs.translate) {
              // accommodate independent transforms by combining them into normal ones.
              if (
                cs.translate !== "none" ||
                cs.scale !== "none" ||
                cs.rotate !== "none"
              ) {
                style[_transformProp] =
                  (cs.translate !== "none"
                    ? "translate3d(" +
                      (cs.translate + " 0 0")
                        .split(" ")
                        .slice(0, 3)
                        .join(", ") +
                      ") "
                    : "") +
                  (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") +
                  (cs.scale !== "none"
                    ? "scale(" + cs.scale.split(" ").join(",") + ") "
                    : "") +
                  (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
              }

              style.scale = style.rotate = style.translate = "none";
            }

            matrix = _getMatrix(target, cache.svg);

            if (cache.svg) {
              if (cache.uncache) {
                // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
                t2 = target.getBBox();
                origin =
                  cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
                t1 = "";
              } else {
                t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
              }

              _applySVGOrigin(
                target,
                t1 || origin,
                !!t1 || cache.originIsAbsolute,
                cache.smooth !== false,
                matrix
              );
            }

            xOrigin = cache.xOrigin || 0;
            yOrigin = cache.yOrigin || 0;

            if (matrix !== _identity2DMatrix) {
              a = matrix[0]; //a11

              b = matrix[1]; //a21

              c = matrix[2]; //a31

              d = matrix[3]; //a41

              x = a12 = matrix[4];
              y = a22 = matrix[5]; //2D matrix

              if (matrix.length === 6) {
                scaleX = Math.sqrt(a * a + b * b);
                scaleY = Math.sqrt(d * d + c * c);
                rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

                skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
                skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));

                if (cache.svg) {
                  x -= xOrigin - (xOrigin * a + yOrigin * c);
                  y -= yOrigin - (xOrigin * b + yOrigin * d);
                } //3D matrix
              } else {
                a32 = matrix[6];
                a42 = matrix[7];
                a13 = matrix[8];
                a23 = matrix[9];
                a33 = matrix[10];
                a43 = matrix[11];
                x = matrix[12];
                y = matrix[13];
                z = matrix[14];
                angle = _atan2(a32, a33);
                rotationX = angle * _RAD2DEG; //rotationX

                if (angle) {
                  cos = Math.cos(-angle);
                  sin = Math.sin(-angle);
                  t1 = a12 * cos + a13 * sin;
                  t2 = a22 * cos + a23 * sin;
                  t3 = a32 * cos + a33 * sin;
                  a13 = a12 * -sin + a13 * cos;
                  a23 = a22 * -sin + a23 * cos;
                  a33 = a32 * -sin + a33 * cos;
                  a43 = a42 * -sin + a43 * cos;
                  a12 = t1;
                  a22 = t2;
                  a32 = t3;
                } //rotationY

                angle = _atan2(-c, a33);
                rotationY = angle * _RAD2DEG;

                if (angle) {
                  cos = Math.cos(-angle);
                  sin = Math.sin(-angle);
                  t1 = a * cos - a13 * sin;
                  t2 = b * cos - a23 * sin;
                  t3 = c * cos - a33 * sin;
                  a43 = d * sin + a43 * cos;
                  a = t1;
                  b = t2;
                  c = t3;
                } //rotationZ

                angle = _atan2(b, a);
                rotation = angle * _RAD2DEG;

                if (angle) {
                  cos = Math.cos(angle);
                  sin = Math.sin(angle);
                  t1 = a * cos + b * sin;
                  t2 = a12 * cos + a22 * sin;
                  b = b * cos - a * sin;
                  a22 = a22 * cos - a12 * sin;
                  a = t1;
                  a12 = t2;
                }

                if (
                  rotationX &&
                  Math.abs(rotationX) + Math.abs(rotation) > 359.9
                ) {
                  //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
                  rotationX = rotation = 0;
                  rotationY = 180 - rotationY;
                }

                scaleX = Object(
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]
                )(Math.sqrt(a * a + b * b + c * c));
                scaleY = Object(
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]
                )(Math.sqrt(a22 * a22 + a32 * a32));
                angle = _atan2(a12, a22);
                skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
                perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
              }

              if (cache.svg) {
                //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
                t1 = target.getAttribute("transform");
                cache.forceCSS =
                  target.setAttribute("transform", "") ||
                  !_isNullTransform(
                    _getComputedProperty(target, _transformProp)
                  );
                t1 && target.setAttribute("transform", t1);
              }
            }

            if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
              if (invertedScaleX) {
                scaleX *= -1;
                skewX += rotation <= 0 ? 180 : -180;
                rotation += rotation <= 0 ? 180 : -180;
              } else {
                scaleY *= -1;
                skewX += skewX <= 0 ? 180 : -180;
              }
            }

            uncache = uncache || cache.uncache;
            cache.x =
              x -
              ((cache.xPercent =
                x &&
                ((!uncache && cache.xPercent) ||
                  (Math.round(target.offsetWidth / 2) === Math.round(-x)
                    ? -50
                    : 0)))
                ? (target.offsetWidth * cache.xPercent) / 100
                : 0) +
              px;
            cache.y =
              y -
              ((cache.yPercent =
                y &&
                ((!uncache && cache.yPercent) ||
                  (Math.round(target.offsetHeight / 2) === Math.round(-y)
                    ? -50
                    : 0)))
                ? (target.offsetHeight * cache.yPercent) / 100
                : 0) +
              px;
            cache.z = z + px;
            cache.scaleX = Object(
              _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]
            )(scaleX);
            cache.scaleY = Object(
              _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]
            )(scaleY);
            cache.rotation =
              Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(
                rotation
              ) + deg;
            cache.rotationX =
              Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(
                rotationX
              ) + deg;
            cache.rotationY =
              Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(
                rotationY
              ) + deg;
            cache.skewX = skewX + deg;
            cache.skewY = skewY + deg;
            cache.transformPerspective = perspective + px;

            if (
              (cache.zOrigin =
                parseFloat(origin.split(" ")[2]) ||
                (!uncache && cache.zOrigin) ||
                0)
            ) {
              style[_transformOriginProp] = _firstTwoOnly(origin);
            }

            cache.xOffset = cache.yOffset = 0;
            cache.force3D =
              _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"].force3D;
            cache.renderTransform = cache.svg
              ? _renderSVGTransforms
              : _supports3D
              ? _renderCSSTransforms
              : _renderNon3DTransforms;
            cache.uncache = 0;
            return cache;
          },
          _firstTwoOnly = function _firstTwoOnly(value) {
            return (value = value.split(" "))[0] + " " + value[1];
          },
          //for handling transformOrigin values, stripping out the 3rd dimension
          _addPxTranslate = function _addPxTranslate(target, start, value) {
            var unit = Object(
              _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"]
            )(start);
            return (
              Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(
                parseFloat(start) +
                  parseFloat(_convertToUnit(target, "x", value + "px", unit))
              ) + unit
            );
          },
          _renderNon3DTransforms = function _renderNon3DTransforms(
            ratio,
            cache
          ) {
            cache.z = "0px";
            cache.rotationY = cache.rotationX = "0deg";
            cache.force3D = 0;

            _renderCSSTransforms(ratio, cache);
          },
          _zeroDeg = "0deg",
          _zeroPx = "0px",
          _endParenthesis = ") ",
          _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
            var _ref = cache || this,
              xPercent = _ref.xPercent,
              yPercent = _ref.yPercent,
              x = _ref.x,
              y = _ref.y,
              z = _ref.z,
              rotation = _ref.rotation,
              rotationY = _ref.rotationY,
              rotationX = _ref.rotationX,
              skewX = _ref.skewX,
              skewY = _ref.skewY,
              scaleX = _ref.scaleX,
              scaleY = _ref.scaleY,
              transformPerspective = _ref.transformPerspective,
              force3D = _ref.force3D,
              target = _ref.target,
              zOrigin = _ref.zOrigin,
              transforms = "",
              use3D =
                (force3D === "auto" && ratio && ratio !== 1) ||
                force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)

            if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
              var angle = parseFloat(rotationY) * _DEG2RAD,
                a13 = Math.sin(angle),
                a33 = Math.cos(angle),
                cos;

              angle = parseFloat(rotationX) * _DEG2RAD;
              cos = Math.cos(angle);
              x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
              y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
              z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
            }

            if (transformPerspective !== _zeroPx) {
              transforms +=
                "perspective(" + transformPerspective + _endParenthesis;
            }

            if (xPercent || yPercent) {
              transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
            }

            if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
              transforms +=
                z !== _zeroPx || use3D
                  ? "translate3d(" + x + ", " + y + ", " + z + ") "
                  : "translate(" + x + ", " + y + _endParenthesis;
            }

            if (rotation !== _zeroDeg) {
              transforms += "rotate(" + rotation + _endParenthesis;
            }

            if (rotationY !== _zeroDeg) {
              transforms += "rotateY(" + rotationY + _endParenthesis;
            }

            if (rotationX !== _zeroDeg) {
              transforms += "rotateX(" + rotationX + _endParenthesis;
            }

            if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
              transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
            }

            if (scaleX !== 1 || scaleY !== 1) {
              transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
            }

            target.style[_transformProp] = transforms || "translate(0, 0)";
          },
          _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
            var _ref2 = cache || this,
              xPercent = _ref2.xPercent,
              yPercent = _ref2.yPercent,
              x = _ref2.x,
              y = _ref2.y,
              rotation = _ref2.rotation,
              skewX = _ref2.skewX,
              skewY = _ref2.skewY,
              scaleX = _ref2.scaleX,
              scaleY = _ref2.scaleY,
              target = _ref2.target,
              xOrigin = _ref2.xOrigin,
              yOrigin = _ref2.yOrigin,
              xOffset = _ref2.xOffset,
              yOffset = _ref2.yOffset,
              forceCSS = _ref2.forceCSS,
              tx = parseFloat(x),
              ty = parseFloat(y),
              a11,
              a21,
              a12,
              a22,
              temp;

            rotation = parseFloat(rotation);
            skewX = parseFloat(skewX);
            skewY = parseFloat(skewY);

            if (skewY) {
              //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
              skewY = parseFloat(skewY);
              skewX += skewY;
              rotation += skewY;
            }

            if (rotation || skewX) {
              rotation *= _DEG2RAD;
              skewX *= _DEG2RAD;
              a11 = Math.cos(rotation) * scaleX;
              a21 = Math.sin(rotation) * scaleX;
              a12 = Math.sin(rotation - skewX) * -scaleY;
              a22 = Math.cos(rotation - skewX) * scaleY;

              if (skewX) {
                skewY *= _DEG2RAD;
                temp = Math.tan(skewX - skewY);
                temp = Math.sqrt(1 + temp * temp);
                a12 *= temp;
                a22 *= temp;

                if (skewY) {
                  temp = Math.tan(skewY);
                  temp = Math.sqrt(1 + temp * temp);
                  a11 *= temp;
                  a21 *= temp;
                }
              }

              a11 = Object(
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]
              )(a11);
              a21 = Object(
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]
              )(a21);
              a12 = Object(
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]
              )(a12);
              a22 = Object(
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"]
              )(a22);
            } else {
              a11 = scaleX;
              a22 = scaleY;
              a21 = a12 = 0;
            }

            if (
              (tx && !~(x + "").indexOf("px")) ||
              (ty && !~(y + "").indexOf("px"))
            ) {
              tx = _convertToUnit(target, "x", x, "px");
              ty = _convertToUnit(target, "y", y, "px");
            }

            if (xOrigin || yOrigin || xOffset || yOffset) {
              tx = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(
                tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset
              );
              ty = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(
                ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset
              );
            }

            if (xPercent || yPercent) {
              //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
              temp = target.getBBox();
              tx = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(
                tx + (xPercent / 100) * temp.width
              );
              ty = Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_round"])(
                ty + (yPercent / 100) * temp.height
              );
            }

            temp =
              "matrix(" +
              a11 +
              "," +
              a21 +
              "," +
              a12 +
              "," +
              a22 +
              "," +
              tx +
              "," +
              ty +
              ")";
            target.setAttribute("transform", temp);
            forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
          },
          _addRotationalPropTween = function _addRotationalPropTween(
            plugin,
            target,
            property,
            startNum,
            endValue
          ) {
            var cap = 360,
              isString = Object(
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_isString"]
              )(endValue),
              endNum =
                parseFloat(endValue) *
                (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
              change = endNum - startNum,
              finalValue = startNum + change + "deg",
              direction,
              pt;

            if (isString) {
              direction = endValue.split("_")[1];

              if (direction === "short") {
                change %= cap;

                if (change !== change % (cap / 2)) {
                  change += change < 0 ? cap : -cap;
                }
              }

              if (direction === "cw" && change < 0) {
                change =
                  ((change + cap * _bigNum) % cap) - ~~(change / cap) * cap;
              } else if (direction === "ccw" && change > 0) {
                change =
                  ((change - cap * _bigNum) % cap) - ~~(change / cap) * cap;
              }
            }

            plugin._pt = pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
              "PropTween"
            ](
              plugin._pt,
              target,
              property,
              startNum,
              change,
              _renderPropWithEnd
            );
            pt.e = finalValue;
            pt.u = "deg";

            plugin._props.push(property);

            return pt;
          },
          _assign = function _assign(target, source) {
            // Internet Explorer doesn't have Object.assign(), so we recreate it here.
            for (var p in source) {
              target[p] = source[p];
            }

            return target;
          },
          _addRawTransformPTs = function _addRawTransformPTs(
            plugin,
            transforms,
            target
          ) {
            //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
            var startCache = _assign({}, target._gsap),
              exclude = "perspective,force3D,transformOrigin,svgOrigin",
              style = target.style,
              endCache,
              p,
              startValue,
              endValue,
              startNum,
              endNum,
              startUnit,
              endUnit;

            if (startCache.svg) {
              startValue = target.getAttribute("transform");
              target.setAttribute("transform", "");
              style[_transformProp] = transforms;
              endCache = _parseTransform(target, 1);

              _removeProperty(target, _transformProp);

              target.setAttribute("transform", startValue);
            } else {
              startValue = getComputedStyle(target)[_transformProp];
              style[_transformProp] = transforms;
              endCache = _parseTransform(target, 1);
              style[_transformProp] = startValue;
            }

            for (p in _transformProps) {
              startValue = startCache[p];
              endValue = endCache[p];

              if (startValue !== endValue && exclude.indexOf(p) < 0) {
                //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
                startUnit = Object(
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"]
                )(startValue);
                endUnit = Object(
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"]
                )(endValue);
                startNum =
                  startUnit !== endUnit
                    ? _convertToUnit(target, p, startValue, endUnit)
                    : parseFloat(startValue);
                endNum = parseFloat(endValue);
                plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                  "PropTween"
                ](
                  plugin._pt,
                  endCache,
                  p,
                  startNum,
                  endNum - startNum,
                  _renderCSSProp
                );
                plugin._pt.u = endUnit || 0;

                plugin._props.push(p);
              }
            }

            _assign(endCache, startCache);
          }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.

        Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_forEachName"])(
          "padding,margin,Width,Radius",
          function (name, index) {
            var t = "Top",
              r = "Right",
              b = "Bottom",
              l = "Left",
              props = (
                index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]
              ).map(function (side) {
                return index < 2 ? name + side : "border" + side + name;
              });

            _specialProps[index > 1 ? "border" + name : name] = function (
              plugin,
              target,
              property,
              endValue,
              tween
            ) {
              var a, vars;

              if (arguments.length < 4) {
                // getter, passed target, property, and unit (from _get())
                a = props.map(function (prop) {
                  return _get(plugin, prop, property);
                });
                vars = a.join(" ");
                return vars.split(a[0]).length === 5 ? a[0] : vars;
              }

              a = (endValue + "").split(" ");
              vars = {};
              props.forEach(function (prop, i) {
                return (vars[prop] = a[i] = a[i] || a[((i - 1) / 2) | 0]);
              });
              plugin.init(target, vars, tween);
            };
          }
        );

        var CSSPlugin = {
          name: "css",
          register: _initCore,
          targetTest: function targetTest(target) {
            return target.style && target.nodeType;
          },
          init: function init(target, vars, tween, index, targets) {
            var props = this._props,
              style = target.style,
              startAt = tween.vars.startAt,
              startValue,
              endValue,
              endNum,
              startNum,
              type,
              specialProp,
              p,
              startUnit,
              endUnit,
              relative,
              isTransformRelated,
              transformPropTween,
              cache,
              smooth,
              hasPriority,
              inlineProps;
            _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps

            this.styles = this.styles || _getStyleSaver(target);
            inlineProps = this.styles.props;
            this.tween = tween;

            for (p in vars) {
              if (p === "autoRound") {
                continue;
              }

              endValue = vars[p];

              if (
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_plugins"][p] &&
                Object(
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_checkPlugin"]
                )(p, vars, tween, index, target, targets)
              ) {
                // plugins
                continue;
              }

              type = typeof endValue;
              specialProp = _specialProps[p];

              if (type === "function") {
                endValue = endValue.call(tween, index, target, targets);
                type = typeof endValue;
              }

              if (type === "string" && ~endValue.indexOf("random(")) {
                endValue = Object(
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_replaceRandom"]
                )(endValue);
              }

              if (specialProp) {
                specialProp(this, target, p, endValue, tween) &&
                  (hasPriority = 1);
              } else if (p.substr(0, 2) === "--") {
                //CSS variable
                startValue = (
                  getComputedStyle(target).getPropertyValue(p) + ""
                ).trim();
                endValue += "";
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                  "_colorExp"
                ].lastIndex = 0;

                if (
                  !_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_colorExp"].test(
                    startValue
                  )
                ) {
                  // colors don't have units
                  startUnit = Object(
                    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"]
                  )(startValue);
                  endUnit = Object(
                    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"]
                  )(endValue);
                }

                endUnit
                  ? startUnit !== endUnit &&
                    (startValue =
                      _convertToUnit(target, p, startValue, endUnit) + endUnit)
                  : startUnit && (endValue += startUnit);
                this.add(
                  style,
                  "setProperty",
                  startValue,
                  endValue,
                  index,
                  targets,
                  0,
                  0,
                  p
                );
                props.push(p);
                inlineProps.push(p, 0, style[p]);
              } else if (type !== "undefined") {
                if (startAt && p in startAt) {
                  // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
                  startValue =
                    typeof startAt[p] === "function"
                      ? startAt[p].call(tween, index, target, targets)
                      : startAt[p];
                  Object(
                    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_isString"]
                  )(startValue) &&
                    ~startValue.indexOf("random(") &&
                    (startValue = Object(
                      _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                        "_replaceRandom"
                      ]
                    )(startValue));
                  Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"])(
                    startValue + ""
                  ) ||
                    startValue === "auto" ||
                    (startValue +=
                      _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"]
                        .units[p] ||
                      Object(
                        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"]
                      )(_get(target, p)) ||
                      ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

                  (startValue + "").charAt(1) === "=" &&
                    (startValue = _get(target, p)); // can't work with relative values
                } else {
                  startValue = _get(target, p);
                }

                startNum = parseFloat(startValue);
                relative =
                  type === "string" &&
                  endValue.charAt(1) === "=" &&
                  endValue.substr(0, 2);
                relative && (endValue = endValue.substr(2));
                endNum = parseFloat(endValue);

                if (p in _propertyAliases) {
                  if (p === "autoAlpha") {
                    //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
                    if (
                      startNum === 1 &&
                      _get(target, "visibility") === "hidden" &&
                      endNum
                    ) {
                      //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
                      startNum = 0;
                    }

                    inlineProps.push("visibility", 0, style.visibility);

                    _addNonTweeningPT(
                      this,
                      style,
                      "visibility",
                      startNum ? "inherit" : "hidden",
                      endNum ? "inherit" : "hidden",
                      !endNum
                    );
                  }

                  if (p !== "scale" && p !== "transform") {
                    p = _propertyAliases[p];
                    ~p.indexOf(",") && (p = p.split(",")[0]);
                  }
                }

                isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

                if (isTransformRelated) {
                  this.styles.save(p);

                  if (!transformPropTween) {
                    cache = target._gsap;
                    (cache.renderTransform && !vars.parseTransform) ||
                      _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

                    smooth = vars.smoothOrigin !== false && cache.smooth;
                    transformPropTween = this._pt =
                      new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                        "PropTween"
                      ](
                        this._pt,
                        style,
                        _transformProp,
                        0,
                        1,
                        cache.renderTransform,
                        cache,
                        0,
                        -1
                      ); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

                    transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
                  }

                  if (p === "scale") {
                    this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                      "PropTween"
                    ](
                      this._pt,
                      cache,
                      "scaleY",
                      cache.scaleY,
                      (relative
                        ? Object(
                            _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                              "_parseRelative"
                            ]
                          )(cache.scaleY, relative + endNum)
                        : endNum) - cache.scaleY || 0,
                      _renderCSSProp
                    );
                    this._pt.u = 0;
                    props.push("scaleY", p);
                    p += "X";
                  } else if (p === "transformOrigin") {
                    inlineProps.push(
                      _transformOriginProp,
                      0,
                      style[_transformOriginProp]
                    );
                    endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

                    if (cache.svg) {
                      _applySVGOrigin(target, endValue, 0, smooth, 0, this);
                    } else {
                      endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

                      endUnit !== cache.zOrigin &&
                        _addNonTweeningPT(
                          this,
                          cache,
                          "zOrigin",
                          cache.zOrigin,
                          endUnit
                        );

                      _addNonTweeningPT(
                        this,
                        style,
                        p,
                        _firstTwoOnly(startValue),
                        _firstTwoOnly(endValue)
                      );
                    }

                    continue;
                  } else if (p === "svgOrigin") {
                    _applySVGOrigin(target, endValue, 1, smooth, 0, this);

                    continue;
                  } else if (p in _rotationalProperties) {
                    _addRotationalPropTween(
                      this,
                      cache,
                      p,
                      startNum,
                      relative
                        ? Object(
                            _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                              "_parseRelative"
                            ]
                          )(startNum, relative + endValue)
                        : endValue
                    );

                    continue;
                  } else if (p === "smoothOrigin") {
                    _addNonTweeningPT(
                      this,
                      cache,
                      "smooth",
                      cache.smooth,
                      endValue
                    );

                    continue;
                  } else if (p === "force3D") {
                    cache[p] = endValue;
                    continue;
                  } else if (p === "transform") {
                    _addRawTransformPTs(this, endValue, target);

                    continue;
                  }
                } else if (!(p in style)) {
                  p = _checkPropPrefix(p) || p;
                }

                if (
                  isTransformRelated ||
                  ((endNum || endNum === 0) &&
                    (startNum || startNum === 0) &&
                    !_complexExp.test(endValue) &&
                    p in style)
                ) {
                  startUnit = (startValue + "").substr((startNum + "").length);
                  endNum || (endNum = 0); // protect against NaN

                  endUnit =
                    Object(
                      _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["getUnit"]
                    )(endValue) ||
                    (p in
                    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"].units
                      ? _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"]
                          .units[p]
                      : startUnit);
                  startUnit !== endUnit &&
                    (startNum = _convertToUnit(target, p, startValue, endUnit));
                  this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                    "PropTween"
                  ](
                    this._pt,
                    isTransformRelated ? cache : style,
                    p,
                    startNum,
                    (relative
                      ? Object(
                          _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                            "_parseRelative"
                          ]
                        )(startNum, relative + endNum)
                      : endNum) - startNum,
                    !isTransformRelated &&
                    (endUnit === "px" || p === "zIndex") &&
                    vars.autoRound !== false
                      ? _renderRoundedCSSProp
                      : _renderCSSProp
                  );
                  this._pt.u = endUnit || 0;

                  if (startUnit !== endUnit && endUnit !== "%") {
                    //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
                    this._pt.b = startValue;
                    this._pt.r = _renderCSSPropWithBeginning;
                  }
                } else if (!(p in style)) {
                  if (p in target) {
                    //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
                    this.add(
                      target,
                      p,
                      startValue || target[p],
                      relative ? relative + endValue : endValue,
                      index,
                      targets
                    );
                  } else if (p !== "parseTransform") {
                    Object(
                      _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                        "_missingPlugin"
                      ]
                    )(p, endValue);

                    continue;
                  }
                } else {
                  _tweenComplexCSSString.call(
                    this,
                    target,
                    p,
                    startValue,
                    relative ? relative + endValue : endValue
                  );
                }

                isTransformRelated ||
                  (p in style
                    ? inlineProps.push(p, 0, style[p])
                    : inlineProps.push(p, 1, startValue || target[p]));
                props.push(p);
              }
            }

            hasPriority &&
              Object(
                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[
                  "_sortPropTweensByPriority"
                ]
              )(this);
          },
          render: function render(ratio, data) {
            if (data.tween._time || !_reverting()) {
              var pt = data._pt;

              while (pt) {
                pt.r(ratio, pt.d);
                pt = pt._next;
              }
            } else {
              data.styles.revert();
            }
          },
          get: _get,
          aliases: _propertyAliases,
          getSetter: function getSetter(target, property, plugin) {
            //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
            var p = _propertyAliases[property];
            p && p.indexOf(",") < 0 && (property = p);
            return property in _transformProps &&
              property !== _transformOriginProp &&
              (target._gsap.x || _get(target, "x"))
              ? plugin && _recentSetterPlugin === plugin
                ? property === "scale"
                  ? _setterScale
                  : _setterTransform
                : (_recentSetterPlugin = plugin || {}) &&
                  (property === "scale"
                    ? _setterScaleWithRender
                    : _setterTransformWithRender)
              : target.style &&
                !Object(
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_isUndefined"]
                )(target.style[property])
              ? _setterCSSStyle
              : ~property.indexOf("-")
              ? _setterCSSProp
              : Object(
                  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_getSetter"]
                )(target, property);
          },
          core: {
            _removeProperty: _removeProperty,
            _getMatrix: _getMatrix,
          },
        };
        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"].utils.checkPrefix =
          _checkPropPrefix;
        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"].core.getStyleSaver =
          _getStyleSaver;

        (function (positionAndScale, rotation, others, aliases) {
          var all = Object(
            _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_forEachName"]
          )(positionAndScale + "," + rotation + "," + others, function (name) {
            _transformProps[name] = 1;
          });

          Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_forEachName"])(
            rotation,
            function (name) {
              _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"].units[
                name
              ] = "deg";
              _rotationalProperties[name] = 1;
            }
          );

          _propertyAliases[all[13]] = positionAndScale + "," + rotation;

          Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_forEachName"])(
            aliases,
            function (name) {
              var split = name.split(":");
              _propertyAliases[split[1]] = all[split[0]];
            }
          );
        })(
          "x,y,z,scale,scaleX,scaleY,xPercent,yPercent",
          "rotation,rotationX,rotationY,skewX,skewY",
          "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",
          "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY"
        );

        Object(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_forEachName"])(
          "x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",
          function (name) {
            _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["_config"].units[name] =
              "px";
          }
        );

        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"].registerPlugin(
          CSSPlugin
        );

        /***/
      },

    /***/ "./node_modules/gsap/Observer.js":
      /*!***************************************!*\
  !*** ./node_modules/gsap/Observer.js ***!
  \***************************************/
      /*! exports provided: Observer, default, _isViewport, _scrollers, _getScrollFunc, _getProxyProp, _proxies, _getVelocityProp, _vertical, _horizontal, _getTarget */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Observer",
          function () {
            return Observer;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Observer;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_isViewport",
          function () {
            return _isViewport;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_scrollers",
          function () {
            return _scrollers;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_getScrollFunc",
          function () {
            return _getScrollFunc;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_getProxyProp",
          function () {
            return _getProxyProp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_proxies",
          function () {
            return _proxies;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_getVelocityProp",
          function () {
            return _getVelocityProp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_vertical",
          function () {
            return _vertical;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_horizontal",
          function () {
            return _horizontal;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_getTarget",
          function () {
            return _getTarget;
          }
        );
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        /*!
         * Observer 3.12.5
         * https://gsap.com
         *
         * @license Copyright 2008-2024, GreenSock. All rights reserved.
         * Subject to the terms at https://gsap.com/standard-license or for
         * Club GSAP members, the agreement issued with that membership.
         * @author: Jack Doyle, jack@greensock.com
         */

        /* eslint-disable */
        var gsap,
          _coreInitted,
          _clamp,
          _win,
          _doc,
          _docEl,
          _body,
          _isTouch,
          _pointerType,
          ScrollTrigger,
          _root,
          _normalizer,
          _eventTypes,
          _context,
          _getGSAP = function _getGSAP() {
            return (
              gsap ||
              (typeof window !== "undefined" &&
                (gsap = window.gsap) &&
                gsap.registerPlugin &&
                gsap)
            );
          },
          _startup = 1,
          _observers = [],
          _scrollers = [],
          _proxies = [],
          _getTime = Date.now,
          _bridge = function _bridge(name, value) {
            return value;
          },
          _integrate = function _integrate() {
            var core = ScrollTrigger.core,
              data = core.bridge || {},
              scrollers = core._scrollers,
              proxies = core._proxies;
            scrollers.push.apply(scrollers, _scrollers);
            proxies.push.apply(proxies, _proxies);
            _scrollers = scrollers;
            _proxies = proxies;

            _bridge = function _bridge(name, value) {
              return data[name](value);
            };
          },
          _getProxyProp = function _getProxyProp(element, property) {
            return (
              ~_proxies.indexOf(element) &&
              _proxies[_proxies.indexOf(element) + 1][property]
            );
          },
          _isViewport = function _isViewport(el) {
            return !!~_root.indexOf(el);
          },
          _addListener = function _addListener(
            element,
            type,
            func,
            passive,
            capture
          ) {
            return element.addEventListener(type, func, {
              passive: passive !== false,
              capture: !!capture,
            });
          },
          _removeListener = function _removeListener(
            element,
            type,
            func,
            capture
          ) {
            return element.removeEventListener(type, func, !!capture);
          },
          _scrollLeft = "scrollLeft",
          _scrollTop = "scrollTop",
          _onScroll = function _onScroll() {
            return (_normalizer && _normalizer.isPressed) || _scrollers.cache++;
          },
          _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {
            var cachingFunc = function cachingFunc(value) {
              // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a "scroll" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when "soft" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)
              if (value || value === 0) {
                _startup && (_win.history.scrollRestoration = "manual"); // otherwise the new position will get overwritten by the browser onload.

                var isNormalizing = _normalizer && _normalizer.isPressed;
                value = cachingFunc.v =
                  Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!

                f(value);
                cachingFunc.cacheID = _scrollers.cache;
                isNormalizing && _bridge("ss", value); // set scroll (notify ScrollTrigger so it can dispatch a "scrollStart" event if necessary
              } else if (
                doNotCache ||
                _scrollers.cache !== cachingFunc.cacheID ||
                _bridge("ref")
              ) {
                cachingFunc.cacheID = _scrollers.cache;
                cachingFunc.v = f();
              }

              return cachingFunc.v + cachingFunc.offset;
            };

            cachingFunc.offset = 0;
            return f && cachingFunc;
          },
          _horizontal = {
            s: _scrollLeft,
            p: "left",
            p2: "Left",
            os: "right",
            os2: "Right",
            d: "width",
            d2: "Width",
            a: "x",
            sc: _scrollCacheFunc(function (value) {
              return arguments.length
                ? _win.scrollTo(value, _vertical.sc())
                : _win.pageXOffset ||
                    _doc[_scrollLeft] ||
                    _docEl[_scrollLeft] ||
                    _body[_scrollLeft] ||
                    0;
            }),
          },
          _vertical = {
            s: _scrollTop,
            p: "top",
            p2: "Top",
            os: "bottom",
            os2: "Bottom",
            d: "height",
            d2: "Height",
            a: "y",
            op: _horizontal,
            sc: _scrollCacheFunc(function (value) {
              return arguments.length
                ? _win.scrollTo(_horizontal.sc(), value)
                : _win.pageYOffset ||
                    _doc[_scrollTop] ||
                    _docEl[_scrollTop] ||
                    _body[_scrollTop] ||
                    0;
            }),
          },
          _getTarget = function _getTarget(t, self) {
            return (
              ((self && self._ctx && self._ctx.selector) || gsap.utils.toArray)(
                t
              )[0] ||
              (typeof t === "string" && gsap.config().nullTargetWarn !== false
                ? console.warn("Element not found:", t)
                : null)
            );
          },
          _getScrollFunc = function _getScrollFunc(element, _ref) {
            var s = _ref.s,
              sc = _ref.sc;
            // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a ".rec" property in order to revert to that after refreshing to ensure things don't shift around.
            _isViewport(element) && (element = _doc.scrollingElement || _docEl);

            var i = _scrollers.indexOf(element),
              offset = sc === _vertical.sc ? 1 : 2;

            !~i && (i = _scrollers.push(element) - 1);
            _scrollers[i + offset] ||
              _addListener(element, "scroll", _onScroll); // clear the cache when a scroll occurs

            var prev = _scrollers[i + offset],
              func =
                prev ||
                (_scrollers[i + offset] =
                  _scrollCacheFunc(_getProxyProp(element, s), true) ||
                  (_isViewport(element)
                    ? sc
                    : _scrollCacheFunc(function (value) {
                        return arguments.length
                          ? (element[s] = value)
                          : element[s];
                      })));
            func.target = element;
            prev ||
              (func.smooth =
                gsap.getProperty(element, "scrollBehavior") === "smooth"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.

            return func;
          },
          _getVelocityProp = function _getVelocityProp(
            value,
            minTimeRefresh,
            useDelta
          ) {
            var v1 = value,
              v2 = value,
              t1 = _getTime(),
              t2 = t1,
              min = minTimeRefresh || 50,
              dropToZeroTime = Math.max(500, min * 3),
              update = function update(value, force) {
                var t = _getTime();

                if (force || t - t1 > min) {
                  v2 = v1;
                  v1 = value;
                  t2 = t1;
                  t1 = t;
                } else if (useDelta) {
                  v1 += value;
                } else {
                  // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.
                  v1 = v2 + ((value - v2) / (t - t2)) * (t1 - t2);
                }
              },
              reset = function reset() {
                v2 = v1 = useDelta ? 0 : v1;
                t2 = t1 = 0;
              },
              getVelocity = function getVelocity(latestValue) {
                var tOld = t2,
                  vOld = v2,
                  t = _getTime();

                (latestValue || latestValue === 0) &&
                  latestValue !== v1 &&
                  update(latestValue);
                return t1 === t2 || t - t2 > dropToZeroTime
                  ? 0
                  : ((v1 + (useDelta ? vOld : -vOld)) /
                      ((useDelta ? t : t1) - tOld)) *
                      1000;
              };

            return {
              update: update,
              reset: reset,
              getVelocity: getVelocity,
            };
          },
          _getEvent = function _getEvent(e, preventDefault) {
            preventDefault && !e._gsapAllow && e.preventDefault();
            return e.changedTouches ? e.changedTouches[0] : e;
          },
          _getAbsoluteMax = function _getAbsoluteMax(a) {
            var max = Math.max.apply(Math, a),
              min = Math.min.apply(Math, a);
            return Math.abs(max) >= Math.abs(min) ? max : min;
          },
          _setScrollTrigger = function _setScrollTrigger() {
            ScrollTrigger = gsap.core.globals().ScrollTrigger;
            ScrollTrigger && ScrollTrigger.core && _integrate();
          },
          _initCore = function _initCore(core) {
            gsap = core || _getGSAP();

            if (
              !_coreInitted &&
              gsap &&
              typeof document !== "undefined" &&
              document.body
            ) {
              _win = window;
              _doc = document;
              _docEl = _doc.documentElement;
              _body = _doc.body;
              _root = [_win, _doc, _docEl, _body];
              _clamp = gsap.utils.clamp;

              _context = gsap.core.context || function () {};

              _pointerType = "onpointerenter" in _body ? "pointer" : "mouse"; // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.

              _isTouch = Observer.isTouch =
                _win.matchMedia &&
                _win.matchMedia("(hover: none), (pointer: coarse)").matches
                  ? 1
                  : "ontouchstart" in _win ||
                    navigator.maxTouchPoints > 0 ||
                    navigator.msMaxTouchPoints > 0
                  ? 2
                  : 0;
              _eventTypes = Observer.eventTypes = (
                "ontouchstart" in _docEl
                  ? "touchstart,touchmove,touchcancel,touchend"
                  : !("onpointerdown" in _docEl)
                  ? "mousedown,mousemove,mouseup,mouseup"
                  : "pointerdown,pointermove,pointercancel,pointerup"
              ).split(",");
              setTimeout(function () {
                return (_startup = 0);
              }, 500);

              _setScrollTrigger();

              _coreInitted = 1;
            }

            return _coreInitted;
          };

        _horizontal.op = _vertical;
        _scrollers.cache = 0;
        var Observer = /*#__PURE__*/ (function () {
          function Observer(vars) {
            this.init(vars);
          }

          var _proto = Observer.prototype;

          _proto.init = function init(vars) {
            _coreInitted ||
              _initCore(gsap) ||
              console.warn("Please gsap.registerPlugin(Observer)");
            ScrollTrigger || _setScrollTrigger();
            var tolerance = vars.tolerance,
              dragMinimum = vars.dragMinimum,
              type = vars.type,
              target = vars.target,
              lineHeight = vars.lineHeight,
              debounce = vars.debounce,
              preventDefault = vars.preventDefault,
              onStop = vars.onStop,
              onStopDelay = vars.onStopDelay,
              ignore = vars.ignore,
              wheelSpeed = vars.wheelSpeed,
              event = vars.event,
              onDragStart = vars.onDragStart,
              onDragEnd = vars.onDragEnd,
              onDrag = vars.onDrag,
              onPress = vars.onPress,
              onRelease = vars.onRelease,
              onRight = vars.onRight,
              onLeft = vars.onLeft,
              onUp = vars.onUp,
              onDown = vars.onDown,
              onChangeX = vars.onChangeX,
              onChangeY = vars.onChangeY,
              onChange = vars.onChange,
              onToggleX = vars.onToggleX,
              onToggleY = vars.onToggleY,
              onHover = vars.onHover,
              onHoverEnd = vars.onHoverEnd,
              onMove = vars.onMove,
              ignoreCheck = vars.ignoreCheck,
              isNormalizer = vars.isNormalizer,
              onGestureStart = vars.onGestureStart,
              onGestureEnd = vars.onGestureEnd,
              onWheel = vars.onWheel,
              onEnable = vars.onEnable,
              onDisable = vars.onDisable,
              onClick = vars.onClick,
              scrollSpeed = vars.scrollSpeed,
              capture = vars.capture,
              allowClicks = vars.allowClicks,
              lockAxis = vars.lockAxis,
              onLockAxis = vars.onLockAxis;
            this.target = target = _getTarget(target) || _docEl;
            this.vars = vars;
            ignore && (ignore = gsap.utils.toArray(ignore));
            tolerance = tolerance || 1e-9;
            dragMinimum = dragMinimum || 0;
            wheelSpeed = wheelSpeed || 1;
            scrollSpeed = scrollSpeed || 1;
            type = type || "wheel,touch,pointer";
            debounce = debounce !== false;
            lineHeight ||
              (lineHeight =
                parseFloat(_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report "normal", so default to 22.

            var id,
              onStopDelayedCall,
              dragged,
              moved,
              wheeled,
              locked,
              axis,
              self = this,
              prevDeltaX = 0,
              prevDeltaY = 0,
              passive = vars.passive || !preventDefault,
              scrollFuncX = _getScrollFunc(target, _horizontal),
              scrollFuncY = _getScrollFunc(target, _vertical),
              scrollX = scrollFuncX(),
              scrollY = scrollFuncY(),
              limitToTouch =
                ~type.indexOf("touch") &&
                !~type.indexOf("pointer") &&
                _eventTypes[0] === "pointerdown",
              // for devices that accommodate mouse events and touch events, we need to distinguish.
              isViewport = _isViewport(target),
              ownerDoc = target.ownerDocument || _doc,
              deltaX = [0, 0, 0],
              // wheel, scroll, pointer/touch
              deltaY = [0, 0, 0],
              onClickTime = 0,
              clickCapture = function clickCapture() {
                return (onClickTime = _getTime());
              },
              _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {
                return (
                  ((self.event = e) && ignore && ~ignore.indexOf(e.target)) ||
                  (isPointerOrTouch &&
                    limitToTouch &&
                    e.pointerType !== "touch") ||
                  (ignoreCheck && ignoreCheck(e, isPointerOrTouch))
                );
              },
              onStopFunc = function onStopFunc() {
                self._vx.reset();

                self._vy.reset();

                onStopDelayedCall.pause();
                onStop && onStop(self);
              },
              update = function update() {
                var dx = (self.deltaX = _getAbsoluteMax(deltaX)),
                  dy = (self.deltaY = _getAbsoluteMax(deltaY)),
                  changedX = Math.abs(dx) >= tolerance,
                  changedY = Math.abs(dy) >= tolerance;

                onChange &&
                  (changedX || changedY) &&
                  onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.

                if (changedX) {
                  onRight && self.deltaX > 0 && onRight(self);
                  onLeft && self.deltaX < 0 && onLeft(self);
                  onChangeX && onChangeX(self);
                  onToggleX &&
                    self.deltaX < 0 !== prevDeltaX < 0 &&
                    onToggleX(self);
                  prevDeltaX = self.deltaX;
                  deltaX[0] = deltaX[1] = deltaX[2] = 0;
                }

                if (changedY) {
                  onDown && self.deltaY > 0 && onDown(self);
                  onUp && self.deltaY < 0 && onUp(self);
                  onChangeY && onChangeY(self);
                  onToggleY &&
                    self.deltaY < 0 !== prevDeltaY < 0 &&
                    onToggleY(self);
                  prevDeltaY = self.deltaY;
                  deltaY[0] = deltaY[1] = deltaY[2] = 0;
                }

                if (moved || dragged) {
                  onMove && onMove(self);

                  if (dragged) {
                    onDrag(self);
                    dragged = false;
                  }

                  moved = false;
                }

                locked && !(locked = false) && onLockAxis && onLockAxis(self);

                if (wheeled) {
                  onWheel(self);
                  wheeled = false;
                }

                id = 0;
              },
              onDelta = function onDelta(x, y, index) {
                deltaX[index] += x;
                deltaY[index] += y;

                self._vx.update(x);

                self._vy.update(y);

                debounce
                  ? id || (id = requestAnimationFrame(update))
                  : update();
              },
              onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {
                if (lockAxis && !axis) {
                  self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
                  locked = true;
                }

                if (axis !== "y") {
                  deltaX[2] += x;

                  self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.
                }

                if (axis !== "x") {
                  deltaY[2] += y;

                  self._vy.update(y, true);
                }

                debounce
                  ? id || (id = requestAnimationFrame(update))
                  : update();
              },
              _onDrag = function _onDrag(e) {
                if (_ignoreCheck(e, 1)) {
                  return;
                }

                e = _getEvent(e, preventDefault);
                var x = e.clientX,
                  y = e.clientY,
                  dx = x - self.x,
                  dy = y - self.y,
                  isDragging = self.isDragging;
                self.x = x;
                self.y = y;

                if (
                  isDragging ||
                  Math.abs(self.startX - x) >= dragMinimum ||
                  Math.abs(self.startY - y) >= dragMinimum
                ) {
                  onDrag && (dragged = true);
                  isDragging || (self.isDragging = true);
                  onTouchOrPointerDelta(dx, dy);
                  isDragging || (onDragStart && onDragStart(self));
                }
              },
              _onPress = (self.onPress = function (e) {
                if (_ignoreCheck(e, 1) || (e && e.button)) {
                  return;
                }

                self.axis = axis = null;
                onStopDelayedCall.pause();
                self.isPressed = true;
                e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.

                prevDeltaX = prevDeltaY = 0;
                self.startX = self.x = e.clientX;
                self.startY = self.y = e.clientY;

                self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.

                self._vy.reset();

                _addListener(
                  isNormalizer ? target : ownerDoc,
                  _eventTypes[1],
                  _onDrag,
                  passive,
                  true
                );

                self.deltaX = self.deltaY = 0;
                onPress && onPress(self);
              }),
              _onRelease = (self.onRelease = function (e) {
                if (_ignoreCheck(e, 1)) {
                  return;
                }

                _removeListener(
                  isNormalizer ? target : ownerDoc,
                  _eventTypes[1],
                  _onDrag,
                  true
                );

                var isTrackingDrag = !isNaN(self.y - self.startY),
                  wasDragging = self.isDragging,
                  isDragNotClick =
                    wasDragging &&
                    (Math.abs(self.x - self.startX) > 3 ||
                      Math.abs(self.y - self.startY) > 3),
                  // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.
                  eventData = _getEvent(e);

                if (!isDragNotClick && isTrackingDrag) {
                  self._vx.reset();

                  self._vy.reset(); //if (preventDefault && allowClicks && self.isPressed) { // check isPressed because in a rare edge case, the inputObserver in ScrollTrigger may stopPropagation() on the press/drag, so the onRelease may get fired without the onPress/onDrag ever getting called, thus it could trigger a click to occur on a link after scroll-dragging it.

                  if (preventDefault && allowClicks) {
                    gsap.delayedCall(0.08, function () {
                      // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
                      if (
                        _getTime() - onClickTime > 300 &&
                        !e.defaultPrevented
                      ) {
                        if (e.target.click) {
                          //some browsers (like mobile Safari) don't properly trigger the click event
                          e.target.click();
                        } else if (ownerDoc.createEvent) {
                          var syntheticEvent =
                            ownerDoc.createEvent("MouseEvents");
                          syntheticEvent.initMouseEvent(
                            "click",
                            true,
                            true,
                            _win,
                            1,
                            eventData.screenX,
                            eventData.screenY,
                            eventData.clientX,
                            eventData.clientY,
                            false,
                            false,
                            false,
                            false,
                            0,
                            null
                          );
                          e.target.dispatchEvent(syntheticEvent);
                        }
                      }
                    });
                  }
                }

                self.isDragging = self.isGesturing = self.isPressed = false;
                onStop &&
                  wasDragging &&
                  !isNormalizer &&
                  onStopDelayedCall.restart(true);
                onDragEnd && wasDragging && onDragEnd(self);
                onRelease && onRelease(self, isDragNotClick);
              }),
              _onGestureStart = function _onGestureStart(e) {
                return (
                  e.touches &&
                  e.touches.length > 1 &&
                  (self.isGesturing = true) &&
                  onGestureStart(e, self.isDragging)
                );
              },
              _onGestureEnd = function _onGestureEnd() {
                return (self.isGesturing = false) || onGestureEnd(self);
              },
              onScroll = function onScroll(e) {
                if (_ignoreCheck(e)) {
                  return;
                }

                var x = scrollFuncX(),
                  y = scrollFuncY();
                onDelta(
                  (x - scrollX) * scrollSpeed,
                  (y - scrollY) * scrollSpeed,
                  1
                );
                scrollX = x;
                scrollY = y;
                onStop && onStopDelayedCall.restart(true);
              },
              _onWheel = function _onWheel(e) {
                if (_ignoreCheck(e)) {
                  return;
                }

                e = _getEvent(e, preventDefault);
                onWheel && (wheeled = true);
                var multiplier =
                  (e.deltaMode === 1
                    ? lineHeight
                    : e.deltaMode === 2
                    ? _win.innerHeight
                    : 1) * wheelSpeed;
                onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
                onStop && !isNormalizer && onStopDelayedCall.restart(true);
              },
              _onMove = function _onMove(e) {
                if (_ignoreCheck(e)) {
                  return;
                }

                var x = e.clientX,
                  y = e.clientY,
                  dx = x - self.x,
                  dy = y - self.y;
                self.x = x;
                self.y = y;
                moved = true;
                onStop && onStopDelayedCall.restart(true);
                (dx || dy) && onTouchOrPointerDelta(dx, dy);
              },
              _onHover = function _onHover(e) {
                self.event = e;
                onHover(self);
              },
              _onHoverEnd = function _onHoverEnd(e) {
                self.event = e;
                onHoverEnd(self);
              },
              _onClick = function _onClick(e) {
                return (
                  _ignoreCheck(e) ||
                  (_getEvent(e, preventDefault) && onClick(self))
                );
              };

            onStopDelayedCall = self._dc = gsap
              .delayedCall(onStopDelay || 0.25, onStopFunc)
              .pause();
            self.deltaX = self.deltaY = 0;
            self._vx = _getVelocityProp(0, 50, true);
            self._vy = _getVelocityProp(0, 50, true);
            self.scrollX = scrollFuncX;
            self.scrollY = scrollFuncY;
            self.isDragging = self.isGesturing = self.isPressed = false;

            _context(this);

            self.enable = function (e) {
              if (!self.isEnabled) {
                _addListener(
                  isViewport ? ownerDoc : target,
                  "scroll",
                  _onScroll
                );

                type.indexOf("scroll") >= 0 &&
                  _addListener(
                    isViewport ? ownerDoc : target,
                    "scroll",
                    onScroll,
                    passive,
                    capture
                  );
                type.indexOf("wheel") >= 0 &&
                  _addListener(target, "wheel", _onWheel, passive, capture);

                if (
                  (type.indexOf("touch") >= 0 && _isTouch) ||
                  type.indexOf("pointer") >= 0
                ) {
                  _addListener(
                    target,
                    _eventTypes[0],
                    _onPress,
                    passive,
                    capture
                  );

                  _addListener(ownerDoc, _eventTypes[2], _onRelease);

                  _addListener(ownerDoc, _eventTypes[3], _onRelease);

                  allowClicks &&
                    _addListener(target, "click", clickCapture, true, true);
                  onClick && _addListener(target, "click", _onClick);
                  onGestureStart &&
                    _addListener(ownerDoc, "gesturestart", _onGestureStart);
                  onGestureEnd &&
                    _addListener(ownerDoc, "gestureend", _onGestureEnd);
                  onHover &&
                    _addListener(target, _pointerType + "enter", _onHover);
                  onHoverEnd &&
                    _addListener(target, _pointerType + "leave", _onHoverEnd);
                  onMove &&
                    _addListener(target, _pointerType + "move", _onMove);
                }

                self.isEnabled = true;
                e && e.type && _onPress(e);
                onEnable && onEnable(self);
              }

              return self;
            };

            self.disable = function () {
              if (self.isEnabled) {
                // only remove the _onScroll listener if there aren't any others that rely on the functionality.
                _observers.filter(function (o) {
                  return o !== self && _isViewport(o.target);
                }).length ||
                  _removeListener(
                    isViewport ? ownerDoc : target,
                    "scroll",
                    _onScroll
                  );

                if (self.isPressed) {
                  self._vx.reset();

                  self._vy.reset();

                  _removeListener(
                    isNormalizer ? target : ownerDoc,
                    _eventTypes[1],
                    _onDrag,
                    true
                  );
                }

                _removeListener(
                  isViewport ? ownerDoc : target,
                  "scroll",
                  onScroll,
                  capture
                );

                _removeListener(target, "wheel", _onWheel, capture);

                _removeListener(target, _eventTypes[0], _onPress, capture);

                _removeListener(ownerDoc, _eventTypes[2], _onRelease);

                _removeListener(ownerDoc, _eventTypes[3], _onRelease);

                _removeListener(target, "click", clickCapture, true);

                _removeListener(target, "click", _onClick);

                _removeListener(ownerDoc, "gesturestart", _onGestureStart);

                _removeListener(ownerDoc, "gestureend", _onGestureEnd);

                _removeListener(target, _pointerType + "enter", _onHover);

                _removeListener(target, _pointerType + "leave", _onHoverEnd);

                _removeListener(target, _pointerType + "move", _onMove);

                self.isEnabled = self.isPressed = self.isDragging = false;
                onDisable && onDisable(self);
              }
            };

            self.kill = self.revert = function () {
              self.disable();

              var i = _observers.indexOf(self);

              i >= 0 && _observers.splice(i, 1);
              _normalizer === self && (_normalizer = 0);
            };

            _observers.push(self);

            isNormalizer && _isViewport(target) && (_normalizer = self);
            self.enable(event);
          };

          _createClass(Observer, [
            {
              key: "velocityX",
              get: function get() {
                return this._vx.getVelocity();
              },
            },
            {
              key: "velocityY",
              get: function get() {
                return this._vy.getVelocity();
              },
            },
          ]);

          return Observer;
        })();
        Observer.version = "3.12.5";

        Observer.create = function (vars) {
          return new Observer(vars);
        };

        Observer.register = _initCore;

        Observer.getAll = function () {
          return _observers.slice();
        };

        Observer.getById = function (id) {
          return _observers.filter(function (o) {
            return o.vars.id === id;
          })[0];
        };

        _getGSAP() && gsap.registerPlugin(Observer);

        /***/
      },

    /***/ "./node_modules/gsap/ScrollTrigger.js":
      /*!********************************************!*\
  !*** ./node_modules/gsap/ScrollTrigger.js ***!
  \********************************************/
      /*! exports provided: ScrollTrigger, default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "ScrollTrigger",
          function () {
            return ScrollTrigger;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return ScrollTrigger;
          }
        );
        /* harmony import */ var _Observer_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./Observer.js */ "./node_modules/gsap/Observer.js"
          );
        /*!
         * ScrollTrigger 3.12.5
         * https://gsap.com
         *
         * @license Copyright 2008-2024, GreenSock. All rights reserved.
         * Subject to the terms at https://gsap.com/standard-license or for
         * Club GSAP members, the agreement issued with that membership.
         * @author: Jack Doyle, jack@greensock.com
         */

        /* eslint-disable */

        var gsap,
          _coreInitted,
          _win,
          _doc,
          _docEl,
          _body,
          _root,
          _resizeDelay,
          _toArray,
          _clamp,
          _time2,
          _syncInterval,
          _refreshing,
          _pointerIsDown,
          _transformProp,
          _i,
          _prevWidth,
          _prevHeight,
          _autoRefresh,
          _sort,
          _suppressOverwrites,
          _ignoreResize,
          _normalizer,
          _ignoreMobileResize,
          _baseScreenHeight,
          _baseScreenWidth,
          _fixIOSBug,
          _context,
          _scrollRestoration,
          _div100vh,
          _100vh,
          _isReverted,
          _clampingMax,
          _limitCallbacks,
          // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
          _startup = 1,
          _getTime = Date.now,
          _time1 = _getTime(),
          _lastScrollTime = 0,
          _enabled = 0,
          _parseClamp = function _parseClamp(value, type, self) {
            var clamp =
              _isString(value) &&
              (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1);
            self["_" + type + "Clamp"] = clamp;
            return clamp ? value.substr(6, value.length - 7) : value;
          },
          _keepClamp = function _keepClamp(value, clamp) {
            return clamp &&
              (!_isString(value) || value.substr(0, 6) !== "clamp(")
              ? "clamp(" + value + ")"
              : value;
          },
          _rafBugFix = function _rafBugFix() {
            return _enabled && requestAnimationFrame(_rafBugFix);
          },
          // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.
          _pointerDownHandler = function _pointerDownHandler() {
            return (_pointerIsDown = 1);
          },
          _pointerUpHandler = function _pointerUpHandler() {
            return (_pointerIsDown = 0);
          },
          _passThrough = function _passThrough(v) {
            return v;
          },
          _round = function _round(value) {
            return Math.round(value * 100000) / 100000 || 0;
          },
          _windowExists = function _windowExists() {
            return typeof window !== "undefined";
          },
          _getGSAP = function _getGSAP() {
            return (
              gsap ||
              (_windowExists() &&
                (gsap = window.gsap) &&
                gsap.registerPlugin &&
                gsap)
            );
          },
          _isViewport = function _isViewport(e) {
            return !!~_root.indexOf(e);
          },
          _getViewportDimension = function _getViewportDimension(
            dimensionProperty
          ) {
            return (
              (dimensionProperty === "Height"
                ? _100vh
                : _win["inner" + dimensionProperty]) ||
              _docEl["client" + dimensionProperty] ||
              _body["client" + dimensionProperty]
            );
          },
          _getBoundsFunc = function _getBoundsFunc(element) {
            return (
              Object(
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getProxyProp"]
              )(element, "getBoundingClientRect") ||
              (_isViewport(element)
                ? function () {
                    _winOffsets.width = _win.innerWidth;
                    _winOffsets.height = _100vh;
                    return _winOffsets;
                  }
                : function () {
                    return _getBounds(element);
                  })
            );
          },
          _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {
            var d = _ref.d,
              d2 = _ref.d2,
              a = _ref.a;
            return (a = Object(
              _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getProxyProp"]
            )(scroller, "getBoundingClientRect"))
              ? function () {
                  return a()[d];
                }
              : function () {
                  return (
                    (isViewport
                      ? _getViewportDimension(d2)
                      : scroller["client" + d2]) || 0
                  );
                };
          },
          _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {
            return !isViewport ||
              ~_Observer_js__WEBPACK_IMPORTED_MODULE_0__["_proxies"].indexOf(
                element
              )
              ? _getBoundsFunc(element)
              : function () {
                  return _winOffsets;
                };
          },
          _maxScroll = function _maxScroll(element, _ref2) {
            var s = _ref2.s,
              d2 = _ref2.d2,
              d = _ref2.d,
              a = _ref2.a;
            return Math.max(
              0,
              (s = "scroll" + d2) &&
                (a = Object(
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getProxyProp"]
                )(element, s))
                ? a() - _getBoundsFunc(element)()[d]
                : _isViewport(element)
                ? (_docEl[s] || _body[s]) - _getViewportDimension(d2)
                : element[s] - element["offset" + d2]
            );
          },
          _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {
            for (var i = 0; i < _autoRefresh.length; i += 3) {
              (!events || ~events.indexOf(_autoRefresh[i + 1])) &&
                func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);
            }
          },
          _isString = function _isString(value) {
            return typeof value === "string";
          },
          _isFunction = function _isFunction(value) {
            return typeof value === "function";
          },
          _isNumber = function _isNumber(value) {
            return typeof value === "number";
          },
          _isObject = function _isObject(value) {
            return typeof value === "object";
          },
          _endAnimation = function _endAnimation(animation, reversed, pause) {
            return (
              animation &&
              animation.progress(reversed ? 0 : 1) &&
              pause &&
              animation.pause()
            );
          },
          _callback = function _callback(self, func) {
            if (self.enabled) {
              var result = self._ctx
                ? self._ctx.add(function () {
                    return func(self);
                  })
                : func(self);
              result && result.totalTime && (self.callbackAnimation = result);
            }
          },
          _abs = Math.abs,
          _left = "left",
          _top = "top",
          _right = "right",
          _bottom = "bottom",
          _width = "width",
          _height = "height",
          _Right = "Right",
          _Left = "Left",
          _Top = "Top",
          _Bottom = "Bottom",
          _padding = "padding",
          _margin = "margin",
          _Width = "Width",
          _Height = "Height",
          _px = "px",
          _getComputedStyle = function _getComputedStyle(element) {
            return _win.getComputedStyle(element);
          },
          _makePositionable = function _makePositionable(element) {
            // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative
            var position = _getComputedStyle(element).position;

            element.style.position =
              position === "absolute" || position === "fixed"
                ? position
                : "relative";
          },
          _setDefaults = function _setDefaults(obj, defaults) {
            for (var p in defaults) {
              p in obj || (obj[p] = defaults[p]);
            }

            return obj;
          },
          _getBounds = function _getBounds(element, withoutTransforms) {
            var tween =
                withoutTransforms &&
                _getComputedStyle(element)[_transformProp] !==
                  "matrix(1, 0, 0, 1, 0, 0)" &&
                gsap
                  .to(element, {
                    x: 0,
                    y: 0,
                    xPercent: 0,
                    yPercent: 0,
                    rotation: 0,
                    rotationX: 0,
                    rotationY: 0,
                    scale: 1,
                    skewX: 0,
                    skewY: 0,
                  })
                  .progress(1),
              bounds = element.getBoundingClientRect();
            tween && tween.progress(0).kill();
            return bounds;
          },
          _getSize = function _getSize(element, _ref3) {
            var d2 = _ref3.d2;
            return element["offset" + d2] || element["client" + d2] || 0;
          },
          _getLabelRatioArray = function _getLabelRatioArray(timeline) {
            var a = [],
              labels = timeline.labels,
              duration = timeline.duration(),
              p;

            for (p in labels) {
              a.push(labels[p] / duration);
            }

            return a;
          },
          _getClosestLabel = function _getClosestLabel(animation) {
            return function (value) {
              return gsap.utils.snap(_getLabelRatioArray(animation), value);
            };
          },
          _snapDirectional = function _snapDirectional(snapIncrementOrArray) {
            var snap = gsap.utils.snap(snapIncrementOrArray),
              a =
                Array.isArray(snapIncrementOrArray) &&
                snapIncrementOrArray.slice(0).sort(function (a, b) {
                  return a - b;
                });
            return a
              ? function (value, direction, threshold) {
                  if (threshold === void 0) {
                    threshold = 1e-3;
                  }

                  var i;

                  if (!direction) {
                    return snap(value);
                  }

                  if (direction > 0) {
                    value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.

                    for (i = 0; i < a.length; i++) {
                      if (a[i] >= value) {
                        return a[i];
                      }
                    }

                    return a[i - 1];
                  } else {
                    i = a.length;
                    value += threshold;

                    while (i--) {
                      if (a[i] <= value) {
                        return a[i];
                      }
                    }
                  }

                  return a[0];
                }
              : function (value, direction, threshold) {
                  if (threshold === void 0) {
                    threshold = 1e-3;
                  }

                  var snapped = snap(value);
                  return !direction ||
                    Math.abs(snapped - value) < threshold ||
                    snapped - value < 0 === direction < 0
                    ? snapped
                    : snap(
                        direction < 0
                          ? value - snapIncrementOrArray
                          : value + snapIncrementOrArray
                      );
                };
          },
          _getLabelAtDirection = function _getLabelAtDirection(timeline) {
            return function (value, st) {
              return _snapDirectional(_getLabelRatioArray(timeline))(
                value,
                st.direction
              );
            };
          },
          _multiListener = function _multiListener(
            func,
            element,
            types,
            callback
          ) {
            return types.split(",").forEach(function (type) {
              return func(element, type, callback);
            });
          },
          _addListener = function _addListener(
            element,
            type,
            func,
            nonPassive,
            capture
          ) {
            return element.addEventListener(type, func, {
              passive: !nonPassive,
              capture: !!capture,
            });
          },
          _removeListener = function _removeListener(
            element,
            type,
            func,
            capture
          ) {
            return element.removeEventListener(type, func, !!capture);
          },
          _wheelListener = function _wheelListener(func, el, scrollFunc) {
            scrollFunc = scrollFunc && scrollFunc.wheelHandler;

            if (scrollFunc) {
              func(el, "wheel", scrollFunc);
              func(el, "touchmove", scrollFunc);
            }
          },
          _markerDefaults = {
            startColor: "green",
            endColor: "red",
            indent: 0,
            fontSize: "16px",
            fontWeight: "normal",
          },
          _defaults = {
            toggleActions: "play",
            anticipatePin: 0,
          },
          _keywords = {
            top: 0,
            left: 0,
            center: 0.5,
            bottom: 1,
            right: 1,
          },
          _offsetToPx = function _offsetToPx(value, size) {
            if (_isString(value)) {
              var eqIndex = value.indexOf("="),
                relative = ~eqIndex
                  ? +(value.charAt(eqIndex - 1) + 1) *
                    parseFloat(value.substr(eqIndex + 1))
                  : 0;

              if (~eqIndex) {
                value.indexOf("%") > eqIndex && (relative *= size / 100);
                value = value.substr(0, eqIndex - 1);
              }

              value =
                relative +
                (value in _keywords
                  ? _keywords[value] * size
                  : ~value.indexOf("%")
                  ? (parseFloat(value) * size) / 100
                  : parseFloat(value) || 0);
            }

            return value;
          },
          _createMarker = function _createMarker(
            type,
            name,
            container,
            direction,
            _ref4,
            offset,
            matchWidthEl,
            containerAnimation
          ) {
            var startColor = _ref4.startColor,
              endColor = _ref4.endColor,
              fontSize = _ref4.fontSize,
              indent = _ref4.indent,
              fontWeight = _ref4.fontWeight;

            var e = _doc.createElement("div"),
              useFixedPosition =
                _isViewport(container) ||
                Object(
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getProxyProp"]
                )(container, "pinType") === "fixed",
              isScroller = type.indexOf("scroller") !== -1,
              parent = useFixedPosition ? _body : container,
              isStart = type.indexOf("start") !== -1,
              color = isStart ? startColor : endColor,
              css =
                "border-color:" +
                color +
                ";font-size:" +
                fontSize +
                ";color:" +
                color +
                ";font-weight:" +
                fontWeight +
                ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";

            css +=
              "position:" +
              ((isScroller || containerAnimation) && useFixedPosition
                ? "fixed;"
                : "absolute;");
            (isScroller || containerAnimation || !useFixedPosition) &&
              (css +=
                (direction ===
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"]
                  ? _right
                  : _bottom) +
                ":" +
                (offset + parseFloat(indent)) +
                "px;");
            matchWidthEl &&
              (css +=
                "box-sizing:border-box;text-align:left;width:" +
                matchWidthEl.offsetWidth +
                "px;");
            e._isStart = isStart;
            e.setAttribute(
              "class",
              "gsap-marker-" + type + (name ? " marker-" + name : "")
            );
            e.style.cssText = css;
            e.innerText = name || name === 0 ? type + "-" + name : type;
            parent.children[0]
              ? parent.insertBefore(e, parent.children[0])
              : parent.appendChild(e);
            e._offset = e["offset" + direction.op.d2];

            _positionMarker(e, 0, direction, isStart);

            return e;
          },
          _positionMarker = function _positionMarker(
            marker,
            start,
            direction,
            flipped
          ) {
            var vars = {
                display: "block",
              },
              side = direction[flipped ? "os2" : "p2"],
              oppositeSide = direction[flipped ? "p2" : "os2"];
            marker._isFlipped = flipped;
            vars[direction.a + "Percent"] = flipped ? -100 : 0;
            vars[direction.a] = flipped ? "1px" : 0;
            vars["border" + side + _Width] = 1;
            vars["border" + oppositeSide + _Width] = 0;
            vars[direction.p] = start + "px";
            gsap.set(marker, vars);
          },
          _triggers = [],
          _ids = {},
          _rafID,
          _sync = function _sync() {
            return (
              _getTime() - _lastScrollTime > 34 &&
              (_rafID || (_rafID = requestAnimationFrame(_updateAll)))
            );
          },
          _onScroll = function _onScroll() {
            // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010
            if (
              !_normalizer ||
              !_normalizer.isPressed ||
              _normalizer.startX > _body.clientWidth
            ) {
              // if the user is dragging the scrollbar, allow it.
              _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].cache++;

              if (_normalizer) {
                _rafID || (_rafID = requestAnimationFrame(_updateAll));
              } else {
                _updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110
              }

              _lastScrollTime || _dispatch("scrollStart");
              _lastScrollTime = _getTime();
            }
          },
          _setBaseDimensions = function _setBaseDimensions() {
            _baseScreenWidth = _win.innerWidth;
            _baseScreenHeight = _win.innerHeight;
          },
          _onResize = function _onResize() {
            _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].cache++;
            !_refreshing &&
              !_ignoreResize &&
              !_doc.fullscreenElement &&
              !_doc.webkitFullscreenElement &&
              (!_ignoreMobileResize ||
                _baseScreenWidth !== _win.innerWidth ||
                Math.abs(_win.innerHeight - _baseScreenHeight) >
                  _win.innerHeight * 0.25) &&
              _resizeDelay.restart(true);
          },
          // ignore resizes triggered by refresh()
          _listeners = {},
          _emptyArray = [],
          _softRefresh = function _softRefresh() {
            return (
              _removeListener(ScrollTrigger, "scrollEnd", _softRefresh) ||
              _refreshAll(true)
            );
          },
          _dispatch = function _dispatch(type) {
            return (
              (_listeners[type] &&
                _listeners[type].map(function (f) {
                  return f();
                })) ||
              _emptyArray
            );
          },
          _savedStyles = [],
          // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
          _revertRecorded = function _revertRecorded(media) {
            for (var i = 0; i < _savedStyles.length; i += 5) {
              if (
                !media ||
                (_savedStyles[i + 4] && _savedStyles[i + 4].query === media)
              ) {
                _savedStyles[i].style.cssText = _savedStyles[i + 1];
                _savedStyles[i].getBBox &&
                  _savedStyles[i].setAttribute(
                    "transform",
                    _savedStyles[i + 2] || ""
                  );
                _savedStyles[i + 3].uncache = 1;
              }
            }
          },
          _revertAll = function _revertAll(kill, media) {
            var trigger;

            for (_i = 0; _i < _triggers.length; _i++) {
              trigger = _triggers[_i];

              if (trigger && (!media || trigger._ctx === media)) {
                if (kill) {
                  trigger.kill(1);
                } else {
                  trigger.revert(true, true);
                }
              }
            }

            _isReverted = true;
            media && _revertRecorded(media);
            media || _dispatch("revert");
          },
          _clearScrollMemory = function _clearScrollMemory(
            scrollRestoration,
            force
          ) {
            // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.
            _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].cache++;
            (force || !_refreshingAll) &&
              _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].forEach(
                function (obj) {
                  return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);
                }
              );
            _isString(scrollRestoration) &&
              (_win.history.scrollRestoration = _scrollRestoration =
                scrollRestoration);
          },
          _refreshingAll,
          _refreshID = 0,
          _queueRefreshID,
          _queueRefreshAll = function _queueRefreshAll() {
            // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's "load" or "DOMContentLoaded" events to trigger it.
            if (_queueRefreshID !== _refreshID) {
              var id = (_queueRefreshID = _refreshID);
              requestAnimationFrame(function () {
                return id === _refreshID && _refreshAll(true);
              });
            }
          },
          _refresh100vh = function _refresh100vh() {
            _body.appendChild(_div100vh);

            _100vh =
              (!_normalizer && _div100vh.offsetHeight) || _win.innerHeight;

            _body.removeChild(_div100vh);
          },
          _hideAllMarkers = function _hideAllMarkers(hide) {
            return _toArray(
              ".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end"
            ).forEach(function (el) {
              return (el.style.display = hide ? "none" : "block");
            });
          },
          _refreshAll = function _refreshAll(force, skipRevert) {
            if (_lastScrollTime && !force && !_isReverted) {
              _addListener(ScrollTrigger, "scrollEnd", _softRefresh);

              return;
            }

            _refresh100vh();

            _refreshingAll = ScrollTrigger.isRefreshing = true;

            _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].forEach(
              function (obj) {
                return _isFunction(obj) && ++obj.cacheID && (obj.rec = obj());
              }
            ); // force the clearing of the cache because some browsers take a little while to dispatch the "scroll" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away

            var refreshInits = _dispatch("refreshInit");

            _sort && ScrollTrigger.sort();
            skipRevert || _revertAll();

            _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].forEach(
              function (obj) {
                if (_isFunction(obj)) {
                  obj.smooth && (obj.target.style.scrollBehavior = "auto"); // smooth scrolling interferes

                  obj(0);
                }
              }
            );

            _triggers.slice(0).forEach(function (t) {
              return t.refresh();
            }); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.

            _isReverted = false;

            _triggers.forEach(function (t) {
              // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.
              if (t._subPinOffset && t.pin) {
                var prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
                  original = t.pin[prop];
                t.revert(true, 1);
                t.adjustPinSpacing(t.pin[prop] - original);
                t.refresh();
              }
            });

            _clampingMax = 1; // pinSpacing might be propping a page open, thus when we .setPositions() to clamp a ScrollTrigger's end we should leave the pinSpacing alone. That's what this flag is for.

            _hideAllMarkers(true);

            _triggers.forEach(function (t) {
              // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: "max". Same for anything with a clamped end
              var max = _maxScroll(t.scroller, t._dir),
                endClamp = t.vars.end === "max" || (t._endClamp && t.end > max),
                startClamp = t._startClamp && t.start >= max;

              (endClamp || startClamp) &&
                t.setPositions(
                  startClamp ? max - 1 : t.start,
                  endClamp
                    ? Math.max(startClamp ? max : t.start + 1, max)
                    : t.end,
                  true
                );
            });

            _hideAllMarkers(false);

            _clampingMax = 0;
            refreshInits.forEach(function (result) {
              return result && result.render && result.render(-1);
            }); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.

            _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].forEach(
              function (obj) {
                if (_isFunction(obj)) {
                  obj.smooth &&
                    requestAnimationFrame(function () {
                      return (obj.target.style.scrollBehavior = "smooth");
                    });
                  obj.rec && obj(obj.rec);
                }
              }
            );

            _clearScrollMemory(_scrollRestoration, 1);

            _resizeDelay.pause();

            _refreshID++;
            _refreshingAll = 2;

            _updateAll(2);

            _triggers.forEach(function (t) {
              return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);
            });

            _refreshingAll = ScrollTrigger.isRefreshing = false;

            _dispatch("refresh");
          },
          _lastScroll = 0,
          _direction = 1,
          _primary,
          _updateAll = function _updateAll(force) {
            if (force === 2 || (!_refreshingAll && !_isReverted)) {
              // _isReverted could be true if, for example, a matchMedia() is in the process of executing. We don't want to update during the time everything is reverted.
              ScrollTrigger.isUpdating = true;
              _primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.

              var l = _triggers.length,
                time = _getTime(),
                recordVelocity = time - _time1 >= 50,
                scroll = l && _triggers[0].scroll();

              _direction = _lastScroll > scroll ? -1 : 1;
              _refreshingAll || (_lastScroll = scroll);

              if (recordVelocity) {
                if (
                  _lastScrollTime &&
                  !_pointerIsDown &&
                  time - _lastScrollTime > 200
                ) {
                  _lastScrollTime = 0;

                  _dispatch("scrollEnd");
                }

                _time2 = _time1;
                _time1 = time;
              }

              if (_direction < 0) {
                _i = l;

                while (_i-- > 0) {
                  _triggers[_i] && _triggers[_i].update(0, recordVelocity);
                }

                _direction = 1;
              } else {
                for (_i = 0; _i < l; _i++) {
                  _triggers[_i] && _triggers[_i].update(0, recordVelocity);
                }
              }

              ScrollTrigger.isUpdating = false;
            }

            _rafID = 0;
          },
          _propNamesToCopy = [
            _left,
            _top,
            _bottom,
            _right,
            _margin + _Bottom,
            _margin + _Right,
            _margin + _Top,
            _margin + _Left,
            "display",
            "flexShrink",
            "float",
            "zIndex",
            "gridColumnStart",
            "gridColumnEnd",
            "gridRowStart",
            "gridRowEnd",
            "gridArea",
            "justifySelf",
            "alignSelf",
            "placeSelf",
            "order",
          ],
          _stateProps = _propNamesToCopy.concat([
            _width,
            _height,
            "boxSizing",
            "max" + _Width,
            "max" + _Height,
            "position",
            _margin,
            _padding,
            _padding + _Top,
            _padding + _Right,
            _padding + _Bottom,
            _padding + _Left,
          ]),
          _swapPinOut = function _swapPinOut(pin, spacer, state) {
            _setState(state);

            var cache = pin._gsap;

            if (cache.spacerIsNative) {
              _setState(cache.spacerState);
            } else if (pin._gsap.swappedIn) {
              var parent = spacer.parentNode;

              if (parent) {
                parent.insertBefore(pin, spacer);
                parent.removeChild(spacer);
              }
            }

            pin._gsap.swappedIn = false;
          },
          _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {
            if (!pin._gsap.swappedIn) {
              var i = _propNamesToCopy.length,
                spacerStyle = spacer.style,
                pinStyle = pin.style,
                p;

              while (i--) {
                p = _propNamesToCopy[i];
                spacerStyle[p] = cs[p];
              }

              spacerStyle.position =
                cs.position === "absolute" ? "absolute" : "relative";
              cs.display === "inline" && (spacerStyle.display = "inline-block");
              pinStyle[_bottom] = pinStyle[_right] = "auto";
              spacerStyle.flexBasis = cs.flexBasis || "auto";
              spacerStyle.overflow = "visible";
              spacerStyle.boxSizing = "border-box";
              spacerStyle[_width] =
                _getSize(
                  pin,
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_horizontal"]
                ) + _px;
              spacerStyle[_height] =
                _getSize(
                  pin,
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"]
                ) + _px;
              spacerStyle[_padding] =
                pinStyle[_margin] =
                pinStyle[_top] =
                pinStyle[_left] =
                  "0";

              _setState(spacerState);

              pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
              pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
              pinStyle[_padding] = cs[_padding];

              if (pin.parentNode !== spacer) {
                pin.parentNode.insertBefore(spacer, pin);
                spacer.appendChild(pin);
              }

              pin._gsap.swappedIn = true;
            }
          },
          _capsExp = /([A-Z])/g,
          _setState = function _setState(state) {
            if (state) {
              var style = state.t.style,
                l = state.length,
                i = 0,
                p,
                value;
              (state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off

              for (; i < l; i += 2) {
                value = state[i + 1];
                p = state[i];

                if (value) {
                  style[p] = value;
                } else if (style[p]) {
                  style.removeProperty(
                    p.replace(_capsExp, "-$1").toLowerCase()
                  );
                }
              }
            }
          },
          _getState = function _getState(element) {
            // returns an Array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
            var l = _stateProps.length,
              style = element.style,
              state = [],
              i = 0;

            for (; i < l; i++) {
              state.push(_stateProps[i], style[_stateProps[i]]);
            }

            state.t = element;
            return state;
          },
          _copyState = function _copyState(state, override, omitOffsets) {
            var result = [],
              l = state.length,
              i = omitOffsets ? 8 : 0,
              // skip top, left, right, bottom if omitOffsets is true
              p;

            for (; i < l; i += 2) {
              p = state[i];
              result.push(p, p in override ? override[p] : state[i + 1]);
            }

            result.t = state.t;
            return result;
          },
          _winOffsets = {
            left: 0,
            top: 0,
          },
          // // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition("#id", "top bottom")
          // _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {
          // 	scroller = _getTarget(scroller || _win);
          // 	let direction = horizontal ? _horizontal : _vertical,
          // 		isViewport = _isViewport(scroller);
          // 	_getSizeFunc(scroller, isViewport, direction);
          // 	return _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);
          // },
          _parsePosition = function _parsePosition(
            value,
            trigger,
            scrollerSize,
            direction,
            scroll,
            marker,
            markerScroller,
            self,
            scrollerBounds,
            borderWidth,
            useFixedPosition,
            scrollerMax,
            containerAnimation,
            clampZeroProp
          ) {
            _isFunction(value) && (value = value(self));

            if (_isString(value) && value.substr(0, 3) === "max") {
              value =
                scrollerMax +
                (value.charAt(4) === "="
                  ? _offsetToPx("0" + value.substr(3), scrollerSize)
                  : 0);
            }

            var time = containerAnimation ? containerAnimation.time() : 0,
              p1,
              p2,
              element;
            containerAnimation && containerAnimation.seek(0);
            isNaN(value) || (value = +value); // convert a string number like "45" to an actual number

            if (!_isNumber(value)) {
              _isFunction(trigger) && (trigger = trigger(self));
              var offsets = (value || "0").split(" "),
                bounds,
                localOffset,
                globalOffset,
                display;
              element =
                Object(_Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"])(
                  trigger,
                  self
                ) || _body;
              bounds = _getBounds(element) || {};

              if (
                (!bounds || (!bounds.left && !bounds.top)) &&
                _getComputedStyle(element).display === "none"
              ) {
                // if display is "none", it won't report getBoundingClientRect() properly
                display = element.style.display;
                element.style.display = "block";
                bounds = _getBounds(element);
                display
                  ? (element.style.display = display)
                  : element.style.removeProperty("display");
              }

              localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
              globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
              value =
                bounds[direction.p] -
                scrollerBounds[direction.p] -
                borderWidth +
                localOffset +
                scroll -
                globalOffset;
              markerScroller &&
                _positionMarker(
                  markerScroller,
                  globalOffset,
                  direction,
                  scrollerSize - globalOffset < 20 ||
                    (markerScroller._isStart && globalOffset > 20)
                );
              scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
            } else {
              containerAnimation &&
                (value = gsap.utils.mapRange(
                  containerAnimation.scrollTrigger.start,
                  containerAnimation.scrollTrigger.end,
                  0,
                  scrollerMax,
                  value
                ));
              markerScroller &&
                _positionMarker(markerScroller, scrollerSize, direction, true);
            }

            if (clampZeroProp) {
              self[clampZeroProp] = value || -0.001;
              value < 0 && (value = 0);
            }

            if (marker) {
              var position = value + scrollerSize,
                isStart = marker._isStart;
              p1 = "scroll" + direction.d2;

              _positionMarker(
                marker,
                position,
                direction,
                (isStart && position > 20) ||
                  (!isStart &&
                    (useFixedPosition
                      ? Math.max(_body[p1], _docEl[p1])
                      : marker.parentNode[p1]) <=
                      position + 1)
              );

              if (useFixedPosition) {
                scrollerBounds = _getBounds(markerScroller);
                useFixedPosition &&
                  (marker.style[direction.op.p] =
                    scrollerBounds[direction.op.p] -
                    direction.op.m -
                    marker._offset +
                    _px);
              }
            }

            if (containerAnimation && element) {
              p1 = _getBounds(element);
              containerAnimation.seek(scrollerMax);
              p2 = _getBounds(element);
              containerAnimation._caScrollDist =
                p1[direction.p] - p2[direction.p];
              value = (value / containerAnimation._caScrollDist) * scrollerMax;
            }

            containerAnimation && containerAnimation.seek(time);
            return containerAnimation ? value : Math.round(value);
          },
          _prefixExp = /(webkit|moz|length|cssText|inset)/i,
          _reparent = function _reparent(element, parent, top, left) {
            if (element.parentNode !== parent) {
              var style = element.style,
                p,
                cs;

              if (parent === _body) {
                element._stOrig = style.cssText; // record original inline styles so we can revert them later

                cs = _getComputedStyle(element);

                for (p in cs) {
                  // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
                  if (
                    !+p &&
                    !_prefixExp.test(p) &&
                    cs[p] &&
                    typeof style[p] === "string" &&
                    p !== "0"
                  ) {
                    style[p] = cs[p];
                  }
                }

                style.top = top;
                style.left = left;
              } else {
                style.cssText = element._stOrig;
              }

              gsap.core.getCache(element).uncache = 1;
              parent.appendChild(element);
            }
          },
          _interruptionTracker = function _interruptionTracker(
            getValueFunc,
            initialValue,
            onInterrupt
          ) {
            var last1 = initialValue,
              last2 = last1;
            return function (value) {
              var current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.

              if (
                current !== last1 &&
                current !== last2 &&
                Math.abs(current - last1) > 3 &&
                Math.abs(current - last2) > 3
              ) {
                // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.
                value = current;
                onInterrupt && onInterrupt();
              }

              last2 = last1;
              last1 = value;
              return value;
            };
          },
          _shiftMarker = function _shiftMarker(marker, direction, value) {
            var vars = {};
            vars[direction.p] = "+=" + value;
            gsap.set(marker, vars);
          },
          // _mergeAnimations = animations => {
          // 	let tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));
          // 	animations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });
          // 	tl.smoothChildTiming = false;
          // 	return tl;
          // },
          // returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
          _getTweenCreator = function _getTweenCreator(scroller, direction) {
            var getScroll = Object(
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getScrollFunc"]
              )(scroller, direction),
              prop = "_scroll" + direction.p2,
              // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
              getTween = function getTween(
                scrollTo,
                vars,
                initialValue,
                change1,
                change2
              ) {
                var tween = getTween.tween,
                  onComplete = vars.onComplete,
                  modifiers = {};
                initialValue = initialValue || getScroll();

                var checkForInterruption = _interruptionTracker(
                  getScroll,
                  initialValue,
                  function () {
                    tween.kill();
                    getTween.tween = 0;
                  }
                );

                change2 = (change1 && change2) || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.

                change1 = change1 || scrollTo - initialValue;
                tween && tween.kill();
                vars[prop] = scrollTo;
                vars.inherit = false;
                vars.modifiers = modifiers;

                modifiers[prop] = function () {
                  return checkForInterruption(
                    initialValue +
                      change1 * tween.ratio +
                      change2 * tween.ratio * tween.ratio
                  );
                };

                vars.onUpdate = function () {
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"]
                    .cache++;
                  getTween.tween && _updateAll(); // if it was interrupted/killed, like in a context.revert(), don't force an updateAll()
                };

                vars.onComplete = function () {
                  getTween.tween = 0;
                  onComplete && onComplete.call(tween);
                };

                tween = getTween.tween = gsap.to(scroller, vars);
                return tween;
              };

            scroller[prop] = getScroll;

            getScroll.wheelHandler = function () {
              return (
                getTween.tween && getTween.tween.kill() && (getTween.tween = 0)
              );
            };

            _addListener(scroller, "wheel", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like "3 lines per scroll") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.

            ScrollTrigger.isTouch &&
              _addListener(scroller, "touchmove", getScroll.wheelHandler);
            return getTween;
          };

        var ScrollTrigger = /*#__PURE__*/ (function () {
          function ScrollTrigger(vars, animation) {
            _coreInitted ||
              ScrollTrigger.register(gsap) ||
              console.warn("Please gsap.registerPlugin(ScrollTrigger)");

            _context(this);

            this.init(vars, animation);
          }

          var _proto = ScrollTrigger.prototype;

          _proto.init = function init(vars, animation) {
            this.progress = this.start = 0;
            this.vars && this.kill(true, true); // in case it's being initted again

            if (!_enabled) {
              this.update = this.refresh = this.kill = _passThrough;
              return;
            }

            vars = _setDefaults(
              _isString(vars) || _isNumber(vars) || vars.nodeType
                ? {
                    trigger: vars,
                  }
                : vars,
              _defaults
            );

            var _vars = vars,
              onUpdate = _vars.onUpdate,
              toggleClass = _vars.toggleClass,
              id = _vars.id,
              onToggle = _vars.onToggle,
              onRefresh = _vars.onRefresh,
              scrub = _vars.scrub,
              trigger = _vars.trigger,
              pin = _vars.pin,
              pinSpacing = _vars.pinSpacing,
              invalidateOnRefresh = _vars.invalidateOnRefresh,
              anticipatePin = _vars.anticipatePin,
              onScrubComplete = _vars.onScrubComplete,
              onSnapComplete = _vars.onSnapComplete,
              once = _vars.once,
              snap = _vars.snap,
              pinReparent = _vars.pinReparent,
              pinSpacer = _vars.pinSpacer,
              containerAnimation = _vars.containerAnimation,
              fastScrollEnd = _vars.fastScrollEnd,
              preventOverlaps = _vars.preventOverlaps,
              direction =
                vars.horizontal ||
                (vars.containerAnimation && vars.horizontal !== false)
                  ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_horizontal"]
                  : _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"],
              isToggle = !scrub && scrub !== 0,
              scroller = Object(
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"]
              )(vars.scroller || _win),
              scrollerCache = gsap.core.getCache(scroller),
              isViewport = _isViewport(scroller),
              useFixedPosition =
                ("pinType" in vars
                  ? vars.pinType
                  : Object(
                      _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getProxyProp"]
                    )(scroller, "pinType") ||
                    (isViewport && "fixed")) === "fixed",
              callbacks = [
                vars.onEnter,
                vars.onLeave,
                vars.onEnterBack,
                vars.onLeaveBack,
              ],
              toggleActions = isToggle && vars.toggleActions.split(" "),
              markers = "markers" in vars ? vars.markers : _defaults.markers,
              borderWidth = isViewport
                ? 0
                : parseFloat(
                    _getComputedStyle(scroller)[
                      "border" + direction.p2 + _Width
                    ]
                  ) || 0,
              self = this,
              onRefreshInit =
                vars.onRefreshInit &&
                function () {
                  return vars.onRefreshInit(self);
                },
              getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
              getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
              lastSnap = 0,
              lastRefresh = 0,
              prevProgress = 0,
              scrollFunc = Object(
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getScrollFunc"]
              )(scroller, direction),
              tweenTo,
              pinCache,
              snapFunc,
              scroll1,
              scroll2,
              start,
              end,
              markerStart,
              markerEnd,
              markerStartTrigger,
              markerEndTrigger,
              markerVars,
              executingOnRefresh,
              change,
              pinOriginalState,
              pinActiveState,
              pinState,
              spacer,
              offset,
              pinGetter,
              pinSetter,
              pinStart,
              pinChange,
              spacingStart,
              spacerState,
              markerStartSetter,
              pinMoves,
              markerEndSetter,
              cs,
              snap1,
              snap2,
              scrubTween,
              scrubSmooth,
              snapDurClamp,
              snapDelayedCall,
              prevScroll,
              prevAnimProgress,
              caMarkerSetter,
              customRevertReturn; // for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start="clamp(top bottom)" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.

            self._startClamp = self._endClamp = false;
            self._dir = direction;
            anticipatePin *= 45;
            self.scroller = scroller;
            self.scroll = containerAnimation
              ? containerAnimation.time.bind(containerAnimation)
              : scrollFunc;
            scroll1 = scrollFunc();
            self.vars = vars;
            animation = animation || vars.animation;

            if ("refreshPriority" in vars) {
              _sort = 1;
              vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother
            }

            scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
              top: _getTweenCreator(
                scroller,
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"]
              ),
              left: _getTweenCreator(
                scroller,
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_horizontal"]
              ),
            };
            self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];

            self.scrubDuration = function (value) {
              scrubSmooth = _isNumber(value) && value;

              if (!scrubSmooth) {
                scrubTween && scrubTween.progress(1).kill();
                scrubTween = 0;
              } else {
                scrubTween
                  ? scrubTween.duration(value)
                  : (scrubTween = gsap.to(animation, {
                      ease: "expo",
                      totalProgress: "+=0",
                      inherit: false,
                      duration: scrubSmooth,
                      paused: true,
                      onComplete: function onComplete() {
                        return onScrubComplete && onScrubComplete(self);
                      },
                    }));
              }
            };

            if (animation) {
              animation.vars.lazy = false;
              (animation._initted && !self.isReverted) ||
                (animation.vars.immediateRender !== false &&
                  vars.immediateRender !== false &&
                  animation.duration() &&
                  animation.render(0, true, true)); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://gsap.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010

              self.animation = animation.pause();
              animation.scrollTrigger = self;
              self.scrubDuration(scrub);
              snap1 = 0;
              id || (id = animation.vars.id);
            }

            if (snap) {
              // TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.
              if (!_isObject(snap) || snap.push) {
                snap = {
                  snapTo: snap,
                };
              }

              "scrollBehavior" in _body.style &&
                gsap.set(isViewport ? [_body, _docEl] : scroller, {
                  scrollBehavior: "auto",
                }); // smooth scrolling doesn't work with snap.

              _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].forEach(
                function (o) {
                  return (
                    _isFunction(o) &&
                    o.target ===
                      (isViewport
                        ? _doc.scrollingElement || _docEl
                        : scroller) &&
                    (o.smooth = false)
                  );
                }
              ); // note: set smooth to false on both the vertical and horizontal scroll getters/setters

              snapFunc = _isFunction(snap.snapTo)
                ? snap.snapTo
                : snap.snapTo === "labels"
                ? _getClosestLabel(animation)
                : snap.snapTo === "labelsDirectional"
                ? _getLabelAtDirection(animation)
                : snap.directional !== false
                ? function (value, st) {
                    return _snapDirectional(snap.snapTo)(
                      value,
                      _getTime() - lastRefresh < 500 ? 0 : st.direction
                    );
                  }
                : gsap.utils.snap(snap.snapTo);
              snapDurClamp = snap.duration || {
                min: 0.1,
                max: 2,
              };
              snapDurClamp = _isObject(snapDurClamp)
                ? _clamp(snapDurClamp.min, snapDurClamp.max)
                : _clamp(snapDurClamp, snapDurClamp);
              snapDelayedCall = gsap
                .delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {
                  var scroll = scrollFunc(),
                    refreshedRecently = _getTime() - lastRefresh < 500,
                    tween = tweenTo.tween;

                  if (
                    (refreshedRecently || Math.abs(self.getVelocity()) < 10) &&
                    !tween &&
                    !_pointerIsDown &&
                    lastSnap !== scroll
                  ) {
                    var progress = (scroll - start) / change,
                      totalProgress =
                        animation && !isToggle
                          ? animation.totalProgress()
                          : progress,
                      velocity = refreshedRecently
                        ? 0
                        : ((totalProgress - snap2) / (_getTime() - _time2)) *
                            1000 || 0,
                      change1 = gsap.utils.clamp(
                        -progress,
                        1 - progress,
                        (_abs(velocity / 2) * velocity) / 0.185
                      ),
                      naturalEnd =
                        progress + (snap.inertia === false ? 0 : change1),
                      endValue,
                      endScroll,
                      _snap = snap,
                      onStart = _snap.onStart,
                      _onInterrupt = _snap.onInterrupt,
                      _onComplete = _snap.onComplete;
                    endValue = snapFunc(naturalEnd, self);
                    _isNumber(endValue) || (endValue = naturalEnd); // in case the function didn't return a number, fall back to using the naturalEnd

                    endScroll = Math.round(start + endValue * change);

                    if (
                      scroll <= end &&
                      scroll >= start &&
                      endScroll !== scroll
                    ) {
                      if (
                        tween &&
                        !tween._initted &&
                        tween.data <= _abs(endScroll - scroll)
                      ) {
                        // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
                        return;
                      }

                      if (snap.inertia === false) {
                        change1 = endValue - progress;
                      }

                      tweenTo(
                        endScroll,
                        {
                          duration: snapDurClamp(
                            _abs(
                              (Math.max(
                                _abs(naturalEnd - totalProgress),
                                _abs(endValue - totalProgress)
                              ) *
                                0.185) /
                                velocity /
                                0.05 || 0
                            )
                          ),
                          ease: snap.ease || "power3",
                          data: _abs(endScroll - scroll),
                          // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
                          onInterrupt: function onInterrupt() {
                            return (
                              snapDelayedCall.restart(true) &&
                              _onInterrupt &&
                              _onInterrupt(self)
                            );
                          },
                          onComplete: function onComplete() {
                            self.update();
                            lastSnap = scrollFunc();

                            if (animation) {
                              // the resolution of the scrollbar is limited, so we should correct the scrubbed animation's playhead at the end to match EXACTLY where it was supposed to snap
                              scrubTween
                                ? scrubTween.resetTo(
                                    "totalProgress",
                                    endValue,
                                    animation._tTime / animation._tDur
                                  )
                                : animation.progress(endValue);
                            }

                            snap1 = snap2 =
                              animation && !isToggle
                                ? animation.totalProgress()
                                : self.progress;
                            onSnapComplete && onSnapComplete(self);
                            _onComplete && _onComplete(self);
                          },
                        },
                        scroll,
                        change1 * change,
                        endScroll - scroll - change1 * change
                      );
                      onStart && onStart(self, tweenTo.tween);
                    }
                  } else if (self.isActive && lastSnap !== scroll) {
                    snapDelayedCall.restart(true);
                  }
                })
                .pause();
            }

            id && (_ids[id] = self);
            trigger = self.trigger = Object(
              _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"]
            )(trigger || (pin !== true && pin)); // if a trigger has some kind of scroll-related effect applied that could contaminate the "y" or "x" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.

            customRevertReturn =
              trigger && trigger._gsap && trigger._gsap.stRevert;
            customRevertReturn &&
              (customRevertReturn = customRevertReturn(self));
            pin =
              pin === true
                ? trigger
                : Object(
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"]
                  )(pin);
            _isString(toggleClass) &&
              (toggleClass = {
                targets: trigger,
                className: toggleClass,
              });

            if (pin) {
              pinSpacing === false ||
                pinSpacing === _margin ||
                (pinSpacing =
                  !pinSpacing &&
                  pin.parentNode &&
                  pin.parentNode.style &&
                  _getComputedStyle(pin.parentNode).display === "flex"
                    ? false
                    : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)

              self.pin = pin;
              pinCache = gsap.core.getCache(pin);

              if (!pinCache.spacer) {
                // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
                if (pinSpacer) {
                  pinSpacer = Object(
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"]
                  )(pinSpacer);
                  pinSpacer &&
                    !pinSpacer.nodeType &&
                    (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular

                  pinCache.spacerIsNative = !!pinSpacer;
                  pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
                }

                pinCache.spacer = spacer =
                  pinSpacer || _doc.createElement("div");
                spacer.classList.add("pin-spacer");
                id && spacer.classList.add("pin-spacer-" + id);
                pinCache.pinState = pinOriginalState = _getState(pin);
              } else {
                pinOriginalState = pinCache.pinState;
              }

              vars.force3D !== false &&
                gsap.set(pin, {
                  force3D: true,
                });
              self.spacer = spacer = pinCache.spacer;
              cs = _getComputedStyle(pin);
              spacingStart = cs[pinSpacing + direction.os2];
              pinGetter = gsap.getProperty(pin);
              pinSetter = gsap.quickSetter(pin, direction.a, _px); // pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = "hidden"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).

              _swapPinIn(pin, spacer, cs);

              pinState = _getState(pin);
            }

            if (markers) {
              markerVars = _isObject(markers)
                ? _setDefaults(markers, _markerDefaults)
                : _markerDefaults;
              markerStartTrigger = _createMarker(
                "scroller-start",
                id,
                scroller,
                direction,
                markerVars,
                0
              );
              markerEndTrigger = _createMarker(
                "scroller-end",
                id,
                scroller,
                direction,
                markerVars,
                0,
                markerStartTrigger
              );
              offset = markerStartTrigger["offset" + direction.op.d2];

              var content = Object(
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"]
              )(
                Object(
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getProxyProp"]
                )(scroller, "content") || scroller
              );

              markerStart = this.markerStart = _createMarker(
                "start",
                id,
                content,
                direction,
                markerVars,
                offset,
                0,
                containerAnimation
              );
              markerEnd = this.markerEnd = _createMarker(
                "end",
                id,
                content,
                direction,
                markerVars,
                offset,
                0,
                containerAnimation
              );
              containerAnimation &&
                (caMarkerSetter = gsap.quickSetter(
                  [markerStart, markerEnd],
                  direction.a,
                  _px
                ));

              if (
                !useFixedPosition &&
                !(
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_proxies"]
                    .length &&
                  Object(
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getProxyProp"]
                  )(scroller, "fixedMarkers") === true
                )
              ) {
                _makePositionable(isViewport ? _body : scroller);

                gsap.set([markerStartTrigger, markerEndTrigger], {
                  force3D: true,
                });
                markerStartSetter = gsap.quickSetter(
                  markerStartTrigger,
                  direction.a,
                  _px
                );
                markerEndSetter = gsap.quickSetter(
                  markerEndTrigger,
                  direction.a,
                  _px
                );
              }
            }

            if (containerAnimation) {
              var oldOnUpdate = containerAnimation.vars.onUpdate,
                oldParams = containerAnimation.vars.onUpdateParams;
              containerAnimation.eventCallback("onUpdate", function () {
                self.update(0, 0, 1);
                oldOnUpdate &&
                  oldOnUpdate.apply(containerAnimation, oldParams || []);
              });
            }

            self.previous = function () {
              return _triggers[_triggers.indexOf(self) - 1];
            };

            self.next = function () {
              return _triggers[_triggers.indexOf(self) + 1];
            };

            self.revert = function (revert, temp) {
              if (!temp) {
                return self.kill(true);
              } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()

              var r = revert !== false || !self.enabled,
                prevRefreshing = _refreshing;

              if (r !== self.isReverted) {
                if (r) {
                  prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.

                  prevProgress = self.progress;
                  prevAnimProgress = animation && animation.progress();
                }

                markerStart &&
                  [
                    markerStart,
                    markerEnd,
                    markerStartTrigger,
                    markerEndTrigger,
                  ].forEach(function (m) {
                    return (m.style.display = r ? "none" : "block");
                  });

                if (r) {
                  _refreshing = self;
                  self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out
                }

                if (pin && (!pinReparent || !self.isActive)) {
                  if (r) {
                    _swapPinOut(pin, spacer, pinOriginalState);
                  } else {
                    _swapPinIn(
                      pin,
                      spacer,
                      _getComputedStyle(pin),
                      spacerState
                    );
                  }
                }

                r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.

                _refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.

                self.isReverted = r;
              }
            };

            self.refresh = function (soft, force, position, pinOffset) {
              // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects
              if ((_refreshing || !self.enabled) && !force) {
                return;
              }

              if (pin && soft && _lastScrollTime) {
                _addListener(ScrollTrigger, "scrollEnd", _softRefresh);

                return;
              }

              !_refreshingAll && onRefreshInit && onRefreshInit(self);
              _refreshing = self;

              if (tweenTo.tween && !position) {
                // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.
                tweenTo.tween.kill();
                tweenTo.tween = 0;
              }

              scrubTween && scrubTween.pause();
              invalidateOnRefresh &&
                animation &&
                animation
                  .revert({
                    kill: false,
                  })
                  .invalidate();
              self.isReverted || self.revert(true, true);
              self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any

              var size = getScrollerSize(),
                scrollerBounds = getScrollerOffsets(),
                max = containerAnimation
                  ? containerAnimation.duration()
                  : _maxScroll(scroller, direction),
                isFirstRefresh = change <= 0.01,
                offset = 0,
                otherPinOffset = pinOffset || 0,
                parsedEnd = _isObject(position) ? position.end : vars.end,
                parsedEndTrigger = vars.endTrigger || trigger,
                parsedStart = _isObject(position)
                  ? position.start
                  : vars.start ||
                    (vars.start === 0 || !trigger ? 0 : pin ? "0 0" : "0 100%"),
                pinnedContainer = (self.pinnedContainer =
                  vars.pinnedContainer &&
                  Object(
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"]
                  )(vars.pinnedContainer, self)),
                triggerIndex =
                  (trigger && Math.max(0, _triggers.indexOf(self))) || 0,
                i = triggerIndex,
                cs,
                bounds,
                scroll,
                isVertical,
                override,
                curTrigger,
                curPin,
                oppositeScroll,
                initted,
                revertedPins,
                forcedOverflow,
                markerStartOffset,
                markerEndOffset;

              if (markers && _isObject(position)) {
                // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.
                markerStartOffset = gsap.getProperty(
                  markerStartTrigger,
                  direction.p
                );
                markerEndOffset = gsap.getProperty(
                  markerEndTrigger,
                  direction.p
                );
              }

              while (i--) {
                // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
                curTrigger = _triggers[i];
                curTrigger.end ||
                  curTrigger.refresh(0, 1) ||
                  (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.

                curPin = curTrigger.pin;

                if (
                  curPin &&
                  (curPin === trigger ||
                    curPin === pin ||
                    curPin === pinnedContainer) &&
                  !curTrigger.isReverted
                ) {
                  revertedPins || (revertedPins = []);
                  revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly

                  curTrigger.revert(true, true);
                }

                if (curTrigger !== _triggers[i]) {
                  // in case it got removed.
                  triggerIndex--;
                  i--;
                }
              }

              _isFunction(parsedStart) && (parsedStart = parsedStart(self));
              parsedStart = _parseClamp(parsedStart, "start", self);
              start =
                _parsePosition(
                  parsedStart,
                  trigger,
                  size,
                  direction,
                  scrollFunc(),
                  markerStart,
                  markerStartTrigger,
                  self,
                  scrollerBounds,
                  borderWidth,
                  useFixedPosition,
                  max,
                  containerAnimation,
                  self._startClamp && "_startClamp"
                ) || (pin ? -0.001 : 0);
              _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));

              if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
                if (~parsedEnd.indexOf(" ")) {
                  parsedEnd =
                    (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") +
                    parsedEnd;
                } else {
                  offset = _offsetToPx(parsedEnd.substr(2), size);
                  parsedEnd = _isString(parsedStart)
                    ? parsedStart
                    : (containerAnimation
                        ? gsap.utils.mapRange(
                            0,
                            containerAnimation.duration(),
                            containerAnimation.scrollTrigger.start,
                            containerAnimation.scrollTrigger.end,
                            start
                          )
                        : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.

                  parsedEndTrigger = trigger;
                }
              }

              parsedEnd = _parseClamp(parsedEnd, "end", self);
              end =
                Math.max(
                  start,
                  _parsePosition(
                    parsedEnd || (parsedEndTrigger ? "100% 0" : max),
                    parsedEndTrigger,
                    size,
                    direction,
                    scrollFunc() + offset,
                    markerEnd,
                    markerEndTrigger,
                    self,
                    scrollerBounds,
                    borderWidth,
                    useFixedPosition,
                    max,
                    containerAnimation,
                    self._endClamp && "_endClamp"
                  )
                ) || -0.001;
              offset = 0;
              i = triggerIndex;

              while (i--) {
                curTrigger = _triggers[i];
                curPin = curTrigger.pin;

                if (
                  curPin &&
                  curTrigger.start - curTrigger._pinPush <= start &&
                  !containerAnimation &&
                  curTrigger.end > 0
                ) {
                  cs =
                    curTrigger.end -
                    (self._startClamp
                      ? Math.max(0, curTrigger.start)
                      : curTrigger.start);

                  if (
                    ((curPin === trigger &&
                      curTrigger.start - curTrigger._pinPush < start) ||
                      curPin === pinnedContainer) &&
                    isNaN(parsedStart)
                  ) {
                    // numeric start values shouldn't be offset at all - treat them as absolute
                    offset += cs * (1 - curTrigger.progress);
                  }

                  curPin === pin && (otherPinOffset += cs);
                }
              }

              start += offset;
              end += offset;
              self._startClamp && (self._startClamp += offset);

              if (self._endClamp && !_refreshingAll) {
                self._endClamp = end || -0.001;
                end = Math.min(end, _maxScroll(scroller, direction));
              }

              change = end - start || ((start -= 0.01) && 0.001);

              if (isFirstRefresh) {
                // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.
                prevProgress = gsap.utils.clamp(
                  0,
                  1,
                  gsap.utils.normalize(start, end, prevScroll)
                );
              }

              self._pinPush = otherPinOffset;

              if (markerStart && offset) {
                // offset the markers if necessary
                cs = {};
                cs[direction.a] = "+=" + offset;
                pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
                gsap.set([markerStart, markerEnd], cs);
              }

              if (
                pin &&
                !(_clampingMax && self.end >= _maxScroll(scroller, direction))
              ) {
                cs = _getComputedStyle(pin);
                isVertical =
                  direction ===
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"];
                scroll = scrollFunc(); // recalculate because the triggers can affect the scroll

                pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;

                if (!max && end > 1) {
                  // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://gsap.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/
                  forcedOverflow = (
                    isViewport ? _doc.scrollingElement || _docEl : scroller
                  ).style;
                  forcedOverflow = {
                    style: forcedOverflow,
                    value:
                      forcedOverflow["overflow" + direction.a.toUpperCase()],
                  };

                  if (
                    isViewport &&
                    _getComputedStyle(_body)[
                      "overflow" + direction.a.toUpperCase()
                    ] !== "scroll"
                  ) {
                    // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to "scroll"
                    forcedOverflow.style[
                      "overflow" + direction.a.toUpperCase()
                    ] = "scroll";
                  }
                }

                _swapPinIn(pin, spacer, cs);

                pinState = _getState(pin); // transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.

                bounds = _getBounds(pin, true);
                oppositeScroll =
                  useFixedPosition &&
                  Object(
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getScrollFunc"]
                  )(
                    scroller,
                    isVertical
                      ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_horizontal"]
                      : _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"]
                  )();

                if (pinSpacing) {
                  spacerState = [
                    pinSpacing + direction.os2,
                    change + otherPinOffset + _px,
                  ];
                  spacerState.t = spacer;
                  i =
                    pinSpacing === _padding
                      ? _getSize(pin, direction) + change + otherPinOffset
                      : 0;

                  if (i) {
                    spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).

                    spacer.style.flexBasis !== "auto" &&
                      (spacer.style.flexBasis = i + _px);
                  }

                  _setState(spacerState);

                  if (pinnedContainer) {
                    // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.
                    _triggers.forEach(function (t) {
                      if (
                        t.pin === pinnedContainer &&
                        t.vars.pinSpacing !== false
                      ) {
                        t._subPinOffset = true;
                      }
                    });
                  }

                  useFixedPosition && scrollFunc(prevScroll);
                } else {
                  i = _getSize(pin, direction);
                  i &&
                    spacer.style.flexBasis !== "auto" &&
                    (spacer.style.flexBasis = i + _px);
                }

                if (useFixedPosition) {
                  override = {
                    top:
                      bounds.top +
                      (isVertical ? scroll - start : oppositeScroll) +
                      _px,
                    left:
                      bounds.left +
                      (isVertical ? oppositeScroll : scroll - start) +
                      _px,
                    boxSizing: "border-box",
                    position: "fixed",
                  };
                  override[_width] = override["max" + _Width] =
                    Math.ceil(bounds.width) + _px;
                  override[_height] = override["max" + _Height] =
                    Math.ceil(bounds.height) + _px;
                  override[_margin] =
                    override[_margin + _Top] =
                    override[_margin + _Right] =
                    override[_margin + _Bottom] =
                    override[_margin + _Left] =
                      "0";
                  override[_padding] = cs[_padding];
                  override[_padding + _Top] = cs[_padding + _Top];
                  override[_padding + _Right] = cs[_padding + _Right];
                  override[_padding + _Bottom] = cs[_padding + _Bottom];
                  override[_padding + _Left] = cs[_padding + _Left];
                  pinActiveState = _copyState(
                    pinOriginalState,
                    override,
                    pinReparent
                  );
                  _refreshingAll && scrollFunc(0);
                }

                if (animation) {
                  // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
                  initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.

                  _suppressOverwrites(1);

                  animation.render(animation.duration(), true, true);
                  pinChange =
                    pinGetter(direction.a) - pinStart + change + otherPinOffset;
                  pinMoves = Math.abs(change - pinChange) > 1;
                  useFixedPosition &&
                    pinMoves &&
                    pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.

                  animation.render(0, true, true);
                  initted || animation.invalidate(true);
                  animation.parent ||
                    animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.

                  _suppressOverwrites(0);
                } else {
                  pinChange = change;
                }

                forcedOverflow &&
                  (forcedOverflow.value
                    ? (forcedOverflow.style[
                        "overflow" + direction.a.toUpperCase()
                      ] = forcedOverflow.value)
                    : forcedOverflow.style.removeProperty(
                        "overflow-" + direction.a
                      ));
              } else if (trigger && scrollFunc() && !containerAnimation) {
                // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
                bounds = trigger.parentNode;

                while (bounds && bounds !== _body) {
                  if (bounds._pinOffset) {
                    start -= bounds._pinOffset;
                    end -= bounds._pinOffset;
                  }

                  bounds = bounds.parentNode;
                }
              }

              revertedPins &&
                revertedPins.forEach(function (t) {
                  return t.revert(false, true);
                });
              self.start = start;
              self.end = end;
              scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity

              if (!containerAnimation && !_refreshingAll) {
                scroll1 < prevScroll && scrollFunc(prevScroll);
                self.scroll.rec = 0;
              }

              self.revert(false, true);
              lastRefresh = _getTime();

              if (snapDelayedCall) {
                lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value
                // self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.

                snapDelayedCall.restart(true);
              }

              _refreshing = 0;
              animation &&
                isToggle &&
                (animation._initted || prevAnimProgress) &&
                animation.progress() !== prevAnimProgress &&
                animation
                  .progress(prevAnimProgress || 0, true)
                  .render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().

              if (
                isFirstRefresh ||
                prevProgress !== self.progress ||
                containerAnimation ||
                invalidateOnRefresh
              ) {
                // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
                animation &&
                  !isToggle &&
                  animation.totalProgress(
                    containerAnimation && start < -0.001 && !prevProgress
                      ? gsap.utils.normalize(start, end, 0)
                      : prevProgress,
                    true
                  ); // to avoid issues where animation callbacks like onStart aren't triggered.

                self.progress =
                  isFirstRefresh || (scroll1 - start) / change === prevProgress
                    ? 0
                    : prevProgress;
              }

              pin &&
                pinSpacing &&
                (spacer._pinOffset = Math.round(self.progress * pinChange));
              scrubTween && scrubTween.invalidate();

              if (!isNaN(markerStartOffset)) {
                // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like "top", "center", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.
                markerStartOffset -= gsap.getProperty(
                  markerStartTrigger,
                  direction.p
                );
                markerEndOffset -= gsap.getProperty(
                  markerEndTrigger,
                  direction.p
                );

                _shiftMarker(markerStartTrigger, direction, markerStartOffset);

                _shiftMarker(
                  markerStart,
                  direction,
                  markerStartOffset - (pinOffset || 0)
                );

                _shiftMarker(markerEndTrigger, direction, markerEndOffset);

                _shiftMarker(
                  markerEnd,
                  direction,
                  markerEndOffset - (pinOffset || 0)
                );
              }

              isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a "scroll" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.

              if (onRefresh && !_refreshingAll && !executingOnRefresh) {
                // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.
                executingOnRefresh = true;
                onRefresh(self);
                executingOnRefresh = false;
              }
            };

            self.getVelocity = function () {
              return (
                ((scrollFunc() - scroll2) / (_getTime() - _time2)) * 1000 || 0
              );
            };

            self.endAnimation = function () {
              _endAnimation(self.callbackAnimation);

              if (animation) {
                scrubTween
                  ? scrubTween.progress(1)
                  : !animation.paused()
                  ? _endAnimation(animation, animation.reversed())
                  : isToggle || _endAnimation(animation, self.direction < 0, 1);
              }
            };

            self.labelToScroll = function (label) {
              return (
                (animation &&
                  animation.labels &&
                  (start || self.refresh() || start) +
                    (animation.labels[label] / animation.duration()) *
                      change) ||
                0
              );
            };

            self.getTrailing = function (name) {
              var i = _triggers.indexOf(self),
                a =
                  self.direction > 0
                    ? _triggers.slice(0, i).reverse()
                    : _triggers.slice(i + 1);

              return (
                _isString(name)
                  ? a.filter(function (t) {
                      return t.vars.preventOverlaps === name;
                    })
                  : a
              ).filter(function (t) {
                return self.direction > 0 ? t.end <= start : t.start >= end;
              });
            };

            self.update = function (reset, recordVelocity, forceFake) {
              if (containerAnimation && !forceFake && !reset) {
                return;
              }

              var scroll = _refreshingAll === true ? prevScroll : self.scroll(),
                p = reset ? 0 : (scroll - start) / change,
                clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
                prevProgress = self.progress,
                isActive,
                wasActive,
                toggleState,
                action,
                stateChanged,
                toggled,
                isAtMax,
                isTakingAction;

              if (recordVelocity) {
                scroll2 = scroll1;
                scroll1 = containerAnimation ? scrollFunc() : scroll;

                if (snap) {
                  snap2 = snap1;
                  snap1 =
                    animation && !isToggle
                      ? animation.totalProgress()
                      : clipped;
                }
              } // anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).

              if (
                anticipatePin &&
                pin &&
                !_refreshing &&
                !_startup &&
                _lastScrollTime
              ) {
                if (
                  !clipped &&
                  start <
                    scroll +
                      ((scroll - scroll2) / (_getTime() - _time2)) *
                        anticipatePin
                ) {
                  clipped = 0.0001;
                } else if (
                  clipped === 1 &&
                  end >
                    scroll +
                      ((scroll - scroll2) / (_getTime() - _time2)) *
                        anticipatePin
                ) {
                  clipped = 0.9999;
                }
              }

              if (clipped !== prevProgress && self.enabled) {
                isActive = self.isActive = !!clipped && clipped < 1;
                wasActive = !!prevProgress && prevProgress < 1;
                toggled = isActive !== wasActive;
                stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)

                self.direction = clipped > prevProgress ? 1 : -1;
                self.progress = clipped;

                if (stateChanged && !_refreshing) {
                  toggleState =
                    clipped && !prevProgress
                      ? 0
                      : clipped === 1
                      ? 1
                      : prevProgress === 1
                      ? 2
                      : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.

                  if (isToggle) {
                    action =
                      (!toggled &&
                        toggleActions[toggleState + 1] !== "none" &&
                        toggleActions[toggleState + 1]) ||
                      toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)

                    isTakingAction =
                      animation &&
                      (action === "complete" ||
                        action === "reset" ||
                        action in animation);
                  }
                }

                preventOverlaps &&
                  (toggled || isTakingAction) &&
                  (isTakingAction || scrub || !animation) &&
                  (_isFunction(preventOverlaps)
                    ? preventOverlaps(self)
                    : self.getTrailing(preventOverlaps).forEach(function (t) {
                        return t.endAnimation();
                      }));

                if (!isToggle) {
                  if (scrubTween && !_refreshing && !_startup) {
                    scrubTween._dp._time - scrubTween._start !==
                      scrubTween._time &&
                      scrubTween.render(
                        scrubTween._dp._time - scrubTween._start
                      ); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.

                    if (scrubTween.resetTo) {
                      scrubTween.resetTo(
                        "totalProgress",
                        clipped,
                        animation._tTime / animation._tDur
                      );
                    } else {
                      // legacy support (courtesy), before 3.10.0
                      scrubTween.vars.totalProgress = clipped;
                      scrubTween.invalidate().restart();
                    }
                  } else if (animation) {
                    animation.totalProgress(
                      clipped,
                      !!(_refreshing && (lastRefresh || reset))
                    );
                  }
                }

                if (pin) {
                  reset &&
                    pinSpacing &&
                    (spacer.style[pinSpacing + direction.os2] = spacingStart);

                  if (!useFixedPosition) {
                    pinSetter(_round(pinStart + pinChange * clipped));
                  } else if (stateChanged) {
                    isAtMax =
                      !reset &&
                      clipped > prevProgress &&
                      end + 1 > scroll &&
                      scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)

                    if (pinReparent) {
                      if (!reset && (isActive || isAtMax)) {
                        var bounds = _getBounds(pin, true),
                          _offset = scroll - start;

                        _reparent(
                          pin,
                          _body,
                          bounds.top +
                            (direction ===
                            _Observer_js__WEBPACK_IMPORTED_MODULE_0__[
                              "_vertical"
                            ]
                              ? _offset
                              : 0) +
                            _px,
                          bounds.left +
                            (direction ===
                            _Observer_js__WEBPACK_IMPORTED_MODULE_0__[
                              "_vertical"
                            ]
                              ? 0
                              : _offset) +
                            _px
                        );
                      } else {
                        _reparent(pin, spacer);
                      }
                    }

                    _setState(isActive || isAtMax ? pinActiveState : pinState);

                    (pinMoves && clipped < 1 && isActive) ||
                      pinSetter(
                        pinStart + (clipped === 1 && !isAtMax ? pinChange : 0)
                      );
                  }
                }

                snap &&
                  !tweenTo.tween &&
                  !_refreshing &&
                  !_startup &&
                  snapDelayedCall.restart(true);
                toggleClass &&
                  (toggled ||
                    (once && clipped && (clipped < 1 || !_limitCallbacks))) &&
                  _toArray(toggleClass.targets).forEach(function (el) {
                    return el.classList[isActive || once ? "add" : "remove"](
                      toggleClass.className
                    );
                  }); // classes could affect positioning, so do it even if reset or refreshing is true.

                onUpdate && !isToggle && !reset && onUpdate(self);

                if (stateChanged && !_refreshing) {
                  if (isToggle) {
                    if (isTakingAction) {
                      if (action === "complete") {
                        animation.pause().totalProgress(1);
                      } else if (action === "reset") {
                        animation.restart(true).pause();
                      } else if (action === "restart") {
                        animation.restart(true);
                      } else {
                        animation[action]();
                      }
                    }

                    onUpdate && onUpdate(self);
                  }

                  if (toggled || !_limitCallbacks) {
                    // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
                    onToggle && toggled && _callback(self, onToggle);
                    callbacks[toggleState] &&
                      _callback(self, callbacks[toggleState]);
                    once &&
                      (clipped === 1
                        ? self.kill(false, 1)
                        : (callbacks[toggleState] = 0)); // a callback shouldn't be called again if once is true.

                    if (!toggled) {
                      // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
                      toggleState = clipped === 1 ? 1 : 3;
                      callbacks[toggleState] &&
                        _callback(self, callbacks[toggleState]);
                    }
                  }

                  if (
                    fastScrollEnd &&
                    !isActive &&
                    Math.abs(self.getVelocity()) >
                      (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)
                  ) {
                    _endAnimation(self.callbackAnimation);

                    scrubTween
                      ? scrubTween.progress(1)
                      : _endAnimation(
                          animation,
                          action === "reverse" ? 1 : !clipped,
                          1
                        );
                  }
                } else if (isToggle && onUpdate && !_refreshing) {
                  onUpdate(self);
                }
              } // update absolutely-positioned markers (only if the scroller isn't the viewport)

              if (markerEndSetter) {
                var n = containerAnimation
                  ? (scroll / containerAnimation.duration()) *
                    (containerAnimation._caScrollDist || 0)
                  : scroll;
                markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
                markerEndSetter(n);
              }

              caMarkerSetter &&
                caMarkerSetter(
                  (-scroll / containerAnimation.duration()) *
                    (containerAnimation._caScrollDist || 0)
                );
            };

            self.enable = function (reset, refresh) {
              if (!self.enabled) {
                self.enabled = true;

                _addListener(scroller, "resize", _onResize);

                isViewport || _addListener(scroller, "scroll", _onScroll);
                onRefreshInit &&
                  _addListener(ScrollTrigger, "refreshInit", onRefreshInit);

                if (reset !== false) {
                  self.progress = prevProgress = 0;
                  scroll1 = scroll2 = lastSnap = scrollFunc();
                }

                refresh !== false && self.refresh();
              }
            };

            self.getTween = function (snap) {
              return snap && tweenTo ? tweenTo.tween : scrubTween;
            };

            self.setPositions = function (
              newStart,
              newEnd,
              keepClamp,
              pinOffset
            ) {
              // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()
              if (containerAnimation) {
                // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.
                var st = containerAnimation.scrollTrigger,
                  duration = containerAnimation.duration(),
                  _change = st.end - st.start;

                newStart = st.start + (_change * newStart) / duration;
                newEnd = st.start + (_change * newEnd) / duration;
              }

              self.refresh(
                false,
                false,
                {
                  start: _keepClamp(newStart, keepClamp && !!self._startClamp),
                  end: _keepClamp(newEnd, keepClamp && !!self._endClamp),
                },
                pinOffset
              );
              self.update();
            };

            self.adjustPinSpacing = function (amount) {
              if (spacerState && amount) {
                var i = spacerState.indexOf(direction.d) + 1;
                spacerState[i] = parseFloat(spacerState[i]) + amount + _px;
                spacerState[1] = parseFloat(spacerState[1]) + amount + _px;

                _setState(spacerState);
              }
            };

            self.disable = function (reset, allowAnimation) {
              if (self.enabled) {
                reset !== false && self.revert(true, true);
                self.enabled = self.isActive = false;
                allowAnimation || (scrubTween && scrubTween.pause());
                prevScroll = 0;
                pinCache && (pinCache.uncache = 1);
                onRefreshInit &&
                  _removeListener(ScrollTrigger, "refreshInit", onRefreshInit);

                if (snapDelayedCall) {
                  snapDelayedCall.pause();
                  tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
                }

                if (!isViewport) {
                  var i = _triggers.length;

                  while (i--) {
                    if (
                      _triggers[i].scroller === scroller &&
                      _triggers[i] !== self
                    ) {
                      return; //don't remove the listeners if there are still other triggers referencing it.
                    }
                  }

                  _removeListener(scroller, "resize", _onResize);

                  isViewport || _removeListener(scroller, "scroll", _onScroll);
                }
              }
            };

            self.kill = function (revert, allowAnimation) {
              self.disable(revert, allowAnimation);
              scrubTween && !allowAnimation && scrubTween.kill();
              id && delete _ids[id];

              var i = _triggers.indexOf(self);

              i >= 0 && _triggers.splice(i, 1);
              i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
              // if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.

              i = 0;

              _triggers.forEach(function (t) {
                return t.scroller === self.scroller && (i = 1);
              });

              i || _refreshingAll || (self.scroll.rec = 0);

              if (animation) {
                animation.scrollTrigger = null;
                revert &&
                  animation.revert({
                    kill: false,
                  });
                allowAnimation || animation.kill();
              }

              markerStart &&
                [
                  markerStart,
                  markerEnd,
                  markerStartTrigger,
                  markerEndTrigger,
                ].forEach(function (m) {
                  return m.parentNode && m.parentNode.removeChild(m);
                });
              _primary === self && (_primary = 0);

              if (pin) {
                pinCache && (pinCache.uncache = 1);
                i = 0;

                _triggers.forEach(function (t) {
                  return t.pin === pin && i++;
                });

                i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.
              }

              vars.onKill && vars.onKill(self);
            };

            _triggers.push(self);

            self.enable(false, false);
            customRevertReturn && customRevertReturn(self);

            if (animation && animation.add && !change) {
              // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If "change" is defined, we know it must be re-enabling, thus we can refresh() right away.
              var updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().

              self.update = function () {
                self.update = updateFunc;
                start || end || self.refresh();
              };

              gsap.delayedCall(0.01, self.update);
              change = 0.01;
              start = end = 0;
            } else {
              self.refresh();
            }

            pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()
          };

          ScrollTrigger.register = function register(core) {
            if (!_coreInitted) {
              gsap = core || _getGSAP();
              _windowExists() && window.document && ScrollTrigger.enable();
              _coreInitted = _enabled;
            }

            return _coreInitted;
          };

          ScrollTrigger.defaults = function defaults(config) {
            if (config) {
              for (var p in config) {
                _defaults[p] = config[p];
              }
            }

            return _defaults;
          };

          ScrollTrigger.disable = function disable(reset, kill) {
            _enabled = 0;

            _triggers.forEach(function (trigger) {
              return trigger[kill ? "kill" : "disable"](reset);
            });

            _removeListener(_win, "wheel", _onScroll);

            _removeListener(_doc, "scroll", _onScroll);

            clearInterval(_syncInterval);

            _removeListener(_doc, "touchcancel", _passThrough);

            _removeListener(_body, "touchstart", _passThrough);

            _multiListener(
              _removeListener,
              _doc,
              "pointerdown,touchstart,mousedown",
              _pointerDownHandler
            );

            _multiListener(
              _removeListener,
              _doc,
              "pointerup,touchend,mouseup",
              _pointerUpHandler
            );

            _resizeDelay.kill();

            _iterateAutoRefresh(_removeListener);

            for (
              var i = 0;
              i <
              _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].length;
              i += 3
            ) {
              _wheelListener(
                _removeListener,
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"][i],
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"][i + 1]
              );

              _wheelListener(
                _removeListener,
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"][i],
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"][i + 2]
              );
            }
          };

          ScrollTrigger.enable = function enable() {
            _win = window;
            _doc = document;
            _docEl = _doc.documentElement;
            _body = _doc.body;

            if (gsap) {
              _toArray = gsap.utils.toArray;
              _clamp = gsap.utils.clamp;
              _context = gsap.core.context || _passThrough;
              _suppressOverwrites =
                gsap.core.suppressOverwrites || _passThrough;
              _scrollRestoration = _win.history.scrollRestoration || "auto";
              _lastScroll = _win.pageYOffset;
              gsap.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.

              if (_body) {
                _enabled = 1;
                _div100vh = document.createElement("div"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.

                _div100vh.style.height = "100vh";
                _div100vh.style.position = "absolute";

                _refresh100vh();

                _rafBugFix();

                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"].register(
                  gsap
                ); // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.

                ScrollTrigger.isTouch =
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"].isTouch;
                _fixIOSBug =
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"]
                    .isTouch &&
                  /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503

                _ignoreMobileResize =
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"]
                    .isTouch === 1;

                _addListener(_win, "wheel", _onScroll); // mostly for 3rd party smooth scrolling libraries.

                _root = [_win, _doc, _docEl, _body];

                if (gsap.matchMedia) {
                  ScrollTrigger.matchMedia = function (vars) {
                    var mm = gsap.matchMedia(),
                      p;

                    for (p in vars) {
                      mm.add(p, vars[p]);
                    }

                    return mm;
                  };

                  gsap.addEventListener("matchMediaInit", function () {
                    return _revertAll();
                  });
                  gsap.addEventListener("matchMediaRevert", function () {
                    return _revertRecorded();
                  });
                  gsap.addEventListener("matchMedia", function () {
                    _refreshAll(0, 1);

                    _dispatch("matchMedia");
                  });
                  gsap.matchMedia("(orientation: portrait)", function () {
                    // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.
                    _setBaseDimensions();

                    return _setBaseDimensions;
                  });
                } else {
                  console.warn("Requires GSAP 3.11.0 or later");
                }

                _setBaseDimensions();

                _addListener(_doc, "scroll", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!

                var bodyStyle = _body.style,
                  border = bodyStyle.borderTopStyle,
                  AnimationProto = gsap.core.Animation.prototype,
                  bounds,
                  i;
                AnimationProto.revert ||
                  Object.defineProperty(AnimationProto, "revert", {
                    value: function value() {
                      return this.time(-0.01, true);
                    },
                  }); // only for backwards compatibility (Animation.revert() was added after 3.10.4)

                bodyStyle.borderTopStyle = "solid"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.

                bounds = _getBounds(_body);
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"].m =
                  Math.round(
                    bounds.top +
                      _Observer_js__WEBPACK_IMPORTED_MODULE_0__[
                        "_vertical"
                      ].sc()
                  ) || 0; // accommodate the offset of the <body> caused by margins and/or padding

                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_horizontal"].m =
                  Math.round(
                    bounds.left +
                      _Observer_js__WEBPACK_IMPORTED_MODULE_0__[
                        "_horizontal"
                      ].sc()
                  ) || 0;
                border
                  ? (bodyStyle.borderTopStyle = border)
                  : bodyStyle.removeProperty("border-top-style"); // TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.

                _syncInterval = setInterval(_sync, 250);
                gsap.delayedCall(0.5, function () {
                  return (_startup = 0);
                });

                _addListener(_doc, "touchcancel", _passThrough); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.

                _addListener(_body, "touchstart", _passThrough); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/

                _multiListener(
                  _addListener,
                  _doc,
                  "pointerdown,touchstart,mousedown",
                  _pointerDownHandler
                );

                _multiListener(
                  _addListener,
                  _doc,
                  "pointerup,touchend,mouseup",
                  _pointerUpHandler
                );

                _transformProp = gsap.utils.checkPrefix("transform");

                _stateProps.push(_transformProp);

                _coreInitted = _getTime();
                _resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();
                _autoRefresh = [
                  _doc,
                  "visibilitychange",
                  function () {
                    var w = _win.innerWidth,
                      h = _win.innerHeight;

                    if (_doc.hidden) {
                      _prevWidth = w;
                      _prevHeight = h;
                    } else if (_prevWidth !== w || _prevHeight !== h) {
                      _onResize();
                    }
                  },
                  _doc,
                  "DOMContentLoaded",
                  _refreshAll,
                  _win,
                  "load",
                  _refreshAll,
                  _win,
                  "resize",
                  _onResize,
                ];

                _iterateAutoRefresh(_addListener);

                _triggers.forEach(function (trigger) {
                  return trigger.enable(0, 1);
                });

                for (
                  i = 0;
                  i <
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"]
                    .length;
                  i += 3
                ) {
                  _wheelListener(
                    _removeListener,
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"][i],
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"][
                      i + 1
                    ]
                  );

                  _wheelListener(
                    _removeListener,
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"][i],
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"][
                      i + 2
                    ]
                  );
                }
              }
            }
          };

          ScrollTrigger.config = function config(vars) {
            "limitCallbacks" in vars &&
              (_limitCallbacks = !!vars.limitCallbacks);
            var ms = vars.syncInterval;
            (ms && clearInterval(_syncInterval)) ||
              ((_syncInterval = ms) && setInterval(_sync, ms));
            "ignoreMobileResize" in vars &&
              (_ignoreMobileResize =
                ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);

            if ("autoRefreshEvents" in vars) {
              _iterateAutoRefresh(_removeListener) ||
                _iterateAutoRefresh(
                  _addListener,
                  vars.autoRefreshEvents || "none"
                );
              _ignoreResize =
                (vars.autoRefreshEvents + "").indexOf("resize") === -1;
            }
          };

          ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {
            var t = Object(
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"]
              )(target),
              i =
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].indexOf(
                  t
                ),
              isViewport = _isViewport(t);

            if (~i) {
              _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].splice(
                i,
                isViewport ? 6 : 2
              );
            }

            if (vars) {
              isViewport
                ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_proxies"].unshift(
                    _win,
                    vars,
                    _body,
                    vars,
                    _docEl,
                    vars
                  )
                : _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_proxies"].unshift(
                    t,
                    vars
                  );
            }
          };

          ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {
            _triggers.forEach(function (t) {
              return (
                t._ctx && t._ctx.query === query && t._ctx.kill(true, true)
              );
            });
          };

          ScrollTrigger.isInViewport = function isInViewport(
            element,
            ratio,
            horizontal
          ) {
            var bounds = (
                _isString(element)
                  ? Object(
                      _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"]
                    )(element)
                  : element
              ).getBoundingClientRect(),
              offset = bounds[horizontal ? _width : _height] * ratio || 0;
            return horizontal
              ? bounds.right - offset > 0 &&
                  bounds.left + offset < _win.innerWidth
              : bounds.bottom - offset > 0 &&
                  bounds.top + offset < _win.innerHeight;
          };

          ScrollTrigger.positionInViewport = function positionInViewport(
            element,
            referencePoint,
            horizontal
          ) {
            _isString(element) &&
              (element = Object(
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"]
              )(element));
            var bounds = element.getBoundingClientRect(),
              size = bounds[horizontal ? _width : _height],
              offset =
                referencePoint == null
                  ? size / 2
                  : referencePoint in _keywords
                  ? _keywords[referencePoint] * size
                  : ~referencePoint.indexOf("%")
                  ? (parseFloat(referencePoint) * size) / 100
                  : parseFloat(referencePoint) || 0;
            return horizontal
              ? (bounds.left + offset) / _win.innerWidth
              : (bounds.top + offset) / _win.innerHeight;
          };

          ScrollTrigger.killAll = function killAll(allowListeners) {
            _triggers.slice(0).forEach(function (t) {
              return t.vars.id !== "ScrollSmoother" && t.kill();
            });

            if (allowListeners !== true) {
              var listeners = _listeners.killAll || [];
              _listeners = {};
              listeners.forEach(function (f) {
                return f();
              });
            }
          };

          return ScrollTrigger;
        })();
        ScrollTrigger.version = "3.12.5";

        ScrollTrigger.saveStyles = function (targets) {
          return targets
            ? _toArray(targets).forEach(function (target) {
                // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]
                if (target && target.style) {
                  var i = _savedStyles.indexOf(target);

                  i >= 0 && _savedStyles.splice(i, 5);

                  _savedStyles.push(
                    target,
                    target.style.cssText,
                    target.getBBox && target.getAttribute("transform"),
                    gsap.core.getCache(target),
                    _context()
                  );
                }
              })
            : _savedStyles;
        };

        ScrollTrigger.revert = function (soft, media) {
          return _revertAll(!soft, media);
        };

        ScrollTrigger.create = function (vars, animation) {
          return new ScrollTrigger(vars, animation);
        };

        ScrollTrigger.refresh = function (safe) {
          return safe
            ? _onResize()
            : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);
        };

        ScrollTrigger.update = function (force) {
          return (
            ++_Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].cache &&
            _updateAll(force === true ? 2 : 0)
          );
        };

        ScrollTrigger.clearScrollMemory = _clearScrollMemory;

        ScrollTrigger.maxScroll = function (element, horizontal) {
          return _maxScroll(
            element,
            horizontal
              ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_horizontal"]
              : _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"]
          );
        };

        ScrollTrigger.getScrollFunc = function (element, horizontal) {
          return Object(
            _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getScrollFunc"]
          )(
            Object(_Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"])(
              element
            ),
            horizontal
              ? _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_horizontal"]
              : _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"]
          );
        };

        ScrollTrigger.getById = function (id) {
          return _ids[id];
        };

        ScrollTrigger.getAll = function () {
          return _triggers.filter(function (t) {
            return t.vars.id !== "ScrollSmoother";
          });
        }; // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.

        ScrollTrigger.isScrolling = function () {
          return !!_lastScrollTime;
        };

        ScrollTrigger.snapDirectional = _snapDirectional;

        ScrollTrigger.addEventListener = function (type, callback) {
          var a = _listeners[type] || (_listeners[type] = []);
          ~a.indexOf(callback) || a.push(callback);
        };

        ScrollTrigger.removeEventListener = function (type, callback) {
          var a = _listeners[type],
            i = a && a.indexOf(callback);
          i >= 0 && a.splice(i, 1);
        };

        ScrollTrigger.batch = function (targets, vars) {
          var result = [],
            varsCopy = {},
            interval = vars.interval || 0.016,
            batchMax = vars.batchMax || 1e9,
            proxyCallback = function proxyCallback(type, callback) {
              var elements = [],
                triggers = [],
                delay = gsap
                  .delayedCall(interval, function () {
                    callback(elements, triggers);
                    elements = [];
                    triggers = [];
                  })
                  .pause();
              return function (self) {
                elements.length || delay.restart(true);
                elements.push(self.trigger);
                triggers.push(self);
                batchMax <= elements.length && delay.progress(1);
              };
            },
            p;

          for (p in vars) {
            varsCopy[p] =
              p.substr(0, 2) === "on" &&
              _isFunction(vars[p]) &&
              p !== "onRefreshInit"
                ? proxyCallback(p, vars[p])
                : vars[p];
          }

          if (_isFunction(batchMax)) {
            batchMax = batchMax();

            _addListener(ScrollTrigger, "refresh", function () {
              return (batchMax = vars.batchMax());
            });
          }

          _toArray(targets).forEach(function (target) {
            var config = {};

            for (p in varsCopy) {
              config[p] = varsCopy[p];
            }

            config.trigger = target;
            result.push(ScrollTrigger.create(config));
          });

          return result;
        }; // to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).

        var _clampScrollAndGetDurationMultiplier =
            function _clampScrollAndGetDurationMultiplier(
              scrollFunc,
              current,
              end,
              max
            ) {
              current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
              return end > max
                ? (max - current) / (end - current)
                : end < 0
                ? current / (current - end)
                : 1;
            },
          _allowNativePanning = function _allowNativePanning(
            target,
            direction
          ) {
            if (direction === true) {
              target.style.removeProperty("touch-action");
            } else {
              target.style.touchAction =
                direction === true
                  ? "auto"
                  : direction
                  ? "pan-" +
                    direction +
                    (_Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"]
                      .isTouch
                      ? " pinch-zoom"
                      : "")
                  : "none"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.
            }

            target === _docEl && _allowNativePanning(_body, direction);
          },
          _overflow = {
            auto: 1,
            scroll: 1,
          },
          _nestedScroll = function _nestedScroll(_ref5) {
            var event = _ref5.event,
              target = _ref5.target,
              axis = _ref5.axis;

            var node = (event.changedTouches ? event.changedTouches[0] : event)
                .target,
              cache = node._gsap || gsap.core.getCache(node),
              time = _getTime(),
              cs;

            if (!cache._isScrollT || time - cache._isScrollT > 2000) {
              // cache for 2 seconds to improve performance.
              while (
                node &&
                node !== _body &&
                ((node.scrollHeight <= node.clientHeight &&
                  node.scrollWidth <= node.clientWidth) ||
                  !(
                    _overflow[(cs = _getComputedStyle(node)).overflowY] ||
                    _overflow[cs.overflowX]
                  ))
              ) {
                node = node.parentNode;
              }

              cache._isScroll =
                node &&
                node !== target &&
                !_isViewport(node) &&
                (_overflow[(cs = _getComputedStyle(node)).overflowY] ||
                  _overflow[cs.overflowX]);
              cache._isScrollT = time;
            }

            if (cache._isScroll || axis === "x") {
              event.stopPropagation();
              event._gsapAllow = true;
            }
          },
          // capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor
          _inputObserver = function _inputObserver(
            target,
            type,
            inputs,
            nested
          ) {
            return _Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"].create(
              {
                target: target,
                capture: true,
                debounce: false,
                lockAxis: true,
                type: type,
                onWheel: (nested = nested && _nestedScroll),
                onPress: nested,
                onDrag: nested,
                onScroll: nested,
                onEnable: function onEnable() {
                  return (
                    inputs &&
                    _addListener(
                      _doc,
                      _Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"]
                        .eventTypes[0],
                      _captureInputs,
                      false,
                      true
                    )
                  );
                },
                onDisable: function onDisable() {
                  return _removeListener(
                    _doc,
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"]
                      .eventTypes[0],
                    _captureInputs,
                    true
                  );
                },
              }
            );
          },
          _inputExp = /(input|label|select|textarea)/i,
          _inputIsFocused,
          _captureInputs = function _captureInputs(e) {
            var isInput = _inputExp.test(e.target.tagName);

            if (isInput || _inputIsFocused) {
              e._gsapAllow = true;
              _inputIsFocused = isInput;
            }
          },
          _getScrollNormalizer = function _getScrollNormalizer(vars) {
            _isObject(vars) || (vars = {});
            vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
            vars.type || (vars.type = "wheel,touch");
            vars.debounce = !!vars.debounce;
            vars.id = vars.id || "normalizer";

            var _vars2 = vars,
              normalizeScrollX = _vars2.normalizeScrollX,
              momentum = _vars2.momentum,
              allowNestedScroll = _vars2.allowNestedScroll,
              onRelease = _vars2.onRelease,
              self,
              maxY,
              target =
                Object(_Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"])(
                  vars.target
                ) || _docEl,
              smoother = gsap.core.globals().ScrollSmoother,
              smootherInstance = smoother && smoother.get(),
              content =
                _fixIOSBug &&
                ((vars.content &&
                  Object(
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getTarget"]
                  )(vars.content)) ||
                  (smootherInstance &&
                    vars.content !== false &&
                    !smootherInstance.smooth() &&
                    smootherInstance.content())),
              scrollFuncY = Object(
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getScrollFunc"]
              )(target, _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"]),
              scrollFuncX = Object(
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getScrollFunc"]
              )(
                target,
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_horizontal"]
              ),
              scale = 1,
              initialScale =
                (_Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"]
                  .isTouch && _win.visualViewport
                  ? _win.visualViewport.scale * _win.visualViewport.width
                  : _win.outerWidth) / _win.innerWidth,
              wheelRefresh = 0,
              resolveMomentumDuration = _isFunction(momentum)
                ? function () {
                    return momentum(self);
                  }
                : function () {
                    return momentum || 2.8;
                  },
              lastRefreshID,
              skipTouchMove,
              inputObserver = _inputObserver(
                target,
                vars.type,
                true,
                allowNestedScroll
              ),
              resumeTouchMove = function resumeTouchMove() {
                return (skipTouchMove = false);
              },
              scrollClampX = _passThrough,
              scrollClampY = _passThrough,
              updateClamps = function updateClamps() {
                maxY = _maxScroll(
                  target,
                  _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"]
                );
                scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);
                normalizeScrollX &&
                  (scrollClampX = _clamp(
                    0,
                    _maxScroll(
                      target,
                      _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_horizontal"]
                    )
                  ));
                lastRefreshID = _refreshID;
              },
              removeContentOffset = function removeContentOffset() {
                content._gsap.y =
                  _round(parseFloat(content._gsap.y) + scrollFuncY.offset) +
                  "px";
                content.style.transform =
                  "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " +
                  parseFloat(content._gsap.y) +
                  ", 0, 1)";
                scrollFuncY.offset = scrollFuncY.cacheID = 0;
              },
              ignoreDrag = function ignoreDrag() {
                if (skipTouchMove) {
                  requestAnimationFrame(resumeTouchMove);

                  var offset = _round(self.deltaY / 2),
                    scroll = scrollClampY(scrollFuncY.v - offset);

                  if (
                    content &&
                    scroll !== scrollFuncY.v + scrollFuncY.offset
                  ) {
                    scrollFuncY.offset = scroll - scrollFuncY.v;

                    var y = _round(
                      (parseFloat(content && content._gsap.y) || 0) -
                        scrollFuncY.offset
                    );

                    content.style.transform =
                      "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " +
                      y +
                      ", 0, 1)";
                    content._gsap.y = y + "px";
                    scrollFuncY.cacheID =
                      _Observer_js__WEBPACK_IMPORTED_MODULE_0__[
                        "_scrollers"
                      ].cache;

                    _updateAll();
                  }

                  return true;
                }

                scrollFuncY.offset && removeContentOffset();
                skipTouchMove = true;
              },
              tween,
              startScrollX,
              startScrollY,
              onStopDelayedCall,
              onResize = function onResize() {
                // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.
                updateClamps();

                if (tween.isActive() && tween.vars.scrollY > maxY) {
                  scrollFuncY() > maxY
                    ? tween.progress(1) && scrollFuncY(maxY)
                    : tween.resetTo("scrollY", maxY);
                }
              };

            content &&
              gsap.set(content, {
                y: "+=0",
              }); // to ensure there's a cache (element._gsap)

            vars.ignoreCheck = function (e) {
              return (
                (_fixIOSBug && e.type === "touchmove" && ignoreDrag(e)) ||
                (scale > 1.05 && e.type !== "touchstart") ||
                self.isGesturing ||
                (e.touches && e.touches.length > 1)
              );
            };

            vars.onPress = function () {
              skipTouchMove = false;
              var prevScale = scale;
              scale = _round(
                ((_win.visualViewport && _win.visualViewport.scale) || 1) /
                  initialScale
              );
              tween.pause();
              prevScale !== scale &&
                _allowNativePanning(
                  target,
                  scale > 1.01 ? true : normalizeScrollX ? false : "x"
                );
              startScrollX = scrollFuncX();
              startScrollY = scrollFuncY();
              updateClamps();
              lastRefreshID = _refreshID;
            };

            vars.onRelease = vars.onGestureStart = function (
              self,
              wasDragging
            ) {
              scrollFuncY.offset && removeContentOffset();

              if (!wasDragging) {
                onStopDelayedCall.restart(true);
              } else {
                _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"].cache++; // make sure we're pulling the non-cached value
                // alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),	dur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)

                var dur = resolveMomentumDuration(),
                  currentScroll,
                  endScroll;

                if (normalizeScrollX) {
                  currentScroll = scrollFuncX();
                  endScroll =
                    currentScroll + (dur * 0.05 * -self.velocityX) / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.

                  dur *= _clampScrollAndGetDurationMultiplier(
                    scrollFuncX,
                    currentScroll,
                    endScroll,
                    _maxScroll(
                      target,
                      _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_horizontal"]
                    )
                  );
                  tween.vars.scrollX = scrollClampX(endScroll);
                }

                currentScroll = scrollFuncY();
                endScroll =
                  currentScroll + (dur * 0.05 * -self.velocityY) / 0.227; // the constant .227 is from power4(0.05)

                dur *= _clampScrollAndGetDurationMultiplier(
                  scrollFuncY,
                  currentScroll,
                  endScroll,
                  _maxScroll(
                    target,
                    _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_vertical"]
                  )
                );
                tween.vars.scrollY = scrollClampY(endScroll);
                tween.invalidate().duration(dur).play(0.01);

                if (
                  (_fixIOSBug && tween.vars.scrollY >= maxY) ||
                  currentScroll >= maxY - 1
                ) {
                  // iOS bug: it'll show the address bar but NOT fire the window "resize" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.
                  gsap.to(
                    {},
                    {
                      onUpdate: onResize,
                      duration: dur,
                    }
                  );
                }
              }

              onRelease && onRelease(self);
            };

            vars.onWheel = function () {
              tween._ts && tween.pause();

              if (_getTime() - wheelRefresh > 1000) {
                // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.
                lastRefreshID = 0;
                wheelRefresh = _getTime();
              }
            };

            vars.onChange = function (self, dx, dy, xArray, yArray) {
              _refreshID !== lastRefreshID && updateClamps();
              dx &&
                normalizeScrollX &&
                scrollFuncX(
                  scrollClampX(
                    xArray[2] === dx
                      ? startScrollX + (self.startX - self.x)
                      : scrollFuncX() + dx - xArray[1]
                  )
                ); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.

              if (dy) {
                scrollFuncY.offset && removeContentOffset();
                var isTouch = yArray[2] === dy,
                  y = isTouch
                    ? startScrollY + self.startY - self.y
                    : scrollFuncY() + dy - yArray[1],
                  yClamped = scrollClampY(y);
                isTouch && y !== yClamped && (startScrollY += yClamped - y);
                scrollFuncY(yClamped);
              }

              (dy || dx) && _updateAll();
            };

            vars.onEnable = function () {
              _allowNativePanning(target, normalizeScrollX ? false : "x");

              ScrollTrigger.addEventListener("refresh", onResize);

              _addListener(_win, "resize", onResize);

              if (scrollFuncY.smooth) {
                scrollFuncY.target.style.scrollBehavior = "auto";
                scrollFuncY.smooth = scrollFuncX.smooth = false;
              }

              inputObserver.enable();
            };

            vars.onDisable = function () {
              _allowNativePanning(target, true);

              _removeListener(_win, "resize", onResize);

              ScrollTrigger.removeEventListener("refresh", onResize);
              inputObserver.kill();
            };

            vars.lockAxis = vars.lockAxis !== false;
            self = new _Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"](
              vars
            );
            self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.

            _fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.

            _fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping

            onStopDelayedCall = self._dc;
            tween = gsap.to(self, {
              ease: "power4",
              paused: true,
              inherit: false,
              scrollX: normalizeScrollX ? "+=0.1" : "+=0",
              scrollY: "+=0.1",
              modifiers: {
                scrollY: _interruptionTracker(
                  scrollFuncY,
                  scrollFuncY(),
                  function () {
                    return tween.pause();
                  }
                ),
              },
              onUpdate: _updateAll,
              onComplete: onStopDelayedCall.vars.onComplete,
            }); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.

            return self;
          };

        ScrollTrigger.sort = function (func) {
          return _triggers.sort(
            func ||
              function (a, b) {
                return (
                  (a.vars.refreshPriority || 0) * -1e6 +
                  a.start -
                  (b.start + (b.vars.refreshPriority || 0) * -1e6)
                );
              }
          );
        };

        ScrollTrigger.observe = function (vars) {
          return new _Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"](
            vars
          );
        };

        ScrollTrigger.normalizeScroll = function (vars) {
          if (typeof vars === "undefined") {
            return _normalizer;
          }

          if (vars === true && _normalizer) {
            return _normalizer.enable();
          }

          if (vars === false) {
            _normalizer && _normalizer.kill();
            _normalizer = vars;
            return;
          }

          var normalizer =
            vars instanceof
            _Observer_js__WEBPACK_IMPORTED_MODULE_0__["Observer"]
              ? vars
              : _getScrollNormalizer(vars);
          _normalizer &&
            _normalizer.target === normalizer.target &&
            _normalizer.kill();
          _isViewport(normalizer.target) && (_normalizer = normalizer);
          return normalizer;
        };

        ScrollTrigger.core = {
          // smaller file size way to leverage in ScrollSmoother and Observer
          _getVelocityProp:
            _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_getVelocityProp"],
          _inputObserver: _inputObserver,
          _scrollers: _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_scrollers"],
          _proxies: _Observer_js__WEBPACK_IMPORTED_MODULE_0__["_proxies"],
          bridge: {
            // when normalizeScroll sets the scroll position (ss = setScroll)
            ss: function ss() {
              _lastScrollTime || _dispatch("scrollStart");
              _lastScrollTime = _getTime();
            },
            // a way to get the _refreshing value in Observer
            ref: function ref() {
              return _refreshing;
            },
          },
        };
        _getGSAP() && gsap.registerPlugin(ScrollTrigger);

        /***/
      },

    /***/ "./node_modules/gsap/gsap-core.js":
      /*!****************************************!*\
  !*** ./node_modules/gsap/gsap-core.js ***!
  \****************************************/
      /*! exports provided: GSCache, Animation, Timeline, Tween, PropTween, gsap, Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ, TweenMax, TweenLite, TimelineMax, TimelineLite, default, wrap, wrapYoyo, distribute, random, snap, normalize, getUnit, clamp, splitColor, toArray, selector, mapRange, pipe, unitize, interpolate, shuffle, _getProperty, _numExp, _numWithUnitExp, _isString, _isUndefined, _renderComplexString, _relExp, _setDefaults, _removeLinkedListItem, _forEachName, _sortPropTweensByPriority, _colorStringFilter, _replaceRandom, _checkPlugin, _plugins, _ticker, _config, _roundModifier, _round, _missingPlugin, _getSetter, _getCache, _colorExp, _parseRelative */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "GSCache",
          function () {
            return GSCache;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Animation",
          function () {
            return Animation;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Timeline",
          function () {
            return Timeline;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Tween",
          function () {
            return Tween;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "PropTween",
          function () {
            return PropTween;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "gsap",
          function () {
            return gsap;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Power0",
          function () {
            return Power0;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Power1",
          function () {
            return Power1;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Power2",
          function () {
            return Power2;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Power3",
          function () {
            return Power3;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Power4",
          function () {
            return Power4;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Linear",
          function () {
            return Linear;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Quad",
          function () {
            return Quad;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Cubic",
          function () {
            return Cubic;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Quart",
          function () {
            return Quart;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Quint",
          function () {
            return Quint;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Strong",
          function () {
            return Strong;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Elastic",
          function () {
            return Elastic;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Back",
          function () {
            return Back;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "SteppedEase",
          function () {
            return SteppedEase;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Bounce",
          function () {
            return Bounce;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Sine",
          function () {
            return Sine;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Expo",
          function () {
            return Expo;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "Circ",
          function () {
            return Circ;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TweenMax",
          function () {
            return Tween;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TweenLite",
          function () {
            return Tween;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TimelineMax",
          function () {
            return Timeline;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TimelineLite",
          function () {
            return Timeline;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return gsap;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "wrap",
          function () {
            return wrap;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "wrapYoyo",
          function () {
            return wrapYoyo;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "distribute",
          function () {
            return distribute;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "random",
          function () {
            return random;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "snap",
          function () {
            return snap;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "normalize",
          function () {
            return normalize;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getUnit",
          function () {
            return getUnit;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "clamp",
          function () {
            return clamp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "splitColor",
          function () {
            return splitColor;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "toArray",
          function () {
            return toArray;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "selector",
          function () {
            return selector;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "mapRange",
          function () {
            return mapRange;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "pipe",
          function () {
            return pipe;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "unitize",
          function () {
            return unitize;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "interpolate",
          function () {
            return interpolate;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "shuffle",
          function () {
            return shuffle;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_getProperty",
          function () {
            return _getProperty;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_numExp",
          function () {
            return _numExp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_numWithUnitExp",
          function () {
            return _numWithUnitExp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_isString",
          function () {
            return _isString;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_isUndefined",
          function () {
            return _isUndefined;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_renderComplexString",
          function () {
            return _renderComplexString;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_relExp",
          function () {
            return _relExp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_setDefaults",
          function () {
            return _setDefaults;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_removeLinkedListItem",
          function () {
            return _removeLinkedListItem;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_forEachName",
          function () {
            return _forEachName;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_sortPropTweensByPriority",
          function () {
            return _sortPropTweensByPriority;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_colorStringFilter",
          function () {
            return _colorStringFilter;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_replaceRandom",
          function () {
            return _replaceRandom;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_checkPlugin",
          function () {
            return _checkPlugin;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_plugins",
          function () {
            return _plugins;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_ticker",
          function () {
            return _ticker;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_config",
          function () {
            return _config;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_roundModifier",
          function () {
            return _roundModifier;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_round",
          function () {
            return _round;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_missingPlugin",
          function () {
            return _missingPlugin;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_getSetter",
          function () {
            return _getSetter;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_getCache",
          function () {
            return _getCache;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_colorExp",
          function () {
            return _colorExp;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "_parseRelative",
          function () {
            return _parseRelative;
          }
        );
        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }

        /*!
         * GSAP 3.12.5
         * https://gsap.com
         *
         * @license Copyright 2008-2024, GreenSock. All rights reserved.
         * Subject to the terms at https://gsap.com/standard-license or for
         * Club GSAP members, the agreement issued with that membership.
         * @author: Jack Doyle, jack@greensock.com
         */

        /* eslint-disable */
        var _config = {
            autoSleep: 120,
            force3D: "auto",
            nullTargetWarn: 1,
            units: {
              lineHeight: "",
            },
          },
          _defaults = {
            duration: 0.5,
            overwrite: false,
            delay: 0,
          },
          _suppressOverwrites,
          _reverting,
          _context,
          _bigNum = 1e8,
          _tinyNum = 1 / _bigNum,
          _2PI = Math.PI * 2,
          _HALF_PI = _2PI / 4,
          _gsID = 0,
          _sqrt = Math.sqrt,
          _cos = Math.cos,
          _sin = Math.sin,
          _isString = function _isString(value) {
            return typeof value === "string";
          },
          _isFunction = function _isFunction(value) {
            return typeof value === "function";
          },
          _isNumber = function _isNumber(value) {
            return typeof value === "number";
          },
          _isUndefined = function _isUndefined(value) {
            return typeof value === "undefined";
          },
          _isObject = function _isObject(value) {
            return typeof value === "object";
          },
          _isNotFalse = function _isNotFalse(value) {
            return value !== false;
          },
          _windowExists = function _windowExists() {
            return typeof window !== "undefined";
          },
          _isFuncOrString = function _isFuncOrString(value) {
            return _isFunction(value) || _isString(value);
          },
          _isTypedArray =
            (typeof ArrayBuffer === "function" && ArrayBuffer.isView) ||
            function () {},
          // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
          _isArray = Array.isArray,
          _strictNumExp = /(?:-?\.?\d|\.)+/gi,
          //only numbers (including negatives and decimals) but NOT relative values.
          _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
          //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
          _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
          _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
          //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
          _relExp = /[+-]=-?[.\d]+/,
          _delimitedValueExp = /[^,'"\[\]\s]+/gi,
          // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
          _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
          _globalTimeline,
          _win,
          _coreInitted,
          _doc,
          _globals = {},
          _installScope = {},
          _coreReady,
          _install = function _install(scope) {
            return (_installScope = _merge(scope, _globals)) && gsap;
          },
          _missingPlugin = function _missingPlugin(property, value) {
            return console.warn(
              "Invalid property",
              property,
              "set to",
              value,
              "Missing plugin? gsap.registerPlugin()"
            );
          },
          _warn = function _warn(message, suppress) {
            return !suppress && console.warn(message);
          },
          _addGlobal = function _addGlobal(name, obj) {
            return (
              (name &&
                (_globals[name] = obj) &&
                _installScope &&
                (_installScope[name] = obj)) ||
              _globals
            );
          },
          _emptyFunc = function _emptyFunc() {
            return 0;
          },
          _startAtRevertConfig = {
            suppressEvents: true,
            isStart: true,
            kill: false,
          },
          _revertConfigNoKill = {
            suppressEvents: true,
            kill: false,
          },
          _revertConfig = {
            suppressEvents: true,
          },
          _reservedProps = {},
          _lazyTweens = [],
          _lazyLookup = {},
          _lastRenderedFrame,
          _plugins = {},
          _effects = {},
          _nextGCFrame = 30,
          _harnessPlugins = [],
          _callbackNames = "",
          _harness = function _harness(targets) {
            var target = targets[0],
              harnessPlugin,
              i;
            _isObject(target) || _isFunction(target) || (targets = [targets]);

            if (!(harnessPlugin = (target._gsap || {}).harness)) {
              // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
              i = _harnessPlugins.length;

              while (i-- && !_harnessPlugins[i].targetTest(target)) {}

              harnessPlugin = _harnessPlugins[i];
            }

            i = targets.length;

            while (i--) {
              (targets[i] &&
                (targets[i]._gsap ||
                  (targets[i]._gsap = new GSCache(
                    targets[i],
                    harnessPlugin
                  )))) ||
                targets.splice(i, 1);
            }

            return targets;
          },
          _getCache = function _getCache(target) {
            return target._gsap || _harness(toArray(target))[0]._gsap;
          },
          _getProperty = function _getProperty(target, property, v) {
            return (v = target[property]) && _isFunction(v)
              ? target[property]()
              : (_isUndefined(v) &&
                  target.getAttribute &&
                  target.getAttribute(property)) ||
                  v;
          },
          _forEachName = function _forEachName(names, func) {
            return (names = names.split(",")).forEach(func) || names;
          },
          //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
          _round = function _round(value) {
            return Math.round(value * 100000) / 100000 || 0;
          },
          _roundPrecise = function _roundPrecise(value) {
            return Math.round(value * 10000000) / 10000000 || 0;
          },
          // increased precision mostly for timing values.
          _parseRelative = function _parseRelative(start, value) {
            var operator = value.charAt(0),
              end = parseFloat(value.substr(2));
            start = parseFloat(start);
            return operator === "+"
              ? start + end
              : operator === "-"
              ? start - end
              : operator === "*"
              ? start * end
              : start / end;
          },
          _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
            //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
            var l = toFind.length,
              i = 0;

            for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l; ) {}

            return i < l;
          },
          _lazyRender = function _lazyRender() {
            var l = _lazyTweens.length,
              a = _lazyTweens.slice(0),
              i,
              tween;

            _lazyLookup = {};
            _lazyTweens.length = 0;

            for (i = 0; i < l; i++) {
              tween = a[i];
              tween &&
                tween._lazy &&
                (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
            }
          },
          _lazySafeRender = function _lazySafeRender(
            animation,
            time,
            suppressEvents,
            force
          ) {
            _lazyTweens.length && !_reverting && _lazyRender();
            animation.render(
              time,
              suppressEvents,
              force ||
                (_reverting &&
                  time < 0 &&
                  (animation._initted || animation._startAt))
            );
            _lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
          },
          _numericIfPossible = function _numericIfPossible(value) {
            var n = parseFloat(value);
            return (n || n === 0) &&
              (value + "").match(_delimitedValueExp).length < 2
              ? n
              : _isString(value)
              ? value.trim()
              : value;
          },
          _passThrough = function _passThrough(p) {
            return p;
          },
          _setDefaults = function _setDefaults(obj, defaults) {
            for (var p in defaults) {
              p in obj || (obj[p] = defaults[p]);
            }

            return obj;
          },
          _setKeyframeDefaults = function _setKeyframeDefaults(
            excludeDuration
          ) {
            return function (obj, defaults) {
              for (var p in defaults) {
                p in obj ||
                  (p === "duration" && excludeDuration) ||
                  p === "ease" ||
                  (obj[p] = defaults[p]);
              }
            };
          },
          _merge = function _merge(base, toMerge) {
            for (var p in toMerge) {
              base[p] = toMerge[p];
            }

            return base;
          },
          _mergeDeep = function _mergeDeep(base, toMerge) {
            for (var p in toMerge) {
              p !== "__proto__" &&
                p !== "constructor" &&
                p !== "prototype" &&
                (base[p] = _isObject(toMerge[p])
                  ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p])
                  : toMerge[p]);
            }

            return base;
          },
          _copyExcluding = function _copyExcluding(obj, excluding) {
            var copy = {},
              p;

            for (p in obj) {
              p in excluding || (copy[p] = obj[p]);
            }

            return copy;
          },
          _inheritDefaults = function _inheritDefaults(vars) {
            var parent = vars.parent || _globalTimeline,
              func = vars.keyframes
                ? _setKeyframeDefaults(_isArray(vars.keyframes))
                : _setDefaults;

            if (_isNotFalse(vars.inherit)) {
              while (parent) {
                func(vars, parent.vars.defaults);
                parent = parent.parent || parent._dp;
              }
            }

            return vars;
          },
          _arraysMatch = function _arraysMatch(a1, a2) {
            var i = a1.length,
              match = i === a2.length;

            while (match && i-- && a1[i] === a2[i]) {}

            return i < 0;
          },
          _addLinkedListItem = function _addLinkedListItem(
            parent,
            child,
            firstProp,
            lastProp,
            sortBy
          ) {
            if (firstProp === void 0) {
              firstProp = "_first";
            }

            if (lastProp === void 0) {
              lastProp = "_last";
            }

            var prev = parent[lastProp],
              t;

            if (sortBy) {
              t = child[sortBy];

              while (prev && prev[sortBy] > t) {
                prev = prev._prev;
              }
            }

            if (prev) {
              child._next = prev._next;
              prev._next = child;
            } else {
              child._next = parent[firstProp];
              parent[firstProp] = child;
            }

            if (child._next) {
              child._next._prev = child;
            } else {
              parent[lastProp] = child;
            }

            child._prev = prev;
            child.parent = child._dp = parent;
            return child;
          },
          _removeLinkedListItem = function _removeLinkedListItem(
            parent,
            child,
            firstProp,
            lastProp
          ) {
            if (firstProp === void 0) {
              firstProp = "_first";
            }

            if (lastProp === void 0) {
              lastProp = "_last";
            }

            var prev = child._prev,
              next = child._next;

            if (prev) {
              prev._next = next;
            } else if (parent[firstProp] === child) {
              parent[firstProp] = next;
            }

            if (next) {
              next._prev = prev;
            } else if (parent[lastProp] === child) {
              parent[lastProp] = prev;
            }

            child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
          },
          _removeFromParent = function _removeFromParent(
            child,
            onlyIfParentHasAutoRemove
          ) {
            child.parent &&
              (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) &&
              child.parent.remove &&
              child.parent.remove(child);
            child._act = 0;
          },
          _uncache = function _uncache(animation, child) {
            if (
              animation &&
              (!child || child._end > animation._dur || child._start < 0)
            ) {
              // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
              var a = animation;

              while (a) {
                a._dirty = 1;
                a = a.parent;
              }
            }

            return animation;
          },
          _recacheAncestors = function _recacheAncestors(animation) {
            var parent = animation.parent;

            while (parent && parent.parent) {
              //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
              parent._dirty = 1;
              parent.totalDuration();
              parent = parent.parent;
            }

            return animation;
          },
          _rewindStartAt = function _rewindStartAt(
            tween,
            totalTime,
            suppressEvents,
            force
          ) {
            return (
              tween._startAt &&
              (_reverting
                ? tween._startAt.revert(_revertConfigNoKill)
                : (tween.vars.immediateRender && !tween.vars.autoRevert) ||
                  tween._startAt.render(totalTime, true, force))
            );
          },
          _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
            return (
              !animation ||
              (animation._ts && _hasNoPausedAncestors(animation.parent))
            );
          },
          _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
            return animation._repeat
              ? _animationCycle(
                  animation._tTime,
                  (animation = animation.duration() + animation._rDelay)
                ) * animation
              : 0;
          },
          // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
          _animationCycle = function _animationCycle(tTime, cycleDuration) {
            var whole = Math.floor((tTime /= cycleDuration));
            return tTime && whole === tTime ? whole - 1 : whole;
          },
          _parentToChildTotalTime = function _parentToChildTotalTime(
            parentTime,
            child
          ) {
            return (
              (parentTime - child._start) * child._ts +
              (child._ts >= 0
                ? 0
                : child._dirty
                ? child.totalDuration()
                : child._tDur)
            );
          },
          _setEnd = function _setEnd(animation) {
            return (animation._end = _roundPrecise(
              animation._start +
                (animation._tDur /
                  Math.abs(animation._ts || animation._rts || _tinyNum) || 0)
            ));
          },
          _alignPlayhead = function _alignPlayhead(animation, totalTime) {
            // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
            var parent = animation._dp;

            if (parent && parent.smoothChildTiming && animation._ts) {
              animation._start = _roundPrecise(
                parent._time -
                  (animation._ts > 0
                    ? totalTime / animation._ts
                    : ((animation._dirty
                        ? animation.totalDuration()
                        : animation._tDur) -
                        totalTime) /
                      -animation._ts)
              );

              _setEnd(animation);

              parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
            }

            return animation;
          },
          /*
_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
	let cycleDuration = duration + repeatDelay,
		time = _round(clampedTotalTime % cycleDuration);
	if (time > duration) {
		time = duration;
	}
	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
},
*/
          _postAddChecks = function _postAddChecks(timeline, child) {
            var t;

            if (
              child._time ||
              (!child._dur && child._initted) ||
              (child._start < timeline._time && (child._dur || !child.add))
            ) {
              // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
              t = _parentToChildTotalTime(timeline.rawTime(), child);

              if (
                !child._dur ||
                _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum
              ) {
                child.render(t, true);
              }
            } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.

            if (
              _uncache(timeline, child)._dp &&
              timeline._initted &&
              timeline._time >= timeline._dur &&
              timeline._ts
            ) {
              //in case any of the ancestors had completed but should now be enabled...
              if (timeline._dur < timeline.duration()) {
                t = timeline;

                while (t._dp) {
                  t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

                  t = t._dp;
                }
              }

              timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
            }
          },
          _addToTimeline = function _addToTimeline(
            timeline,
            child,
            position,
            skipChecks
          ) {
            child.parent && _removeFromParent(child);
            child._start = _roundPrecise(
              (_isNumber(position)
                ? position
                : position || timeline !== _globalTimeline
                ? _parsePosition(timeline, position, child)
                : timeline._time) + child._delay
            );
            child._end = _roundPrecise(
              child._start +
                (child.totalDuration() / Math.abs(child.timeScale()) || 0)
            );

            _addLinkedListItem(
              timeline,
              child,
              "_first",
              "_last",
              timeline._sort ? "_start" : 0
            );

            _isFromOrFromStart(child) || (timeline._recent = child);
            skipChecks || _postAddChecks(timeline, child);
            timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)

            return timeline;
          },
          _scrollTrigger = function _scrollTrigger(animation, trigger) {
            return (
              (_globals.ScrollTrigger ||
                _missingPlugin("scrollTrigger", trigger)) &&
              _globals.ScrollTrigger.create(trigger, animation)
            );
          },
          _attemptInitTween = function _attemptInitTween(
            tween,
            time,
            force,
            suppressEvents,
            tTime
          ) {
            _initTween(tween, time, tTime);

            if (!tween._initted) {
              return 1;
            }

            if (
              !force &&
              tween._pt &&
              !_reverting &&
              ((tween._dur && tween.vars.lazy !== false) ||
                (!tween._dur && tween.vars.lazy)) &&
              _lastRenderedFrame !== _ticker.frame
            ) {
              _lazyTweens.push(tween);

              tween._lazy = [tTime, suppressEvents];
              return 1;
            }
          },
          _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(
            _ref
          ) {
            var parent = _ref.parent;
            return (
              parent &&
              parent._ts &&
              parent._initted &&
              !parent._lock &&
              (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent))
            );
          },
          // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
          _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
            var data = _ref2.data;
            return data === "isFromStart" || data === "isStart";
          },
          _renderZeroDurationTween = function _renderZeroDurationTween(
            tween,
            totalTime,
            suppressEvents,
            force
          ) {
            var prevRatio = tween.ratio,
              ratio =
                totalTime < 0 ||
                (!totalTime &&
                  ((!tween._start &&
                    _parentPlayheadIsBeforeStart(tween) &&
                    !(!tween._initted && _isFromOrFromStart(tween))) ||
                    ((tween._ts < 0 || tween._dp._ts < 0) &&
                      !_isFromOrFromStart(tween))))
                  ? 0
                  : 1,
              // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
              repeatDelay = tween._rDelay,
              tTime = 0,
              pt,
              iteration,
              prevIteration;

            if (repeatDelay && tween._repeat) {
              // in case there's a zero-duration tween that has a repeat with a repeatDelay
              tTime = _clamp(0, tween._tDur, totalTime);
              iteration = _animationCycle(tTime, repeatDelay);
              tween._yoyo && iteration & 1 && (ratio = 1 - ratio);

              if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
                // if iteration changed
                prevRatio = 1 - ratio;
                tween.vars.repeatRefresh &&
                  tween._initted &&
                  tween.invalidate();
              }
            }

            if (
              ratio !== prevRatio ||
              _reverting ||
              force ||
              tween._zTime === _tinyNum ||
              (!totalTime && tween._zTime)
            ) {
              if (
                !tween._initted &&
                _attemptInitTween(
                  tween,
                  totalTime,
                  force,
                  suppressEvents,
                  tTime
                )
              ) {
                // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
                return;
              }

              prevIteration = tween._zTime;
              tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

              suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

              tween.ratio = ratio;
              tween._from && (ratio = 1 - ratio);
              tween._time = 0;
              tween._tTime = tTime;
              pt = tween._pt;

              while (pt) {
                pt.r(ratio, pt.d);
                pt = pt._next;
              }

              totalTime < 0 &&
                _rewindStartAt(tween, totalTime, suppressEvents, true);
              tween._onUpdate &&
                !suppressEvents &&
                _callback(tween, "onUpdate");
              tTime &&
                tween._repeat &&
                !suppressEvents &&
                tween.parent &&
                _callback(tween, "onRepeat");

              if (
                (totalTime >= tween._tDur || totalTime < 0) &&
                tween.ratio === ratio
              ) {
                ratio && _removeFromParent(tween, 1);

                if (!suppressEvents && !_reverting) {
                  _callback(
                    tween,
                    ratio ? "onComplete" : "onReverseComplete",
                    true
                  );

                  tween._prom && tween._prom();
                }
              }
            } else if (!tween._zTime) {
              tween._zTime = totalTime;
            }
          },
          _findNextPauseTween = function _findNextPauseTween(
            animation,
            prevTime,
            time
          ) {
            var child;

            if (time > prevTime) {
              child = animation._first;

              while (child && child._start <= time) {
                if (child.data === "isPause" && child._start > prevTime) {
                  return child;
                }

                child = child._next;
              }
            } else {
              child = animation._last;

              while (child && child._start >= time) {
                if (child.data === "isPause" && child._start < prevTime) {
                  return child;
                }

                child = child._prev;
              }
            }
          },
          _setDuration = function _setDuration(
            animation,
            duration,
            skipUncache,
            leavePlayhead
          ) {
            var repeat = animation._repeat,
              dur = _roundPrecise(duration) || 0,
              totalProgress = animation._tTime / animation._tDur;
            totalProgress &&
              !leavePlayhead &&
              (animation._time *= dur / animation._dur);
            animation._dur = dur;
            animation._tDur = !repeat
              ? dur
              : repeat < 0
              ? 1e10
              : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
            totalProgress > 0 &&
              !leavePlayhead &&
              _alignPlayhead(
                animation,
                (animation._tTime = animation._tDur * totalProgress)
              );
            animation.parent && _setEnd(animation);
            skipUncache || _uncache(animation.parent, animation);
            return animation;
          },
          _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
            return animation instanceof Timeline
              ? _uncache(animation)
              : _setDuration(animation, animation._dur);
          },
          _zeroPosition = {
            _start: 0,
            endTime: _emptyFunc,
            totalDuration: _emptyFunc,
          },
          _parsePosition = function _parsePosition(
            animation,
            position,
            percentAnimation
          ) {
            var labels = animation.labels,
              recent = animation._recent || _zeroPosition,
              clippedDuration =
                animation.duration() >= _bigNum
                  ? recent.endTime(false)
                  : animation._dur,
              //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
              i,
              offset,
              isPercent;

            if (
              _isString(position) &&
              (isNaN(position) || position in labels)
            ) {
              //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
              offset = position.charAt(0);
              isPercent = position.substr(-1) === "%";
              i = position.indexOf("=");

              if (offset === "<" || offset === ">") {
                i >= 0 && (position = position.replace(/=/, ""));
                return (
                  (offset === "<"
                    ? recent._start
                    : recent.endTime(recent._repeat >= 0)) +
                  (parseFloat(position.substr(1)) || 0) *
                    (isPercent
                      ? (i < 0 ? recent : percentAnimation).totalDuration() /
                        100
                      : 1)
                );
              }

              if (i < 0) {
                position in labels || (labels[position] = clippedDuration);
                return labels[position];
              }

              offset = parseFloat(
                position.charAt(i - 1) + position.substr(i + 1)
              );

              if (isPercent && percentAnimation) {
                offset =
                  (offset / 100) *
                  (_isArray(percentAnimation)
                    ? percentAnimation[0]
                    : percentAnimation
                  ).totalDuration();
              }

              return i > 1
                ? _parsePosition(
                    animation,
                    position.substr(0, i - 1),
                    percentAnimation
                  ) + offset
                : clippedDuration + offset;
            }

            return position == null ? clippedDuration : +position;
          },
          _createTweenType = function _createTweenType(type, params, timeline) {
            var isLegacy = _isNumber(params[1]),
              varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
              vars = params[varsIndex],
              irVars,
              parent;

            isLegacy && (vars.duration = params[1]);
            vars.parent = timeline;

            if (type) {
              irVars = vars;
              parent = timeline;

              while (parent && !("immediateRender" in irVars)) {
                // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
                irVars = parent.vars.defaults || {};
                parent = _isNotFalse(parent.vars.inherit) && parent.parent;
              }

              vars.immediateRender = _isNotFalse(irVars.immediateRender);
              type < 2
                ? (vars.runBackwards = 1)
                : (vars.startAt = params[varsIndex - 1]); // "from" vars
            }

            return new Tween(params[0], vars, params[varsIndex + 1]);
          },
          _conditionalReturn = function _conditionalReturn(value, func) {
            return value || value === 0 ? func(value) : func;
          },
          _clamp = function _clamp(min, max, value) {
            return value < min ? min : value > max ? max : value;
          },
          getUnit = function getUnit(value, v) {
            return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
          },
          // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
          clamp = function clamp(min, max, value) {
            return _conditionalReturn(value, function (v) {
              return _clamp(min, max, v);
            });
          },
          _slice = [].slice,
          _isArrayLike = function _isArrayLike(value, nonEmpty) {
            return (
              value &&
              _isObject(value) &&
              "length" in value &&
              ((!nonEmpty && !value.length) ||
                (value.length - 1 in value && _isObject(value[0]))) &&
              !value.nodeType &&
              value !== _win
            );
          },
          _flatten = function _flatten(ar, leaveStrings, accumulator) {
            if (accumulator === void 0) {
              accumulator = [];
            }

            return (
              ar.forEach(function (value) {
                var _accumulator;

                return (_isString(value) && !leaveStrings) ||
                  _isArrayLike(value, 1)
                  ? (_accumulator = accumulator).push.apply(
                      _accumulator,
                      toArray(value)
                    )
                  : accumulator.push(value);
              }) || accumulator
            );
          },
          //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
          toArray = function toArray(value, scope, leaveStrings) {
            return _context && !scope && _context.selector
              ? _context.selector(value)
              : _isString(value) && !leaveStrings && (_coreInitted || !_wake())
              ? _slice.call((scope || _doc).querySelectorAll(value), 0)
              : _isArray(value)
              ? _flatten(value, leaveStrings)
              : _isArrayLike(value)
              ? _slice.call(value, 0)
              : value
              ? [value]
              : [];
          },
          selector = function selector(value) {
            value = toArray(value)[0] || _warn("Invalid scope") || {};
            return function (v) {
              var el = value.current || value.nativeElement || value;
              return toArray(
                v,
                el.querySelectorAll
                  ? el
                  : el === value
                  ? _warn("Invalid scope") || _doc.createElement("div")
                  : value
              );
            };
          },
          shuffle = function shuffle(a) {
            return a.sort(function () {
              return 0.5 - Math.random();
            });
          },
          // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
          //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
          distribute = function distribute(v) {
            if (_isFunction(v)) {
              return v;
            }

            var vars = _isObject(v)
                ? v
                : {
                    each: v,
                  },
              //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
              ease = _parseEase(vars.ease),
              from = vars.from || 0,
              base = parseFloat(vars.base) || 0,
              cache = {},
              isDecimal = from > 0 && from < 1,
              ratios = isNaN(from) || isDecimal,
              axis = vars.axis,
              ratioX = from,
              ratioY = from;

            if (_isString(from)) {
              ratioX = ratioY =
                {
                  center: 0.5,
                  edges: 0.5,
                  end: 1,
                }[from] || 0;
            } else if (!isDecimal && ratios) {
              ratioX = from[0];
              ratioY = from[1];
            }

            return function (i, target, a) {
              var l = (a || vars).length,
                distances = cache[l],
                originX,
                originY,
                x,
                y,
                d,
                j,
                max,
                min,
                wrapAt;

              if (!distances) {
                wrapAt =
                  vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];

                if (!wrapAt) {
                  max = -_bigNum;

                  while (
                    max < (max = a[wrapAt++].getBoundingClientRect().left) &&
                    wrapAt < l
                  ) {}

                  wrapAt < l && wrapAt--;
                }

                distances = cache[l] = [];
                originX = ratios
                  ? Math.min(wrapAt, l) * ratioX - 0.5
                  : from % wrapAt;
                originY =
                  wrapAt === _bigNum
                    ? 0
                    : ratios
                    ? (l * ratioY) / wrapAt - 0.5
                    : (from / wrapAt) | 0;
                max = 0;
                min = _bigNum;

                for (j = 0; j < l; j++) {
                  x = (j % wrapAt) - originX;
                  y = originY - ((j / wrapAt) | 0);
                  distances[j] = d = !axis
                    ? _sqrt(x * x + y * y)
                    : Math.abs(axis === "y" ? y : x);
                  d > max && (max = d);
                  d < min && (min = d);
                }

                from === "random" && shuffle(distances);
                distances.max = max - min;
                distances.min = min;
                distances.v = l =
                  (parseFloat(vars.amount) ||
                    parseFloat(vars.each) *
                      (wrapAt > l
                        ? l - 1
                        : !axis
                        ? Math.max(wrapAt, l / wrapAt)
                        : axis === "y"
                        ? l / wrapAt
                        : wrapAt) ||
                    0) * (from === "edges" ? -1 : 1);
                distances.b = l < 0 ? base - l : base;
                distances.u = getUnit(vars.amount || vars.each) || 0; //unit

                ease = ease && l < 0 ? _invertEase(ease) : ease;
              }

              l = (distances[i] - distances.min) / distances.max || 0;
              return (
                _roundPrecise(
                  distances.b + (ease ? ease(l) : l) * distances.v
                ) + distances.u
              ); //round in order to work around floating point errors
            };
          },
          _roundModifier = function _roundModifier(v) {
            //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
            var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

            return function (raw) {
              var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);

              return (n - (n % 1)) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
            };
          },
          snap = function snap(snapTo, value) {
            var isArray = _isArray(snapTo),
              radius,
              is2D;

            if (!isArray && _isObject(snapTo)) {
              radius = isArray = snapTo.radius || _bigNum;

              if (snapTo.values) {
                snapTo = toArray(snapTo.values);

                if ((is2D = !_isNumber(snapTo[0]))) {
                  radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
                }
              } else {
                snapTo = _roundModifier(snapTo.increment);
              }
            }

            return _conditionalReturn(
              value,
              !isArray
                ? _roundModifier(snapTo)
                : _isFunction(snapTo)
                ? function (raw) {
                    is2D = snapTo(raw);
                    return Math.abs(is2D - raw) <= radius ? is2D : raw;
                  }
                : function (raw) {
                    var x = parseFloat(is2D ? raw.x : raw),
                      y = parseFloat(is2D ? raw.y : 0),
                      min = _bigNum,
                      closest = 0,
                      i = snapTo.length,
                      dx,
                      dy;

                    while (i--) {
                      if (is2D) {
                        dx = snapTo[i].x - x;
                        dy = snapTo[i].y - y;
                        dx = dx * dx + dy * dy;
                      } else {
                        dx = Math.abs(snapTo[i] - x);
                      }

                      if (dx < min) {
                        min = dx;
                        closest = i;
                      }
                    }

                    closest = !radius || min <= radius ? snapTo[closest] : raw;
                    return is2D || closest === raw || _isNumber(raw)
                      ? closest
                      : closest + getUnit(raw);
                  }
            );
          },
          random = function random(
            min,
            max,
            roundingIncrement,
            returnFunction
          ) {
            return _conditionalReturn(
              _isArray(min)
                ? !max
                : roundingIncrement === true
                ? !!(roundingIncrement = 0)
                : !returnFunction,
              function () {
                return _isArray(min)
                  ? min[~~(Math.random() * min.length)]
                  : (roundingIncrement = roundingIncrement || 1e-5) &&
                      (returnFunction =
                        roundingIncrement < 1
                          ? Math.pow(10, (roundingIncrement + "").length - 2)
                          : 1) &&
                      Math.floor(
                        Math.round(
                          (min -
                            roundingIncrement / 2 +
                            Math.random() *
                              (max - min + roundingIncrement * 0.99)) /
                            roundingIncrement
                        ) *
                          roundingIncrement *
                          returnFunction
                      ) / returnFunction;
              }
            );
          },
          pipe = function pipe() {
            for (
              var _len = arguments.length,
                functions = new Array(_len),
                _key = 0;
              _key < _len;
              _key++
            ) {
              functions[_key] = arguments[_key];
            }

            return function (value) {
              return functions.reduce(function (v, f) {
                return f(v);
              }, value);
            };
          },
          unitize = function unitize(func, unit) {
            return function (value) {
              return func(parseFloat(value)) + (unit || getUnit(value));
            };
          },
          normalize = function normalize(min, max, value) {
            return mapRange(min, max, 0, 1, value);
          },
          _wrapArray = function _wrapArray(a, wrapper, value) {
            return _conditionalReturn(value, function (index) {
              return a[~~wrapper(index)];
            });
          },
          wrap = function wrap(min, max, value) {
            // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
            var range = max - min;
            return _isArray(min)
              ? _wrapArray(min, wrap(0, min.length), max)
              : _conditionalReturn(value, function (value) {
                  return ((range + ((value - min) % range)) % range) + min;
                });
          },
          wrapYoyo = function wrapYoyo(min, max, value) {
            var range = max - min,
              total = range * 2;
            return _isArray(min)
              ? _wrapArray(min, wrapYoyo(0, min.length - 1), max)
              : _conditionalReturn(value, function (value) {
                  value = (total + ((value - min) % total)) % total || 0;
                  return min + (value > range ? total - value : value);
                });
          },
          _replaceRandom = function _replaceRandom(value) {
            //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
            var prev = 0,
              s = "",
              i,
              nums,
              end,
              isArray;

            while (~(i = value.indexOf("random(", prev))) {
              end = value.indexOf(")", i);
              isArray = value.charAt(i + 7) === "[";
              nums = value
                .substr(i + 7, end - i - 7)
                .match(isArray ? _delimitedValueExp : _strictNumExp);
              s +=
                value.substr(prev, i - prev) +
                random(
                  isArray ? nums : +nums[0],
                  isArray ? 0 : +nums[1],
                  +nums[2] || 1e-5
                );
              prev = end + 1;
            }

            return s + value.substr(prev, value.length - prev);
          },
          mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
            var inRange = inMax - inMin,
              outRange = outMax - outMin;
            return _conditionalReturn(value, function (value) {
              return outMin + (((value - inMin) / inRange) * outRange || 0);
            });
          },
          interpolate = function interpolate(start, end, progress, mutate) {
            var func = isNaN(start + end)
              ? 0
              : function (p) {
                  return (1 - p) * start + p * end;
                };

            if (!func) {
              var isString = _isString(start),
                master = {},
                p,
                i,
                interpolators,
                l,
                il;

              progress === true && (mutate = 1) && (progress = null);

              if (isString) {
                start = {
                  p: start,
                };
                end = {
                  p: end,
                };
              } else if (_isArray(start) && !_isArray(end)) {
                interpolators = [];
                l = start.length;
                il = l - 2;

                for (i = 1; i < l; i++) {
                  interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
                }

                l--;

                func = function func(p) {
                  p *= l;
                  var i = Math.min(il, ~~p);
                  return interpolators[i](p - i);
                };

                progress = end;
              } else if (!mutate) {
                start = _merge(_isArray(start) ? [] : {}, start);
              }

              if (!interpolators) {
                for (p in end) {
                  _addPropTween.call(master, start, p, "get", end[p]);
                }

                func = function func(p) {
                  return (
                    _renderPropTweens(p, master) || (isString ? start.p : start)
                  );
                };
              }
            }

            return _conditionalReturn(progress, func);
          },
          _getLabelInDirection = function _getLabelInDirection(
            timeline,
            fromTime,
            backward
          ) {
            //used for nextLabel() and previousLabel()
            var labels = timeline.labels,
              min = _bigNum,
              p,
              distance,
              label;

            for (p in labels) {
              distance = labels[p] - fromTime;

              if (
                distance < 0 === !!backward &&
                distance &&
                min > (distance = Math.abs(distance))
              ) {
                label = p;
                min = distance;
              }
            }

            return label;
          },
          _callback = function _callback(animation, type, executeLazyFirst) {
            var v = animation.vars,
              callback = v[type],
              prevContext = _context,
              context = animation._ctx,
              params,
              scope,
              result;

            if (!callback) {
              return;
            }

            params = v[type + "Params"];
            scope = v.callbackScope || animation;
            executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

            context && (_context = context);
            result = params
              ? callback.apply(scope, params)
              : callback.call(scope);
            _context = prevContext;
            return result;
          },
          _interrupt = function _interrupt(animation) {
            _removeFromParent(animation);

            animation.scrollTrigger &&
              animation.scrollTrigger.kill(!!_reverting);
            animation.progress() < 1 && _callback(animation, "onInterrupt");
            return animation;
          },
          _quickTween,
          _registerPluginQueue = [],
          _createPlugin = function _createPlugin(config) {
            if (!config) return;
            config = (!config.name && config["default"]) || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

            if (_windowExists() || config.headless) {
              // edge case: some build tools may pass in a null/undefined value
              var name = config.name,
                isFunc = _isFunction(config),
                Plugin =
                  name && !isFunc && config.init
                    ? function () {
                        this._props = [];
                      }
                    : config,
                //in case someone passes in an object that's not a plugin, like CustomEase
                instanceDefaults = {
                  init: _emptyFunc,
                  render: _renderPropTweens,
                  add: _addPropTween,
                  kill: _killPropTweensOf,
                  modifier: _addPluginModifier,
                  rawVars: 0,
                },
                statics = {
                  targetTest: 0,
                  get: 0,
                  getSetter: _getSetter,
                  aliases: {},
                  register: 0,
                };

              _wake();

              if (config !== Plugin) {
                if (_plugins[name]) {
                  return;
                }

                _setDefaults(
                  Plugin,
                  _setDefaults(
                    _copyExcluding(config, instanceDefaults),
                    statics
                  )
                ); //static methods

                _merge(
                  Plugin.prototype,
                  _merge(instanceDefaults, _copyExcluding(config, statics))
                ); //instance methods

                _plugins[(Plugin.prop = name)] = Plugin;

                if (config.targetTest) {
                  _harnessPlugins.push(Plugin);

                  _reservedProps[name] = 1;
                }

                name =
                  (name === "css"
                    ? "CSS"
                    : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
              }

              _addGlobal(name, Plugin);

              config.register && config.register(gsap, Plugin, PropTween);
            } else {
              _registerPluginQueue.push(config);
            }
          },
          /*
           * --------------------------------------------------------------------------------------
           * COLORS
           * --------------------------------------------------------------------------------------
           */
          _255 = 255,
          _colorLookup = {
            aqua: [0, _255, _255],
            lime: [0, _255, 0],
            silver: [192, 192, 192],
            black: [0, 0, 0],
            maroon: [128, 0, 0],
            teal: [0, 128, 128],
            blue: [0, 0, _255],
            navy: [0, 0, 128],
            white: [_255, _255, _255],
            olive: [128, 128, 0],
            yellow: [_255, _255, 0],
            orange: [_255, 165, 0],
            gray: [128, 128, 128],
            purple: [128, 0, 128],
            green: [0, 128, 0],
            red: [_255, 0, 0],
            pink: [_255, 192, 203],
            cyan: [0, _255, _255],
            transparent: [_255, _255, _255, 0],
          },
          // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
          // let ctx = _doc.createElement("canvas").getContext("2d");
          // _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
          _hue = function _hue(h, m1, m2) {
            h += h < 0 ? 1 : h > 1 ? -1 : 0;
            return (
              ((h * 6 < 1
                ? m1 + (m2 - m1) * h * 6
                : h < 0.5
                ? m2
                : h * 3 < 2
                ? m1 + (m2 - m1) * (2 / 3 - h) * 6
                : m1) *
                _255 +
                0.5) |
              0
            );
          },
          splitColor = function splitColor(v, toHSL, forceAlpha) {
            var a = !v
                ? _colorLookup.black
                : _isNumber(v)
                ? [v >> 16, (v >> 8) & _255, v & _255]
                : 0,
              r,
              g,
              b,
              h,
              s,
              l,
              max,
              min,
              d,
              wasHSL;

            if (!a) {
              if (v.substr(-1) === ",") {
                //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
                v = v.substr(0, v.length - 1);
              }

              if (_colorLookup[v]) {
                a = _colorLookup[v];
              } else if (v.charAt(0) === "#") {
                if (v.length < 6) {
                  //for shorthand like #9F0 or #9F0F (could have alpha)
                  r = v.charAt(1);
                  g = v.charAt(2);
                  b = v.charAt(3);
                  v =
                    "#" +
                    r +
                    r +
                    g +
                    g +
                    b +
                    b +
                    (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
                }

                if (v.length === 9) {
                  // hex with alpha, like #fd5e53ff
                  a = parseInt(v.substr(1, 6), 16);
                  return [
                    a >> 16,
                    (a >> 8) & _255,
                    a & _255,
                    parseInt(v.substr(7), 16) / 255,
                  ];
                }

                v = parseInt(v.substr(1), 16);
                a = [v >> 16, (v >> 8) & _255, v & _255];
              } else if (v.substr(0, 3) === "hsl") {
                a = wasHSL = v.match(_strictNumExp);

                if (!toHSL) {
                  h = (+a[0] % 360) / 360;
                  s = +a[1] / 100;
                  l = +a[2] / 100;
                  g = l <= 0.5 ? l * (s + 1) : l + s - l * s;
                  r = l * 2 - g;
                  a.length > 3 && (a[3] *= 1); //cast as number

                  a[0] = _hue(h + 1 / 3, r, g);
                  a[1] = _hue(h, r, g);
                  a[2] = _hue(h - 1 / 3, r, g);
                } else if (~v.indexOf("=")) {
                  //if relative values are found, just return the raw strings with the relative prefixes in place.
                  a = v.match(_numExp);
                  forceAlpha && a.length < 4 && (a[3] = 1);
                  return a;
                }
              } else {
                a = v.match(_strictNumExp) || _colorLookup.transparent;
              }

              a = a.map(Number);
            }

            if (toHSL && !wasHSL) {
              r = a[0] / _255;
              g = a[1] / _255;
              b = a[2] / _255;
              max = Math.max(r, g, b);
              min = Math.min(r, g, b);
              l = (max + min) / 2;

              if (max === min) {
                h = s = 0;
              } else {
                d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                h =
                  max === r
                    ? (g - b) / d + (g < b ? 6 : 0)
                    : max === g
                    ? (b - r) / d + 2
                    : (r - g) / d + 4;
                h *= 60;
              }

              a[0] = ~~(h + 0.5);
              a[1] = ~~(s * 100 + 0.5);
              a[2] = ~~(l * 100 + 0.5);
            }

            forceAlpha && a.length < 4 && (a[3] = 1);
            return a;
          },
          _colorOrderData = function _colorOrderData(v) {
            // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
            var values = [],
              c = [],
              i = -1;
            v.split(_colorExp).forEach(function (v) {
              var a = v.match(_numWithUnitExp) || [];
              values.push.apply(values, a);
              c.push((i += a.length + 1));
            });
            values.c = c;
            return values;
          },
          _formatColors = function _formatColors(s, toHSL, orderMatchData) {
            var result = "",
              colors = (s + result).match(_colorExp),
              type = toHSL ? "hsla(" : "rgba(",
              i = 0,
              c,
              shell,
              d,
              l;

            if (!colors) {
              return s;
            }

            colors = colors.map(function (color) {
              return (
                (color = splitColor(color, toHSL, 1)) &&
                type +
                  (toHSL
                    ? color[0] +
                      "," +
                      color[1] +
                      "%," +
                      color[2] +
                      "%," +
                      color[3]
                    : color.join(",")) +
                  ")"
              );
            });

            if (orderMatchData) {
              d = _colorOrderData(s);
              c = orderMatchData.c;

              if (c.join(result) !== d.c.join(result)) {
                shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
                l = shell.length - 1;

                for (; i < l; i++) {
                  result +=
                    shell[i] +
                    (~c.indexOf(i)
                      ? colors.shift() || type + "0,0,0,0)"
                      : (d.length
                          ? d
                          : colors.length
                          ? colors
                          : orderMatchData
                        ).shift());
                }
              }
            }

            if (!shell) {
              shell = s.split(_colorExp);
              l = shell.length - 1;

              for (; i < l; i++) {
                result += shell[i] + colors[i];
              }
            }

            return result + shell[l];
          },
          _colorExp = (function () {
            var s =
                "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
              //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
              p;

            for (p in _colorLookup) {
              s += "|" + p + "\\b";
            }

            return new RegExp(s + ")", "gi");
          })(),
          _hslExp = /hsl[a]?\(/,
          _colorStringFilter = function _colorStringFilter(a) {
            var combined = a.join(" "),
              toHSL;
            _colorExp.lastIndex = 0;

            if (_colorExp.test(combined)) {
              toHSL = _hslExp.test(combined);
              a[1] = _formatColors(a[1], toHSL);
              a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

              return true;
            }
          },
          /*
           * --------------------------------------------------------------------------------------
           * TICKER
           * --------------------------------------------------------------------------------------
           */
          _tickerActive,
          _ticker = (function () {
            var _getTime = Date.now,
              _lagThreshold = 500,
              _adjustedLag = 33,
              _startTime = _getTime(),
              _lastUpdate = _startTime,
              _gap = 1000 / 240,
              _nextTime = _gap,
              _listeners = [],
              _id,
              _req,
              _raf,
              _self,
              _delta,
              _i,
              _tick = function _tick(v) {
                var elapsed = _getTime() - _lastUpdate,
                  manual = v === true,
                  overlap,
                  dispatch,
                  time,
                  frame;

                (elapsed > _lagThreshold || elapsed < 0) &&
                  (_startTime += elapsed - _adjustedLag);
                _lastUpdate += elapsed;
                time = _lastUpdate - _startTime;
                overlap = time - _nextTime;

                if (overlap > 0 || manual) {
                  frame = ++_self.frame;
                  _delta = time - _self.time * 1000;
                  _self.time = time = time / 1000;
                  _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
                  dispatch = 1;
                }

                manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

                if (dispatch) {
                  for (_i = 0; _i < _listeners.length; _i++) {
                    // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
                    _listeners[_i](time, _delta, frame, v);
                  }
                }
              };

            _self = {
              time: 0,
              frame: 0,
              tick: function tick() {
                _tick(true);
              },
              deltaRatio: function deltaRatio(fps) {
                return _delta / (1000 / (fps || 60));
              },
              wake: function wake() {
                if (_coreReady) {
                  if (!_coreInitted && _windowExists()) {
                    _win = _coreInitted = window;
                    _doc = _win.document || {};
                    _globals.gsap = gsap;
                    (_win.gsapVersions || (_win.gsapVersions = [])).push(
                      gsap.version
                    );

                    _install(
                      _installScope ||
                        _win.GreenSockGlobals ||
                        (!_win.gsap && _win) ||
                        {}
                    );

                    _registerPluginQueue.forEach(_createPlugin);
                  }

                  _raf =
                    typeof requestAnimationFrame !== "undefined" &&
                    requestAnimationFrame;
                  _id && _self.sleep();

                  _req =
                    _raf ||
                    function (f) {
                      return setTimeout(
                        f,
                        (_nextTime - _self.time * 1000 + 1) | 0
                      );
                    };

                  _tickerActive = 1;

                  _tick(2);
                }
              },
              sleep: function sleep() {
                (_raf ? cancelAnimationFrame : clearTimeout)(_id);
                _tickerActive = 0;
                _req = _emptyFunc;
              },
              lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
                _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited

                _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
              },
              fps: function fps(_fps) {
                _gap = 1000 / (_fps || 240);
                _nextTime = _self.time * 1000 + _gap;
              },
              add: function add(callback, once, prioritize) {
                var func = once
                  ? function (t, d, f, v) {
                      callback(t, d, f, v);

                      _self.remove(func);
                    }
                  : callback;

                _self.remove(callback);

                _listeners[prioritize ? "unshift" : "push"](func);

                _wake();

                return func;
              },
              remove: function remove(callback, i) {
                ~(i = _listeners.indexOf(callback)) &&
                  _listeners.splice(i, 1) &&
                  _i >= i &&
                  _i--;
              },
              _listeners: _listeners,
            };
            return _self;
          })(),
          _wake = function _wake() {
            return !_tickerActive && _ticker.wake();
          },
          //also ensures the core classes are initialized.

          /*
           * -------------------------------------------------
           * EASING
           * -------------------------------------------------
           */
          _easeMap = {},
          _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
          _quotesExp = /["']/g,
          _parseObjectInString = function _parseObjectInString(value) {
            //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
            var obj = {},
              split = value.substr(1, value.length - 3).split(":"),
              key = split[0],
              i = 1,
              l = split.length,
              index,
              val,
              parsedVal;

            for (; i < l; i++) {
              val = split[i];
              index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
              parsedVal = val.substr(0, index);
              obj[key] = isNaN(parsedVal)
                ? parsedVal.replace(_quotesExp, "").trim()
                : +parsedVal;
              key = val.substr(index + 1).trim();
            }

            return obj;
          },
          _valueInParentheses = function _valueInParentheses(value) {
            var open = value.indexOf("(") + 1,
              close = value.indexOf(")"),
              nested = value.indexOf("(", open);
            return value.substring(
              open,
              ~nested && nested < close ? value.indexOf(")", close + 1) : close
            );
          },
          _configEaseFromString = function _configEaseFromString(name) {
            //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
            var split = (name + "").split("("),
              ease = _easeMap[split[0]];
            return ease && split.length > 1 && ease.config
              ? ease.config.apply(
                  null,
                  ~name.indexOf("{")
                    ? [_parseObjectInString(split[1])]
                    : _valueInParentheses(name)
                        .split(",")
                        .map(_numericIfPossible)
                )
              : _easeMap._CE && _customEaseExp.test(name)
              ? _easeMap._CE("", name)
              : ease;
          },
          _invertEase = function _invertEase(ease) {
            return function (p) {
              return 1 - ease(1 - p);
            };
          },
          // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
          _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
            var child = timeline._first,
              ease;

            while (child) {
              if (child instanceof Timeline) {
                _propagateYoyoEase(child, isYoyo);
              } else if (
                child.vars.yoyoEase &&
                (!child._yoyo || !child._repeat) &&
                child._yoyo !== isYoyo
              ) {
                if (child.timeline) {
                  _propagateYoyoEase(child.timeline, isYoyo);
                } else {
                  ease = child._ease;
                  child._ease = child._yEase;
                  child._yEase = ease;
                  child._yoyo = isYoyo;
                }
              }

              child = child._next;
            }
          },
          _parseEase = function _parseEase(ease, defaultEase) {
            return !ease
              ? defaultEase
              : (_isFunction(ease)
                  ? ease
                  : _easeMap[ease] || _configEaseFromString(ease)) ||
                  defaultEase;
          },
          _insertEase = function _insertEase(
            names,
            easeIn,
            easeOut,
            easeInOut
          ) {
            if (easeOut === void 0) {
              easeOut = function easeOut(p) {
                return 1 - easeIn(1 - p);
              };
            }

            if (easeInOut === void 0) {
              easeInOut = function easeInOut(p) {
                return p < 0.5
                  ? easeIn(p * 2) / 2
                  : 1 - easeIn((1 - p) * 2) / 2;
              };
            }

            var ease = {
                easeIn: easeIn,
                easeOut: easeOut,
                easeInOut: easeInOut,
              },
              lowercaseName;

            _forEachName(names, function (name) {
              _easeMap[name] = _globals[name] = ease;
              _easeMap[(lowercaseName = name.toLowerCase())] = easeOut;

              for (var p in ease) {
                _easeMap[
                  lowercaseName +
                    (p === "easeIn"
                      ? ".in"
                      : p === "easeOut"
                      ? ".out"
                      : ".inOut")
                ] = _easeMap[name + "." + p] = ease[p];
              }
            });

            return ease;
          },
          _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
            return function (p) {
              return p < 0.5
                ? (1 - easeOut(1 - p * 2)) / 2
                : 0.5 + easeOut((p - 0.5) * 2) / 2;
            };
          },
          _configElastic = function _configElastic(type, amplitude, period) {
            var p1 = amplitude >= 1 ? amplitude : 1,
              //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
              p2 =
                (period || (type ? 0.3 : 0.45)) /
                (amplitude < 1 ? amplitude : 1),
              p3 = (p2 / _2PI) * (Math.asin(1 / p1) || 0),
              easeOut = function easeOut(p) {
                return p === 1
                  ? 1
                  : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
              },
              ease =
                type === "out"
                  ? easeOut
                  : type === "in"
                  ? function (p) {
                      return 1 - easeOut(1 - p);
                    }
                  : _easeInOutFromOut(easeOut);

            p2 = _2PI / p2; //precalculate to optimize

            ease.config = function (amplitude, period) {
              return _configElastic(type, amplitude, period);
            };

            return ease;
          },
          _configBack = function _configBack(type, overshoot) {
            if (overshoot === void 0) {
              overshoot = 1.70158;
            }

            var easeOut = function easeOut(p) {
                return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
              },
              ease =
                type === "out"
                  ? easeOut
                  : type === "in"
                  ? function (p) {
                      return 1 - easeOut(1 - p);
                    }
                  : _easeInOutFromOut(easeOut);

            ease.config = function (overshoot) {
              return _configBack(type, overshoot);
            };

            return ease;
          }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
        // _weightedEase = ratio => {
        // 	let y = 0.5 + ratio / 2;
        // 	return p => (2 * (1 - p) * p * y + p * p);
        // },
        // a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
        // _weightedEaseStrong = ratio => {
        // 	ratio = .5 + ratio / 2;
        // 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
        // 		b = ratio - o,
        // 		c = ratio + o;
        // 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
        // };

        _forEachName(
          "Linear,Quad,Cubic,Quart,Quint,Strong",
          function (name, i) {
            var power = i < 5 ? i + 1 : i;

            _insertEase(
              name + ",Power" + (power - 1),
              i
                ? function (p) {
                    return Math.pow(p, power);
                  }
                : function (p) {
                    return p;
                  },
              function (p) {
                return 1 - Math.pow(1 - p, power);
              },
              function (p) {
                return p < 0.5
                  ? Math.pow(p * 2, power) / 2
                  : 1 - Math.pow((1 - p) * 2, power) / 2;
              }
            );
          }
        );

        _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

        _insertEase(
          "Elastic",
          _configElastic("in"),
          _configElastic("out"),
          _configElastic()
        );

        (function (n, c) {
          var n1 = 1 / c,
            n2 = 2 * n1,
            n3 = 2.5 * n1,
            easeOut = function easeOut(p) {
              return p < n1
                ? n * p * p
                : p < n2
                ? n * Math.pow(p - 1.5 / c, 2) + 0.75
                : p < n3
                ? n * (p -= 2.25 / c) * p + 0.9375
                : n * Math.pow(p - 2.625 / c, 2) + 0.984375;
            };

          _insertEase(
            "Bounce",
            function (p) {
              return 1 - easeOut(1 - p);
            },
            easeOut
          );
        })(7.5625, 2.75);

        _insertEase("Expo", function (p) {
          return p ? Math.pow(2, 10 * (p - 1)) : 0;
        });

        _insertEase("Circ", function (p) {
          return -(_sqrt(1 - p * p) - 1);
        });

        _insertEase("Sine", function (p) {
          return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
        });

        _insertEase(
          "Back",
          _configBack("in"),
          _configBack("out"),
          _configBack()
        );

        _easeMap.SteppedEase =
          _easeMap.steps =
          _globals.SteppedEase =
            {
              config: function config(steps, immediateStart) {
                if (steps === void 0) {
                  steps = 1;
                }

                var p1 = 1 / steps,
                  p2 = steps + (immediateStart ? 0 : 1),
                  p3 = immediateStart ? 1 : 0,
                  max = 1 - _tinyNum;
                return function (p) {
                  return (((p2 * _clamp(0, max, p)) | 0) + p3) * p1;
                };
              },
            };
        _defaults.ease = _easeMap["quad.out"];

        _forEachName(
          "onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",
          function (name) {
            return (_callbackNames += name + "," + name + "Params,");
          }
        );
        /*
         * --------------------------------------------------------------------------------------
         * CACHE
         * --------------------------------------------------------------------------------------
         */

        var GSCache = function GSCache(target, harness) {
          this.id = _gsID++;
          target._gsap = this;
          this.target = target;
          this.harness = harness;
          this.get = harness ? harness.get : _getProperty;
          this.set = harness ? harness.getSetter : _getSetter;
        };
        /*
         * --------------------------------------------------------------------------------------
         * ANIMATION
         * --------------------------------------------------------------------------------------
         */

        var Animation = /*#__PURE__*/ (function () {
          function Animation(vars) {
            this.vars = vars;
            this._delay = +vars.delay || 0;

            if (
              (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0)
            ) {
              // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
              this._rDelay = vars.repeatDelay || 0;
              this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
            }

            this._ts = 1;

            _setDuration(this, +vars.duration, 1, 1);

            this.data = vars.data;

            if (_context) {
              this._ctx = _context;

              _context.data.push(this);
            }

            _tickerActive || _ticker.wake();
          }

          var _proto = Animation.prototype;

          _proto.delay = function delay(value) {
            if (value || value === 0) {
              this.parent &&
                this.parent.smoothChildTiming &&
                this.startTime(this._start + value - this._delay);
              this._delay = value;
              return this;
            }

            return this._delay;
          };

          _proto.duration = function duration(value) {
            return arguments.length
              ? this.totalDuration(
                  this._repeat > 0
                    ? value + (value + this._rDelay) * this._repeat
                    : value
                )
              : this.totalDuration() && this._dur;
          };

          _proto.totalDuration = function totalDuration(value) {
            if (!arguments.length) {
              return this._tDur;
            }

            this._dirty = 0;
            return _setDuration(
              this,
              this._repeat < 0
                ? value
                : (value - this._repeat * this._rDelay) / (this._repeat + 1)
            );
          };

          _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
            _wake();

            if (!arguments.length) {
              return this._tTime;
            }

            var parent = this._dp;

            if (parent && parent.smoothChildTiming && this._ts) {
              _alignPlayhead(this, _totalTime);

              !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
              //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

              while (parent && parent.parent) {
                if (
                  parent.parent._time !==
                  parent._start +
                    (parent._ts >= 0
                      ? parent._tTime / parent._ts
                      : (parent.totalDuration() - parent._tTime) / -parent._ts)
                ) {
                  parent.totalTime(parent._tTime, true);
                }

                parent = parent.parent;
              }

              if (
                !this.parent &&
                this._dp.autoRemoveChildren &&
                ((this._ts > 0 && _totalTime < this._tDur) ||
                  (this._ts < 0 && _totalTime > 0) ||
                  (!this._tDur && !_totalTime))
              ) {
                //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
                _addToTimeline(this._dp, this, this._start - this._delay);
              }
            }

            if (
              this._tTime !== _totalTime ||
              (!this._dur && !suppressEvents) ||
              (this._initted && Math.abs(this._zTime) === _tinyNum) ||
              (!_totalTime && !this._initted && (this.add || this._ptLookup))
            ) {
              // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
              this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
              //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
              //   this._lock = 1;

              _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
              //}
            }

            return this;
          };

          _proto.time = function time(value, suppressEvents) {
            return arguments.length
              ? this.totalTime(
                  Math.min(
                    this.totalDuration(),
                    value + _elapsedCycleDuration(this)
                  ) %
                    (this._dur + this._rDelay) || (value ? this._dur : 0),
                  suppressEvents
                )
              : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
          };

          _proto.totalProgress = function totalProgress(value, suppressEvents) {
            return arguments.length
              ? this.totalTime(this.totalDuration() * value, suppressEvents)
              : this.totalDuration()
              ? Math.min(1, this._tTime / this._tDur)
              : this.rawTime() > 0
              ? 1
              : 0;
          };

          _proto.progress = function progress(value, suppressEvents) {
            return arguments.length
              ? this.totalTime(
                  this.duration() *
                    (this._yoyo && !(this.iteration() & 1)
                      ? 1 - value
                      : value) +
                    _elapsedCycleDuration(this),
                  suppressEvents
                )
              : this.duration()
              ? Math.min(1, this._time / this._dur)
              : this.rawTime() > 0
              ? 1
              : 0;
          };

          _proto.iteration = function iteration(value, suppressEvents) {
            var cycleDuration = this.duration() + this._rDelay;

            return arguments.length
              ? this.totalTime(
                  this._time + (value - 1) * cycleDuration,
                  suppressEvents
                )
              : this._repeat
              ? _animationCycle(this._tTime, cycleDuration) + 1
              : 1;
          }; // potential future addition:
          // isPlayingBackwards() {
          // 	let animation = this,
          // 		orientation = 1; // 1 = forward, -1 = backward
          // 	while (animation) {
          // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
          // 		animation = animation.parent;
          // 	}
          // 	return orientation < 0;
          // }

          _proto.timeScale = function timeScale(value, suppressEvents) {
            if (!arguments.length) {
              return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
            }

            if (this._rts === value) {
              return this;
            }

            var tTime =
              this.parent && this._ts
                ? _parentToChildTotalTime(this.parent._time, this)
                : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
            // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
            //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
            // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

            this._rts = +value || 0;
            this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

            this.totalTime(
              _clamp(-Math.abs(this._delay), this._tDur, tTime),
              suppressEvents !== false
            );

            _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.

            return _recacheAncestors(this);
          };

          _proto.paused = function paused(value) {
            if (!arguments.length) {
              return this._ps;
            }

            if (this._ps !== value) {
              this._ps = value;

              if (value) {
                this._pTime =
                  this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

                this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
              } else {
                _wake();

                this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

                this.totalTime(
                  this.parent && !this.parent.smoothChildTiming
                    ? this.rawTime()
                    : this._tTime || this._pTime,
                  this.progress() === 1 &&
                    Math.abs(this._zTime) !== _tinyNum &&
                    (this._tTime -= _tinyNum)
                ); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
              }
            }

            return this;
          };

          _proto.startTime = function startTime(value) {
            if (arguments.length) {
              this._start = value;
              var parent = this.parent || this._dp;
              parent &&
                (parent._sort || !this.parent) &&
                _addToTimeline(parent, this, value - this._delay);
              return this;
            }

            return this._start;
          };

          _proto.endTime = function endTime(includeRepeats) {
            return (
              this._start +
              (_isNotFalse(includeRepeats)
                ? this.totalDuration()
                : this.duration()) /
                Math.abs(this._ts || 1)
            );
          };

          _proto.rawTime = function rawTime(wrapRepeats) {
            var parent = this.parent || this._dp; // _dp = detached parent

            return !parent
              ? this._tTime
              : wrapRepeats &&
                (!this._ts ||
                  (this._repeat && this._time && this.totalProgress() < 1))
              ? this._tTime % (this._dur + this._rDelay)
              : !this._ts
              ? this._tTime
              : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
          };

          _proto.revert = function revert(config) {
            if (config === void 0) {
              config = _revertConfig;
            }

            var prevIsReverting = _reverting;
            _reverting = config;

            if (this._initted || this._startAt) {
              this.timeline && this.timeline.revert(config);
              this.totalTime(-0.01, config.suppressEvents);
            }

            this.data !== "nested" && config.kill !== false && this.kill();
            _reverting = prevIsReverting;
            return this;
          };

          _proto.globalTime = function globalTime(rawTime) {
            var animation = this,
              time = arguments.length ? rawTime : animation.rawTime();

            while (animation) {
              time = animation._start + time / (Math.abs(animation._ts) || 1);
              animation = animation._dp;
            }

            return !this.parent && this._sat
              ? this._sat.globalTime(rawTime)
              : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
          };

          _proto.repeat = function repeat(value) {
            if (arguments.length) {
              this._repeat = value === Infinity ? -2 : value;
              return _onUpdateTotalDuration(this);
            }

            return this._repeat === -2 ? Infinity : this._repeat;
          };

          _proto.repeatDelay = function repeatDelay(value) {
            if (arguments.length) {
              var time = this._time;
              this._rDelay = value;

              _onUpdateTotalDuration(this);

              return time ? this.time(time) : this;
            }

            return this._rDelay;
          };

          _proto.yoyo = function yoyo(value) {
            if (arguments.length) {
              this._yoyo = value;
              return this;
            }

            return this._yoyo;
          };

          _proto.seek = function seek(position, suppressEvents) {
            return this.totalTime(
              _parsePosition(this, position),
              _isNotFalse(suppressEvents)
            );
          };

          _proto.restart = function restart(includeDelay, suppressEvents) {
            return this.play().totalTime(
              includeDelay ? -this._delay : 0,
              _isNotFalse(suppressEvents)
            );
          };

          _proto.play = function play(from, suppressEvents) {
            from != null && this.seek(from, suppressEvents);
            return this.reversed(false).paused(false);
          };

          _proto.reverse = function reverse(from, suppressEvents) {
            from != null &&
              this.seek(from || this.totalDuration(), suppressEvents);
            return this.reversed(true).paused(false);
          };

          _proto.pause = function pause(atTime, suppressEvents) {
            atTime != null && this.seek(atTime, suppressEvents);
            return this.paused(true);
          };

          _proto.resume = function resume() {
            return this.paused(false);
          };

          _proto.reversed = function reversed(value) {
            if (arguments.length) {
              !!value !== this.reversed() &&
                this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

              return this;
            }

            return this._rts < 0;
          };

          _proto.invalidate = function invalidate() {
            this._initted = this._act = 0;
            this._zTime = -_tinyNum;
            return this;
          };

          _proto.isActive = function isActive() {
            var parent = this.parent || this._dp,
              start = this._start,
              rawTime;
            return !!(
              !parent ||
              (this._ts &&
                this._initted &&
                parent.isActive() &&
                (rawTime = parent.rawTime(true)) >= start &&
                rawTime < this.endTime(true) - _tinyNum)
            );
          };

          _proto.eventCallback = function eventCallback(
            type,
            callback,
            params
          ) {
            var vars = this.vars;

            if (arguments.length > 1) {
              if (!callback) {
                delete vars[type];
              } else {
                vars[type] = callback;
                params && (vars[type + "Params"] = params);
                type === "onUpdate" && (this._onUpdate = callback);
              }

              return this;
            }

            return vars[type];
          };

          _proto.then = function then(onFulfilled) {
            var self = this;
            return new Promise(function (resolve) {
              var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
                _resolve = function _resolve() {
                  var _then = self.then;
                  self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

                  _isFunction(f) &&
                    (f = f(self)) &&
                    (f.then || f === self) &&
                    (self.then = _then);
                  resolve(f);
                  self.then = _then;
                };

              if (
                (self._initted &&
                  self.totalProgress() === 1 &&
                  self._ts >= 0) ||
                (!self._tTime && self._ts < 0)
              ) {
                _resolve();
              } else {
                self._prom = _resolve;
              }
            });
          };

          _proto.kill = function kill() {
            _interrupt(this);
          };

          return Animation;
        })();

        _setDefaults(Animation.prototype, {
          _time: 0,
          _start: 0,
          _end: 0,
          _tTime: 0,
          _tDur: 0,
          _dirty: 0,
          _repeat: 0,
          _yoyo: false,
          parent: null,
          _initted: false,
          _rDelay: 0,
          _ts: 1,
          _dp: 0,
          ratio: 0,
          _zTime: -_tinyNum,
          _prom: 0,
          _ps: false,
          _rts: 1,
        });
        /*
         * -------------------------------------------------
         * TIMELINE
         * -------------------------------------------------
         */

        var Timeline = /*#__PURE__*/ (function (_Animation) {
          _inheritsLoose(Timeline, _Animation);

          function Timeline(vars, position) {
            var _this;

            if (vars === void 0) {
              vars = {};
            }

            _this = _Animation.call(this, vars) || this;
            _this.labels = {};
            _this.smoothChildTiming = !!vars.smoothChildTiming;
            _this.autoRemoveChildren = !!vars.autoRemoveChildren;
            _this._sort = _isNotFalse(vars.sortChildren);
            _globalTimeline &&
              _addToTimeline(
                vars.parent || _globalTimeline,
                _assertThisInitialized(_this),
                position
              );
            vars.reversed && _this.reverse();
            vars.paused && _this.paused(true);
            vars.scrollTrigger &&
              _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
            return _this;
          }

          var _proto2 = Timeline.prototype;

          _proto2.to = function to(targets, vars, position) {
            _createTweenType(0, arguments, this);

            return this;
          };

          _proto2.from = function from(targets, vars, position) {
            _createTweenType(1, arguments, this);

            return this;
          };

          _proto2.fromTo = function fromTo(
            targets,
            fromVars,
            toVars,
            position
          ) {
            _createTweenType(2, arguments, this);

            return this;
          };

          _proto2.set = function set(targets, vars, position) {
            vars.duration = 0;
            vars.parent = this;
            _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
            vars.immediateRender = !!vars.immediateRender;
            new Tween(targets, vars, _parsePosition(this, position), 1);
            return this;
          };

          _proto2.call = function call(callback, params, position) {
            return _addToTimeline(
              this,
              Tween.delayedCall(0, callback, params),
              position
            );
          }; //ONLY for backward compatibility! Maybe delete?

          _proto2.staggerTo = function staggerTo(
            targets,
            duration,
            vars,
            stagger,
            position,
            onCompleteAll,
            onCompleteAllParams
          ) {
            vars.duration = duration;
            vars.stagger = vars.stagger || stagger;
            vars.onComplete = onCompleteAll;
            vars.onCompleteParams = onCompleteAllParams;
            vars.parent = this;
            new Tween(targets, vars, _parsePosition(this, position));
            return this;
          };

          _proto2.staggerFrom = function staggerFrom(
            targets,
            duration,
            vars,
            stagger,
            position,
            onCompleteAll,
            onCompleteAllParams
          ) {
            vars.runBackwards = 1;
            _inheritDefaults(vars).immediateRender = _isNotFalse(
              vars.immediateRender
            );
            return this.staggerTo(
              targets,
              duration,
              vars,
              stagger,
              position,
              onCompleteAll,
              onCompleteAllParams
            );
          };

          _proto2.staggerFromTo = function staggerFromTo(
            targets,
            duration,
            fromVars,
            toVars,
            stagger,
            position,
            onCompleteAll,
            onCompleteAllParams
          ) {
            toVars.startAt = fromVars;
            _inheritDefaults(toVars).immediateRender = _isNotFalse(
              toVars.immediateRender
            );
            return this.staggerTo(
              targets,
              duration,
              toVars,
              stagger,
              position,
              onCompleteAll,
              onCompleteAllParams
            );
          };

          _proto2.render = function render(totalTime, suppressEvents, force) {
            var prevTime = this._time,
              tDur = this._dirty ? this.totalDuration() : this._tDur,
              dur = this._dur,
              tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
              // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
              crossingStart =
                this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
              time,
              child,
              next,
              iteration,
              cycleDuration,
              prevPaused,
              pauseTween,
              timeScale,
              prevStart,
              prevIteration,
              yoyo,
              isYoyo;
            this !== _globalTimeline &&
              tTime > tDur &&
              totalTime >= 0 &&
              (tTime = tDur);

            if (tTime !== this._tTime || force || crossingStart) {
              if (prevTime !== this._time && dur) {
                //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
                tTime += this._time - prevTime;
                totalTime += this._time - prevTime;
              }

              time = tTime;
              prevStart = this._start;
              timeScale = this._ts;
              prevPaused = !timeScale;

              if (crossingStart) {
                dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

                (totalTime || !suppressEvents) && (this._zTime = totalTime);
              }

              if (this._repeat) {
                //adjust the time for repeats and yoyos
                yoyo = this._yoyo;
                cycleDuration = dur + this._rDelay;

                if (this._repeat < -1 && totalTime < 0) {
                  return this.totalTime(
                    cycleDuration * 100 + totalTime,
                    suppressEvents,
                    force
                  );
                }

                time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

                if (tTime === tDur) {
                  // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
                  iteration = this._repeat;
                  time = dur;
                } else {
                  iteration = ~~(tTime / cycleDuration);

                  if (iteration && iteration === tTime / cycleDuration) {
                    time = dur;
                    iteration--;
                  }

                  time > dur && (time = dur);
                }

                prevIteration = _animationCycle(this._tTime, cycleDuration);
                !prevTime &&
                  this._tTime &&
                  prevIteration !== iteration &&
                  this._tTime - prevIteration * cycleDuration - this._dur <=
                    0 &&
                  (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion

                if (yoyo && iteration & 1) {
                  time = dur - time;
                  isYoyo = 1;
                }
                /*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */

                if (iteration !== prevIteration && !this._lock) {
                  var rewinding = yoyo && prevIteration & 1,
                    doesWrap = rewinding === (yoyo && iteration & 1);
                  iteration < prevIteration && (rewinding = !rewinding);
                  prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.

                  this._lock = 1;
                  this.render(
                    prevTime ||
                      (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)),
                    suppressEvents,
                    !dur
                  )._lock = 0;
                  this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

                  !suppressEvents && this.parent && _callback(this, "onRepeat");
                  this.vars.repeatRefresh &&
                    !isYoyo &&
                    (this.invalidate()._lock = 1);

                  if (
                    (prevTime && prevTime !== this._time) ||
                    prevPaused !== !this._ts ||
                    (this.vars.onRepeat && !this.parent && !this._act)
                  ) {
                    // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
                    return this;
                  }

                  dur = this._dur; // in case the duration changed in the onRepeat

                  tDur = this._tDur;

                  if (doesWrap) {
                    this._lock = 2;
                    prevTime = rewinding ? dur : -0.0001;
                    this.render(prevTime, true);
                    this.vars.repeatRefresh && !isYoyo && this.invalidate();
                  }

                  this._lock = 0;

                  if (!this._ts && !prevPaused) {
                    return this;
                  } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.

                  _propagateYoyoEase(this, isYoyo);
                }
              }

              if (this._hasPause && !this._forcing && this._lock < 2) {
                pauseTween = _findNextPauseTween(
                  this,
                  _roundPrecise(prevTime),
                  _roundPrecise(time)
                );

                if (pauseTween) {
                  tTime -= time - (time = pauseTween._start);
                }
              }

              this._tTime = tTime;
              this._time = time;
              this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

              if (!this._initted) {
                this._onUpdate = this.vars.onUpdate;
                this._initted = 1;
                this._zTime = totalTime;
                prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
              }

              if (!prevTime && time && !suppressEvents && !iteration) {
                _callback(this, "onStart");

                if (this._tTime !== tTime) {
                  // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
                  return this;
                }
              }

              if (time >= prevTime && totalTime >= 0) {
                child = this._first;

                while (child) {
                  next = child._next;

                  if (
                    (child._act || time >= child._start) &&
                    child._ts &&
                    pauseTween !== child
                  ) {
                    if (child.parent !== this) {
                      // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                      return this.render(totalTime, suppressEvents, force);
                    }

                    child.render(
                      child._ts > 0
                        ? (time - child._start) * child._ts
                        : (child._dirty ? child.totalDuration() : child._tDur) +
                            (time - child._start) * child._ts,
                      suppressEvents,
                      force
                    );

                    if (time !== this._time || (!this._ts && !prevPaused)) {
                      //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                      pauseTween = 0;
                      next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

                      break;
                    }
                  }

                  child = next;
                }
              } else {
                child = this._last;
                var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

                while (child) {
                  next = child._prev;

                  if (
                    (child._act || adjustedTime <= child._end) &&
                    child._ts &&
                    pauseTween !== child
                  ) {
                    if (child.parent !== this) {
                      // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                      return this.render(totalTime, suppressEvents, force);
                    }

                    child.render(
                      child._ts > 0
                        ? (adjustedTime - child._start) * child._ts
                        : (child._dirty ? child.totalDuration() : child._tDur) +
                            (adjustedTime - child._start) * child._ts,
                      suppressEvents,
                      force ||
                        (_reverting && (child._initted || child._startAt))
                    ); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.

                    if (time !== this._time || (!this._ts && !prevPaused)) {
                      //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                      pauseTween = 0;
                      next &&
                        (tTime += this._zTime =
                          adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

                      break;
                    }
                  }

                  child = next;
                }
              }

              if (pauseTween && !suppressEvents) {
                this.pause();
                pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime =
                  time >= prevTime ? 1 : -1;

                if (this._ts) {
                  //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
                  this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

                  _setEnd(this);

                  return this.render(totalTime, suppressEvents, force);
                }
              }

              this._onUpdate &&
                !suppressEvents &&
                _callback(this, "onUpdate", true);
              if (
                (tTime === tDur && this._tTime >= this.totalDuration()) ||
                (!tTime && prevTime)
              )
                if (
                  prevStart === this._start ||
                  Math.abs(timeScale) !== Math.abs(this._ts)
                )
                  if (!this._lock) {
                    // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
                    (totalTime || !dur) &&
                      ((tTime === tDur && this._ts > 0) ||
                        (!tTime && this._ts < 0)) &&
                      _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

                    if (
                      !suppressEvents &&
                      !(totalTime < 0 && !prevTime) &&
                      (tTime || prevTime || !tDur)
                    ) {
                      _callback(
                        this,
                        tTime === tDur && totalTime >= 0
                          ? "onComplete"
                          : "onReverseComplete",
                        true
                      );

                      this._prom &&
                        !(tTime < tDur && this.timeScale() > 0) &&
                        this._prom();
                    }
                  }
            }

            return this;
          };

          _proto2.add = function add(child, position) {
            var _this2 = this;

            _isNumber(position) ||
              (position = _parsePosition(this, position, child));

            if (!(child instanceof Animation)) {
              if (_isArray(child)) {
                child.forEach(function (obj) {
                  return _this2.add(obj, position);
                });
                return this;
              }

              if (_isString(child)) {
                return this.addLabel(child, position);
              }

              if (_isFunction(child)) {
                child = Tween.delayedCall(0, child);
              } else {
                return this;
              }
            }

            return this !== child
              ? _addToTimeline(this, child, position)
              : this; //don't allow a timeline to be added to itself as a child!
          };

          _proto2.getChildren = function getChildren(
            nested,
            tweens,
            timelines,
            ignoreBeforeTime
          ) {
            if (nested === void 0) {
              nested = true;
            }

            if (tweens === void 0) {
              tweens = true;
            }

            if (timelines === void 0) {
              timelines = true;
            }

            if (ignoreBeforeTime === void 0) {
              ignoreBeforeTime = -_bigNum;
            }

            var a = [],
              child = this._first;

            while (child) {
              if (child._start >= ignoreBeforeTime) {
                if (child instanceof Tween) {
                  tweens && a.push(child);
                } else {
                  timelines && a.push(child);
                  nested &&
                    a.push.apply(a, child.getChildren(true, tweens, timelines));
                }
              }

              child = child._next;
            }

            return a;
          };

          _proto2.getById = function getById(id) {
            var animations = this.getChildren(1, 1, 1),
              i = animations.length;

            while (i--) {
              if (animations[i].vars.id === id) {
                return animations[i];
              }
            }
          };

          _proto2.remove = function remove(child) {
            if (_isString(child)) {
              return this.removeLabel(child);
            }

            if (_isFunction(child)) {
              return this.killTweensOf(child);
            }

            _removeLinkedListItem(this, child);

            if (child === this._recent) {
              this._recent = this._last;
            }

            return _uncache(this);
          };

          _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
            if (!arguments.length) {
              return this._tTime;
            }

            this._forcing = 1;

            if (!this._dp && this._ts) {
              //special case for the global timeline (or any other that has no parent or detached parent).
              this._start = _roundPrecise(
                _ticker.time -
                  (this._ts > 0
                    ? _totalTime2 / this._ts
                    : (this.totalDuration() - _totalTime2) / -this._ts)
              );
            }

            _Animation.prototype.totalTime.call(
              this,
              _totalTime2,
              suppressEvents
            );

            this._forcing = 0;
            return this;
          };

          _proto2.addLabel = function addLabel(label, position) {
            this.labels[label] = _parsePosition(this, position);
            return this;
          };

          _proto2.removeLabel = function removeLabel(label) {
            delete this.labels[label];
            return this;
          };

          _proto2.addPause = function addPause(position, callback, params) {
            var t = Tween.delayedCall(0, callback || _emptyFunc, params);
            t.data = "isPause";
            this._hasPause = 1;
            return _addToTimeline(this, t, _parsePosition(this, position));
          };

          _proto2.removePause = function removePause(position) {
            var child = this._first;
            position = _parsePosition(this, position);

            while (child) {
              if (child._start === position && child.data === "isPause") {
                _removeFromParent(child);
              }

              child = child._next;
            }
          };

          _proto2.killTweensOf = function killTweensOf(
            targets,
            props,
            onlyActive
          ) {
            var tweens = this.getTweensOf(targets, onlyActive),
              i = tweens.length;

            while (i--) {
              _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
            }

            return this;
          };

          _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
            var a = [],
              parsedTargets = toArray(targets),
              child = this._first,
              isGlobalTime = _isNumber(onlyActive),
              // a number is interpreted as a global time. If the animation spans
              children;

            while (child) {
              if (child instanceof Tween) {
                if (
                  _arrayContainsAny(child._targets, parsedTargets) &&
                  (isGlobalTime
                    ? (!_overwritingTween || (child._initted && child._ts)) &&
                      child.globalTime(0) <= onlyActive &&
                      child.globalTime(child.totalDuration()) > onlyActive
                    : !onlyActive || child.isActive())
                ) {
                  // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
                  a.push(child);
                }
              } else if (
                (children = child.getTweensOf(parsedTargets, onlyActive)).length
              ) {
                a.push.apply(a, children);
              }

              child = child._next;
            }

            return a;
          }; // potential future feature - targets() on timelines
          // targets() {
          // 	let result = [];
          // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
          // 	return result.filter((v, i) => result.indexOf(v) === i);
          // }

          _proto2.tweenTo = function tweenTo(position, vars) {
            vars = vars || {};

            var tl = this,
              endTime = _parsePosition(tl, position),
              _vars = vars,
              startAt = _vars.startAt,
              _onStart = _vars.onStart,
              onStartParams = _vars.onStartParams,
              immediateRender = _vars.immediateRender,
              initted,
              tween = Tween.to(
                tl,
                _setDefaults(
                  {
                    ease: vars.ease || "none",
                    lazy: false,
                    immediateRender: false,
                    time: endTime,
                    overwrite: "auto",
                    duration:
                      vars.duration ||
                      Math.abs(
                        (endTime -
                          (startAt && "time" in startAt
                            ? startAt.time
                            : tl._time)) /
                          tl.timeScale()
                      ) ||
                      _tinyNum,
                    onStart: function onStart() {
                      tl.pause();

                      if (!initted) {
                        var duration =
                          vars.duration ||
                          Math.abs(
                            (endTime -
                              (startAt && "time" in startAt
                                ? startAt.time
                                : tl._time)) /
                              tl.timeScale()
                          );
                        tween._dur !== duration &&
                          _setDuration(tween, duration, 0, 1).render(
                            tween._time,
                            true,
                            true
                          );
                        initted = 1;
                      }

                      _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
                    },
                  },
                  vars
                )
              );

            return immediateRender ? tween.render(0) : tween;
          };

          _proto2.tweenFromTo = function tweenFromTo(
            fromPosition,
            toPosition,
            vars
          ) {
            return this.tweenTo(
              toPosition,
              _setDefaults(
                {
                  startAt: {
                    time: _parsePosition(this, fromPosition),
                  },
                },
                vars
              )
            );
          };

          _proto2.recent = function recent() {
            return this._recent;
          };

          _proto2.nextLabel = function nextLabel(afterTime) {
            if (afterTime === void 0) {
              afterTime = this._time;
            }

            return _getLabelInDirection(this, _parsePosition(this, afterTime));
          };

          _proto2.previousLabel = function previousLabel(beforeTime) {
            if (beforeTime === void 0) {
              beforeTime = this._time;
            }

            return _getLabelInDirection(
              this,
              _parsePosition(this, beforeTime),
              1
            );
          };

          _proto2.currentLabel = function currentLabel(value) {
            return arguments.length
              ? this.seek(value, true)
              : this.previousLabel(this._time + _tinyNum);
          };

          _proto2.shiftChildren = function shiftChildren(
            amount,
            adjustLabels,
            ignoreBeforeTime
          ) {
            if (ignoreBeforeTime === void 0) {
              ignoreBeforeTime = 0;
            }

            var child = this._first,
              labels = this.labels,
              p;

            while (child) {
              if (child._start >= ignoreBeforeTime) {
                child._start += amount;
                child._end += amount;
              }

              child = child._next;
            }

            if (adjustLabels) {
              for (p in labels) {
                if (labels[p] >= ignoreBeforeTime) {
                  labels[p] += amount;
                }
              }
            }

            return _uncache(this);
          };

          _proto2.invalidate = function invalidate(soft) {
            var child = this._first;
            this._lock = 0;

            while (child) {
              child.invalidate(soft);
              child = child._next;
            }

            return _Animation.prototype.invalidate.call(this, soft);
          };

          _proto2.clear = function clear(includeLabels) {
            if (includeLabels === void 0) {
              includeLabels = true;
            }

            var child = this._first,
              next;

            while (child) {
              next = child._next;
              this.remove(child);
              child = next;
            }

            this._dp && (this._time = this._tTime = this._pTime = 0);
            includeLabels && (this.labels = {});
            return _uncache(this);
          };

          _proto2.totalDuration = function totalDuration(value) {
            var max = 0,
              self = this,
              child = self._last,
              prevStart = _bigNum,
              prev,
              start,
              parent;

            if (arguments.length) {
              return self.timeScale(
                (self._repeat < 0 ? self.duration() : self.totalDuration()) /
                  (self.reversed() ? -value : value)
              );
            }

            if (self._dirty) {
              parent = self.parent;

              while (child) {
                prev = child._prev; //record it here in case the tween changes position in the sequence...

                child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

                start = child._start;

                if (
                  start > prevStart &&
                  self._sort &&
                  child._ts &&
                  !self._lock
                ) {
                  //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
                  self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

                  _addToTimeline(
                    self,
                    child,
                    start - child._delay,
                    1
                  )._lock = 0;
                } else {
                  prevStart = start;
                }

                if (start < 0 && child._ts) {
                  //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
                  max -= start;

                  if (
                    (!parent && !self._dp) ||
                    (parent && parent.smoothChildTiming)
                  ) {
                    self._start += start / self._ts;
                    self._time -= start;
                    self._tTime -= start;
                  }

                  self.shiftChildren(-start, false, -1e999);
                  prevStart = 0;
                }

                child._end > max && child._ts && (max = child._end);
                child = prev;
              }

              _setDuration(
                self,
                self === _globalTimeline && self._time > max ? self._time : max,
                1,
                1
              );

              self._dirty = 0;
            }

            return self._tDur;
          };

          Timeline.updateRoot = function updateRoot(time) {
            if (_globalTimeline._ts) {
              _lazySafeRender(
                _globalTimeline,
                _parentToChildTotalTime(time, _globalTimeline)
              );

              _lastRenderedFrame = _ticker.frame;
            }

            if (_ticker.frame >= _nextGCFrame) {
              _nextGCFrame += _config.autoSleep || 120;
              var child = _globalTimeline._first;
              if (!child || !child._ts)
                if (_config.autoSleep && _ticker._listeners.length < 2) {
                  while (child && !child._ts) {
                    child = child._next;
                  }

                  child || _ticker.sleep();
                }
            }
          };

          return Timeline;
        })(Animation);

        _setDefaults(Timeline.prototype, {
          _lock: 0,
          _hasPause: 0,
          _forcing: 0,
        });

        var _addComplexStringPropTween = function _addComplexStringPropTween(
            target,
            prop,
            start,
            end,
            setter,
            stringFilter,
            funcParam
          ) {
            //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
            var pt = new PropTween(
                this._pt,
                target,
                prop,
                0,
                1,
                _renderComplexString,
                null,
                setter
              ),
              index = 0,
              matchIndex = 0,
              result,
              startNums,
              color,
              endNum,
              chunk,
              startNum,
              hasRandom,
              a;
            pt.b = start;
            pt.e = end;
            start += ""; //ensure values are strings

            end += "";

            if ((hasRandom = ~end.indexOf("random("))) {
              end = _replaceRandom(end);
            }

            if (stringFilter) {
              a = [start, end];
              stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

              start = a[0];
              end = a[1];
            }

            startNums = start.match(_complexStringNumExp) || [];

            while ((result = _complexStringNumExp.exec(end))) {
              endNum = result[0];
              chunk = end.substring(index, result.index);

              if (color) {
                color = (color + 1) % 5;
              } else if (chunk.substr(-5) === "rgba(") {
                color = 1;
              }

              if (endNum !== startNums[matchIndex++]) {
                startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

                pt._pt = {
                  _next: pt._pt,
                  p: chunk || matchIndex === 1 ? chunk : ",",
                  //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
                  s: startNum,
                  c:
                    endNum.charAt(1) === "="
                      ? _parseRelative(startNum, endNum) - startNum
                      : parseFloat(endNum) - startNum,
                  m: color && color < 4 ? Math.round : 0,
                };
                index = _complexStringNumExp.lastIndex;
              }
            }

            pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

            pt.fp = funcParam;

            if (_relExp.test(end) || hasRandom) {
              pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
            }

            this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

            return pt;
          },
          _addPropTween = function _addPropTween(
            target,
            prop,
            start,
            end,
            index,
            targets,
            modifier,
            stringFilter,
            funcParam,
            optional
          ) {
            _isFunction(end) && (end = end(index || 0, target, targets));
            var currentValue = target[prop],
              parsedStart =
                start !== "get"
                  ? start
                  : !_isFunction(currentValue)
                  ? currentValue
                  : funcParam
                  ? target[
                      prop.indexOf("set") ||
                      !_isFunction(target["get" + prop.substr(3)])
                        ? prop
                        : "get" + prop.substr(3)
                    ](funcParam)
                  : target[prop](),
              setter = !_isFunction(currentValue)
                ? _setterPlain
                : funcParam
                ? _setterFuncWithParam
                : _setterFunc,
              pt;

            if (_isString(end)) {
              if (~end.indexOf("random(")) {
                end = _replaceRandom(end);
              }

              if (end.charAt(1) === "=") {
                pt =
                  _parseRelative(parsedStart, end) +
                  (getUnit(parsedStart) || 0);

                if (pt || pt === 0) {
                  // to avoid isNaN, like if someone passes in a value like "!= whatever"
                  end = pt;
                }
              }
            }

            if (!optional || parsedStart !== end || _forceAllPropTweens) {
              if (!isNaN(parsedStart * end) && end !== "") {
                // fun fact: any number multiplied by "" is evaluated as the number 0!
                pt = new PropTween(
                  this._pt,
                  target,
                  prop,
                  +parsedStart || 0,
                  end - (parsedStart || 0),
                  typeof currentValue === "boolean"
                    ? _renderBoolean
                    : _renderPlain,
                  0,
                  setter
                );
                funcParam && (pt.fp = funcParam);
                modifier && pt.modifier(modifier, this, target);
                return (this._pt = pt);
              }

              !currentValue && !(prop in target) && _missingPlugin(prop, end);
              return _addComplexStringPropTween.call(
                this,
                target,
                prop,
                parsedStart,
                end,
                setter,
                stringFilter || _config.stringFilter,
                funcParam
              );
            }
          },
          //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
          _processVars = function _processVars(
            vars,
            index,
            target,
            targets,
            tween
          ) {
            _isFunction(vars) &&
              (vars = _parseFuncOrString(vars, tween, index, target, targets));

            if (
              !_isObject(vars) ||
              (vars.style && vars.nodeType) ||
              _isArray(vars) ||
              _isTypedArray(vars)
            ) {
              return _isString(vars)
                ? _parseFuncOrString(vars, tween, index, target, targets)
                : vars;
            }

            var copy = {},
              p;

            for (p in vars) {
              copy[p] = _parseFuncOrString(
                vars[p],
                tween,
                index,
                target,
                targets
              );
            }

            return copy;
          },
          _checkPlugin = function _checkPlugin(
            property,
            vars,
            tween,
            index,
            target,
            targets
          ) {
            var plugin, pt, ptLookup, i;

            if (
              _plugins[property] &&
              (plugin = new _plugins[property]()).init(
                target,
                plugin.rawVars
                  ? vars[property]
                  : _processVars(vars[property], index, target, targets, tween),
                tween,
                index,
                targets
              ) !== false
            ) {
              tween._pt = pt = new PropTween(
                tween._pt,
                target,
                property,
                0,
                1,
                plugin.render,
                plugin,
                0,
                plugin.priority
              );

              if (tween !== _quickTween) {
                ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

                i = plugin._props.length;

                while (i--) {
                  ptLookup[plugin._props[i]] = pt;
                }
              }
            }

            return plugin;
          },
          _overwritingTween,
          //store a reference temporarily so we can avoid overwriting itself.
          _forceAllPropTweens,
          _initTween = function _initTween(tween, time, tTime) {
            var vars = tween.vars,
              ease = vars.ease,
              startAt = vars.startAt,
              immediateRender = vars.immediateRender,
              lazy = vars.lazy,
              onUpdate = vars.onUpdate,
              runBackwards = vars.runBackwards,
              yoyoEase = vars.yoyoEase,
              keyframes = vars.keyframes,
              autoRevert = vars.autoRevert,
              dur = tween._dur,
              prevStartAt = tween._startAt,
              targets = tween._targets,
              parent = tween.parent,
              fullTargets =
                parent && parent.data === "nested"
                  ? parent.vars.targets
                  : targets,
              autoOverwrite =
                tween._overwrite === "auto" && !_suppressOverwrites,
              tl = tween.timeline,
              cleanVars,
              i,
              p,
              pt,
              target,
              hasPriority,
              gsData,
              harness,
              plugin,
              ptLookup,
              index,
              harnessVars,
              overwritten;
            tl && (!keyframes || !ease) && (ease = "none");
            tween._ease = _parseEase(ease, _defaults.ease);
            tween._yEase = yoyoEase
              ? _invertEase(
                  _parseEase(
                    yoyoEase === true ? ease : yoyoEase,
                    _defaults.ease
                  )
                )
              : 0;

            if (yoyoEase && tween._yoyo && !tween._repeat) {
              //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
              yoyoEase = tween._yEase;
              tween._yEase = tween._ease;
              tween._ease = yoyoEase;
            }

            tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

            if (!tl || (keyframes && !vars.stagger)) {
              //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
              harness = targets[0] ? _getCache(targets[0]).harness : 0;
              harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

              cleanVars = _copyExcluding(vars, _reservedProps);

              if (prevStartAt) {
                prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.

                time < 0 && runBackwards && immediateRender && !autoRevert
                  ? prevStartAt.render(-1, true)
                  : prevStartAt.revert(
                      runBackwards && dur
                        ? _revertConfigNoKill
                        : _startAtRevertConfig
                    ); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
                // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.

                prevStartAt._lazy = 0;
              }

              if (startAt) {
                _removeFromParent(
                  (tween._startAt = Tween.set(
                    targets,
                    _setDefaults(
                      {
                        data: "isStart",
                        overwrite: false,
                        parent: parent,
                        immediateRender: true,
                        lazy: !prevStartAt && _isNotFalse(lazy),
                        startAt: null,
                        delay: 0,
                        onUpdate:
                          onUpdate &&
                          function () {
                            return _callback(tween, "onUpdate");
                          },
                        stagger: 0,
                      },
                      startAt
                    )
                  ))
                ); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);

                tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.

                tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween

                time < 0 &&
                  (_reverting || (!immediateRender && !autoRevert)) &&
                  tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

                if (immediateRender) {
                  if (dur && time <= 0 && tTime <= 0) {
                    // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
                    time && (tween._zTime = time);
                    return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
                  }
                }
              } else if (runBackwards && dur) {
                //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
                if (!prevStartAt) {
                  time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

                  p = _setDefaults(
                    {
                      overwrite: false,
                      data: "isFromStart",
                      //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
                      lazy:
                        immediateRender && !prevStartAt && _isNotFalse(lazy),
                      immediateRender: immediateRender,
                      //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
                      stagger: 0,
                      parent: parent, //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
                    },
                    cleanVars
                  );
                  harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

                  _removeFromParent((tween._startAt = Tween.set(targets, p)));

                  tween._startAt._dp = 0; // don't allow it to get put back into root timeline!

                  tween._startAt._sat = tween; // used in globalTime()

                  time < 0 &&
                    (_reverting
                      ? tween._startAt.revert(_revertConfigNoKill)
                      : tween._startAt.render(-1, true));
                  tween._zTime = time;

                  if (!immediateRender) {
                    _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
                  } else if (!time) {
                    return;
                  }
                }
              }

              tween._pt = tween._ptCache = 0;
              lazy = (dur && _isNotFalse(lazy)) || (lazy && !dur);

              for (i = 0; i < targets.length; i++) {
                target = targets[i];
                gsData = target._gsap || _harness(targets)[i]._gsap;
                tween._ptLookup[i] = ptLookup = {};
                _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

                index =
                  fullTargets === targets ? i : fullTargets.indexOf(target);

                if (
                  harness &&
                  (plugin = new harness()).init(
                    target,
                    harnessVars || cleanVars,
                    tween,
                    index,
                    fullTargets
                  ) !== false
                ) {
                  tween._pt = pt = new PropTween(
                    tween._pt,
                    target,
                    plugin.name,
                    0,
                    1,
                    plugin.render,
                    plugin,
                    0,
                    plugin.priority
                  );

                  plugin._props.forEach(function (name) {
                    ptLookup[name] = pt;
                  });

                  plugin.priority && (hasPriority = 1);
                }

                if (!harness || harnessVars) {
                  for (p in cleanVars) {
                    if (
                      _plugins[p] &&
                      (plugin = _checkPlugin(
                        p,
                        cleanVars,
                        tween,
                        index,
                        target,
                        fullTargets
                      ))
                    ) {
                      plugin.priority && (hasPriority = 1);
                    } else {
                      ptLookup[p] = pt = _addPropTween.call(
                        tween,
                        target,
                        p,
                        "get",
                        cleanVars[p],
                        index,
                        fullTargets,
                        0,
                        vars.stringFilter
                      );
                    }
                  }
                }

                tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

                if (autoOverwrite && tween._pt) {
                  _overwritingTween = tween;

                  _globalTimeline.killTweensOf(
                    target,
                    ptLookup,
                    tween.globalTime(time)
                  ); // make sure the overwriting doesn't overwrite THIS tween!!!

                  overwritten = !tween.parent;
                  _overwritingTween = 0;
                }

                tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
              }

              hasPriority && _sortPropTweensByPriority(tween);
              tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
            }

            tween._onUpdate = onUpdate;
            tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

            keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
          },
          _updatePropTweens = function _updatePropTweens(
            tween,
            property,
            value,
            start,
            startIsRelative,
            ratio,
            time,
            skipRecursion
          ) {
            var ptCache = ((tween._pt && tween._ptCache) ||
                (tween._ptCache = {}))[property],
              pt,
              rootPT,
              lookup,
              i;

            if (!ptCache) {
              ptCache = tween._ptCache[property] = [];
              lookup = tween._ptLookup;
              i = tween._targets.length;

              while (i--) {
                pt = lookup[i][property];

                if (pt && pt.d && pt.d._pt) {
                  // it's a plugin, so find the nested PropTween
                  pt = pt.d._pt;

                  while (pt && pt.p !== property && pt.fp !== property) {
                    // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
                    pt = pt._next;
                  }
                }

                if (!pt) {
                  // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
                  // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
                  _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

                  tween.vars[property] = "+=0";

                  _initTween(tween, time);

                  _forceAllPropTweens = 0;
                  return skipRecursion
                    ? _warn(property + " not eligible for reset")
                    : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().
                }

                ptCache.push(pt);
              }
            }

            i = ptCache.length;

            while (i--) {
              rootPT = ptCache[i];
              pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.

              pt.s =
                (start || start === 0) && !startIsRelative
                  ? start
                  : pt.s + (start || 0) + ratio * pt.c;
              pt.c = value - pt.s;
              rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)

              rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
            }
          },
          _addAliasesToVars = function _addAliasesToVars(targets, vars) {
            var harness = targets[0] ? _getCache(targets[0]).harness : 0,
              propertyAliases = harness && harness.aliases,
              copy,
              p,
              i,
              aliases;

            if (!propertyAliases) {
              return vars;
            }

            copy = _merge({}, vars);

            for (p in propertyAliases) {
              if (p in copy) {
                aliases = propertyAliases[p].split(",");
                i = aliases.length;

                while (i--) {
                  copy[aliases[i]] = copy[p];
                }
              }
            }

            return copy;
          },
          // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
          _parseKeyframe = function _parseKeyframe(
            prop,
            obj,
            allProps,
            easeEach
          ) {
            var ease = obj.ease || easeEach || "power1.inOut",
              p,
              a;

            if (_isArray(obj)) {
              a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

              obj.forEach(function (value, i) {
                return a.push({
                  t: (i / (obj.length - 1)) * 100,
                  v: value,
                  e: ease,
                });
              });
            } else {
              for (p in obj) {
                a = allProps[p] || (allProps[p] = []);
                p === "ease" ||
                  a.push({
                    t: parseFloat(prop),
                    v: obj[p],
                    e: ease,
                  });
              }
            }
          },
          _parseFuncOrString = function _parseFuncOrString(
            value,
            tween,
            i,
            target,
            targets
          ) {
            return _isFunction(value)
              ? value.call(tween, i, target, targets)
              : _isString(value) && ~value.indexOf("random(")
              ? _replaceRandom(value)
              : value;
          },
          _staggerTweenProps =
            _callbackNames +
            "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
          _staggerPropsToSkip = {};

        _forEachName(
          _staggerTweenProps +
            ",id,stagger,delay,duration,paused,scrollTrigger",
          function (name) {
            return (_staggerPropsToSkip[name] = 1);
          }
        );
        /*
         * --------------------------------------------------------------------------------------
         * TWEEN
         * --------------------------------------------------------------------------------------
         */

        var Tween = /*#__PURE__*/ (function (_Animation2) {
          _inheritsLoose(Tween, _Animation2);

          function Tween(targets, vars, position, skipInherit) {
            var _this3;

            if (typeof vars === "number") {
              position.duration = vars;
              vars = position;
              position = null;
            }

            _this3 =
              _Animation2.call(
                this,
                skipInherit ? vars : _inheritDefaults(vars)
              ) || this;
            var _this3$vars = _this3.vars,
              duration = _this3$vars.duration,
              delay = _this3$vars.delay,
              immediateRender = _this3$vars.immediateRender,
              stagger = _this3$vars.stagger,
              overwrite = _this3$vars.overwrite,
              keyframes = _this3$vars.keyframes,
              defaults = _this3$vars.defaults,
              scrollTrigger = _this3$vars.scrollTrigger,
              yoyoEase = _this3$vars.yoyoEase,
              parent = vars.parent || _globalTimeline,
              parsedTargets = (
                _isArray(targets) || _isTypedArray(targets)
                  ? _isNumber(targets[0])
                  : "length" in vars
              )
                ? [targets]
                : toArray(targets),
              tl,
              i,
              copy,
              l,
              p,
              curTarget,
              staggerFunc,
              staggerVarsToMerge;
            _this3._targets = parsedTargets.length
              ? _harness(parsedTargets)
              : _warn(
                  "GSAP target " + targets + " not found. https://gsap.com",
                  !_config.nullTargetWarn
                ) || [];
            _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

            _this3._overwrite = overwrite;

            if (
              keyframes ||
              stagger ||
              _isFuncOrString(duration) ||
              _isFuncOrString(delay)
            ) {
              vars = _this3.vars;
              tl = _this3.timeline = new Timeline({
                data: "nested",
                defaults: defaults || {},
                targets:
                  parent && parent.data === "nested"
                    ? parent.vars.targets
                    : parsedTargets,
              }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.

              tl.kill();
              tl.parent = tl._dp = _assertThisInitialized(_this3);
              tl._start = 0;

              if (
                stagger ||
                _isFuncOrString(duration) ||
                _isFuncOrString(delay)
              ) {
                l = parsedTargets.length;
                staggerFunc = stagger && distribute(stagger);

                if (_isObject(stagger)) {
                  //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
                  for (p in stagger) {
                    if (~_staggerTweenProps.indexOf(p)) {
                      staggerVarsToMerge || (staggerVarsToMerge = {});
                      staggerVarsToMerge[p] = stagger[p];
                    }
                  }
                }

                for (i = 0; i < l; i++) {
                  copy = _copyExcluding(vars, _staggerPropsToSkip);
                  copy.stagger = 0;
                  yoyoEase && (copy.yoyoEase = yoyoEase);
                  staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
                  curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

                  copy.duration = +_parseFuncOrString(
                    duration,
                    _assertThisInitialized(_this3),
                    i,
                    curTarget,
                    parsedTargets
                  );
                  copy.delay =
                    (+_parseFuncOrString(
                      delay,
                      _assertThisInitialized(_this3),
                      i,
                      curTarget,
                      parsedTargets
                    ) || 0) - _this3._delay;

                  if (!stagger && l === 1 && copy.delay) {
                    // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
                    _this3._delay = delay = copy.delay;
                    _this3._start += delay;
                    copy.delay = 0;
                  }

                  tl.to(
                    curTarget,
                    copy,
                    staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0
                  );
                  tl._ease = _easeMap.none;
                }

                tl.duration() ? (duration = delay = 0) : (_this3.timeline = 0); // if the timeline's duration is 0, we don't need a timeline internally!
              } else if (keyframes) {
                _inheritDefaults(
                  _setDefaults(tl.vars.defaults, {
                    ease: "none",
                  })
                );

                tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
                var time = 0,
                  a,
                  kf,
                  v;

                if (_isArray(keyframes)) {
                  keyframes.forEach(function (frame) {
                    return tl.to(parsedTargets, frame, ">");
                  });
                  tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
                } else {
                  copy = {};

                  for (p in keyframes) {
                    p === "ease" ||
                      p === "easeEach" ||
                      _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
                  }

                  for (p in copy) {
                    a = copy[p].sort(function (a, b) {
                      return a.t - b.t;
                    });
                    time = 0;

                    for (i = 0; i < a.length; i++) {
                      kf = a[i];
                      v = {
                        ease: kf.e,
                        duration:
                          ((kf.t - (i ? a[i - 1].t : 0)) / 100) * duration,
                      };
                      v[p] = kf.v;
                      tl.to(parsedTargets, v, time);
                      time += v.duration;
                    }
                  }

                  tl.duration() < duration &&
                    tl.to(
                      {},
                      {
                        duration: duration - tl.duration(),
                      }
                    ); // in case keyframes didn't go to 100%
                }
              }

              duration || _this3.duration((duration = tl.duration()));
            } else {
              _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
            }

            if (overwrite === true && !_suppressOverwrites) {
              _overwritingTween = _assertThisInitialized(_this3);

              _globalTimeline.killTweensOf(parsedTargets);

              _overwritingTween = 0;
            }

            _addToTimeline(parent, _assertThisInitialized(_this3), position);

            vars.reversed && _this3.reverse();
            vars.paused && _this3.paused(true);

            if (
              immediateRender ||
              (!duration &&
                !keyframes &&
                _this3._start === _roundPrecise(parent._time) &&
                _isNotFalse(immediateRender) &&
                _hasNoPausedAncestors(_assertThisInitialized(_this3)) &&
                parent.data !== "nested")
            ) {
              _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

              _this3.render(Math.max(0, -delay) || 0); //in case delay is negative
            }

            scrollTrigger &&
              _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
            return _this3;
          }

          var _proto3 = Tween.prototype;

          _proto3.render = function render(totalTime, suppressEvents, force) {
            var prevTime = this._time,
              tDur = this._tDur,
              dur = this._dur,
              isNegative = totalTime < 0,
              tTime =
                totalTime > tDur - _tinyNum && !isNegative
                  ? tDur
                  : totalTime < _tinyNum
                  ? 0
                  : totalTime,
              time,
              pt,
              iteration,
              cycleDuration,
              prevIteration,
              isYoyo,
              ratio,
              timeline,
              yoyoEase;

            if (!dur) {
              _renderZeroDurationTween(this, totalTime, suppressEvents, force);
            } else if (
              tTime !== this._tTime ||
              !totalTime ||
              force ||
              (!this._initted && this._tTime) ||
              (this._startAt && this._zTime < 0 !== isNegative)
            ) {
              //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
              time = tTime;
              timeline = this.timeline;

              if (this._repeat) {
                //adjust the time for repeats and yoyos
                cycleDuration = dur + this._rDelay;

                if (this._repeat < -1 && isNegative) {
                  return this.totalTime(
                    cycleDuration * 100 + totalTime,
                    suppressEvents,
                    force
                  );
                }

                time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

                if (tTime === tDur) {
                  // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
                  iteration = this._repeat;
                  time = dur;
                } else {
                  iteration = ~~(tTime / cycleDuration);

                  if (
                    iteration &&
                    iteration === _roundPrecise(tTime / cycleDuration)
                  ) {
                    time = dur;
                    iteration--;
                  }

                  time > dur && (time = dur);
                }

                isYoyo = this._yoyo && iteration & 1;

                if (isYoyo) {
                  yoyoEase = this._yEase;
                  time = dur - time;
                }

                prevIteration = _animationCycle(this._tTime, cycleDuration);

                if (
                  time === prevTime &&
                  !force &&
                  this._initted &&
                  iteration === prevIteration
                ) {
                  //could be during the repeatDelay part. No need to render and fire callbacks.
                  this._tTime = tTime;
                  return this;
                }

                if (iteration !== prevIteration) {
                  timeline &&
                    this._yEase &&
                    _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

                  if (
                    this.vars.repeatRefresh &&
                    !isYoyo &&
                    !this._lock &&
                    this._time !== cycleDuration &&
                    this._initted
                  ) {
                    // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).
                    this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

                    this.render(
                      _roundPrecise(cycleDuration * iteration),
                      true
                    ).invalidate()._lock = 0;
                  }
                }
              }

              if (!this._initted) {
                if (
                  _attemptInitTween(
                    this,
                    isNegative ? totalTime : time,
                    force,
                    suppressEvents,
                    tTime
                  )
                ) {
                  this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

                  return this;
                }

                if (
                  prevTime !== this._time &&
                  !(
                    force &&
                    this.vars.repeatRefresh &&
                    iteration !== prevIteration
                  )
                ) {
                  // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!
                  return this;
                }

                if (dur !== this._dur) {
                  // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
                  return this.render(totalTime, suppressEvents, force);
                }
              }

              this._tTime = tTime;
              this._time = time;

              if (!this._act && this._ts) {
                this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

                this._lazy = 0;
              }

              this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

              if (this._from) {
                this.ratio = ratio = 1 - ratio;
              }

              if (time && !prevTime && !suppressEvents && !iteration) {
                _callback(this, "onStart");

                if (this._tTime !== tTime) {
                  // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
                  return this;
                }
              }

              pt = this._pt;

              while (pt) {
                pt.r(ratio, pt.d);
                pt = pt._next;
              }

              (timeline &&
                timeline.render(
                  totalTime < 0
                    ? totalTime
                    : timeline._dur * timeline._ease(time / this._dur),
                  suppressEvents,
                  force
                )) ||
                (this._startAt && (this._zTime = totalTime));

              if (this._onUpdate && !suppressEvents) {
                isNegative &&
                  _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

                _callback(this, "onUpdate");
              }

              this._repeat &&
                iteration !== prevIteration &&
                this.vars.onRepeat &&
                !suppressEvents &&
                this.parent &&
                _callback(this, "onRepeat");

              if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
                isNegative &&
                  !this._onUpdate &&
                  _rewindStartAt(this, totalTime, true, true);
                (totalTime || !dur) &&
                  ((tTime === this._tDur && this._ts > 0) ||
                    (!tTime && this._ts < 0)) &&
                  _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

                if (
                  !suppressEvents &&
                  !(isNegative && !prevTime) &&
                  (tTime || prevTime || isYoyo)
                ) {
                  // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
                  _callback(
                    this,
                    tTime === tDur ? "onComplete" : "onReverseComplete",
                    true
                  );

                  this._prom &&
                    !(tTime < tDur && this.timeScale() > 0) &&
                    this._prom();
                }
              }
            }

            return this;
          };

          _proto3.targets = function targets() {
            return this._targets;
          };

          _proto3.invalidate = function invalidate(soft) {
            // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
            (!soft || !this.vars.runBackwards) && (this._startAt = 0);
            this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
            this._ptLookup = [];
            this.timeline && this.timeline.invalidate(soft);
            return _Animation2.prototype.invalidate.call(this, soft);
          };

          _proto3.resetTo = function resetTo(
            property,
            value,
            start,
            startIsRelative,
            skipRecursion
          ) {
            _tickerActive || _ticker.wake();
            this._ts || this.play();
            var time = Math.min(
                this._dur,
                (this._dp._time - this._start) * this._ts
              ),
              ratio;
            this._initted || _initTween(this, time);
            ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
            // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
            // if (_isObject(property)) { // performance optimization
            // 	for (p in property) {
            // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
            // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
            // 		}
            // 	}
            // } else {

            if (
              _updatePropTweens(
                this,
                property,
                value,
                start,
                startIsRelative,
                ratio,
                time,
                skipRecursion
              )
            ) {
              return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
            } //}

            _alignPlayhead(this, 0);

            this.parent ||
              _addLinkedListItem(
                this._dp,
                this,
                "_first",
                "_last",
                this._dp._sort ? "_start" : 0
              );
            return this.render(0);
          };

          _proto3.kill = function kill(targets, vars) {
            if (vars === void 0) {
              vars = "all";
            }

            if (!targets && (!vars || vars === "all")) {
              this._lazy = this._pt = 0;
              return this.parent ? _interrupt(this) : this;
            }

            if (this.timeline) {
              var tDur = this.timeline.totalDuration();
              this.timeline.killTweensOf(
                targets,
                vars,
                _overwritingTween && _overwritingTween.vars.overwrite !== true
              )._first || _interrupt(this); // if nothing is left tweening, interrupt.

              this.parent &&
                tDur !== this.timeline.totalDuration() &&
                _setDuration(
                  this,
                  (this._dur * this.timeline._tDur) / tDur,
                  0,
                  1
                ); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

              return this;
            }

            var parsedTargets = this._targets,
              killingTargets = targets ? toArray(targets) : parsedTargets,
              propTweenLookup = this._ptLookup,
              firstPT = this._pt,
              overwrittenProps,
              curLookup,
              curOverwriteProps,
              props,
              p,
              pt,
              i;

            if (
              (!vars || vars === "all") &&
              _arraysMatch(parsedTargets, killingTargets)
            ) {
              vars === "all" && (this._pt = 0);
              return _interrupt(this);
            }

            overwrittenProps = this._op = this._op || [];

            if (vars !== "all") {
              //so people can pass in a comma-delimited list of property names
              if (_isString(vars)) {
                p = {};

                _forEachName(vars, function (name) {
                  return (p[name] = 1);
                });

                vars = p;
              }

              vars = _addAliasesToVars(parsedTargets, vars);
            }

            i = parsedTargets.length;

            while (i--) {
              if (~killingTargets.indexOf(parsedTargets[i])) {
                curLookup = propTweenLookup[i];

                if (vars === "all") {
                  overwrittenProps[i] = vars;
                  props = curLookup;
                  curOverwriteProps = {};
                } else {
                  curOverwriteProps = overwrittenProps[i] =
                    overwrittenProps[i] || {};
                  props = vars;
                }

                for (p in props) {
                  pt = curLookup && curLookup[p];

                  if (pt) {
                    if (!("kill" in pt.d) || pt.d.kill(p) === true) {
                      _removeLinkedListItem(this, pt, "_pt");
                    }

                    delete curLookup[p];
                  }

                  if (curOverwriteProps !== "all") {
                    curOverwriteProps[p] = 1;
                  }
                }
              }
            }

            this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

            return this;
          };

          Tween.to = function to(targets, vars) {
            return new Tween(targets, vars, arguments[2]);
          };

          Tween.from = function from(targets, vars) {
            return _createTweenType(1, arguments);
          };

          Tween.delayedCall = function delayedCall(
            delay,
            callback,
            params,
            scope
          ) {
            return new Tween(callback, 0, {
              immediateRender: false,
              lazy: false,
              overwrite: false,
              delay: delay,
              onComplete: callback,
              onReverseComplete: callback,
              onCompleteParams: params,
              onReverseCompleteParams: params,
              callbackScope: scope,
            }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
          };

          Tween.fromTo = function fromTo(targets, fromVars, toVars) {
            return _createTweenType(2, arguments);
          };

          Tween.set = function set(targets, vars) {
            vars.duration = 0;
            vars.repeatDelay || (vars.repeat = 0);
            return new Tween(targets, vars);
          };

          Tween.killTweensOf = function killTweensOf(
            targets,
            props,
            onlyActive
          ) {
            return _globalTimeline.killTweensOf(targets, props, onlyActive);
          };

          return Tween;
        })(Animation);

        _setDefaults(Tween.prototype, {
          _targets: [],
          _lazy: 0,
          _startAt: 0,
          _op: 0,
          _onInit: 0,
        }); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
        // _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
        // 	Tween.prototype[name] = function() {
        // 		let tl = new Timeline();
        // 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
        // 	}
        // });
        //for backward compatibility. Leverage the timeline calls.

        _forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
          Tween[name] = function () {
            var tl = new Timeline(),
              params = _slice.call(arguments, 0);

            params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
            return tl[name].apply(tl, params);
          };
        });
        /*
         * --------------------------------------------------------------------------------------
         * PROPTWEEN
         * --------------------------------------------------------------------------------------
         */

        var _setterPlain = function _setterPlain(target, property, value) {
            return (target[property] = value);
          },
          _setterFunc = function _setterFunc(target, property, value) {
            return target[property](value);
          },
          _setterFuncWithParam = function _setterFuncWithParam(
            target,
            property,
            value,
            data
          ) {
            return target[property](data.fp, value);
          },
          _setterAttribute = function _setterAttribute(
            target,
            property,
            value
          ) {
            return target.setAttribute(property, value);
          },
          _getSetter = function _getSetter(target, property) {
            return _isFunction(target[property])
              ? _setterFunc
              : _isUndefined(target[property]) && target.setAttribute
              ? _setterAttribute
              : _setterPlain;
          },
          _renderPlain = function _renderPlain(ratio, data) {
            return data.set(
              data.t,
              data.p,
              Math.round((data.s + data.c * ratio) * 1000000) / 1000000,
              data
            );
          },
          _renderBoolean = function _renderBoolean(ratio, data) {
            return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
          },
          _renderComplexString = function _renderComplexString(ratio, data) {
            var pt = data._pt,
              s = "";

            if (!ratio && data.b) {
              //b = beginning string
              s = data.b;
            } else if (ratio === 1 && data.e) {
              //e = ending string
              s = data.e;
            } else {
              while (pt) {
                s =
                  pt.p +
                  (pt.m
                    ? pt.m(pt.s + pt.c * ratio)
                    : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) +
                  s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

                pt = pt._next;
              }

              s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
            }

            data.set(data.t, data.p, s, data);
          },
          _renderPropTweens = function _renderPropTweens(ratio, data) {
            var pt = data._pt;

            while (pt) {
              pt.r(ratio, pt.d);
              pt = pt._next;
            }
          },
          _addPluginModifier = function _addPluginModifier(
            modifier,
            tween,
            target,
            property
          ) {
            var pt = this._pt,
              next;

            while (pt) {
              next = pt._next;
              pt.p === property && pt.modifier(modifier, tween, target);
              pt = next;
            }
          },
          _killPropTweensOf = function _killPropTweensOf(property) {
            var pt = this._pt,
              hasNonDependentRemaining,
              next;

            while (pt) {
              next = pt._next;

              if ((pt.p === property && !pt.op) || pt.op === property) {
                _removeLinkedListItem(this, pt, "_pt");
              } else if (!pt.dep) {
                hasNonDependentRemaining = 1;
              }

              pt = next;
            }

            return !hasNonDependentRemaining;
          },
          _setterWithModifier = function _setterWithModifier(
            target,
            property,
            value,
            data
          ) {
            data.mSet(
              target,
              property,
              data.m.call(data.tween, value, data.mt),
              data
            );
          },
          _sortPropTweensByPriority = function _sortPropTweensByPriority(
            parent
          ) {
            var pt = parent._pt,
              next,
              pt2,
              first,
              last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

            while (pt) {
              next = pt._next;
              pt2 = first;

              while (pt2 && pt2.pr > pt.pr) {
                pt2 = pt2._next;
              }

              if ((pt._prev = pt2 ? pt2._prev : last)) {
                pt._prev._next = pt;
              } else {
                first = pt;
              }

              if ((pt._next = pt2)) {
                pt2._prev = pt;
              } else {
                last = pt;
              }

              pt = next;
            }

            parent._pt = first;
          }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)

        var PropTween = /*#__PURE__*/ (function () {
          function PropTween(
            next,
            target,
            prop,
            start,
            change,
            renderer,
            data,
            setter,
            priority
          ) {
            this.t = target;
            this.s = start;
            this.c = change;
            this.p = prop;
            this.r = renderer || _renderPlain;
            this.d = data || this;
            this.set = setter || _setterPlain;
            this.pr = priority || 0;
            this._next = next;

            if (next) {
              next._prev = this;
            }
          }

          var _proto4 = PropTween.prototype;

          _proto4.modifier = function modifier(func, tween, target) {
            this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

            this.set = _setterWithModifier;
            this.m = func;
            this.mt = target; //modifier target

            this.tween = tween;
          };

          return PropTween;
        })(); //Initialization tasks

        _forEachName(
          _callbackNames +
            "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",
          function (name) {
            return (_reservedProps[name] = 1);
          }
        );

        _globals.TweenMax = _globals.TweenLite = Tween;
        _globals.TimelineLite = _globals.TimelineMax = Timeline;
        _globalTimeline = new Timeline({
          sortChildren: false,
          defaults: _defaults,
          autoRemoveChildren: true,
          id: "root",
          smoothChildTiming: true,
        });
        _config.stringFilter = _colorStringFilter;

        var _media = [],
          _listeners = {},
          _emptyArray = [],
          _lastMediaTime = 0,
          _contextID = 0,
          _dispatch = function _dispatch(type) {
            return (_listeners[type] || _emptyArray).map(function (f) {
              return f();
            });
          },
          _onMediaChange = function _onMediaChange() {
            var time = Date.now(),
              matches = [];

            if (time - _lastMediaTime > 2) {
              _dispatch("matchMediaInit");

              _media.forEach(function (c) {
                var queries = c.queries,
                  conditions = c.conditions,
                  match,
                  p,
                  anyMatch,
                  toggled;

                for (p in queries) {
                  match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.

                  match && (anyMatch = 1);

                  if (match !== conditions[p]) {
                    conditions[p] = match;
                    toggled = 1;
                  }
                }

                if (toggled) {
                  c.revert();
                  anyMatch && matches.push(c);
                }
              });

              _dispatch("matchMediaRevert");

              matches.forEach(function (c) {
                return c.onMatch(c, function (func) {
                  return c.add(null, func);
                });
              });
              _lastMediaTime = time;

              _dispatch("matchMedia");
            }
          };

        var Context = /*#__PURE__*/ (function () {
          function Context(func, scope) {
            this.selector = scope && selector(scope);
            this.data = [];
            this._r = []; // returned/cleanup functions

            this.isReverted = false;
            this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely

            func && this.add(func);
          }

          var _proto5 = Context.prototype;

          _proto5.add = function add(name, func, scope) {
            // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
            // if (name && _isFunction(name.revert)) {
            // 	this.data.push(name);
            // 	return (name._ctx = this);
            // }
            if (_isFunction(name)) {
              scope = func;
              func = name;
              name = _isFunction;
            }

            var self = this,
              f = function f() {
                var prev = _context,
                  prevSelector = self.selector,
                  result;
                prev && prev !== self && prev.data.push(self);
                scope && (self.selector = selector(scope));
                _context = self;
                result = func.apply(self, arguments);
                _isFunction(result) && self._r.push(result);
                _context = prev;
                self.selector = prevSelector;
                self.isReverted = false;
                return result;
              };

            self.last = f;
            return name === _isFunction
              ? f(self, function (func) {
                  return self.add(null, func);
                })
              : name
              ? (self[name] = f)
              : f;
          };

          _proto5.ignore = function ignore(func) {
            var prev = _context;
            _context = null;
            func(this);
            _context = prev;
          };

          _proto5.getTweens = function getTweens() {
            var a = [];
            this.data.forEach(function (e) {
              return e instanceof Context
                ? a.push.apply(a, e.getTweens())
                : e instanceof Tween &&
                    !(e.parent && e.parent.data === "nested") &&
                    a.push(e);
            });
            return a;
          };

          _proto5.clear = function clear() {
            this._r.length = this.data.length = 0;
          };

          _proto5.kill = function kill(revert, matchMedia) {
            var _this4 = this;

            if (revert) {
              (function () {
                var tweens = _this4.getTweens(),
                  i = _this4.data.length,
                  t;

                while (i--) {
                  // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
                  t = _this4.data[i];

                  if (t.data === "isFlip") {
                    t.revert();
                    t.getChildren(true, true, false).forEach(function (tween) {
                      return tweens.splice(tweens.indexOf(tween), 1);
                    });
                  }
                } // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort

                tweens
                  .map(function (t) {
                    return {
                      g:
                        t._dur ||
                        t._delay ||
                        (t._sat && !t._sat.vars.immediateRender)
                          ? t.globalTime(0)
                          : -Infinity,
                      t: t,
                    };
                  })
                  .sort(function (a, b) {
                    return b.g - a.g || -Infinity;
                  })
                  .forEach(function (o) {
                    return o.t.revert(revert);
                  }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.

                i = _this4.data.length;

                while (i--) {
                  // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first
                  t = _this4.data[i];

                  if (t instanceof Timeline) {
                    if (t.data !== "nested") {
                      t.scrollTrigger && t.scrollTrigger.revert();
                      t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
                    }
                  } else {
                    !(t instanceof Tween) && t.revert && t.revert(revert);
                  }
                }

                _this4._r.forEach(function (f) {
                  return f(revert, _this4);
                });

                _this4.isReverted = true;
              })();
            } else {
              this.data.forEach(function (e) {
                return e.kill && e.kill();
              });
            }

            this.clear();

            if (matchMedia) {
              var i = _media.length;

              while (i--) {
                // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
                _media[i].id === this.id && _media.splice(i, 1);
              }
            }
          };

          _proto5.revert = function revert(config) {
            this.kill(config || {});
          };

          return Context;
        })();

        var MatchMedia = /*#__PURE__*/ (function () {
          function MatchMedia(scope) {
            this.contexts = [];
            this.scope = scope;
            _context && _context.data.push(this);
          }

          var _proto6 = MatchMedia.prototype;

          _proto6.add = function add(conditions, func, scope) {
            _isObject(conditions) ||
              (conditions = {
                matches: conditions,
              });
            var context = new Context(0, scope || this.scope),
              cond = (context.conditions = {}),
              mq,
              p,
              active;
            _context &&
              !context.selector &&
              (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()

            this.contexts.push(context);
            func = context.add("onMatch", func);
            context.queries = conditions;

            for (p in conditions) {
              if (p === "all") {
                active = 1;
              } else {
                mq = _win.matchMedia(conditions[p]);

                if (mq) {
                  _media.indexOf(context) < 0 && _media.push(context);
                  (cond[p] = mq.matches) && (active = 1);
                  mq.addListener
                    ? mq.addListener(_onMediaChange)
                    : mq.addEventListener("change", _onMediaChange);
                }
              }
            }

            active &&
              func(context, function (f) {
                return context.add(null, f);
              });
            return this;
          }; // refresh() {
          // 	let time = _lastMediaTime,
          // 		media = _media;
          // 	_lastMediaTime = -1;
          // 	_media = this.contexts;
          // 	_onMediaChange();
          // 	_lastMediaTime = time;
          // 	_media = media;
          // }

          _proto6.revert = function revert(config) {
            this.kill(config || {});
          };

          _proto6.kill = function kill(revert) {
            this.contexts.forEach(function (c) {
              return c.kill(revert, true);
            });
          };

          return MatchMedia;
        })();
        /*
         * --------------------------------------------------------------------------------------
         * GSAP
         * --------------------------------------------------------------------------------------
         */

        var _gsap = {
          registerPlugin: function registerPlugin() {
            for (
              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2] = arguments[_key2];
            }

            args.forEach(function (config) {
              return _createPlugin(config);
            });
          },
          timeline: function timeline(vars) {
            return new Timeline(vars);
          },
          getTweensOf: function getTweensOf(targets, onlyActive) {
            return _globalTimeline.getTweensOf(targets, onlyActive);
          },
          getProperty: function getProperty(target, property, unit, uncache) {
            _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

            var getter = _getCache(target || {}).get,
              format = unit ? _passThrough : _numericIfPossible;

            unit === "native" && (unit = "");
            return !target
              ? target
              : !property
              ? function (property, unit, uncache) {
                  return format(
                    ((_plugins[property] && _plugins[property].get) || getter)(
                      target,
                      property,
                      unit,
                      uncache
                    )
                  );
                }
              : format(
                  ((_plugins[property] && _plugins[property].get) || getter)(
                    target,
                    property,
                    unit,
                    uncache
                  )
                );
          },
          quickSetter: function quickSetter(target, property, unit) {
            target = toArray(target);

            if (target.length > 1) {
              var setters = target.map(function (t) {
                  return gsap.quickSetter(t, property, unit);
                }),
                l = setters.length;
              return function (value) {
                var i = l;

                while (i--) {
                  setters[i](value);
                }
              };
            }

            target = target[0] || {};

            var Plugin = _plugins[property],
              cache = _getCache(target),
              p =
                (cache.harness && (cache.harness.aliases || {})[property]) ||
                property,
              // in case it's an alias, like "rotate" for "rotation".
              setter = Plugin
                ? function (value) {
                    var p = new Plugin();
                    _quickTween._pt = 0;
                    p.init(
                      target,
                      unit ? value + unit : value,
                      _quickTween,
                      0,
                      [target]
                    );
                    p.render(1, p);
                    _quickTween._pt && _renderPropTweens(1, _quickTween);
                  }
                : cache.set(target, p);

            return Plugin
              ? setter
              : function (value) {
                  return setter(
                    target,
                    p,
                    unit ? value + unit : value,
                    cache,
                    1
                  );
                };
          },
          quickTo: function quickTo(target, property, vars) {
            var _merge2;

            var tween = gsap.to(
                target,
                _merge(
                  ((_merge2 = {}),
                  (_merge2[property] = "+=0.1"),
                  (_merge2.paused = true),
                  _merge2),
                  vars || {}
                )
              ),
              func = function func(value, start, startIsRelative) {
                return tween.resetTo(property, value, start, startIsRelative);
              };

            func.tween = tween;
            return func;
          },
          isTweening: function isTweening(targets) {
            return _globalTimeline.getTweensOf(targets, true).length > 0;
          },
          defaults: function defaults(value) {
            value &&
              value.ease &&
              (value.ease = _parseEase(value.ease, _defaults.ease));
            return _mergeDeep(_defaults, value || {});
          },
          config: function config(value) {
            return _mergeDeep(_config, value || {});
          },
          registerEffect: function registerEffect(_ref3) {
            var name = _ref3.name,
              effect = _ref3.effect,
              plugins = _ref3.plugins,
              defaults = _ref3.defaults,
              extendTimeline = _ref3.extendTimeline;
            (plugins || "").split(",").forEach(function (pluginName) {
              return (
                pluginName &&
                !_plugins[pluginName] &&
                !_globals[pluginName] &&
                _warn(name + " effect requires " + pluginName + " plugin.")
              );
            });

            _effects[name] = function (targets, vars, tl) {
              return effect(
                toArray(targets),
                _setDefaults(vars || {}, defaults),
                tl
              );
            };

            if (extendTimeline) {
              Timeline.prototype[name] = function (targets, vars, position) {
                return this.add(
                  _effects[name](
                    targets,
                    _isObject(vars) ? vars : (position = vars) && {},
                    this
                  ),
                  position
                );
              };
            }
          },
          registerEase: function registerEase(name, ease) {
            _easeMap[name] = _parseEase(ease);
          },
          parseEase: function parseEase(ease, defaultEase) {
            return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
          },
          getById: function getById(id) {
            return _globalTimeline.getById(id);
          },
          exportRoot: function exportRoot(vars, includeDelayedCalls) {
            if (vars === void 0) {
              vars = {};
            }

            var tl = new Timeline(vars),
              child,
              next;
            tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

            _globalTimeline.remove(tl);

            tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

            tl._time = tl._tTime = _globalTimeline._time;
            child = _globalTimeline._first;

            while (child) {
              next = child._next;

              if (
                includeDelayedCalls ||
                !(
                  !child._dur &&
                  child instanceof Tween &&
                  child.vars.onComplete === child._targets[0]
                )
              ) {
                _addToTimeline(tl, child, child._start - child._delay);
              }

              child = next;
            }

            _addToTimeline(_globalTimeline, tl, 0);

            return tl;
          },
          context: function context(func, scope) {
            return func ? new Context(func, scope) : _context;
          },
          matchMedia: function matchMedia(scope) {
            return new MatchMedia(scope);
          },
          matchMediaRefresh: function matchMediaRefresh() {
            return (
              _media.forEach(function (c) {
                var cond = c.conditions,
                  found,
                  p;

                for (p in cond) {
                  if (cond[p]) {
                    cond[p] = false;
                    found = 1;
                  }
                }

                found && c.revert();
              }) || _onMediaChange()
            );
          },
          addEventListener: function addEventListener(type, callback) {
            var a = _listeners[type] || (_listeners[type] = []);
            ~a.indexOf(callback) || a.push(callback);
          },
          removeEventListener: function removeEventListener(type, callback) {
            var a = _listeners[type],
              i = a && a.indexOf(callback);
            i >= 0 && a.splice(i, 1);
          },
          utils: {
            wrap: wrap,
            wrapYoyo: wrapYoyo,
            distribute: distribute,
            random: random,
            snap: snap,
            normalize: normalize,
            getUnit: getUnit,
            clamp: clamp,
            splitColor: splitColor,
            toArray: toArray,
            selector: selector,
            mapRange: mapRange,
            pipe: pipe,
            unitize: unitize,
            interpolate: interpolate,
            shuffle: shuffle,
          },
          install: _install,
          effects: _effects,
          ticker: _ticker,
          updateRoot: Timeline.updateRoot,
          plugins: _plugins,
          globalTimeline: _globalTimeline,
          core: {
            PropTween: PropTween,
            globals: _addGlobal,
            Tween: Tween,
            Timeline: Timeline,
            Animation: Animation,
            getCache: _getCache,
            _removeLinkedListItem: _removeLinkedListItem,
            reverting: function reverting() {
              return _reverting;
            },
            context: function context(toAdd) {
              if (toAdd && _context) {
                _context.data.push(toAdd);

                toAdd._ctx = _context;
              }

              return _context;
            },
            suppressOverwrites: function suppressOverwrites(value) {
              return (_suppressOverwrites = value);
            },
          },
        };

        _forEachName(
          "to,from,fromTo,delayedCall,set,killTweensOf",
          function (name) {
            return (_gsap[name] = Tween[name]);
          }
        );

        _ticker.add(Timeline.updateRoot);

        _quickTween = _gsap.to(
          {},
          {
            duration: 0,
          }
        ); // ---- EXTRA PLUGINS --------------------------------------------------------

        var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
            var pt = plugin._pt;

            while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
              pt = pt._next;
            }

            return pt;
          },
          _addModifiers = function _addModifiers(tween, modifiers) {
            var targets = tween._targets,
              p,
              i,
              pt;

            for (p in modifiers) {
              i = targets.length;

              while (i--) {
                pt = tween._ptLookup[i][p];

                if (pt && (pt = pt.d)) {
                  if (pt._pt) {
                    // is a plugin
                    pt = _getPluginPropTween(pt, p);
                  }

                  pt &&
                    pt.modifier &&
                    pt.modifier(modifiers[p], tween, targets[i], p);
                }
              }
            }
          },
          _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
            return {
              name: name,
              rawVars: 1,
              //don't pre-process function-based values or "random()" strings.
              init: function init(target, vars, tween) {
                tween._onInit = function (tween) {
                  var temp, p;

                  if (_isString(vars)) {
                    temp = {};

                    _forEachName(vars, function (name) {
                      return (temp[name] = 1);
                    }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.

                    vars = temp;
                  }

                  if (modifier) {
                    temp = {};

                    for (p in vars) {
                      temp[p] = modifier(vars[p]);
                    }

                    vars = temp;
                  }

                  _addModifiers(tween, vars);
                };
              },
            };
          }; //register core plugins

        var gsap =
          _gsap.registerPlugin(
            {
              name: "attr",
              init: function init(target, vars, tween, index, targets) {
                var p, pt, v;
                this.tween = tween;

                for (p in vars) {
                  v = target.getAttribute(p) || "";
                  pt = this.add(
                    target,
                    "setAttribute",
                    (v || 0) + "",
                    vars[p],
                    index,
                    targets,
                    0,
                    0,
                    p
                  );
                  pt.op = p;
                  pt.b = v; // record the beginning value so we can revert()

                  this._props.push(p);
                }
              },
              render: function render(ratio, data) {
                var pt = data._pt;

                while (pt) {
                  _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)

                  pt = pt._next;
                }
              },
            },
            {
              name: "endArray",
              init: function init(target, value) {
                var i = value.length;

                while (i--) {
                  this.add(
                    target,
                    i,
                    target[i] || 0,
                    value[i],
                    0,
                    0,
                    0,
                    0,
                    0,
                    1
                  );
                }
              },
            },
            _buildModifierPlugin("roundProps", _roundModifier),
            _buildModifierPlugin("modifiers"),
            _buildModifierPlugin("snap", snap)
          ) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

        Tween.version = Timeline.version = gsap.version = "3.12.5";
        _coreReady = 1;
        _windowExists() && _wake();
        var Power0 = _easeMap.Power0,
          Power1 = _easeMap.Power1,
          Power2 = _easeMap.Power2,
          Power3 = _easeMap.Power3,
          Power4 = _easeMap.Power4,
          Linear = _easeMap.Linear,
          Quad = _easeMap.Quad,
          Cubic = _easeMap.Cubic,
          Quart = _easeMap.Quart,
          Quint = _easeMap.Quint,
          Strong = _easeMap.Strong,
          Elastic = _easeMap.Elastic,
          Back = _easeMap.Back,
          SteppedEase = _easeMap.SteppedEase,
          Bounce = _easeMap.Bounce,
          Sine = _easeMap.Sine,
          Expo = _easeMap.Expo,
          Circ = _easeMap.Circ;

        //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.

        /***/
      },

    /***/ "./node_modules/gsap/index.js":
      /*!************************************!*\
  !*** ./node_modules/gsap/index.js ***!
  \************************************/
      /*! exports provided: gsap, default, CSSPlugin, TweenMax, TweenLite, TimelineMax, TimelineLite, Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "gsap",
          function () {
            return gsapWithCSS;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return gsapWithCSS;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "TweenMax",
          function () {
            return TweenMaxWithCSS;
          }
        );
        /* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js"
          );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TweenLite",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["TweenLite"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TimelineMax",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["TimelineMax"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TimelineLite",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["TimelineLite"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Power0",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Power0"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Power1",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Power1"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Power2",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Power2"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Power3",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Power3"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Power4",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Power4"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Linear",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Linear"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Quad",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Quad"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Cubic",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Cubic"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Quart",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Quart"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Quint",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Quint"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Strong",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Strong"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Elastic",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Elastic"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Back",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Back"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "SteppedEase",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["SteppedEase"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Bounce",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Bounce"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Sine",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Sine"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Expo",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Expo"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Circ",
          function () {
            return _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["Circ"];
          }
        );

        /* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./CSSPlugin.js */ "./node_modules/gsap/CSSPlugin.js"
          );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "CSSPlugin",
          function () {
            return _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__["CSSPlugin"];
          }
        );

        var gsapWithCSS =
            _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"].registerPlugin(
              _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__["CSSPlugin"]
            ) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__["gsap"],
          // to protect from tree shaking
          TweenMaxWithCSS = gsapWithCSS.core.Tween;

        /***/
      },

    /***/ "./node_modules/ieee754/index.js":
      /*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
      /*! no static exports found */
      /***/ function (module, exports) {
        /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
          var e, m;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var nBits = -7;
          var i = isLE ? nBytes - 1 : 0;
          var d = isLE ? -1 : 1;
          var s = buffer[offset + i];

          i += d;

          e = s & ((1 << -nBits) - 1);
          s >>= -nBits;
          nBits += eLen;
          for (
            ;
            nBits > 0;
            e = e * 256 + buffer[offset + i], i += d, nBits -= 8
          ) {}

          m = e & ((1 << -nBits) - 1);
          e >>= -nBits;
          nBits += mLen;
          for (
            ;
            nBits > 0;
            m = m * 256 + buffer[offset + i], i += d, nBits -= 8
          ) {}

          if (e === 0) {
            e = 1 - eBias;
          } else if (e === eMax) {
            return m ? NaN : (s ? -1 : 1) * Infinity;
          } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };

        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var i = isLE ? 0 : nBytes - 1;
          var d = isLE ? 1 : -1;
          var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

          value = Math.abs(value);

          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
          } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
            }
            if (e + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
              e++;
              c /= 2;
            }

            if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
            }
          }

          for (
            ;
            mLen >= 8;
            buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
          ) {}

          e = (e << mLen) | m;
          eLen += mLen;
          for (
            ;
            eLen > 0;
            buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
          ) {}

          buffer[offset + i - d] |= s * 128;
        };

        /***/
      },

    /***/ "./node_modules/isarray/index.js":
      /*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
      /*! no static exports found */
      /***/ function (module, exports) {
        var toString = {}.toString;

        module.exports =
          Array.isArray ||
          function (arr) {
            return toString.call(arr) == "[object Array]";
          };

        /***/
      },

    /***/ "./node_modules/jquery/dist/jquery.js":
      /*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
      /*! no static exports found */
      /***/ function (module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*!
         * jQuery JavaScript Library v3.7.1
         * https://jquery.com/
         *
         * Copyright OpenJS Foundation and other contributors
         * Released under the MIT license
         * https://jquery.org/license
         *
         * Date: 2023-08-28T13:37Z
         */
        (function (global, factory) {
          "use strict";

          if (true && typeof module.exports === "object") {
            // For CommonJS and CommonJS-like environments where a proper `window`
            // is present, execute the factory and get jQuery.
            // For environments that do not have a `window` with a `document`
            // (such as Node.js), expose a factory as module.exports.
            // This accentuates the need for the creation of a real `window`.
            // e.g. var jQuery = require("jquery")(window);
            // See ticket trac-14549 for more info.
            module.exports = global.document
              ? factory(global, true)
              : function (w) {
                  if (!w.document) {
                    throw new Error("jQuery requires a window with a document");
                  }
                  return factory(w);
                };
          } else {
            factory(global);
          }

          // Pass this if window is not defined yet
        })(
          typeof window !== "undefined" ? window : this,
          function (window, noGlobal) {
            // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
            // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
            // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
            // enough that all such attempts are guarded in a try block.
            "use strict";

            var arr = [];

            var getProto = Object.getPrototypeOf;

            var slice = arr.slice;

            var flat = arr.flat
              ? function (array) {
                  return arr.flat.call(array);
                }
              : function (array) {
                  return arr.concat.apply([], array);
                };

            var push = arr.push;

            var indexOf = arr.indexOf;

            var class2type = {};

            var toString = class2type.toString;

            var hasOwn = class2type.hasOwnProperty;

            var fnToString = hasOwn.toString;

            var ObjectFunctionString = fnToString.call(Object);

            var support = {};

            var isFunction = function isFunction(obj) {
              // Support: Chrome <=57, Firefox <=52
              // In some browsers, typeof returns "function" for HTML <object> elements
              // (i.e., `typeof document.createElement( "object" ) === "function"`).
              // We don't want to classify *any* DOM node as a function.
              // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
              // Plus for old WebKit, typeof returns "function" for HTML collections
              // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
              return (
                typeof obj === "function" &&
                typeof obj.nodeType !== "number" &&
                typeof obj.item !== "function"
              );
            };

            var isWindow = function isWindow(obj) {
              return obj != null && obj === obj.window;
            };

            var document = window.document;

            var preservedScriptAttributes = {
              type: true,
              src: true,
              nonce: true,
              noModule: true,
            };

            function DOMEval(code, node, doc) {
              doc = doc || document;

              var i,
                val,
                script = doc.createElement("script");

              script.text = code;
              if (node) {
                for (i in preservedScriptAttributes) {
                  // Support: Firefox 64+, Edge 18+
                  // Some browsers don't support the "nonce" property on scripts.
                  // On the other hand, just using `getAttribute` is not enough as
                  // the `nonce` attribute is reset to an empty string whenever it
                  // becomes browsing-context connected.
                  // See https://github.com/whatwg/html/issues/2369
                  // See https://html.spec.whatwg.org/#nonce-attributes
                  // The `node.getAttribute` check was added for the sake of
                  // `jQuery.globalEval` so that it can fake a nonce-containing node
                  // via an object.
                  val = node[i] || (node.getAttribute && node.getAttribute(i));
                  if (val) {
                    script.setAttribute(i, val);
                  }
                }
              }
              doc.head.appendChild(script).parentNode.removeChild(script);
            }

            function toType(obj) {
              if (obj == null) {
                return obj + "";
              }

              // Support: Android <=2.3 only (functionish RegExp)
              return typeof obj === "object" || typeof obj === "function"
                ? class2type[toString.call(obj)] || "object"
                : typeof obj;
            }
            /* global Symbol */
            // Defining this global in .eslintrc.json would create a danger of using the global
            // unguarded in another place, it seems safer to define global only for this module

            var version = "3.7.1",
              rhtmlSuffix = /HTML$/i,
              // Define a local copy of jQuery
              jQuery = function (selector, context) {
                // The jQuery object is actually just the init constructor 'enhanced'
                // Need init if jQuery is called (just allow error to be thrown if not included)
                return new jQuery.fn.init(selector, context);
              };

            jQuery.fn = jQuery.prototype = {
              // The current version of jQuery being used
              jquery: version,

              constructor: jQuery,

              // The default length of a jQuery object is 0
              length: 0,

              toArray: function () {
                return slice.call(this);
              },

              // Get the Nth element in the matched element set OR
              // Get the whole matched element set as a clean array
              get: function (num) {
                // Return all the elements in a clean array
                if (num == null) {
                  return slice.call(this);
                }

                // Return just the one element from the set
                return num < 0 ? this[num + this.length] : this[num];
              },

              // Take an array of elements and push it onto the stack
              // (returning the new matched element set)
              pushStack: function (elems) {
                // Build a new jQuery matched element set
                var ret = jQuery.merge(this.constructor(), elems);

                // Add the old object onto the stack (as a reference)
                ret.prevObject = this;

                // Return the newly-formed element set
                return ret;
              },

              // Execute a callback for every element in the matched set.
              each: function (callback) {
                return jQuery.each(this, callback);
              },

              map: function (callback) {
                return this.pushStack(
                  jQuery.map(this, function (elem, i) {
                    return callback.call(elem, i, elem);
                  })
                );
              },

              slice: function () {
                return this.pushStack(slice.apply(this, arguments));
              },

              first: function () {
                return this.eq(0);
              },

              last: function () {
                return this.eq(-1);
              },

              even: function () {
                return this.pushStack(
                  jQuery.grep(this, function (_elem, i) {
                    return (i + 1) % 2;
                  })
                );
              },

              odd: function () {
                return this.pushStack(
                  jQuery.grep(this, function (_elem, i) {
                    return i % 2;
                  })
                );
              },

              eq: function (i) {
                var len = this.length,
                  j = +i + (i < 0 ? len : 0);
                return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
              },

              end: function () {
                return this.prevObject || this.constructor();
              },

              // For internal use only.
              // Behaves like an Array's method, not like a jQuery method.
              push: push,
              sort: arr.sort,
              splice: arr.splice,
            };

            jQuery.extend = jQuery.fn.extend = function () {
              var options,
                name,
                src,
                copy,
                copyIsArray,
                clone,
                target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;

              // Handle a deep copy situation
              if (typeof target === "boolean") {
                deep = target;

                // Skip the boolean and the target
                target = arguments[i] || {};
                i++;
              }

              // Handle case when target is a string or something (possible in deep copy)
              if (typeof target !== "object" && !isFunction(target)) {
                target = {};
              }

              // Extend jQuery itself if only one argument is passed
              if (i === length) {
                target = this;
                i--;
              }

              for (; i < length; i++) {
                // Only deal with non-null/undefined values
                if ((options = arguments[i]) != null) {
                  // Extend the base object
                  for (name in options) {
                    copy = options[name];

                    // Prevent Object.prototype pollution
                    // Prevent never-ending loop
                    if (name === "__proto__" || target === copy) {
                      continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (
                      deep &&
                      copy &&
                      (jQuery.isPlainObject(copy) ||
                        (copyIsArray = Array.isArray(copy)))
                    ) {
                      src = target[name];

                      // Ensure proper type for the source value
                      if (copyIsArray && !Array.isArray(src)) {
                        clone = [];
                      } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                        clone = {};
                      } else {
                        clone = src;
                      }
                      copyIsArray = false;

                      // Never move original objects, clone them
                      target[name] = jQuery.extend(deep, clone, copy);

                      // Don't bring in undefined values
                    } else if (copy !== undefined) {
                      target[name] = copy;
                    }
                  }
                }
              }

              // Return the modified object
              return target;
            };

            jQuery.extend({
              // Unique for each copy of jQuery on the page
              expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

              // Assume jQuery is ready without the ready module
              isReady: true,

              error: function (msg) {
                throw new Error(msg);
              },

              noop: function () {},

              isPlainObject: function (obj) {
                var proto, Ctor;

                // Detect obvious negatives
                // Use toString instead of jQuery.type to catch host objects
                if (!obj || toString.call(obj) !== "[object Object]") {
                  return false;
                }

                proto = getProto(obj);

                // Objects with no prototype (e.g., `Object.create( null )`) are plain
                if (!proto) {
                  return true;
                }

                // Objects with prototype are plain iff they were constructed by a global Object function
                Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
                return (
                  typeof Ctor === "function" &&
                  fnToString.call(Ctor) === ObjectFunctionString
                );
              },

              isEmptyObject: function (obj) {
                var name;

                for (name in obj) {
                  return false;
                }
                return true;
              },

              // Evaluates a script in a provided context; falls back to the global one
              // if not specified.
              globalEval: function (code, options, doc) {
                DOMEval(code, { nonce: options && options.nonce }, doc);
              },

              each: function (obj, callback) {
                var length,
                  i = 0;

                if (isArrayLike(obj)) {
                  length = obj.length;
                  for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                      break;
                    }
                  }
                } else {
                  for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                      break;
                    }
                  }
                }

                return obj;
              },

              // Retrieve the text value of an array of DOM nodes
              text: function (elem) {
                var node,
                  ret = "",
                  i = 0,
                  nodeType = elem.nodeType;

                if (!nodeType) {
                  // If no nodeType, this is expected to be an array
                  while ((node = elem[i++])) {
                    // Do not traverse comment nodes
                    ret += jQuery.text(node);
                  }
                }
                if (nodeType === 1 || nodeType === 11) {
                  return elem.textContent;
                }
                if (nodeType === 9) {
                  return elem.documentElement.textContent;
                }
                if (nodeType === 3 || nodeType === 4) {
                  return elem.nodeValue;
                }

                // Do not include comment or processing instruction nodes

                return ret;
              },

              // results is for internal usage only
              makeArray: function (arr, results) {
                var ret = results || [];

                if (arr != null) {
                  if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
                  } else {
                    push.call(ret, arr);
                  }
                }

                return ret;
              },

              inArray: function (elem, arr, i) {
                return arr == null ? -1 : indexOf.call(arr, elem, i);
              },

              isXMLDoc: function (elem) {
                var namespace = elem && elem.namespaceURI,
                  docElem =
                    elem && (elem.ownerDocument || elem).documentElement;

                // Assume HTML when documentElement doesn't yet exist, such as inside
                // document fragments.
                return !rhtmlSuffix.test(
                  namespace || (docElem && docElem.nodeName) || "HTML"
                );
              },

              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              merge: function (first, second) {
                var len = +second.length,
                  j = 0,
                  i = first.length;

                for (; j < len; j++) {
                  first[i++] = second[j];
                }

                first.length = i;

                return first;
              },

              grep: function (elems, callback, invert) {
                var callbackInverse,
                  matches = [],
                  i = 0,
                  length = elems.length,
                  callbackExpect = !invert;

                // Go through the array, only saving the items
                // that pass the validator function
                for (; i < length; i++) {
                  callbackInverse = !callback(elems[i], i);
                  if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                  }
                }

                return matches;
              },

              // arg is for internal usage only
              map: function (elems, callback, arg) {
                var length,
                  value,
                  i = 0,
                  ret = [];

                // Go through the array, translating each of the items to their new values
                if (isArrayLike(elems)) {
                  length = elems.length;
                  for (; i < length; i++) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                      ret.push(value);
                    }
                  }

                  // Go through every key on the object,
                } else {
                  for (i in elems) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                      ret.push(value);
                    }
                  }
                }

                // Flatten any nested arrays
                return flat(ret);
              },

              // A global GUID counter for objects
              guid: 1,

              // jQuery.support is not used in Core but other projects attach their
              // properties to it so it needs to exist.
              support: support,
            });

            if (typeof Symbol === "function") {
              jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
            }

            // Populate the class2type map
            jQuery.each(
              "Boolean Number String Function Array Date RegExp Object Error Symbol".split(
                " "
              ),
              function (_i, name) {
                class2type["[object " + name + "]"] = name.toLowerCase();
              }
            );

            function isArrayLike(obj) {
              // Support: real iOS 8.2 only (not reproducible in simulator)
              // `in` check used to prevent JIT error (gh-2145)
              // hasOwn isn't used here due to false negatives
              // regarding Nodelist length in IE
              var length = !!obj && "length" in obj && obj.length,
                type = toType(obj);

              if (isFunction(obj) || isWindow(obj)) {
                return false;
              }

              return (
                type === "array" ||
                length === 0 ||
                (typeof length === "number" && length > 0 && length - 1 in obj)
              );
            }

            function nodeName(elem, name) {
              return (
                elem.nodeName &&
                elem.nodeName.toLowerCase() === name.toLowerCase()
              );
            }
            var pop = arr.pop;

            var sort = arr.sort;

            var splice = arr.splice;

            var whitespace = "[\\x20\\t\\r\\n\\f]";

            var rtrimCSS = new RegExp(
              "^" +
                whitespace +
                "+|((?:^|[^\\\\])(?:\\\\.)*)" +
                whitespace +
                "+$",
              "g"
            );

            // Note: an element does not contain itself
            jQuery.contains = function (a, b) {
              var bup = b && b.parentNode;

              return (
                a === bup ||
                !!(
                  bup &&
                  bup.nodeType === 1 &&
                  // Support: IE 9 - 11+
                  // IE doesn't have `contains` on SVG.
                  (a.contains
                    ? a.contains(bup)
                    : a.compareDocumentPosition &&
                      a.compareDocumentPosition(bup) & 16)
                )
              );
            };

            // CSS string/identifier serialization
            // https://drafts.csswg.org/cssom/#common-serializing-idioms
            var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

            function fcssescape(ch, asCodePoint) {
              if (asCodePoint) {
                // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                if (ch === "\0") {
                  return "\uFFFD";
                }

                // Control characters and (dependent upon position) numbers get escaped as code points
                return (
                  ch.slice(0, -1) +
                  "\\" +
                  ch.charCodeAt(ch.length - 1).toString(16) +
                  " "
                );
              }

              // Other potentially-special ASCII characters get backslash-escaped
              return "\\" + ch;
            }

            jQuery.escapeSelector = function (sel) {
              return (sel + "").replace(rcssescape, fcssescape);
            };

            var preferredDoc = document,
              pushNative = push;

            (function () {
              var i,
                Expr,
                outermostContext,
                sortInput,
                hasDuplicate,
                push = pushNative,
                // Local document vars
                document,
                documentElement,
                documentIsHTML,
                rbuggyQSA,
                matches,
                // Instance-specific data
                expando = jQuery.expando,
                dirruns = 0,
                done = 0,
                classCache = createCache(),
                tokenCache = createCache(),
                compilerCache = createCache(),
                nonnativeSelectorCache = createCache(),
                sortOrder = function (a, b) {
                  if (a === b) {
                    hasDuplicate = true;
                  }
                  return 0;
                },
                booleans =
                  "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" +
                  "loop|multiple|open|readonly|required|scoped",
                // Regular expressions

                // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
                identifier =
                  "(?:\\\\[\\da-fA-F]{1,6}" +
                  whitespace +
                  "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
                // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
                attributes =
                  "\\[" +
                  whitespace +
                  "*(" +
                  identifier +
                  ")(?:" +
                  whitespace +
                  // Operator (capture 2)
                  "*([*^$|!~]?=)" +
                  whitespace +
                  // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
                  "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
                  identifier +
                  "))|)" +
                  whitespace +
                  "*\\]",
                pseudos =
                  ":(" +
                  identifier +
                  ")(?:\\((" +
                  // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                  // 1. quoted (capture 3; capture 4 or capture 5)
                  "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                  // 2. simple (capture 6)
                  "((?:\\\\.|[^\\\\()[\\]]|" +
                  attributes +
                  ")*)|" +
                  // 3. anything else (capture 2)
                  ".*" +
                  ")\\)|)",
                // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                rwhitespace = new RegExp(whitespace + "+", "g"),
                rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                rleadingCombinator = new RegExp(
                  "^" +
                    whitespace +
                    "*([>+~]|" +
                    whitespace +
                    ")" +
                    whitespace +
                    "*"
                ),
                rdescend = new RegExp(whitespace + "|>"),
                rpseudo = new RegExp(pseudos),
                ridentifier = new RegExp("^" + identifier + "$"),
                matchExpr = {
                  ID: new RegExp("^#(" + identifier + ")"),
                  CLASS: new RegExp("^\\.(" + identifier + ")"),
                  TAG: new RegExp("^(" + identifier + "|[*])"),
                  ATTR: new RegExp("^" + attributes),
                  PSEUDO: new RegExp("^" + pseudos),
                  CHILD: new RegExp(
                    "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
                      whitespace +
                      "*(even|odd|(([+-]|)(\\d*)n|)" +
                      whitespace +
                      "*(?:([+-]|)" +
                      whitespace +
                      "*(\\d+)|))" +
                      whitespace +
                      "*\\)|)",
                    "i"
                  ),
                  bool: new RegExp("^(?:" + booleans + ")$", "i"),

                  // For use in libraries implementing .is()
                  // We use this for POS matching in `select`
                  needsContext: new RegExp(
                    "^" +
                      whitespace +
                      "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                      whitespace +
                      "*((?:-\\d)?\\d*)" +
                      whitespace +
                      "*\\)|)(?=[^-]|$)",
                    "i"
                  ),
                },
                rinputs = /^(?:input|select|textarea|button)$/i,
                rheader = /^h\d$/i,
                // Easily-parseable/retrievable ID or TAG or CLASS selectors
                rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                rsibling = /[+~]/,
                // CSS escapes
                // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                runescape = new RegExp(
                  "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])",
                  "g"
                ),
                funescape = function (escape, nonHex) {
                  var high = "0x" + escape.slice(1) - 0x10000;

                  if (nonHex) {
                    // Strip the backslash prefix from a non-hex escape sequence
                    return nonHex;
                  }

                  // Replace a hexadecimal escape sequence with the encoded Unicode code point
                  // Support: IE <=11+
                  // For values outside the Basic Multilingual Plane (BMP), manually construct a
                  // surrogate pair
                  return high < 0
                    ? String.fromCharCode(high + 0x10000)
                    : String.fromCharCode(
                        (high >> 10) | 0xd800,
                        (high & 0x3ff) | 0xdc00
                      );
                },
                // Used for iframes; see `setDocument`.
                // Support: IE 9 - 11+, Edge 12 - 18+
                // Removing the function wrapper causes a "Permission Denied"
                // error in IE/Edge.
                unloadHandler = function () {
                  setDocument();
                },
                inDisabledFieldset = addCombinator(
                  function (elem) {
                    return elem.disabled === true && nodeName(elem, "fieldset");
                  },
                  { dir: "parentNode", next: "legend" }
                );

              // Support: IE <=9 only
              // Accessing document.activeElement can throw unexpectedly
              // https://bugs.jquery.com/ticket/13393
              function safeActiveElement() {
                try {
                  return document.activeElement;
                } catch (err) {}
              }

              // Optimize for push.apply( _, NodeList )
              try {
                push.apply(
                  (arr = slice.call(preferredDoc.childNodes)),
                  preferredDoc.childNodes
                );

                // Support: Android <=4.0
                // Detect silently failing push.apply
                // eslint-disable-next-line no-unused-expressions
                arr[preferredDoc.childNodes.length].nodeType;
              } catch (e) {
                push = {
                  apply: function (target, els) {
                    pushNative.apply(target, slice.call(els));
                  },
                  call: function (target) {
                    pushNative.apply(target, slice.call(arguments, 1));
                  },
                };
              }

              function find(selector, context, results, seed) {
                var m,
                  i,
                  elem,
                  nid,
                  match,
                  groups,
                  newSelector,
                  newContext = context && context.ownerDocument,
                  // nodeType defaults to 9, since context defaults to document
                  nodeType = context ? context.nodeType : 9;

                results = results || [];

                // Return early from calls with invalid selector or context
                if (
                  typeof selector !== "string" ||
                  !selector ||
                  (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
                ) {
                  return results;
                }

                // Try to shortcut find operations (as opposed to filters) in HTML documents
                if (!seed) {
                  setDocument(context);
                  context = context || document;

                  if (documentIsHTML) {
                    // If the selector is sufficiently simple, try using a "get*By*" DOM method
                    // (excepting DocumentFragment context, where the methods don't exist)
                    if (
                      nodeType !== 11 &&
                      (match = rquickExpr.exec(selector))
                    ) {
                      // ID selector
                      if ((m = match[1])) {
                        // Document context
                        if (nodeType === 9) {
                          if ((elem = context.getElementById(m))) {
                            // Support: IE 9 only
                            // getElementById can match elements by name instead of ID
                            if (elem.id === m) {
                              push.call(results, elem);
                              return results;
                            }
                          } else {
                            return results;
                          }

                          // Element context
                        } else {
                          // Support: IE 9 only
                          // getElementById can match elements by name instead of ID
                          if (
                            newContext &&
                            (elem = newContext.getElementById(m)) &&
                            find.contains(context, elem) &&
                            elem.id === m
                          ) {
                            push.call(results, elem);
                            return results;
                          }
                        }

                        // Type selector
                      } else if (match[2]) {
                        push.apply(
                          results,
                          context.getElementsByTagName(selector)
                        );
                        return results;

                        // Class selector
                      } else if (
                        (m = match[3]) &&
                        context.getElementsByClassName
                      ) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                      }
                    }

                    // Take advantage of querySelectorAll
                    if (
                      !nonnativeSelectorCache[selector + " "] &&
                      (!rbuggyQSA || !rbuggyQSA.test(selector))
                    ) {
                      newSelector = selector;
                      newContext = context;

                      // qSA considers elements outside a scoping root when evaluating child or
                      // descendant combinators, which is not what we want.
                      // In such cases, we work around the behavior by prefixing every selector in the
                      // list with an ID selector referencing the scope context.
                      // The technique has to be used as well when a leading combinator is used
                      // as such selectors are not recognized by querySelectorAll.
                      // Thanks to Andrew Dupont for this technique.
                      if (
                        nodeType === 1 &&
                        (rdescend.test(selector) ||
                          rleadingCombinator.test(selector))
                      ) {
                        // Expand context for sibling selectors
                        newContext =
                          (rsibling.test(selector) &&
                            testContext(context.parentNode)) ||
                          context;

                        // We can use :scope instead of the ID hack if the browser
                        // supports it & if we're not changing the context.
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when
                        // strict-comparing two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (newContext != context || !support.scope) {
                          // Capture the context ID, setting it first if necessary
                          if ((nid = context.getAttribute("id"))) {
                            nid = jQuery.escapeSelector(nid);
                          } else {
                            context.setAttribute("id", (nid = expando));
                          }
                        }

                        // Prefix every selector in the list
                        groups = tokenize(selector);
                        i = groups.length;
                        while (i--) {
                          groups[i] =
                            (nid ? "#" + nid : ":scope") +
                            " " +
                            toSelector(groups[i]);
                        }
                        newSelector = groups.join(",");
                      }

                      try {
                        push.apply(
                          results,
                          newContext.querySelectorAll(newSelector)
                        );
                        return results;
                      } catch (qsaError) {
                        nonnativeSelectorCache(selector, true);
                      } finally {
                        if (nid === expando) {
                          context.removeAttribute("id");
                        }
                      }
                    }
                  }
                }

                // All others
                return select(
                  selector.replace(rtrimCSS, "$1"),
                  context,
                  results,
                  seed
                );
              }

              /**
               * Create key-value caches of limited size
               * @returns {function(string, object)} Returns the Object data after storing it on itself with
               *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
               *	deleting the oldest entry
               */
              function createCache() {
                var keys = [];

                function cache(key, value) {
                  // Use (key + " ") to avoid collision with native prototype properties
                  // (see https://github.com/jquery/sizzle/issues/157)
                  if (keys.push(key + " ") > Expr.cacheLength) {
                    // Only keep the most recent entries
                    delete cache[keys.shift()];
                  }
                  return (cache[key + " "] = value);
                }
                return cache;
              }

              /**
               * Mark a function for special use by jQuery selector module
               * @param {Function} fn The function to mark
               */
              function markFunction(fn) {
                fn[expando] = true;
                return fn;
              }

              /**
               * Support testing using an element
               * @param {Function} fn Passed the created element and returns a boolean result
               */
              function assert(fn) {
                var el = document.createElement("fieldset");

                try {
                  return !!fn(el);
                } catch (e) {
                  return false;
                } finally {
                  // Remove from its parent by default
                  if (el.parentNode) {
                    el.parentNode.removeChild(el);
                  }

                  // release memory in IE
                  el = null;
                }
              }

              /**
               * Returns a function to use in pseudos for input types
               * @param {String} type
               */
              function createInputPseudo(type) {
                return function (elem) {
                  return nodeName(elem, "input") && elem.type === type;
                };
              }

              /**
               * Returns a function to use in pseudos for buttons
               * @param {String} type
               */
              function createButtonPseudo(type) {
                return function (elem) {
                  return (
                    (nodeName(elem, "input") || nodeName(elem, "button")) &&
                    elem.type === type
                  );
                };
              }

              /**
               * Returns a function to use in pseudos for :enabled/:disabled
               * @param {Boolean} disabled true for :disabled; false for :enabled
               */
              function createDisabledPseudo(disabled) {
                // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
                return function (elem) {
                  // Only certain elements can match :enabled or :disabled
                  // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                  // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                  if ("form" in elem) {
                    // Check for inherited disabledness on relevant non-disabled elements:
                    // * listed form-associated elements in a disabled fieldset
                    //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                    // * option elements in a disabled optgroup
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                    // All such elements have a "form" property.
                    if (elem.parentNode && elem.disabled === false) {
                      // Option elements defer to a parent optgroup if present
                      if ("label" in elem) {
                        if ("label" in elem.parentNode) {
                          return elem.parentNode.disabled === disabled;
                        } else {
                          return elem.disabled === disabled;
                        }
                      }

                      // Support: IE 6 - 11+
                      // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                      return (
                        elem.isDisabled === disabled ||
                        // Where there is no isDisabled, check manually
                        (elem.isDisabled !== !disabled &&
                          inDisabledFieldset(elem) === disabled)
                      );
                    }

                    return elem.disabled === disabled;

                    // Try to winnow out elements that can't be disabled before trusting the disabled property.
                    // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                    // even exist on them, let alone have a boolean value.
                  } else if ("label" in elem) {
                    return elem.disabled === disabled;
                  }

                  // Remaining elements are neither :enabled nor :disabled
                  return false;
                };
              }

              /**
               * Returns a function to use in pseudos for positionals
               * @param {Function} fn
               */
              function createPositionalPseudo(fn) {
                return markFunction(function (argument) {
                  argument = +argument;
                  return markFunction(function (seed, matches) {
                    var j,
                      matchIndexes = fn([], seed.length, argument),
                      i = matchIndexes.length;

                    // Match elements found at the specified indexes
                    while (i--) {
                      if (seed[(j = matchIndexes[i])]) {
                        seed[j] = !(matches[j] = seed[j]);
                      }
                    }
                  });
                });
              }

              /**
               * Checks a node for validity as a jQuery selector context
               * @param {Element|Object=} context
               * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
               */
              function testContext(context) {
                return (
                  context &&
                  typeof context.getElementsByTagName !== "undefined" &&
                  context
                );
              }

              /**
               * Sets document-related variables once based on the current document
               * @param {Element|Object} [node] An element or document object to use to set the document
               * @returns {Object} Returns the current document
               */
              function setDocument(node) {
                var subWindow,
                  doc = node ? node.ownerDocument || node : preferredDoc;

                // Return early if doc is invalid or already selected
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  doc == document ||
                  doc.nodeType !== 9 ||
                  !doc.documentElement
                ) {
                  return document;
                }

                // Update global variables
                document = doc;
                documentElement = document.documentElement;
                documentIsHTML = !jQuery.isXMLDoc(document);

                // Support: iOS 7 only, IE 9 - 11+
                // Older browsers didn't support unprefixed `matches`.
                matches =
                  documentElement.matches ||
                  documentElement.webkitMatchesSelector ||
                  documentElement.msMatchesSelector;

                // Support: IE 9 - 11+, Edge 12 - 18+
                // Accessing iframe documents after unload throws "permission denied" errors
                // (see trac-13936).
                // Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
                // all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
                if (
                  documentElement.msMatchesSelector &&
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  // eslint-disable-next-line eqeqeq
                  preferredDoc != document &&
                  (subWindow = document.defaultView) &&
                  subWindow.top !== subWindow
                ) {
                  // Support: IE 9 - 11+, Edge 12 - 18+
                  subWindow.addEventListener("unload", unloadHandler);
                }

                // Support: IE <10
                // Check if getElementById returns elements by name
                // The broken getElementById methods don't pick up programmatically-set names,
                // so use a roundabout getElementsByName test
                support.getById = assert(function (el) {
                  documentElement.appendChild(el).id = jQuery.expando;
                  return (
                    !document.getElementsByName ||
                    !document.getElementsByName(jQuery.expando).length
                  );
                });

                // Support: IE 9 only
                // Check to see if it's possible to do matchesSelector
                // on a disconnected node.
                support.disconnectedMatch = assert(function (el) {
                  return matches.call(el, "*");
                });

                // Support: IE 9 - 11+, Edge 12 - 18+
                // IE/Edge don't support the :scope pseudo-class.
                support.scope = assert(function () {
                  return document.querySelectorAll(":scope");
                });

                // Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
                // Make sure the `:has()` argument is parsed unforgivingly.
                // We include `*` in the test to detect buggy implementations that are
                // _selectively_ forgiving (specifically when the list includes at least
                // one valid selector).
                // Note that we treat complete lack of support for `:has()` as if it were
                // spec-compliant support, which is fine because use of `:has()` in such
                // environments will fail in the qSA path and fall back to jQuery traversal
                // anyway.
                support.cssHas = assert(function () {
                  try {
                    document.querySelector(":has(*,:jqfake)");
                    return false;
                  } catch (e) {
                    return true;
                  }
                });

                // ID filter and find
                if (support.getById) {
                  Expr.filter.ID = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                      return elem.getAttribute("id") === attrId;
                    };
                  };
                  Expr.find.ID = function (id, context) {
                    if (
                      typeof context.getElementById !== "undefined" &&
                      documentIsHTML
                    ) {
                      var elem = context.getElementById(id);
                      return elem ? [elem] : [];
                    }
                  };
                } else {
                  Expr.filter.ID = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                      var node =
                        typeof elem.getAttributeNode !== "undefined" &&
                        elem.getAttributeNode("id");
                      return node && node.value === attrId;
                    };
                  };

                  // Support: IE 6 - 7 only
                  // getElementById is not reliable as a find shortcut
                  Expr.find.ID = function (id, context) {
                    if (
                      typeof context.getElementById !== "undefined" &&
                      documentIsHTML
                    ) {
                      var node,
                        i,
                        elems,
                        elem = context.getElementById(id);

                      if (elem) {
                        // Verify the id attribute
                        node = elem.getAttributeNode("id");
                        if (node && node.value === id) {
                          return [elem];
                        }

                        // Fall back on getElementsByName
                        elems = context.getElementsByName(id);
                        i = 0;
                        while ((elem = elems[i++])) {
                          node = elem.getAttributeNode("id");
                          if (node && node.value === id) {
                            return [elem];
                          }
                        }
                      }

                      return [];
                    }
                  };
                }

                // Tag
                Expr.find.TAG = function (tag, context) {
                  if (typeof context.getElementsByTagName !== "undefined") {
                    return context.getElementsByTagName(tag);

                    // DocumentFragment nodes don't have gEBTN
                  } else {
                    return context.querySelectorAll(tag);
                  }
                };

                // Class
                Expr.find.CLASS = function (className, context) {
                  if (
                    typeof context.getElementsByClassName !== "undefined" &&
                    documentIsHTML
                  ) {
                    return context.getElementsByClassName(className);
                  }
                };

                /* QSA/matchesSelector
	---------------------------------------------------------------------- */

                // QSA and matchesSelector support

                rbuggyQSA = [];

                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function (el) {
                  var input;

                  documentElement.appendChild(el).innerHTML =
                    "<a id='" +
                    expando +
                    "' href='' disabled='disabled'></a>" +
                    "<select id='" +
                    expando +
                    "-\r\\' disabled='disabled'>" +
                    "<option selected=''></option></select>";

                  // Support: iOS <=7 - 8 only
                  // Boolean attributes and "value" are not treated correctly in some XML documents
                  if (!el.querySelectorAll("[selected]").length) {
                    rbuggyQSA.push(
                      "\\[" + whitespace + "*(?:value|" + booleans + ")"
                    );
                  }

                  // Support: iOS <=7 - 8 only
                  if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                    rbuggyQSA.push("~=");
                  }

                  // Support: iOS 8 only
                  // https://bugs.webkit.org/show_bug.cgi?id=136851
                  // In-page `selector#id sibling-combinator selector` fails
                  if (!el.querySelectorAll("a#" + expando + "+*").length) {
                    rbuggyQSA.push(".#.+[+~]");
                  }

                  // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
                  // In some of the document kinds, these selectors wouldn't work natively.
                  // This is probably OK but for backwards compatibility we want to maintain
                  // handling them through jQuery traversal in jQuery 3.x.
                  if (!el.querySelectorAll(":checked").length) {
                    rbuggyQSA.push(":checked");
                  }

                  // Support: Windows 8 Native Apps
                  // The type and name attributes are restricted during .innerHTML assignment
                  input = document.createElement("input");
                  input.setAttribute("type", "hidden");
                  el.appendChild(input).setAttribute("name", "D");

                  // Support: IE 9 - 11+
                  // IE's :disabled selector does not pick up the children of disabled fieldsets
                  // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
                  // In some of the document kinds, these selectors wouldn't work natively.
                  // This is probably OK but for backwards compatibility we want to maintain
                  // handling them through jQuery traversal in jQuery 3.x.
                  documentElement.appendChild(el).disabled = true;
                  if (el.querySelectorAll(":disabled").length !== 2) {
                    rbuggyQSA.push(":enabled", ":disabled");
                  }

                  // Support: IE 11+, Edge 15 - 18+
                  // IE 11/Edge don't find elements on a `[name='']` query in some cases.
                  // Adding a temporary attribute to the document before the selection works
                  // around the issue.
                  // Interestingly, IE 10 & older don't seem to have the issue.
                  input = document.createElement("input");
                  input.setAttribute("name", "");
                  el.appendChild(input);
                  if (!el.querySelectorAll("[name='']").length) {
                    rbuggyQSA.push(
                      "\\[" +
                        whitespace +
                        "*name" +
                        whitespace +
                        "*=" +
                        whitespace +
                        "*(?:''|\"\")"
                    );
                  }
                });

                if (!support.cssHas) {
                  // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
                  // Our regular `try-catch` mechanism fails to detect natively-unsupported
                  // pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
                  // in browsers that parse the `:has()` argument as a forgiving selector list.
                  // https://drafts.csswg.org/selectors/#relational now requires the argument
                  // to be parsed unforgivingly, but browsers have not yet fully adjusted.
                  rbuggyQSA.push(":has");
                }

                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));

                /* Sorting
	---------------------------------------------------------------------- */

                // Document order sorting
                sortOrder = function (a, b) {
                  // Flag for duplicate removal
                  if (a === b) {
                    hasDuplicate = true;
                    return 0;
                  }

                  // Sort on method existence if only one input has compareDocumentPosition
                  var compare =
                    !a.compareDocumentPosition - !b.compareDocumentPosition;
                  if (compare) {
                    return compare;
                  }

                  // Calculate position if both inputs belong to the same document
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  // eslint-disable-next-line eqeqeq
                  compare =
                    (a.ownerDocument || a) == (b.ownerDocument || b)
                      ? a.compareDocumentPosition(b)
                      : // Otherwise we know they are disconnected
                        1;

                  // Disconnected nodes
                  if (
                    compare & 1 ||
                    (!support.sortDetached &&
                      b.compareDocumentPosition(a) === compare)
                  ) {
                    // Choose the first element that is related to our preferred document
                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                    // two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    if (
                      a === document ||
                      (a.ownerDocument == preferredDoc &&
                        find.contains(preferredDoc, a))
                    ) {
                      return -1;
                    }

                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                    // two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    if (
                      b === document ||
                      (b.ownerDocument == preferredDoc &&
                        find.contains(preferredDoc, b))
                    ) {
                      return 1;
                    }

                    // Maintain original order
                    return sortInput
                      ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b)
                      : 0;
                  }

                  return compare & 4 ? -1 : 1;
                };

                return document;
              }

              find.matches = function (expr, elements) {
                return find(expr, null, null, elements);
              };

              find.matchesSelector = function (elem, expr) {
                setDocument(elem);

                if (
                  documentIsHTML &&
                  !nonnativeSelectorCache[expr + " "] &&
                  (!rbuggyQSA || !rbuggyQSA.test(expr))
                ) {
                  try {
                    var ret = matches.call(elem, expr);

                    // IE 9's matchesSelector returns false on disconnected nodes
                    if (
                      ret ||
                      support.disconnectedMatch ||
                      // As well, disconnected nodes are said to be in a document
                      // fragment in IE 9
                      (elem.document && elem.document.nodeType !== 11)
                    ) {
                      return ret;
                    }
                  } catch (e) {
                    nonnativeSelectorCache(expr, true);
                  }
                }

                return find(expr, document, null, [elem]).length > 0;
              };

              find.contains = function (context, elem) {
                // Set document vars if needed
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ((context.ownerDocument || context) != document) {
                  setDocument(context);
                }
                return jQuery.contains(context, elem);
              };

              find.attr = function (elem, name) {
                // Set document vars if needed
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ((elem.ownerDocument || elem) != document) {
                  setDocument(elem);
                }

                var fn = Expr.attrHandle[name.toLowerCase()],
                  // Don't get fooled by Object.prototype properties (see trac-13807)
                  val =
                    fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
                      ? fn(elem, name, !documentIsHTML)
                      : undefined;

                if (val !== undefined) {
                  return val;
                }

                return elem.getAttribute(name);
              };

              find.error = function (msg) {
                throw new Error(
                  "Syntax error, unrecognized expression: " + msg
                );
              };

              /**
               * Document sorting and removing duplicates
               * @param {ArrayLike} results
               */
              jQuery.uniqueSort = function (results) {
                var elem,
                  duplicates = [],
                  j = 0,
                  i = 0;

                // Unless we *know* we can detect duplicates, assume their presence
                //
                // Support: Android <=4.0+
                // Testing for detecting duplicates is unpredictable so instead assume we can't
                // depend on duplicate detection in all browsers without a stable sort.
                hasDuplicate = !support.sortStable;
                sortInput = !support.sortStable && slice.call(results, 0);
                sort.call(results, sortOrder);

                if (hasDuplicate) {
                  while ((elem = results[i++])) {
                    if (elem === results[i]) {
                      j = duplicates.push(i);
                    }
                  }
                  while (j--) {
                    splice.call(results, duplicates[j], 1);
                  }
                }

                // Clear input after sorting to release objects
                // See https://github.com/jquery/sizzle/pull/225
                sortInput = null;

                return results;
              };

              jQuery.fn.uniqueSort = function () {
                return this.pushStack(jQuery.uniqueSort(slice.apply(this)));
              };

              Expr = jQuery.expr = {
                // Can be adjusted by the user
                cacheLength: 50,

                createPseudo: markFunction,

                match: matchExpr,

                attrHandle: {},

                find: {},

                relative: {
                  ">": { dir: "parentNode", first: true },
                  " ": { dir: "parentNode" },
                  "+": { dir: "previousSibling", first: true },
                  "~": { dir: "previousSibling" },
                },

                preFilter: {
                  ATTR: function (match) {
                    match[1] = match[1].replace(runescape, funescape);

                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[3] || match[4] || match[5] || "").replace(
                      runescape,
                      funescape
                    );

                    if (match[2] === "~=") {
                      match[3] = " " + match[3] + " ";
                    }

                    return match.slice(0, 4);
                  },

                  CHILD: function (match) {
                    /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
                    match[1] = match[1].toLowerCase();

                    if (match[1].slice(0, 3) === "nth") {
                      // nth-* requires argument
                      if (!match[3]) {
                        find.error(match[0]);
                      }

                      // numeric x and y parameters for Expr.filter.CHILD
                      // remember that false/true cast respectively to 0/1
                      match[4] = +(match[4]
                        ? match[5] + (match[6] || 1)
                        : 2 * (match[3] === "even" || match[3] === "odd"));
                      match[5] = +(match[7] + match[8] || match[3] === "odd");

                      // other types prohibit arguments
                    } else if (match[3]) {
                      find.error(match[0]);
                    }

                    return match;
                  },

                  PSEUDO: function (match) {
                    var excess,
                      unquoted = !match[6] && match[2];

                    if (matchExpr.CHILD.test(match[0])) {
                      return null;
                    }

                    // Accept quoted arguments as-is
                    if (match[3]) {
                      match[2] = match[4] || match[5] || "";

                      // Strip excess characters from unquoted arguments
                    } else if (
                      unquoted &&
                      rpseudo.test(unquoted) &&
                      // Get excess from tokenize (recursively)
                      (excess = tokenize(unquoted, true)) &&
                      // advance to the next closing parenthesis
                      (excess =
                        unquoted.indexOf(")", unquoted.length - excess) -
                        unquoted.length)
                    ) {
                      // excess is a negative index
                      match[0] = match[0].slice(0, excess);
                      match[2] = unquoted.slice(0, excess);
                    }

                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                  },
                },

                filter: {
                  TAG: function (nodeNameSelector) {
                    var expectedNodeName = nodeNameSelector
                      .replace(runescape, funescape)
                      .toLowerCase();
                    return nodeNameSelector === "*"
                      ? function () {
                          return true;
                        }
                      : function (elem) {
                          return nodeName(elem, expectedNodeName);
                        };
                  },

                  CLASS: function (className) {
                    var pattern = classCache[className + " "];

                    return (
                      pattern ||
                      ((pattern = new RegExp(
                        "(^|" +
                          whitespace +
                          ")" +
                          className +
                          "(" +
                          whitespace +
                          "|$)"
                      )) &&
                        classCache(className, function (elem) {
                          return pattern.test(
                            (typeof elem.className === "string" &&
                              elem.className) ||
                              (typeof elem.getAttribute !== "undefined" &&
                                elem.getAttribute("class")) ||
                              ""
                          );
                        }))
                    );
                  },

                  ATTR: function (name, operator, check) {
                    return function (elem) {
                      var result = find.attr(elem, name);

                      if (result == null) {
                        return operator === "!=";
                      }
                      if (!operator) {
                        return true;
                      }

                      result += "";

                      if (operator === "=") {
                        return result === check;
                      }
                      if (operator === "!=") {
                        return result !== check;
                      }
                      if (operator === "^=") {
                        return check && result.indexOf(check) === 0;
                      }
                      if (operator === "*=") {
                        return check && result.indexOf(check) > -1;
                      }
                      if (operator === "$=") {
                        return check && result.slice(-check.length) === check;
                      }
                      if (operator === "~=") {
                        return (
                          (
                            " " +
                            result.replace(rwhitespace, " ") +
                            " "
                          ).indexOf(check) > -1
                        );
                      }
                      if (operator === "|=") {
                        return (
                          result === check ||
                          result.slice(0, check.length + 1) === check + "-"
                        );
                      }

                      return false;
                    };
                  },

                  CHILD: function (type, what, _argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth",
                      forward = type.slice(-4) !== "last",
                      ofType = what === "of-type";

                    return first === 1 && last === 0
                      ? // Shortcut for :nth-*(n)
                        function (elem) {
                          return !!elem.parentNode;
                        }
                      : function (elem, _context, xml) {
                          var cache,
                            outerCache,
                            node,
                            nodeIndex,
                            start,
                            dir =
                              simple !== forward
                                ? "nextSibling"
                                : "previousSibling",
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType,
                            diff = false;

                          if (parent) {
                            // :(first|last|only)-(child|of-type)
                            if (simple) {
                              while (dir) {
                                node = elem;
                                while ((node = node[dir])) {
                                  if (
                                    ofType
                                      ? nodeName(node, name)
                                      : node.nodeType === 1
                                  ) {
                                    return false;
                                  }
                                }

                                // Reverse direction for :only-* (if we haven't yet done so)
                                start = dir =
                                  type === "only" && !start && "nextSibling";
                              }
                              return true;
                            }

                            start = [
                              forward ? parent.firstChild : parent.lastChild,
                            ];

                            // non-xml :nth-child(...) stores cache data on `parent`
                            if (forward && useCache) {
                              // Seek `elem` from a previously-cached index
                              outerCache =
                                parent[expando] || (parent[expando] = {});
                              cache = outerCache[type] || [];
                              nodeIndex = cache[0] === dirruns && cache[1];
                              diff = nodeIndex && cache[2];
                              node = nodeIndex && parent.childNodes[nodeIndex];

                              while (
                                (node =
                                  (++nodeIndex && node && node[dir]) ||
                                  // Fallback to seeking `elem` from the start
                                  (diff = nodeIndex = 0) ||
                                  start.pop())
                              ) {
                                // When found, cache indexes on `parent` and break
                                if (
                                  node.nodeType === 1 &&
                                  ++diff &&
                                  node === elem
                                ) {
                                  outerCache[type] = [dirruns, nodeIndex, diff];
                                  break;
                                }
                              }
                            } else {
                              // Use previously-cached element index if available
                              if (useCache) {
                                outerCache =
                                  elem[expando] || (elem[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex;
                              }

                              // xml :nth-child(...)
                              // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                              if (diff === false) {
                                // Use the same loop as above to seek `elem` from the start
                                while (
                                  (node =
                                    (++nodeIndex && node && node[dir]) ||
                                    (diff = nodeIndex = 0) ||
                                    start.pop())
                                ) {
                                  if (
                                    (ofType
                                      ? nodeName(node, name)
                                      : node.nodeType === 1) &&
                                    ++diff
                                  ) {
                                    // Cache the index of each encountered element
                                    if (useCache) {
                                      outerCache =
                                        node[expando] || (node[expando] = {});
                                      outerCache[type] = [dirruns, diff];
                                    }

                                    if (node === elem) {
                                      break;
                                    }
                                  }
                                }
                              }
                            }

                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return (
                              diff === first ||
                              (diff % first === 0 && diff / first >= 0)
                            );
                          }
                        };
                  },

                  PSEUDO: function (pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // https://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args,
                      fn =
                        Expr.pseudos[pseudo] ||
                        Expr.setFilters[pseudo.toLowerCase()] ||
                        find.error("unsupported pseudo: " + pseudo);

                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as jQuery does
                    if (fn[expando]) {
                      return fn(argument);
                    }

                    // But maintain support for old signatures
                    if (fn.length > 1) {
                      args = [pseudo, pseudo, "", argument];
                      return Expr.setFilters.hasOwnProperty(
                        pseudo.toLowerCase()
                      )
                        ? markFunction(function (seed, matches) {
                            var idx,
                              matched = fn(seed, argument),
                              i = matched.length;
                            while (i--) {
                              idx = indexOf.call(seed, matched[i]);
                              seed[idx] = !(matches[idx] = matched[i]);
                            }
                          })
                        : function (elem) {
                            return fn(elem, 0, args);
                          };
                    }

                    return fn;
                  },
                },

                pseudos: {
                  // Potentially complex pseudos
                  not: markFunction(function (selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [],
                      results = [],
                      matcher = compile(selector.replace(rtrimCSS, "$1"));

                    return matcher[expando]
                      ? markFunction(function (seed, matches, _context, xml) {
                          var elem,
                            unmatched = matcher(seed, null, xml, []),
                            i = seed.length;

                          // Match elements unmatched by `matcher`
                          while (i--) {
                            if ((elem = unmatched[i])) {
                              seed[i] = !(matches[i] = elem);
                            }
                          }
                        })
                      : function (elem, _context, xml) {
                          input[0] = elem;
                          matcher(input, null, xml, results);

                          // Don't keep the element
                          // (see https://github.com/jquery/sizzle/issues/299)
                          input[0] = null;
                          return !results.pop();
                        };
                  }),

                  has: markFunction(function (selector) {
                    return function (elem) {
                      return find(selector, elem).length > 0;
                    };
                  }),

                  contains: markFunction(function (text) {
                    text = text.replace(runescape, funescape);
                    return function (elem) {
                      return (
                        (elem.textContent || jQuery.text(elem)).indexOf(text) >
                        -1
                      );
                    };
                  }),

                  // "Whether an element is represented by a :lang() selector
                  // is based solely on the element's language value
                  // being equal to the identifier C,
                  // or beginning with the identifier C immediately followed by "-".
                  // The matching of C against the element's language value is performed case-insensitively.
                  // The identifier C does not have to be a valid language name."
                  // https://www.w3.org/TR/selectors/#lang-pseudo
                  lang: markFunction(function (lang) {
                    // lang value must be a valid identifier
                    if (!ridentifier.test(lang || "")) {
                      find.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                      var elemLang;
                      do {
                        if (
                          (elemLang = documentIsHTML
                            ? elem.lang
                            : elem.getAttribute("xml:lang") ||
                              elem.getAttribute("lang"))
                        ) {
                          elemLang = elemLang.toLowerCase();
                          return (
                            elemLang === lang ||
                            elemLang.indexOf(lang + "-") === 0
                          );
                        }
                      } while ((elem = elem.parentNode) && elem.nodeType === 1);
                      return false;
                    };
                  }),

                  // Miscellaneous
                  target: function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                  },

                  root: function (elem) {
                    return elem === documentElement;
                  },

                  focus: function (elem) {
                    return (
                      elem === safeActiveElement() &&
                      document.hasFocus() &&
                      !!(elem.type || elem.href || ~elem.tabIndex)
                    );
                  },

                  // Boolean properties
                  enabled: createDisabledPseudo(false),
                  disabled: createDisabledPseudo(true),

                  checked: function (elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    return (
                      (nodeName(elem, "input") && !!elem.checked) ||
                      (nodeName(elem, "option") && !!elem.selected)
                    );
                  },

                  selected: function (elem) {
                    // Support: IE <=11+
                    // Accessing the selectedIndex property
                    // forces the browser to treat the default option as
                    // selected when in an optgroup.
                    if (elem.parentNode) {
                      // eslint-disable-next-line no-unused-expressions
                      elem.parentNode.selectedIndex;
                    }

                    return elem.selected === true;
                  },

                  // Contents
                  empty: function (elem) {
                    // https://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                    // nodeType < 6 works because attributes (2) do not appear as children
                    for (
                      elem = elem.firstChild;
                      elem;
                      elem = elem.nextSibling
                    ) {
                      if (elem.nodeType < 6) {
                        return false;
                      }
                    }
                    return true;
                  },

                  parent: function (elem) {
                    return !Expr.pseudos.empty(elem);
                  },

                  // Element/input types
                  header: function (elem) {
                    return rheader.test(elem.nodeName);
                  },

                  input: function (elem) {
                    return rinputs.test(elem.nodeName);
                  },

                  button: function (elem) {
                    return (
                      (nodeName(elem, "input") && elem.type === "button") ||
                      nodeName(elem, "button")
                    );
                  },

                  text: function (elem) {
                    var attr;
                    return (
                      nodeName(elem, "input") &&
                      elem.type === "text" &&
                      // Support: IE <10 only
                      // New HTML5 attribute values (e.g., "search") appear
                      // with elem.type === "text"
                      ((attr = elem.getAttribute("type")) == null ||
                        attr.toLowerCase() === "text")
                    );
                  },

                  // Position-in-collection
                  first: createPositionalPseudo(function () {
                    return [0];
                  }),

                  last: createPositionalPseudo(function (
                    _matchIndexes,
                    length
                  ) {
                    return [length - 1];
                  }),

                  eq: createPositionalPseudo(function (
                    _matchIndexes,
                    length,
                    argument
                  ) {
                    return [argument < 0 ? argument + length : argument];
                  }),

                  even: createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  odd: createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  lt: createPositionalPseudo(function (
                    matchIndexes,
                    length,
                    argument
                  ) {
                    var i;

                    if (argument < 0) {
                      i = argument + length;
                    } else if (argument > length) {
                      i = length;
                    } else {
                      i = argument;
                    }

                    for (; --i >= 0; ) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  gt: createPositionalPseudo(function (
                    matchIndexes,
                    length,
                    argument
                  ) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length; ) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),
                },
              };

              Expr.pseudos.nth = Expr.pseudos.eq;

              // Add button/input type pseudos
              for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true,
              }) {
                Expr.pseudos[i] = createInputPseudo(i);
              }
              for (i in { submit: true, reset: true }) {
                Expr.pseudos[i] = createButtonPseudo(i);
              }

              // Easy API for creating new setFilters
              function setFilters() {}
              setFilters.prototype = Expr.filters = Expr.pseudos;
              Expr.setFilters = new setFilters();

              function tokenize(selector, parseOnly) {
                var matched,
                  match,
                  tokens,
                  type,
                  soFar,
                  groups,
                  preFilters,
                  cached = tokenCache[selector + " "];

                if (cached) {
                  return parseOnly ? 0 : cached.slice(0);
                }

                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;

                while (soFar) {
                  // Comma and first run
                  if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                      // Don't consume trailing commas as valid
                      soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push((tokens = []));
                  }

                  matched = false;

                  // Combinators
                  if ((match = rleadingCombinator.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({
                      value: matched,

                      // Cast descendant combinators to space
                      type: match[0].replace(rtrimCSS, " "),
                    });
                    soFar = soFar.slice(matched.length);
                  }

                  // Filters
                  for (type in Expr.filter) {
                    if (
                      (match = matchExpr[type].exec(soFar)) &&
                      (!preFilters[type] || (match = preFilters[type](match)))
                    ) {
                      matched = match.shift();
                      tokens.push({
                        value: matched,
                        type: type,
                        matches: match,
                      });
                      soFar = soFar.slice(matched.length);
                    }
                  }

                  if (!matched) {
                    break;
                  }
                }

                // Return the length of the invalid excess
                // if we're just parsing
                // Otherwise, throw an error or return tokens
                if (parseOnly) {
                  return soFar.length;
                }

                return soFar
                  ? find.error(selector)
                  : // Cache the tokens
                    tokenCache(selector, groups).slice(0);
              }

              function toSelector(tokens) {
                var i = 0,
                  len = tokens.length,
                  selector = "";
                for (; i < len; i++) {
                  selector += tokens[i].value;
                }
                return selector;
              }

              function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir,
                  skip = combinator.next,
                  key = skip || dir,
                  checkNonElements = base && key === "parentNode",
                  doneName = done++;

                return combinator.first
                  ? // Check against closest ancestor/preceding element
                    function (elem, context, xml) {
                      while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                          return matcher(elem, context, xml);
                        }
                      }
                      return false;
                    }
                  : // Check against all ancestor/preceding elements
                    function (elem, context, xml) {
                      var oldCache,
                        outerCache,
                        newCache = [dirruns, doneName];

                      // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                      if (xml) {
                        while ((elem = elem[dir])) {
                          if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                              return true;
                            }
                          }
                        }
                      } else {
                        while ((elem = elem[dir])) {
                          if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});

                            if (skip && nodeName(elem, skip)) {
                              elem = elem[dir] || elem;
                            } else if (
                              (oldCache = outerCache[key]) &&
                              oldCache[0] === dirruns &&
                              oldCache[1] === doneName
                            ) {
                              // Assign to newCache so results back-propagate to previous elements
                              return (newCache[2] = oldCache[2]);
                            } else {
                              // Reuse newcache so results back-propagate to previous elements
                              outerCache[key] = newCache;

                              // A match means we're done; a fail means we have to keep checking
                              if ((newCache[2] = matcher(elem, context, xml))) {
                                return true;
                              }
                            }
                          }
                        }
                      }
                      return false;
                    };
              }

              function elementMatcher(matchers) {
                return matchers.length > 1
                  ? function (elem, context, xml) {
                      var i = matchers.length;
                      while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                          return false;
                        }
                      }
                      return true;
                    }
                  : matchers[0];
              }

              function multipleContexts(selector, contexts, results) {
                var i = 0,
                  len = contexts.length;
                for (; i < len; i++) {
                  find(selector, contexts[i], results);
                }
                return results;
              }

              function condense(unmatched, map, filter, context, xml) {
                var elem,
                  newUnmatched = [],
                  i = 0,
                  len = unmatched.length,
                  mapped = map != null;

                for (; i < len; i++) {
                  if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                      newUnmatched.push(elem);
                      if (mapped) {
                        map.push(i);
                      }
                    }
                  }
                }

                return newUnmatched;
              }

              function setMatcher(
                preFilter,
                selector,
                matcher,
                postFilter,
                postFinder,
                postSelector
              ) {
                if (postFilter && !postFilter[expando]) {
                  postFilter = setMatcher(postFilter);
                }
                if (postFinder && !postFinder[expando]) {
                  postFinder = setMatcher(postFinder, postSelector);
                }
                return markFunction(function (seed, results, context, xml) {
                  var temp,
                    i,
                    elem,
                    matcherOut,
                    preMap = [],
                    postMap = [],
                    preexisting = results.length,
                    // Get initial elements from seed or context
                    elems =
                      seed ||
                      multipleContexts(
                        selector || "*",
                        context.nodeType ? [context] : context,
                        []
                      ),
                    // Prefilter to get matcher input, preserving a map for seed-results synchronization
                    matcherIn =
                      preFilter && (seed || !selector)
                        ? condense(elems, preMap, preFilter, context, xml)
                        : elems;

                  if (matcher) {
                    // If we have a postFinder, or filtered seed, or non-seed postFilter
                    // or preexisting results,
                    matcherOut =
                      postFinder ||
                      (seed ? preFilter : preexisting || postFilter)
                        ? // ...intermediate processing is necessary
                          []
                        : // ...otherwise use results directly
                          results;

                    // Find primary matches
                    matcher(matcherIn, matcherOut, context, xml);
                  } else {
                    matcherOut = matcherIn;
                  }

                  // Apply postFilter
                  if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);

                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while (i--) {
                      if ((elem = temp[i])) {
                        matcherOut[postMap[i]] = !(matcherIn[postMap[i]] =
                          elem);
                      }
                    }
                  }

                  if (seed) {
                    if (postFinder || preFilter) {
                      if (postFinder) {
                        // Get the final matcherOut by condensing this intermediate into postFinder contexts
                        temp = [];
                        i = matcherOut.length;
                        while (i--) {
                          if ((elem = matcherOut[i])) {
                            // Restore matcherIn since elem is not yet a final match
                            temp.push((matcherIn[i] = elem));
                          }
                        }
                        postFinder(null, (matcherOut = []), temp, xml);
                      }

                      // Move matched elements from seed to results to keep them synchronized
                      i = matcherOut.length;
                      while (i--) {
                        if (
                          (elem = matcherOut[i]) &&
                          (temp = postFinder
                            ? indexOf.call(seed, elem)
                            : preMap[i]) > -1
                        ) {
                          seed[temp] = !(results[temp] = elem);
                        }
                      }
                    }

                    // Add elements to results, through postFinder if defined
                  } else {
                    matcherOut = condense(
                      matcherOut === results
                        ? matcherOut.splice(preexisting, matcherOut.length)
                        : matcherOut
                    );
                    if (postFinder) {
                      postFinder(null, results, matcherOut, xml);
                    } else {
                      push.apply(results, matcherOut);
                    }
                  }
                });
              }

              function matcherFromTokens(tokens) {
                var checkContext,
                  matcher,
                  j,
                  len = tokens.length,
                  leadingRelative = Expr.relative[tokens[0].type],
                  implicitRelative = leadingRelative || Expr.relative[" "],
                  i = leadingRelative ? 1 : 0,
                  // The foundational matcher ensures that elements are reachable from top-level context(s)
                  matchContext = addCombinator(
                    function (elem) {
                      return elem === checkContext;
                    },
                    implicitRelative,
                    true
                  ),
                  matchAnyContext = addCombinator(
                    function (elem) {
                      return indexOf.call(checkContext, elem) > -1;
                    },
                    implicitRelative,
                    true
                  ),
                  matchers = [
                    function (elem, context, xml) {
                      // Support: IE 11+, Edge 17 - 18+
                      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                      // two documents; shallow comparisons work.
                      // eslint-disable-next-line eqeqeq
                      var ret =
                        (!leadingRelative &&
                          (xml || context != outermostContext)) ||
                        ((checkContext = context).nodeType
                          ? matchContext(elem, context, xml)
                          : matchAnyContext(elem, context, xml));

                      // Avoid hanging onto element
                      // (see https://github.com/jquery/sizzle/issues/299)
                      checkContext = null;
                      return ret;
                    },
                  ];

                for (; i < len; i++) {
                  if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [
                      addCombinator(elementMatcher(matchers), matcher),
                    ];
                  } else {
                    matcher = Expr.filter[tokens[i].type].apply(
                      null,
                      tokens[i].matches
                    );

                    // Return special upon seeing a positional matcher
                    if (matcher[expando]) {
                      // Find the next relative operator (if any) for proper handling
                      j = ++i;
                      for (; j < len; j++) {
                        if (Expr.relative[tokens[j].type]) {
                          break;
                        }
                      }
                      return setMatcher(
                        i > 1 && elementMatcher(matchers),
                        i > 1 &&
                          toSelector(
                            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                            tokens.slice(0, i - 1).concat({
                              value: tokens[i - 2].type === " " ? "*" : "",
                            })
                          ).replace(rtrimCSS, "$1"),
                        matcher,
                        i < j && matcherFromTokens(tokens.slice(i, j)),
                        j < len &&
                          matcherFromTokens((tokens = tokens.slice(j))),
                        j < len && toSelector(tokens)
                      );
                    }
                    matchers.push(matcher);
                  }
                }

                return elementMatcher(matchers);
              }

              function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0,
                  byElement = elementMatchers.length > 0,
                  superMatcher = function (
                    seed,
                    context,
                    xml,
                    results,
                    outermost
                  ) {
                    var elem,
                      j,
                      matcher,
                      matchedCount = 0,
                      i = "0",
                      unmatched = seed && [],
                      setMatched = [],
                      contextBackup = outermostContext,
                      // We must always have either seed elements or outermost context
                      elems =
                        seed || (byElement && Expr.find.TAG("*", outermost)),
                      // Use integer dirruns iff this is the outermost matcher
                      dirrunsUnique = (dirruns +=
                        contextBackup == null ? 1 : Math.random() || 0.1),
                      len = elems.length;

                    if (outermost) {
                      // Support: IE 11+, Edge 17 - 18+
                      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                      // two documents; shallow comparisons work.
                      // eslint-disable-next-line eqeqeq
                      outermostContext =
                        context == document || context || outermost;
                    }

                    // Add elements passing elementMatchers directly to results
                    // Support: iOS <=7 - 9 only
                    // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
                    // elements by id. (see trac-14142)
                    for (; i !== len && (elem = elems[i]) != null; i++) {
                      if (byElement && elem) {
                        j = 0;

                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (!context && elem.ownerDocument != document) {
                          setDocument(elem);
                          xml = !documentIsHTML;
                        }
                        while ((matcher = elementMatchers[j++])) {
                          if (matcher(elem, context || document, xml)) {
                            push.call(results, elem);
                            break;
                          }
                        }
                        if (outermost) {
                          dirruns = dirrunsUnique;
                        }
                      }

                      // Track unmatched elements for set filters
                      if (bySet) {
                        // They will have gone through all possible matchers
                        if ((elem = !matcher && elem)) {
                          matchedCount--;
                        }

                        // Lengthen the array for every element, matched or not
                        if (seed) {
                          unmatched.push(elem);
                        }
                      }
                    }

                    // `i` is now the count of elements visited above, and adding it to `matchedCount`
                    // makes the latter nonnegative.
                    matchedCount += i;

                    // Apply set filters to unmatched elements
                    // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                    // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                    // no element matchers and no seed.
                    // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                    // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                    // numerically zero.
                    if (bySet && i !== matchedCount) {
                      j = 0;
                      while ((matcher = setMatchers[j++])) {
                        matcher(unmatched, setMatched, context, xml);
                      }

                      if (seed) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if (matchedCount > 0) {
                          while (i--) {
                            if (!(unmatched[i] || setMatched[i])) {
                              setMatched[i] = pop.call(results);
                            }
                          }
                        }

                        // Discard index placeholder values to get only actual matches
                        setMatched = condense(setMatched);
                      }

                      // Add matches to results
                      push.apply(results, setMatched);

                      // Seedless set matches succeeding multiple successful matchers stipulate sorting
                      if (
                        outermost &&
                        !seed &&
                        setMatched.length > 0 &&
                        matchedCount + setMatchers.length > 1
                      ) {
                        jQuery.uniqueSort(results);
                      }
                    }

                    // Override manipulation of globals by nested matchers
                    if (outermost) {
                      dirruns = dirrunsUnique;
                      outermostContext = contextBackup;
                    }

                    return unmatched;
                  };

                return bySet ? markFunction(superMatcher) : superMatcher;
              }

              function compile(selector, match /* Internal Use Only */) {
                var i,
                  setMatchers = [],
                  elementMatchers = [],
                  cached = compilerCache[selector + " "];

                if (!cached) {
                  // Generate a function of recursive functions that can be used to check each element
                  if (!match) {
                    match = tokenize(selector);
                  }
                  i = match.length;
                  while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                      setMatchers.push(cached);
                    } else {
                      elementMatchers.push(cached);
                    }
                  }

                  // Cache the compiled function
                  cached = compilerCache(
                    selector,
                    matcherFromGroupMatchers(elementMatchers, setMatchers)
                  );

                  // Save selector and tokenization
                  cached.selector = selector;
                }
                return cached;
              }

              /**
               * A low-level selection function that works with jQuery's compiled
               *  selector functions
               * @param {String|Function} selector A selector or a pre-compiled
               *  selector function built with jQuery selector compile
               * @param {Element} context
               * @param {Array} [results]
               * @param {Array} [seed] A set of elements to match against
               */
              function select(selector, context, results, seed) {
                var i,
                  tokens,
                  token,
                  type,
                  find,
                  compiled = typeof selector === "function" && selector,
                  match =
                    !seed &&
                    tokenize((selector = compiled.selector || selector));

                results = results || [];

                // Try to minimize operations if there is only one selector in the list and no seed
                // (the latter of which guarantees us context)
                if (match.length === 1) {
                  // Reduce context if the leading compound selector is an ID
                  tokens = match[0] = match[0].slice(0);
                  if (
                    tokens.length > 2 &&
                    (token = tokens[0]).type === "ID" &&
                    context.nodeType === 9 &&
                    documentIsHTML &&
                    Expr.relative[tokens[1].type]
                  ) {
                    context = (Expr.find.ID(
                      token.matches[0].replace(runescape, funescape),
                      context
                    ) || [])[0];
                    if (!context) {
                      return results;

                      // Precompiled matchers will still verify ancestry, so step up a level
                    } else if (compiled) {
                      context = context.parentNode;
                    }

                    selector = selector.slice(tokens.shift().value.length);
                  }

                  // Fetch a seed set for right-to-left matching
                  i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
                  while (i--) {
                    token = tokens[i];

                    // Abort if we hit a combinator
                    if (Expr.relative[(type = token.type)]) {
                      break;
                    }
                    if ((find = Expr.find[type])) {
                      // Search, expanding context for leading sibling combinators
                      if (
                        (seed = find(
                          token.matches[0].replace(runescape, funescape),
                          (rsibling.test(tokens[0].type) &&
                            testContext(context.parentNode)) ||
                            context
                        ))
                      ) {
                        // If seed is empty or no tokens remain, we can return early
                        tokens.splice(i, 1);
                        selector = seed.length && toSelector(tokens);
                        if (!selector) {
                          push.apply(results, seed);
                          return results;
                        }

                        break;
                      }
                    }
                  }
                }

                // Compile and execute a filtering function if one is not provided
                // Provide `match` to avoid retokenization if we modified the selector above
                (compiled || compile(selector, match))(
                  seed,
                  context,
                  !documentIsHTML,
                  results,
                  !context ||
                    (rsibling.test(selector) &&
                      testContext(context.parentNode)) ||
                    context
                );
                return results;
              }

              // One-time assignments

              // Support: Android <=4.0 - 4.1+
              // Sort stability
              support.sortStable =
                expando.split("").sort(sortOrder).join("") === expando;

              // Initialize against the default document
              setDocument();

              // Support: Android <=4.0 - 4.1+
              // Detached nodes confoundingly follow *each other*
              support.sortDetached = assert(function (el) {
                // Should return 1, but returns 4 (following)
                return (
                  el.compareDocumentPosition(
                    document.createElement("fieldset")
                  ) & 1
                );
              });

              jQuery.find = find;

              // Deprecated
              jQuery.expr[":"] = jQuery.expr.pseudos;
              jQuery.unique = jQuery.uniqueSort;

              // These have always been private, but they used to be documented as part of
              // Sizzle so let's maintain them for now for backwards compatibility purposes.
              find.compile = compile;
              find.select = select;
              find.setDocument = setDocument;
              find.tokenize = tokenize;

              find.escape = jQuery.escapeSelector;
              find.getText = jQuery.text;
              find.isXML = jQuery.isXMLDoc;
              find.selectors = jQuery.expr;
              find.support = jQuery.support;
              find.uniqueSort = jQuery.uniqueSort;

              /* eslint-enable */
            })();

            var dir = function (elem, dir, until) {
              var matched = [],
                truncate = until !== undefined;

              while ((elem = elem[dir]) && elem.nodeType !== 9) {
                if (elem.nodeType === 1) {
                  if (truncate && jQuery(elem).is(until)) {
                    break;
                  }
                  matched.push(elem);
                }
              }
              return matched;
            };

            var siblings = function (n, elem) {
              var matched = [];

              for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                  matched.push(n);
                }
              }

              return matched;
            };

            var rneedsContext = jQuery.expr.match.needsContext;

            var rsingleTag =
              /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

            // Implement the identical functionality for filter and not
            function winnow(elements, qualifier, not) {
              if (isFunction(qualifier)) {
                return jQuery.grep(elements, function (elem, i) {
                  return !!qualifier.call(elem, i, elem) !== not;
                });
              }

              // Single element
              if (qualifier.nodeType) {
                return jQuery.grep(elements, function (elem) {
                  return (elem === qualifier) !== not;
                });
              }

              // Arraylike of elements (jQuery, arguments, Array)
              if (typeof qualifier !== "string") {
                return jQuery.grep(elements, function (elem) {
                  return indexOf.call(qualifier, elem) > -1 !== not;
                });
              }

              // Filtered directly for both simple and complex selectors
              return jQuery.filter(qualifier, elements, not);
            }

            jQuery.filter = function (expr, elems, not) {
              var elem = elems[0];

              if (not) {
                expr = ":not(" + expr + ")";
              }

              if (elems.length === 1 && elem.nodeType === 1) {
                return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
              }

              return jQuery.find.matches(
                expr,
                jQuery.grep(elems, function (elem) {
                  return elem.nodeType === 1;
                })
              );
            };

            jQuery.fn.extend({
              find: function (selector) {
                var i,
                  ret,
                  len = this.length,
                  self = this;

                if (typeof selector !== "string") {
                  return this.pushStack(
                    jQuery(selector).filter(function () {
                      for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                          return true;
                        }
                      }
                    })
                  );
                }

                ret = this.pushStack([]);

                for (i = 0; i < len; i++) {
                  jQuery.find(selector, self[i], ret);
                }

                return len > 1 ? jQuery.uniqueSort(ret) : ret;
              },
              filter: function (selector) {
                return this.pushStack(winnow(this, selector || [], false));
              },
              not: function (selector) {
                return this.pushStack(winnow(this, selector || [], true));
              },
              is: function (selector) {
                return !!winnow(
                  this,

                  // If this is a positional/relative selector, check membership in the returned set
                  // so $("p:first").is("p:last") won't return true for a doc with two "p".
                  typeof selector === "string" && rneedsContext.test(selector)
                    ? jQuery(selector)
                    : selector || [],
                  false
                ).length;
              },
            });

            // Initialize a jQuery object

            // A central reference to the root jQuery(document)
            var rootjQuery,
              // A simple way to check for HTML strings
              // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
              // Strict HTML recognition (trac-11290: must start with <)
              // Shortcut simple #id case for speed
              rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
              init = (jQuery.fn.init = function (selector, context, root) {
                var match, elem;

                // HANDLE: $(""), $(null), $(undefined), $(false)
                if (!selector) {
                  return this;
                }

                // Method init() accepts an alternate rootjQuery
                // so migrate can support jQuery.sub (gh-2101)
                root = root || rootjQuery;

                // Handle HTML strings
                if (typeof selector === "string") {
                  if (
                    selector[0] === "<" &&
                    selector[selector.length - 1] === ">" &&
                    selector.length >= 3
                  ) {
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [null, selector, null];
                  } else {
                    match = rquickExpr.exec(selector);
                  }

                  // Match html or make sure no context is specified for #id
                  if (match && (match[1] || !context)) {
                    // HANDLE: $(html) -> $(array)
                    if (match[1]) {
                      context =
                        context instanceof jQuery ? context[0] : context;

                      // Option to run scripts is true for back-compat
                      // Intentionally let the error be thrown if parseHTML is not present
                      jQuery.merge(
                        this,
                        jQuery.parseHTML(
                          match[1],
                          context && context.nodeType
                            ? context.ownerDocument || context
                            : document,
                          true
                        )
                      );

                      // HANDLE: $(html, props)
                      if (
                        rsingleTag.test(match[1]) &&
                        jQuery.isPlainObject(context)
                      ) {
                        for (match in context) {
                          // Properties of context are called as methods if possible
                          if (isFunction(this[match])) {
                            this[match](context[match]);

                            // ...and otherwise set as attributes
                          } else {
                            this.attr(match, context[match]);
                          }
                        }
                      }

                      return this;

                      // HANDLE: $(#id)
                    } else {
                      elem = document.getElementById(match[2]);

                      if (elem) {
                        // Inject the element directly into the jQuery object
                        this[0] = elem;
                        this.length = 1;
                      }
                      return this;
                    }

                    // HANDLE: $(expr, $(...))
                  } else if (!context || context.jquery) {
                    return (context || root).find(selector);

                    // HANDLE: $(expr, context)
                    // (which is just equivalent to: $(context).find(expr)
                  } else {
                    return this.constructor(context).find(selector);
                  }

                  // HANDLE: $(DOMElement)
                } else if (selector.nodeType) {
                  this[0] = selector;
                  this.length = 1;
                  return this;

                  // HANDLE: $(function)
                  // Shortcut for document ready
                } else if (isFunction(selector)) {
                  return root.ready !== undefined
                    ? root.ready(selector)
                    : // Execute immediately if ready is not present
                      selector(jQuery);
                }

                return jQuery.makeArray(selector, this);
              });

            // Give the init function the jQuery prototype for later instantiation
            init.prototype = jQuery.fn;

            // Initialize central reference
            rootjQuery = jQuery(document);

            var rparentsprev = /^(?:parents|prev(?:Until|All))/,
              // Methods guaranteed to produce a unique set when starting from a unique set
              guaranteedUnique = {
                children: true,
                contents: true,
                next: true,
                prev: true,
              };

            jQuery.fn.extend({
              has: function (target) {
                var targets = jQuery(target, this),
                  l = targets.length;

                return this.filter(function () {
                  var i = 0;
                  for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                      return true;
                    }
                  }
                });
              },

              closest: function (selectors, context) {
                var cur,
                  i = 0,
                  l = this.length,
                  matched = [],
                  targets = typeof selectors !== "string" && jQuery(selectors);

                // Positional selectors never match, since there's no _selection_ context
                if (!rneedsContext.test(selectors)) {
                  for (; i < l; i++) {
                    for (
                      cur = this[i];
                      cur && cur !== context;
                      cur = cur.parentNode
                    ) {
                      // Always skip document fragments
                      if (
                        cur.nodeType < 11 &&
                        (targets
                          ? targets.index(cur) > -1
                          : // Don't pass non-elements to jQuery#find
                            cur.nodeType === 1 &&
                            jQuery.find.matchesSelector(cur, selectors))
                      ) {
                        matched.push(cur);
                        break;
                      }
                    }
                  }
                }

                return this.pushStack(
                  matched.length > 1 ? jQuery.uniqueSort(matched) : matched
                );
              },

              // Determine the position of an element within the set
              index: function (elem) {
                // No argument, return index in parent
                if (!elem) {
                  return this[0] && this[0].parentNode
                    ? this.first().prevAll().length
                    : -1;
                }

                // Index in selector
                if (typeof elem === "string") {
                  return indexOf.call(jQuery(elem), this[0]);
                }

                // Locate the position of the desired element
                return indexOf.call(
                  this,

                  // If it receives a jQuery object, the first element is used
                  elem.jquery ? elem[0] : elem
                );
              },

              add: function (selector, context) {
                return this.pushStack(
                  jQuery.uniqueSort(
                    jQuery.merge(this.get(), jQuery(selector, context))
                  )
                );
              },

              addBack: function (selector) {
                return this.add(
                  selector == null
                    ? this.prevObject
                    : this.prevObject.filter(selector)
                );
              },
            });

            function sibling(cur, dir) {
              while ((cur = cur[dir]) && cur.nodeType !== 1) {}
              return cur;
            }

            jQuery.each(
              {
                parent: function (elem) {
                  var parent = elem.parentNode;
                  return parent && parent.nodeType !== 11 ? parent : null;
                },
                parents: function (elem) {
                  return dir(elem, "parentNode");
                },
                parentsUntil: function (elem, _i, until) {
                  return dir(elem, "parentNode", until);
                },
                next: function (elem) {
                  return sibling(elem, "nextSibling");
                },
                prev: function (elem) {
                  return sibling(elem, "previousSibling");
                },
                nextAll: function (elem) {
                  return dir(elem, "nextSibling");
                },
                prevAll: function (elem) {
                  return dir(elem, "previousSibling");
                },
                nextUntil: function (elem, _i, until) {
                  return dir(elem, "nextSibling", until);
                },
                prevUntil: function (elem, _i, until) {
                  return dir(elem, "previousSibling", until);
                },
                siblings: function (elem) {
                  return siblings((elem.parentNode || {}).firstChild, elem);
                },
                children: function (elem) {
                  return siblings(elem.firstChild);
                },
                contents: function (elem) {
                  if (
                    elem.contentDocument != null &&
                    // Support: IE 11+
                    // <object> elements with no `data` attribute has an object
                    // `contentDocument` with a `null` prototype.
                    getProto(elem.contentDocument)
                  ) {
                    return elem.contentDocument;
                  }

                  // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
                  // Treat the template element as a regular one in browsers that
                  // don't support it.
                  if (nodeName(elem, "template")) {
                    elem = elem.content || elem;
                  }

                  return jQuery.merge([], elem.childNodes);
                },
              },
              function (name, fn) {
                jQuery.fn[name] = function (until, selector) {
                  var matched = jQuery.map(this, fn, until);

                  if (name.slice(-5) !== "Until") {
                    selector = until;
                  }

                  if (selector && typeof selector === "string") {
                    matched = jQuery.filter(selector, matched);
                  }

                  if (this.length > 1) {
                    // Remove duplicates
                    if (!guaranteedUnique[name]) {
                      jQuery.uniqueSort(matched);
                    }

                    // Reverse order for parents* and prev-derivatives
                    if (rparentsprev.test(name)) {
                      matched.reverse();
                    }
                  }

                  return this.pushStack(matched);
                };
              }
            );
            var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

            // Convert String-formatted options into Object-formatted ones
            function createOptions(options) {
              var object = {};
              jQuery.each(
                options.match(rnothtmlwhite) || [],
                function (_, flag) {
                  object[flag] = true;
                }
              );
              return object;
            }

            /*
             * Create a callback list using the following parameters:
             *
             *	options: an optional list of space-separated options that will change how
             *			the callback list behaves or a more traditional option object
             *
             * By default a callback list will act like an event callback list and can be
             * "fired" multiple times.
             *
             * Possible options:
             *
             *	once:			will ensure the callback list can only be fired once (like a Deferred)
             *
             *	memory:			will keep track of previous values and will call any callback added
             *					after the list has been fired right away with the latest "memorized"
             *					values (like a Deferred)
             *
             *	unique:			will ensure a callback can only be added once (no duplicate in the list)
             *
             *	stopOnFalse:	interrupt callings when a callback returns false
             *
             */
            jQuery.Callbacks = function (options) {
              // Convert options from String-formatted to Object-formatted if needed
              // (we check in cache first)
              options =
                typeof options === "string"
                  ? createOptions(options)
                  : jQuery.extend({}, options);

              var // Flag to know if list is currently firing
                firing,
                // Last fire value for non-forgettable lists
                memory,
                // Flag to know if list was already fired
                fired,
                // Flag to prevent firing
                locked,
                // Actual callback list
                list = [],
                // Queue of execution data for repeatable lists
                queue = [],
                // Index of currently firing callback (modified by add/remove as needed)
                firingIndex = -1,
                // Fire callbacks
                fire = function () {
                  // Enforce single-firing
                  locked = locked || options.once;

                  // Execute callbacks for all pending executions,
                  // respecting firingIndex overrides and runtime changes
                  fired = firing = true;
                  for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();
                    while (++firingIndex < list.length) {
                      // Run callback and check for early termination
                      if (
                        list[firingIndex].apply(memory[0], memory[1]) ===
                          false &&
                        options.stopOnFalse
                      ) {
                        // Jump to end and forget the data so .add doesn't re-fire
                        firingIndex = list.length;
                        memory = false;
                      }
                    }
                  }

                  // Forget the data if we're done with it
                  if (!options.memory) {
                    memory = false;
                  }

                  firing = false;

                  // Clean up if we're done firing for good
                  if (locked) {
                    // Keep an empty list if we have data for future add calls
                    if (memory) {
                      list = [];

                      // Otherwise, this object is spent
                    } else {
                      list = "";
                    }
                  }
                },
                // Actual Callbacks object
                self = {
                  // Add a callback or a collection of callbacks to the list
                  add: function () {
                    if (list) {
                      // If we have memory from a past run, we should fire after adding
                      if (memory && !firing) {
                        firingIndex = list.length - 1;
                        queue.push(memory);
                      }

                      (function add(args) {
                        jQuery.each(args, function (_, arg) {
                          if (isFunction(arg)) {
                            if (!options.unique || !self.has(arg)) {
                              list.push(arg);
                            }
                          } else if (
                            arg &&
                            arg.length &&
                            toType(arg) !== "string"
                          ) {
                            // Inspect recursively
                            add(arg);
                          }
                        });
                      })(arguments);

                      if (memory && !firing) {
                        fire();
                      }
                    }
                    return this;
                  },

                  // Remove a callback from the list
                  remove: function () {
                    jQuery.each(arguments, function (_, arg) {
                      var index;
                      while ((index = jQuery.inArray(arg, list, index)) > -1) {
                        list.splice(index, 1);

                        // Handle firing indexes
                        if (index <= firingIndex) {
                          firingIndex--;
                        }
                      }
                    });
                    return this;
                  },

                  // Check if a given callback is in the list.
                  // If no argument is given, return whether or not list has callbacks attached.
                  has: function (fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                  },

                  // Remove all callbacks from the list
                  empty: function () {
                    if (list) {
                      list = [];
                    }
                    return this;
                  },

                  // Disable .fire and .add
                  // Abort any current/pending executions
                  // Clear all callbacks and values
                  disable: function () {
                    locked = queue = [];
                    list = memory = "";
                    return this;
                  },
                  disabled: function () {
                    return !list;
                  },

                  // Disable .fire
                  // Also disable .add unless we have memory (since it would have no effect)
                  // Abort any pending executions
                  lock: function () {
                    locked = queue = [];
                    if (!memory && !firing) {
                      list = memory = "";
                    }
                    return this;
                  },
                  locked: function () {
                    return !!locked;
                  },

                  // Call all callbacks with the given context and arguments
                  fireWith: function (context, args) {
                    if (!locked) {
                      args = args || [];
                      args = [context, args.slice ? args.slice() : args];
                      queue.push(args);
                      if (!firing) {
                        fire();
                      }
                    }
                    return this;
                  },

                  // Call all the callbacks with the given arguments
                  fire: function () {
                    self.fireWith(this, arguments);
                    return this;
                  },

                  // To know if the callbacks have already been called at least once
                  fired: function () {
                    return !!fired;
                  },
                };

              return self;
            };

            function Identity(v) {
              return v;
            }
            function Thrower(ex) {
              throw ex;
            }

            function adoptValue(value, resolve, reject, noValue) {
              var method;

              try {
                // Check for promise aspect first to privilege synchronous behavior
                if (value && isFunction((method = value.promise))) {
                  method.call(value).done(resolve).fail(reject);

                  // Other thenables
                } else if (value && isFunction((method = value.then))) {
                  method.call(value, resolve, reject);

                  // Other non-thenables
                } else {
                  // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                  // * false: [ value ].slice( 0 ) => resolve( value )
                  // * true: [ value ].slice( 1 ) => resolve()
                  resolve.apply(undefined, [value].slice(noValue));
                }

                // For Promises/A+, convert exceptions into rejections
                // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
                // Deferred#then to conditionally suppress rejection.
              } catch (value) {
                // Support: Android 4.0 only
                // Strict mode functions invoked without .call/.apply get global-object context
                reject.apply(undefined, [value]);
              }
            }

            jQuery.extend({
              Deferred: function (func) {
                var tuples = [
                    // action, add listener, callbacks,
                    // ... .then handlers, argument index, [final state]
                    [
                      "notify",
                      "progress",
                      jQuery.Callbacks("memory"),
                      jQuery.Callbacks("memory"),
                      2,
                    ],
                    [
                      "resolve",
                      "done",
                      jQuery.Callbacks("once memory"),
                      jQuery.Callbacks("once memory"),
                      0,
                      "resolved",
                    ],
                    [
                      "reject",
                      "fail",
                      jQuery.Callbacks("once memory"),
                      jQuery.Callbacks("once memory"),
                      1,
                      "rejected",
                    ],
                  ],
                  state = "pending",
                  promise = {
                    state: function () {
                      return state;
                    },
                    always: function () {
                      deferred.done(arguments).fail(arguments);
                      return this;
                    },
                    catch: function (fn) {
                      return promise.then(null, fn);
                    },

                    // Keep pipe for back-compat
                    pipe: function (/* fnDone, fnFail, fnProgress */) {
                      var fns = arguments;

                      return jQuery
                        .Deferred(function (newDefer) {
                          jQuery.each(tuples, function (_i, tuple) {
                            // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                            var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                            // deferred.progress(function() { bind to newDefer or newDefer.notify })
                            // deferred.done(function() { bind to newDefer or newDefer.resolve })
                            // deferred.fail(function() { bind to newDefer or newDefer.reject })
                            deferred[tuple[1]](function () {
                              var returned = fn && fn.apply(this, arguments);
                              if (returned && isFunction(returned.promise)) {
                                returned
                                  .promise()
                                  .progress(newDefer.notify)
                                  .done(newDefer.resolve)
                                  .fail(newDefer.reject);
                              } else {
                                newDefer[tuple[0] + "With"](
                                  this,
                                  fn ? [returned] : arguments
                                );
                              }
                            });
                          });
                          fns = null;
                        })
                        .promise();
                    },
                    then: function (onFulfilled, onRejected, onProgress) {
                      var maxDepth = 0;
                      function resolve(depth, deferred, handler, special) {
                        return function () {
                          var that = this,
                            args = arguments,
                            mightThrow = function () {
                              var returned, then;

                              // Support: Promises/A+ section 2.3.3.3.3
                              // https://promisesaplus.com/#point-59
                              // Ignore double-resolution attempts
                              if (depth < maxDepth) {
                                return;
                              }

                              returned = handler.apply(that, args);

                              // Support: Promises/A+ section 2.3.1
                              // https://promisesaplus.com/#point-48
                              if (returned === deferred.promise()) {
                                throw new TypeError("Thenable self-resolution");
                              }

                              // Support: Promises/A+ sections 2.3.3.1, 3.5
                              // https://promisesaplus.com/#point-54
                              // https://promisesaplus.com/#point-75
                              // Retrieve `then` only once
                              then =
                                returned &&
                                // Support: Promises/A+ section 2.3.4
                                // https://promisesaplus.com/#point-64
                                // Only check objects and functions for thenability
                                (typeof returned === "object" ||
                                  typeof returned === "function") &&
                                returned.then;

                              // Handle a returned thenable
                              if (isFunction(then)) {
                                // Special processors (notify) just wait for resolution
                                if (special) {
                                  then.call(
                                    returned,
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Identity,
                                      special
                                    ),
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Thrower,
                                      special
                                    )
                                  );

                                  // Normal processors (resolve) also hook into progress
                                } else {
                                  // ...and disregard older resolution values
                                  maxDepth++;

                                  then.call(
                                    returned,
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Identity,
                                      special
                                    ),
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Thrower,
                                      special
                                    ),
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Identity,
                                      deferred.notifyWith
                                    )
                                  );
                                }

                                // Handle all other returned values
                              } else {
                                // Only substitute handlers pass on context
                                // and multiple values (non-spec behavior)
                                if (handler !== Identity) {
                                  that = undefined;
                                  args = [returned];
                                }

                                // Process the value(s)
                                // Default process is resolve
                                (special || deferred.resolveWith)(that, args);
                              }
                            },
                            // Only normal processors (resolve) catch and reject exceptions
                            process = special
                              ? mightThrow
                              : function () {
                                  try {
                                    mightThrow();
                                  } catch (e) {
                                    if (jQuery.Deferred.exceptionHook) {
                                      jQuery.Deferred.exceptionHook(
                                        e,
                                        process.error
                                      );
                                    }

                                    // Support: Promises/A+ section 2.3.3.3.4.1
                                    // https://promisesaplus.com/#point-61
                                    // Ignore post-resolution exceptions
                                    if (depth + 1 >= maxDepth) {
                                      // Only substitute handlers pass on context
                                      // and multiple values (non-spec behavior)
                                      if (handler !== Thrower) {
                                        that = undefined;
                                        args = [e];
                                      }

                                      deferred.rejectWith(that, args);
                                    }
                                  }
                                };

                          // Support: Promises/A+ section 2.3.3.3.1
                          // https://promisesaplus.com/#point-57
                          // Re-resolve promises immediately to dodge false rejection from
                          // subsequent errors
                          if (depth) {
                            process();
                          } else {
                            // Call an optional hook to record the error, in case of exception
                            // since it's otherwise lost when execution goes async
                            if (jQuery.Deferred.getErrorHook) {
                              process.error = jQuery.Deferred.getErrorHook();

                              // The deprecated alias of the above. While the name suggests
                              // returning the stack, not an error instance, jQuery just passes
                              // it directly to `console.warn` so both will work; an instance
                              // just better cooperates with source maps.
                            } else if (jQuery.Deferred.getStackHook) {
                              process.error = jQuery.Deferred.getStackHook();
                            }
                            window.setTimeout(process);
                          }
                        };
                      }

                      return jQuery
                        .Deferred(function (newDefer) {
                          // progress_handlers.add( ... )
                          tuples[0][3].add(
                            resolve(
                              0,
                              newDefer,
                              isFunction(onProgress) ? onProgress : Identity,
                              newDefer.notifyWith
                            )
                          );

                          // fulfilled_handlers.add( ... )
                          tuples[1][3].add(
                            resolve(
                              0,
                              newDefer,
                              isFunction(onFulfilled) ? onFulfilled : Identity
                            )
                          );

                          // rejected_handlers.add( ... )
                          tuples[2][3].add(
                            resolve(
                              0,
                              newDefer,
                              isFunction(onRejected) ? onRejected : Thrower
                            )
                          );
                        })
                        .promise();
                    },

                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function (obj) {
                      return obj != null
                        ? jQuery.extend(obj, promise)
                        : promise;
                    },
                  },
                  deferred = {};

                // Add list-specific methods
                jQuery.each(tuples, function (i, tuple) {
                  var list = tuple[2],
                    stateString = tuple[5];

                  // promise.progress = list.add
                  // promise.done = list.add
                  // promise.fail = list.add
                  promise[tuple[1]] = list.add;

                  // Handle state
                  if (stateString) {
                    list.add(
                      function () {
                        // state = "resolved" (i.e., fulfilled)
                        // state = "rejected"
                        state = stateString;
                      },

                      // rejected_callbacks.disable
                      // fulfilled_callbacks.disable
                      tuples[3 - i][2].disable,

                      // rejected_handlers.disable
                      // fulfilled_handlers.disable
                      tuples[3 - i][3].disable,

                      // progress_callbacks.lock
                      tuples[0][2].lock,

                      // progress_handlers.lock
                      tuples[0][3].lock
                    );
                  }

                  // progress_handlers.fire
                  // fulfilled_handlers.fire
                  // rejected_handlers.fire
                  list.add(tuple[3].fire);

                  // deferred.notify = function() { deferred.notifyWith(...) }
                  // deferred.resolve = function() { deferred.resolveWith(...) }
                  // deferred.reject = function() { deferred.rejectWith(...) }
                  deferred[tuple[0]] = function () {
                    deferred[tuple[0] + "With"](
                      this === deferred ? undefined : this,
                      arguments
                    );
                    return this;
                  };

                  // deferred.notifyWith = list.fireWith
                  // deferred.resolveWith = list.fireWith
                  // deferred.rejectWith = list.fireWith
                  deferred[tuple[0] + "With"] = list.fireWith;
                });

                // Make the deferred a promise
                promise.promise(deferred);

                // Call given func if any
                if (func) {
                  func.call(deferred, deferred);
                }

                // All done!
                return deferred;
              },

              // Deferred helper
              when: function (singleValue) {
                var // count of uncompleted subordinates
                  remaining = arguments.length,
                  // count of unprocessed arguments
                  i = remaining,
                  // subordinate fulfillment data
                  resolveContexts = Array(i),
                  resolveValues = slice.call(arguments),
                  // the primary Deferred
                  primary = jQuery.Deferred(),
                  // subordinate callback factory
                  updateFunc = function (i) {
                    return function (value) {
                      resolveContexts[i] = this;
                      resolveValues[i] =
                        arguments.length > 1 ? slice.call(arguments) : value;
                      if (!--remaining) {
                        primary.resolveWith(resolveContexts, resolveValues);
                      }
                    };
                  };

                // Single- and empty arguments are adopted like Promise.resolve
                if (remaining <= 1) {
                  adoptValue(
                    singleValue,
                    primary.done(updateFunc(i)).resolve,
                    primary.reject,
                    !remaining
                  );

                  // Use .then() to unwrap secondary thenables (cf. gh-3000)
                  if (
                    primary.state() === "pending" ||
                    isFunction(resolveValues[i] && resolveValues[i].then)
                  ) {
                    return primary.then();
                  }
                }

                // Multiple arguments are aggregated like Promise.all array elements
                while (i--) {
                  adoptValue(resolveValues[i], updateFunc(i), primary.reject);
                }

                return primary.promise();
              },
            });

            // These usually indicate a programmer mistake during development,
            // warn about them ASAP rather than swallowing them by default.
            var rerrorNames =
              /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

            // If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
            // captured before the async barrier to get the original error cause
            // which may otherwise be hidden.
            jQuery.Deferred.exceptionHook = function (error, asyncError) {
              // Support: IE 8 - 9 only
              // Console exists when dev tools are open, which can happen at any time
              if (
                window.console &&
                window.console.warn &&
                error &&
                rerrorNames.test(error.name)
              ) {
                window.console.warn(
                  "jQuery.Deferred exception: " + error.message,
                  error.stack,
                  asyncError
                );
              }
            };

            jQuery.readyException = function (error) {
              window.setTimeout(function () {
                throw error;
              });
            };

            // The deferred used on DOM ready
            var readyList = jQuery.Deferred();

            jQuery.fn.ready = function (fn) {
              readyList
                .then(fn)

                // Wrap jQuery.readyException in a function so that the lookup
                // happens at the time of error handling instead of callback
                // registration.
                .catch(function (error) {
                  jQuery.readyException(error);
                });

              return this;
            };

            jQuery.extend({
              // Is the DOM ready to be used? Set to true once it occurs.
              isReady: false,

              // A counter to track how many items to wait for before
              // the ready event fires. See trac-6781
              readyWait: 1,

              // Handle when the DOM is ready
              ready: function (wait) {
                // Abort if there are pending holds or we're already ready
                if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                  return;
                }

                // Remember that the DOM is ready
                jQuery.isReady = true;

                // If a normal DOM Ready event fired, decrement, and wait if need be
                if (wait !== true && --jQuery.readyWait > 0) {
                  return;
                }

                // If there are functions bound, to execute
                readyList.resolveWith(document, [jQuery]);
              },
            });

            jQuery.ready.then = readyList.then;

            // The ready event handler and self cleanup method
            function completed() {
              document.removeEventListener("DOMContentLoaded", completed);
              window.removeEventListener("load", completed);
              jQuery.ready();
            }

            // Catch cases where $(document).ready() is called
            // after the browser event has already occurred.
            // Support: IE <=9 - 10 only
            // Older IE sometimes signals "interactive" too soon
            if (
              document.readyState === "complete" ||
              (document.readyState !== "loading" &&
                !document.documentElement.doScroll)
            ) {
              // Handle it asynchronously to allow scripts the opportunity to delay ready
              window.setTimeout(jQuery.ready);
            } else {
              // Use the handy event callback
              document.addEventListener("DOMContentLoaded", completed);

              // A fallback to window.onload, that will always work
              window.addEventListener("load", completed);
            }

            // Multifunctional method to get and set values of a collection
            // The value/s can optionally be executed if it's a function
            var access = function (
              elems,
              fn,
              key,
              value,
              chainable,
              emptyGet,
              raw
            ) {
              var i = 0,
                len = elems.length,
                bulk = key == null;

              // Sets many values
              if (toType(key) === "object") {
                chainable = true;
                for (i in key) {
                  access(elems, fn, i, key[i], true, emptyGet, raw);
                }

                // Sets one value
              } else if (value !== undefined) {
                chainable = true;

                if (!isFunction(value)) {
                  raw = true;
                }

                if (bulk) {
                  // Bulk operations run against the entire set
                  if (raw) {
                    fn.call(elems, value);
                    fn = null;

                    // ...except when executing function values
                  } else {
                    bulk = fn;
                    fn = function (elem, _key, value) {
                      return bulk.call(jQuery(elem), value);
                    };
                  }
                }

                if (fn) {
                  for (; i < len; i++) {
                    fn(
                      elems[i],
                      key,
                      raw ? value : value.call(elems[i], i, fn(elems[i], key))
                    );
                  }
                }
              }

              if (chainable) {
                return elems;
              }

              // Gets
              if (bulk) {
                return fn.call(elems);
              }

              return len ? fn(elems[0], key) : emptyGet;
            };

            // Matches dashed string for camelizing
            var rmsPrefix = /^-ms-/,
              rdashAlpha = /-([a-z])/g;

            // Used by camelCase as callback to replace()
            function fcamelCase(_all, letter) {
              return letter.toUpperCase();
            }

            // Convert dashed to camelCase; used by the css and data modules
            // Support: IE <=9 - 11, Edge 12 - 15
            // Microsoft forgot to hump their vendor prefix (trac-9572)
            function camelCase(string) {
              return string
                .replace(rmsPrefix, "ms-")
                .replace(rdashAlpha, fcamelCase);
            }
            var acceptData = function (owner) {
              // Accepts only:
              //  - Node
              //    - Node.ELEMENT_NODE
              //    - Node.DOCUMENT_NODE
              //  - Object
              //    - Any
              return (
                owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
              );
            };

            function Data() {
              this.expando = jQuery.expando + Data.uid++;
            }

            Data.uid = 1;

            Data.prototype = {
              cache: function (owner) {
                // Check if the owner object already has a cache
                var value = owner[this.expando];

                // If not, create one
                if (!value) {
                  value = {};

                  // We can accept data for non-element nodes in modern browsers,
                  // but we should not, see trac-8335.
                  // Always return an empty object.
                  if (acceptData(owner)) {
                    // If it is a node unlikely to be stringify-ed or looped over
                    // use plain assignment
                    if (owner.nodeType) {
                      owner[this.expando] = value;

                      // Otherwise secure it in a non-enumerable property
                      // configurable must be true to allow the property to be
                      // deleted when data is removed
                    } else {
                      Object.defineProperty(owner, this.expando, {
                        value: value,
                        configurable: true,
                      });
                    }
                  }
                }

                return value;
              },
              set: function (owner, data, value) {
                var prop,
                  cache = this.cache(owner);

                // Handle: [ owner, key, value ] args
                // Always use camelCase key (gh-2257)
                if (typeof data === "string") {
                  cache[camelCase(data)] = value;

                  // Handle: [ owner, { properties } ] args
                } else {
                  // Copy the properties one-by-one to the cache object
                  for (prop in data) {
                    cache[camelCase(prop)] = data[prop];
                  }
                }
                return cache;
              },
              get: function (owner, key) {
                return key === undefined
                  ? this.cache(owner)
                  : // Always use camelCase key (gh-2257)
                    owner[this.expando] && owner[this.expando][camelCase(key)];
              },
              access: function (owner, key, value) {
                // In cases where either:
                //
                //   1. No key was specified
                //   2. A string key was specified, but no value provided
                //
                // Take the "read" path and allow the get method to determine
                // which value to return, respectively either:
                //
                //   1. The entire cache object
                //   2. The data stored at the key
                //
                if (
                  key === undefined ||
                  (key && typeof key === "string" && value === undefined)
                ) {
                  return this.get(owner, key);
                }

                // When the key is not a string, or both a key and value
                // are specified, set or extend (existing objects) with either:
                //
                //   1. An object of properties
                //   2. A key and value
                //
                this.set(owner, key, value);

                // Since the "set" path can have two possible entry points
                // return the expected data based on which path was taken[*]
                return value !== undefined ? value : key;
              },
              remove: function (owner, key) {
                var i,
                  cache = owner[this.expando];

                if (cache === undefined) {
                  return;
                }

                if (key !== undefined) {
                  // Support array or space separated string of keys
                  if (Array.isArray(key)) {
                    // If key is an array of keys...
                    // We always set camelCase keys, so remove that.
                    key = key.map(camelCase);
                  } else {
                    key = camelCase(key);

                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
                  }

                  i = key.length;

                  while (i--) {
                    delete cache[key[i]];
                  }
                }

                // Remove the expando if there's no more data
                if (key === undefined || jQuery.isEmptyObject(cache)) {
                  // Support: Chrome <=35 - 45
                  // Webkit & Blink performance suffers when deleting properties
                  // from DOM nodes, so set to undefined instead
                  // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                  if (owner.nodeType) {
                    owner[this.expando] = undefined;
                  } else {
                    delete owner[this.expando];
                  }
                }
              },
              hasData: function (owner) {
                var cache = owner[this.expando];
                return cache !== undefined && !jQuery.isEmptyObject(cache);
              },
            };
            var dataPriv = new Data();

            var dataUser = new Data();

            //	Implementation Summary
            //
            //	1. Enforce API surface and semantic compatibility with 1.9.x branch
            //	2. Improve the module's maintainability by reducing the storage
            //		paths to a single mechanism.
            //	3. Use the same single mechanism to support "private" and "user" data.
            //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
            //	5. Avoid exposing implementation details on user objects (eg. expando properties)
            //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

            var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
              rmultiDash = /[A-Z]/g;

            function getData(data) {
              if (data === "true") {
                return true;
              }

              if (data === "false") {
                return false;
              }

              if (data === "null") {
                return null;
              }

              // Only convert to a number if it doesn't change the string
              if (data === +data + "") {
                return +data;
              }

              if (rbrace.test(data)) {
                return JSON.parse(data);
              }

              return data;
            }

            function dataAttr(elem, key, data) {
              var name;

              // If nothing was found internally, try to fetch any
              // data from the HTML5 data-* attribute
              if (data === undefined && elem.nodeType === 1) {
                name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
                data = elem.getAttribute(name);

                if (typeof data === "string") {
                  try {
                    data = getData(data);
                  } catch (e) {}

                  // Make sure we set the data so it isn't changed later
                  dataUser.set(elem, key, data);
                } else {
                  data = undefined;
                }
              }
              return data;
            }

            jQuery.extend({
              hasData: function (elem) {
                return dataUser.hasData(elem) || dataPriv.hasData(elem);
              },

              data: function (elem, name, data) {
                return dataUser.access(elem, name, data);
              },

              removeData: function (elem, name) {
                dataUser.remove(elem, name);
              },

              // TODO: Now that all calls to _data and _removeData have been replaced
              // with direct calls to dataPriv methods, these can be deprecated.
              _data: function (elem, name, data) {
                return dataPriv.access(elem, name, data);
              },

              _removeData: function (elem, name) {
                dataPriv.remove(elem, name);
              },
            });

            jQuery.fn.extend({
              data: function (key, value) {
                var i,
                  name,
                  data,
                  elem = this[0],
                  attrs = elem && elem.attributes;

                // Gets all values
                if (key === undefined) {
                  if (this.length) {
                    data = dataUser.get(elem);

                    if (
                      elem.nodeType === 1 &&
                      !dataPriv.get(elem, "hasDataAttrs")
                    ) {
                      i = attrs.length;
                      while (i--) {
                        // Support: IE 11 only
                        // The attrs elements can be null (trac-14894)
                        if (attrs[i]) {
                          name = attrs[i].name;
                          if (name.indexOf("data-") === 0) {
                            name = camelCase(name.slice(5));
                            dataAttr(elem, name, data[name]);
                          }
                        }
                      }
                      dataPriv.set(elem, "hasDataAttrs", true);
                    }
                  }

                  return data;
                }

                // Sets multiple values
                if (typeof key === "object") {
                  return this.each(function () {
                    dataUser.set(this, key);
                  });
                }

                return access(
                  this,
                  function (value) {
                    var data;

                    // The calling jQuery object (element matches) is not empty
                    // (and therefore has an element appears at this[ 0 ]) and the
                    // `value` parameter was not undefined. An empty jQuery object
                    // will result in `undefined` for elem = this[ 0 ] which will
                    // throw an exception if an attempt to read a data cache is made.
                    if (elem && value === undefined) {
                      // Attempt to get data from the cache
                      // The key will always be camelCased in Data
                      data = dataUser.get(elem, key);
                      if (data !== undefined) {
                        return data;
                      }

                      // Attempt to "discover" the data in
                      // HTML5 custom data-* attrs
                      data = dataAttr(elem, key);
                      if (data !== undefined) {
                        return data;
                      }

                      // We tried really hard, but the data doesn't exist.
                      return;
                    }

                    // Set the data...
                    this.each(function () {
                      // We always store the camelCased key
                      dataUser.set(this, key, value);
                    });
                  },
                  null,
                  value,
                  arguments.length > 1,
                  null,
                  true
                );
              },

              removeData: function (key) {
                return this.each(function () {
                  dataUser.remove(this, key);
                });
              },
            });

            jQuery.extend({
              queue: function (elem, type, data) {
                var queue;

                if (elem) {
                  type = (type || "fx") + "queue";
                  queue = dataPriv.get(elem, type);

                  // Speed up dequeue by getting out quickly if this is just a lookup
                  if (data) {
                    if (!queue || Array.isArray(data)) {
                      queue = dataPriv.access(
                        elem,
                        type,
                        jQuery.makeArray(data)
                      );
                    } else {
                      queue.push(data);
                    }
                  }
                  return queue || [];
                }
              },

              dequeue: function (elem, type) {
                type = type || "fx";

                var queue = jQuery.queue(elem, type),
                  startLength = queue.length,
                  fn = queue.shift(),
                  hooks = jQuery._queueHooks(elem, type),
                  next = function () {
                    jQuery.dequeue(elem, type);
                  };

                // If the fx queue is dequeued, always remove the progress sentinel
                if (fn === "inprogress") {
                  fn = queue.shift();
                  startLength--;
                }

                if (fn) {
                  // Add a progress sentinel to prevent the fx queue from being
                  // automatically dequeued
                  if (type === "fx") {
                    queue.unshift("inprogress");
                  }

                  // Clear up the last queue stop function
                  delete hooks.stop;
                  fn.call(elem, next, hooks);
                }

                if (!startLength && hooks) {
                  hooks.empty.fire();
                }
              },

              // Not public - generate a queueHooks object, or return the current one
              _queueHooks: function (elem, type) {
                var key = type + "queueHooks";
                return (
                  dataPriv.get(elem, key) ||
                  dataPriv.access(elem, key, {
                    empty: jQuery.Callbacks("once memory").add(function () {
                      dataPriv.remove(elem, [type + "queue", key]);
                    }),
                  })
                );
              },
            });

            jQuery.fn.extend({
              queue: function (type, data) {
                var setter = 2;

                if (typeof type !== "string") {
                  data = type;
                  type = "fx";
                  setter--;
                }

                if (arguments.length < setter) {
                  return jQuery.queue(this[0], type);
                }

                return data === undefined
                  ? this
                  : this.each(function () {
                      var queue = jQuery.queue(this, type, data);

                      // Ensure a hooks for this queue
                      jQuery._queueHooks(this, type);

                      if (type === "fx" && queue[0] !== "inprogress") {
                        jQuery.dequeue(this, type);
                      }
                    });
              },
              dequeue: function (type) {
                return this.each(function () {
                  jQuery.dequeue(this, type);
                });
              },
              clearQueue: function (type) {
                return this.queue(type || "fx", []);
              },

              // Get a promise resolved when queues of a certain type
              // are emptied (fx is the type by default)
              promise: function (type, obj) {
                var tmp,
                  count = 1,
                  defer = jQuery.Deferred(),
                  elements = this,
                  i = this.length,
                  resolve = function () {
                    if (!--count) {
                      defer.resolveWith(elements, [elements]);
                    }
                  };

                if (typeof type !== "string") {
                  obj = type;
                  type = undefined;
                }
                type = type || "fx";

                while (i--) {
                  tmp = dataPriv.get(elements[i], type + "queueHooks");
                  if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                  }
                }
                resolve();
                return defer.promise(obj);
              },
            });
            var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

            var rcssNum = new RegExp(
              "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$",
              "i"
            );

            var cssExpand = ["Top", "Right", "Bottom", "Left"];

            var documentElement = document.documentElement;

            var isAttached = function (elem) {
                return jQuery.contains(elem.ownerDocument, elem);
              },
              composed = { composed: true };

            // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
            // Check attachment across shadow DOM boundaries when possible (gh-3504)
            // Support: iOS 10.0-10.2 only
            // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
            // leading to errors. We need to check for `getRootNode`.
            if (documentElement.getRootNode) {
              isAttached = function (elem) {
                return (
                  jQuery.contains(elem.ownerDocument, elem) ||
                  elem.getRootNode(composed) === elem.ownerDocument
                );
              };
            }
            var isHiddenWithinTree = function (elem, el) {
              // isHiddenWithinTree might be called from jQuery#filter function;
              // in that case, element will be second argument
              elem = el || elem;

              // Inline style trumps all
              return (
                elem.style.display === "none" ||
                (elem.style.display === "" &&
                  // Otherwise, check computed style
                  // Support: Firefox <=43 - 45
                  // Disconnected elements can have computed display: none, so first confirm that elem is
                  // in the document.
                  isAttached(elem) &&
                  jQuery.css(elem, "display") === "none")
              );
            };

            function adjustCSS(elem, prop, valueParts, tween) {
              var adjusted,
                scale,
                maxIterations = 20,
                currentValue = tween
                  ? function () {
                      return tween.cur();
                    }
                  : function () {
                      return jQuery.css(elem, prop, "");
                    },
                initial = currentValue(),
                unit =
                  (valueParts && valueParts[3]) ||
                  (jQuery.cssNumber[prop] ? "" : "px"),
                // Starting value computation is required for potential unit mismatches
                initialInUnit =
                  elem.nodeType &&
                  (jQuery.cssNumber[prop] || (unit !== "px" && +initial)) &&
                  rcssNum.exec(jQuery.css(elem, prop));

              if (initialInUnit && initialInUnit[3] !== unit) {
                // Support: Firefox <=54
                // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
                initial = initial / 2;

                // Trust units reported by jQuery.css
                unit = unit || initialInUnit[3];

                // Iteratively approximate from a nonzero starting point
                initialInUnit = +initial || 1;

                while (maxIterations--) {
                  // Evaluate and update our best guess (doubling guesses that zero out).
                  // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                  jQuery.style(elem, prop, initialInUnit + unit);
                  if (
                    (1 - scale) *
                      (1 - (scale = currentValue() / initial || 0.5)) <=
                    0
                  ) {
                    maxIterations = 0;
                  }
                  initialInUnit = initialInUnit / scale;
                }

                initialInUnit = initialInUnit * 2;
                jQuery.style(elem, prop, initialInUnit + unit);

                // Make sure we update the tween properties later on
                valueParts = valueParts || [];
              }

              if (valueParts) {
                initialInUnit = +initialInUnit || +initial || 0;

                // Apply relative offset (+=/-=) if specified
                adjusted = valueParts[1]
                  ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
                  : +valueParts[2];
                if (tween) {
                  tween.unit = unit;
                  tween.start = initialInUnit;
                  tween.end = adjusted;
                }
              }
              return adjusted;
            }

            var defaultDisplayMap = {};

            function getDefaultDisplay(elem) {
              var temp,
                doc = elem.ownerDocument,
                nodeName = elem.nodeName,
                display = defaultDisplayMap[nodeName];

              if (display) {
                return display;
              }

              temp = doc.body.appendChild(doc.createElement(nodeName));
              display = jQuery.css(temp, "display");

              temp.parentNode.removeChild(temp);

              if (display === "none") {
                display = "block";
              }
              defaultDisplayMap[nodeName] = display;

              return display;
            }

            function showHide(elements, show) {
              var display,
                elem,
                values = [],
                index = 0,
                length = elements.length;

              // Determine new display value for elements that need to change
              for (; index < length; index++) {
                elem = elements[index];
                if (!elem.style) {
                  continue;
                }

                display = elem.style.display;
                if (show) {
                  // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                  // check is required in this first loop unless we have a nonempty display value (either
                  // inline or about-to-be-restored)
                  if (display === "none") {
                    values[index] = dataPriv.get(elem, "display") || null;
                    if (!values[index]) {
                      elem.style.display = "";
                    }
                  }
                  if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                    values[index] = getDefaultDisplay(elem);
                  }
                } else {
                  if (display !== "none") {
                    values[index] = "none";

                    // Remember what we're overwriting
                    dataPriv.set(elem, "display", display);
                  }
                }
              }

              // Set the display of the elements in a second loop to avoid constant reflow
              for (index = 0; index < length; index++) {
                if (values[index] != null) {
                  elements[index].style.display = values[index];
                }
              }

              return elements;
            }

            jQuery.fn.extend({
              show: function () {
                return showHide(this, true);
              },
              hide: function () {
                return showHide(this);
              },
              toggle: function (state) {
                if (typeof state === "boolean") {
                  return state ? this.show() : this.hide();
                }

                return this.each(function () {
                  if (isHiddenWithinTree(this)) {
                    jQuery(this).show();
                  } else {
                    jQuery(this).hide();
                  }
                });
              },
            });
            var rcheckableType = /^(?:checkbox|radio)$/i;

            var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

            var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

            (function () {
              var fragment = document.createDocumentFragment(),
                div = fragment.appendChild(document.createElement("div")),
                input = document.createElement("input");

              // Support: Android 4.0 - 4.3 only
              // Check state lost if the name is set (trac-11217)
              // Support: Windows Web Apps (WWA)
              // `name` and `type` must use .setAttribute for WWA (trac-14901)
              input.setAttribute("type", "radio");
              input.setAttribute("checked", "checked");
              input.setAttribute("name", "t");

              div.appendChild(input);

              // Support: Android <=4.1 only
              // Older WebKit doesn't clone checked state correctly in fragments
              support.checkClone = div
                .cloneNode(true)
                .cloneNode(true).lastChild.checked;

              // Support: IE <=11 only
              // Make sure textarea (and checkbox) defaultValue is properly cloned
              div.innerHTML = "<textarea>x</textarea>";
              support.noCloneChecked =
                !!div.cloneNode(true).lastChild.defaultValue;

              // Support: IE <=9 only
              // IE <=9 replaces <option> tags with their contents when inserted outside of
              // the select element.
              div.innerHTML = "<option></option>";
              support.option = !!div.lastChild;
            })();

            // We have to close these tags to support XHTML (trac-13200)
            var wrapMap = {
              // XHTML parsers do not magically insert elements in the
              // same way that tag soup parsers do. So we cannot shorten
              // this by omitting <tbody> or other required elements.
              thead: [1, "<table>", "</table>"],
              col: [2, "<table><colgroup>", "</colgroup></table>"],
              tr: [2, "<table><tbody>", "</tbody></table>"],
              td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

              _default: [0, "", ""],
            };

            wrapMap.tbody =
              wrapMap.tfoot =
              wrapMap.colgroup =
              wrapMap.caption =
                wrapMap.thead;
            wrapMap.th = wrapMap.td;

            // Support: IE <=9 only
            if (!support.option) {
              wrapMap.optgroup = wrapMap.option = [
                1,
                "<select multiple='multiple'>",
                "</select>",
              ];
            }

            function getAll(context, tag) {
              // Support: IE <=9 - 11 only
              // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
              var ret;

              if (typeof context.getElementsByTagName !== "undefined") {
                ret = context.getElementsByTagName(tag || "*");
              } else if (typeof context.querySelectorAll !== "undefined") {
                ret = context.querySelectorAll(tag || "*");
              } else {
                ret = [];
              }

              if (tag === undefined || (tag && nodeName(context, tag))) {
                return jQuery.merge([context], ret);
              }

              return ret;
            }

            // Mark scripts as having already been evaluated
            function setGlobalEval(elems, refElements) {
              var i = 0,
                l = elems.length;

              for (; i < l; i++) {
                dataPriv.set(
                  elems[i],
                  "globalEval",
                  !refElements || dataPriv.get(refElements[i], "globalEval")
                );
              }
            }

            var rhtml = /<|&#?\w+;/;

            function buildFragment(
              elems,
              context,
              scripts,
              selection,
              ignored
            ) {
              var elem,
                tmp,
                tag,
                wrap,
                attached,
                j,
                fragment = context.createDocumentFragment(),
                nodes = [],
                i = 0,
                l = elems.length;

              for (; i < l; i++) {
                elem = elems[i];

                if (elem || elem === 0) {
                  // Add nodes directly
                  if (toType(elem) === "object") {
                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                    // Convert non-html into a text node
                  } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));

                    // Convert html into DOM nodes
                  } else {
                    tmp =
                      tmp || fragment.appendChild(context.createElement("div"));

                    // Deserialize a standard representation
                    tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML =
                      wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while (j--) {
                      tmp = tmp.lastChild;
                    }

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, tmp.childNodes);

                    // Remember the top-level container
                    tmp = fragment.firstChild;

                    // Ensure the created nodes are orphaned (trac-12392)
                    tmp.textContent = "";
                  }
                }
              }

              // Remove wrapper from fragment
              fragment.textContent = "";

              i = 0;
              while ((elem = nodes[i++])) {
                // Skip elements already in the context collection (trac-4087)
                if (selection && jQuery.inArray(elem, selection) > -1) {
                  if (ignored) {
                    ignored.push(elem);
                  }
                  continue;
                }

                attached = isAttached(elem);

                // Append to fragment
                tmp = getAll(fragment.appendChild(elem), "script");

                // Preserve script evaluation history
                if (attached) {
                  setGlobalEval(tmp);
                }

                // Capture executables
                if (scripts) {
                  j = 0;
                  while ((elem = tmp[j++])) {
                    if (rscriptType.test(elem.type || "")) {
                      scripts.push(elem);
                    }
                  }
                }
              }

              return fragment;
            }

            var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

            function returnTrue() {
              return true;
            }

            function returnFalse() {
              return false;
            }

            function on(elem, types, selector, data, fn, one) {
              var origFn, type;

              // Types can be a map of types/handlers
              if (typeof types === "object") {
                // ( types-Object, selector, data )
                if (typeof selector !== "string") {
                  // ( types-Object, data )
                  data = data || selector;
                  selector = undefined;
                }
                for (type in types) {
                  on(elem, type, selector, data, types[type], one);
                }
                return elem;
              }

              if (data == null && fn == null) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
              } else if (fn == null) {
                if (typeof selector === "string") {
                  // ( types, selector, fn )
                  fn = data;
                  data = undefined;
                } else {
                  // ( types, data, fn )
                  fn = data;
                  data = selector;
                  selector = undefined;
                }
              }
              if (fn === false) {
                fn = returnFalse;
              } else if (!fn) {
                return elem;
              }

              if (one === 1) {
                origFn = fn;
                fn = function (event) {
                  // Can use an empty set, since event contains the info
                  jQuery().off(event);
                  return origFn.apply(this, arguments);
                };

                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
              }
              return elem.each(function () {
                jQuery.event.add(this, types, fn, data, selector);
              });
            }

            /*
             * Helper functions for managing events -- not part of the public interface.
             * Props to Dean Edwards' addEvent library for many of the ideas.
             */
            jQuery.event = {
              global: {},

              add: function (elem, types, handler, data, selector) {
                var handleObjIn,
                  eventHandle,
                  tmp,
                  events,
                  t,
                  handleObj,
                  special,
                  handlers,
                  type,
                  namespaces,
                  origType,
                  elemData = dataPriv.get(elem);

                // Only attach events to objects that accept data
                if (!acceptData(elem)) {
                  return;
                }

                // Caller can pass in an object of custom data in lieu of the handler
                if (handler.handler) {
                  handleObjIn = handler;
                  handler = handleObjIn.handler;
                  selector = handleObjIn.selector;
                }

                // Ensure that invalid selectors throw exceptions at attach time
                // Evaluate against documentElement in case elem is a non-element node (e.g., document)
                if (selector) {
                  jQuery.find.matchesSelector(documentElement, selector);
                }

                // Make sure that the handler has a unique ID, used to find/remove it later
                if (!handler.guid) {
                  handler.guid = jQuery.guid++;
                }

                // Init the element's event structure and main handler, if this is the first
                if (!(events = elemData.events)) {
                  events = elemData.events = Object.create(null);
                }
                if (!(eventHandle = elemData.handle)) {
                  eventHandle = elemData.handle = function (e) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== "undefined" &&
                      jQuery.event.triggered !== e.type
                      ? jQuery.event.dispatch.apply(elem, arguments)
                      : undefined;
                  };
                }

                // Handle multiple events separated by a space
                types = (types || "").match(rnothtmlwhite) || [""];
                t = types.length;
                while (t--) {
                  tmp = rtypenamespace.exec(types[t]) || [];
                  type = origType = tmp[1];
                  namespaces = (tmp[2] || "").split(".").sort();

                  // There *must* be a type, no attaching namespace-only handlers
                  if (!type) {
                    continue;
                  }

                  // If event changes its type, use the special event handlers for the changed type
                  special = jQuery.event.special[type] || {};

                  // If selector defined, determine special event api type, otherwise given type
                  type =
                    (selector ? special.delegateType : special.bindType) ||
                    type;

                  // Update special based on newly reset type
                  special = jQuery.event.special[type] || {};

                  // handleObj is passed to all event handlers
                  handleObj = jQuery.extend(
                    {
                      type: type,
                      origType: origType,
                      data: data,
                      handler: handler,
                      guid: handler.guid,
                      selector: selector,
                      needsContext:
                        selector &&
                        jQuery.expr.match.needsContext.test(selector),
                      namespace: namespaces.join("."),
                    },
                    handleObjIn
                  );

                  // Init the event handler queue if we're the first
                  if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener if the special events handler returns false
                    if (
                      !special.setup ||
                      special.setup.call(
                        elem,
                        data,
                        namespaces,
                        eventHandle
                      ) === false
                    ) {
                      if (elem.addEventListener) {
                        elem.addEventListener(type, eventHandle);
                      }
                    }
                  }

                  if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                      handleObj.handler.guid = handler.guid;
                    }
                  }

                  // Add to the element's handler list, delegates in front
                  if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                  } else {
                    handlers.push(handleObj);
                  }

                  // Keep track of which events have ever been used, for event optimization
                  jQuery.event.global[type] = true;
                }
              },

              // Detach an event or set of events from an element
              remove: function (elem, types, handler, selector, mappedTypes) {
                var j,
                  origCount,
                  tmp,
                  events,
                  t,
                  handleObj,
                  special,
                  handlers,
                  type,
                  namespaces,
                  origType,
                  elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

                if (!elemData || !(events = elemData.events)) {
                  return;
                }

                // Once for each type.namespace in types; type may be omitted
                types = (types || "").match(rnothtmlwhite) || [""];
                t = types.length;
                while (t--) {
                  tmp = rtypenamespace.exec(types[t]) || [];
                  type = origType = tmp[1];
                  namespaces = (tmp[2] || "").split(".").sort();

                  // Unbind all events (on this namespace, if provided) for the element
                  if (!type) {
                    for (type in events) {
                      jQuery.event.remove(
                        elem,
                        type + types[t],
                        handler,
                        selector,
                        true
                      );
                    }
                    continue;
                  }

                  special = jQuery.event.special[type] || {};
                  type =
                    (selector ? special.delegateType : special.bindType) ||
                    type;
                  handlers = events[type] || [];
                  tmp =
                    tmp[2] &&
                    new RegExp(
                      "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"
                    );

                  // Remove matching events
                  origCount = j = handlers.length;
                  while (j--) {
                    handleObj = handlers[j];

                    if (
                      (mappedTypes || origType === handleObj.origType) &&
                      (!handler || handler.guid === handleObj.guid) &&
                      (!tmp || tmp.test(handleObj.namespace)) &&
                      (!selector ||
                        selector === handleObj.selector ||
                        (selector === "**" && handleObj.selector))
                    ) {
                      handlers.splice(j, 1);

                      if (handleObj.selector) {
                        handlers.delegateCount--;
                      }
                      if (special.remove) {
                        special.remove.call(elem, handleObj);
                      }
                    }
                  }

                  // Remove generic event handler if we removed something and no more handlers exist
                  // (avoids potential for endless recursion during removal of special event handlers)
                  if (origCount && !handlers.length) {
                    if (
                      !special.teardown ||
                      special.teardown.call(
                        elem,
                        namespaces,
                        elemData.handle
                      ) === false
                    ) {
                      jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    delete events[type];
                  }
                }

                // Remove data and the expando if it's no longer used
                if (jQuery.isEmptyObject(events)) {
                  dataPriv.remove(elem, "handle events");
                }
              },

              dispatch: function (nativeEvent) {
                var i,
                  j,
                  ret,
                  matched,
                  handleObj,
                  handlerQueue,
                  args = new Array(arguments.length),
                  // Make a writable jQuery.Event from the native event object
                  event = jQuery.event.fix(nativeEvent),
                  handlers =
                    (dataPriv.get(this, "events") || Object.create(null))[
                      event.type
                    ] || [],
                  special = jQuery.event.special[event.type] || {};

                // Use the fix-ed jQuery.Event rather than the (read-only) native event
                args[0] = event;

                for (i = 1; i < arguments.length; i++) {
                  args[i] = arguments[i];
                }

                event.delegateTarget = this;

                // Call the preDispatch hook for the mapped type, and let it bail if desired
                if (
                  special.preDispatch &&
                  special.preDispatch.call(this, event) === false
                ) {
                  return;
                }

                // Determine handlers
                handlerQueue = jQuery.event.handlers.call(
                  this,
                  event,
                  handlers
                );

                // Run delegates first; they may want to stop propagation beneath us
                i = 0;
                while (
                  (matched = handlerQueue[i++]) &&
                  !event.isPropagationStopped()
                ) {
                  event.currentTarget = matched.elem;

                  j = 0;
                  while (
                    (handleObj = matched.handlers[j++]) &&
                    !event.isImmediatePropagationStopped()
                  ) {
                    // If the event is namespaced, then each handler is only invoked if it is
                    // specially universal or its namespaces are a superset of the event's.
                    if (
                      !event.rnamespace ||
                      handleObj.namespace === false ||
                      event.rnamespace.test(handleObj.namespace)
                    ) {
                      event.handleObj = handleObj;
                      event.data = handleObj.data;

                      ret = (
                        (jQuery.event.special[handleObj.origType] || {})
                          .handle || handleObj.handler
                      ).apply(matched.elem, args);

                      if (ret !== undefined) {
                        if ((event.result = ret) === false) {
                          event.preventDefault();
                          event.stopPropagation();
                        }
                      }
                    }
                  }
                }

                // Call the postDispatch hook for the mapped type
                if (special.postDispatch) {
                  special.postDispatch.call(this, event);
                }

                return event.result;
              },

              handlers: function (event, handlers) {
                var i,
                  handleObj,
                  sel,
                  matchedHandlers,
                  matchedSelectors,
                  handlerQueue = [],
                  delegateCount = handlers.delegateCount,
                  cur = event.target;

                // Find delegate handlers
                if (
                  delegateCount &&
                  // Support: IE <=9
                  // Black-hole SVG <use> instance trees (trac-13180)
                  cur.nodeType &&
                  // Support: Firefox <=42
                  // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                  // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                  // Support: IE 11 only
                  // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                  !(event.type === "click" && event.button >= 1)
                ) {
                  for (; cur !== this; cur = cur.parentNode || this) {
                    // Don't check non-elements (trac-13208)
                    // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
                    if (
                      cur.nodeType === 1 &&
                      !(event.type === "click" && cur.disabled === true)
                    ) {
                      matchedHandlers = [];
                      matchedSelectors = {};
                      for (i = 0; i < delegateCount; i++) {
                        handleObj = handlers[i];

                        // Don't conflict with Object.prototype properties (trac-13203)
                        sel = handleObj.selector + " ";

                        if (matchedSelectors[sel] === undefined) {
                          matchedSelectors[sel] = handleObj.needsContext
                            ? jQuery(sel, this).index(cur) > -1
                            : jQuery.find(sel, this, null, [cur]).length;
                        }
                        if (matchedSelectors[sel]) {
                          matchedHandlers.push(handleObj);
                        }
                      }
                      if (matchedHandlers.length) {
                        handlerQueue.push({
                          elem: cur,
                          handlers: matchedHandlers,
                        });
                      }
                    }
                  }
                }

                // Add the remaining (directly-bound) handlers
                cur = this;
                if (delegateCount < handlers.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: handlers.slice(delegateCount),
                  });
                }

                return handlerQueue;
              },

              addProp: function (name, hook) {
                Object.defineProperty(jQuery.Event.prototype, name, {
                  enumerable: true,
                  configurable: true,

                  get: isFunction(hook)
                    ? function () {
                        if (this.originalEvent) {
                          return hook(this.originalEvent);
                        }
                      }
                    : function () {
                        if (this.originalEvent) {
                          return this.originalEvent[name];
                        }
                      },

                  set: function (value) {
                    Object.defineProperty(this, name, {
                      enumerable: true,
                      configurable: true,
                      writable: true,
                      value: value,
                    });
                  },
                });
              },

              fix: function (originalEvent) {
                return originalEvent[jQuery.expando]
                  ? originalEvent
                  : new jQuery.Event(originalEvent);
              },

              special: {
                load: {
                  // Prevent triggered image.load events from bubbling to window.load
                  noBubble: true,
                },
                click: {
                  // Utilize native event to ensure correct state for checkable inputs
                  setup: function (data) {
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;

                    // Claim the first handler
                    if (
                      rcheckableType.test(el.type) &&
                      el.click &&
                      nodeName(el, "input")
                    ) {
                      // dataPriv.set( el, "click", ... )
                      leverageNative(el, "click", true);
                    }

                    // Return false to allow normal processing in the caller
                    return false;
                  },
                  trigger: function (data) {
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;

                    // Force setup before triggering a click
                    if (
                      rcheckableType.test(el.type) &&
                      el.click &&
                      nodeName(el, "input")
                    ) {
                      leverageNative(el, "click");
                    }

                    // Return non-false to allow normal event-path propagation
                    return true;
                  },

                  // For cross-browser consistency, suppress native .click() on links
                  // Also prevent it if we're currently inside a leveraged native-event stack
                  _default: function (event) {
                    var target = event.target;
                    return (
                      (rcheckableType.test(target.type) &&
                        target.click &&
                        nodeName(target, "input") &&
                        dataPriv.get(target, "click")) ||
                      nodeName(target, "a")
                    );
                  },
                },

                beforeunload: {
                  postDispatch: function (event) {
                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) {
                      event.originalEvent.returnValue = event.result;
                    }
                  },
                },
              },
            };

            // Ensure the presence of an event listener that handles manually-triggered
            // synthetic events by interrupting progress until reinvoked in response to
            // *native* events that it fires directly, ensuring that state changes have
            // already occurred before other listeners are invoked.
            function leverageNative(el, type, isSetup) {
              // Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
              if (!isSetup) {
                if (dataPriv.get(el, type) === undefined) {
                  jQuery.event.add(el, type, returnTrue);
                }
                return;
              }

              // Register the controller as a special universal handler for all event namespaces
              dataPriv.set(el, type, false);
              jQuery.event.add(el, type, {
                namespace: false,
                handler: function (event) {
                  var result,
                    saved = dataPriv.get(this, type);

                  if (event.isTrigger & 1 && this[type]) {
                    // Interrupt processing of the outer synthetic .trigger()ed event
                    if (!saved) {
                      // Store arguments for use when handling the inner native event
                      // There will always be at least one argument (an event object), so this array
                      // will not be confused with a leftover capture object.
                      saved = slice.call(arguments);
                      dataPriv.set(this, type, saved);

                      // Trigger the native event and capture its result
                      this[type]();
                      result = dataPriv.get(this, type);
                      dataPriv.set(this, type, false);

                      if (saved !== result) {
                        // Cancel the outer synthetic event
                        event.stopImmediatePropagation();
                        event.preventDefault();

                        return result;
                      }

                      // If this is an inner synthetic event for an event with a bubbling surrogate
                      // (focus or blur), assume that the surrogate already propagated from triggering
                      // the native event and prevent that from happening again here.
                      // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                      // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                      // less bad than duplication.
                    } else if (
                      (jQuery.event.special[type] || {}).delegateType
                    ) {
                      event.stopPropagation();
                    }

                    // If this is a native event triggered above, everything is now in order
                    // Fire an inner synthetic event with the original arguments
                  } else if (saved) {
                    // ...and capture the result
                    dataPriv.set(
                      this,
                      type,
                      jQuery.event.trigger(saved[0], saved.slice(1), this)
                    );

                    // Abort handling of the native event by all jQuery handlers while allowing
                    // native handlers on the same element to run. On target, this is achieved
                    // by stopping immediate propagation just on the jQuery event. However,
                    // the native event is re-wrapped by a jQuery one on each level of the
                    // propagation so the only way to stop it for jQuery is to stop it for
                    // everyone via native `stopPropagation()`. This is not a problem for
                    // focus/blur which don't bubble, but it does also stop click on checkboxes
                    // and radios. We accept this limitation.
                    event.stopPropagation();
                    event.isImmediatePropagationStopped = returnTrue;
                  }
                },
              });
            }

            jQuery.removeEvent = function (elem, type, handle) {
              // This "if" is needed for plain objects
              if (elem.removeEventListener) {
                elem.removeEventListener(type, handle);
              }
            };

            jQuery.Event = function (src, props) {
              // Allow instantiation without the 'new' keyword
              if (!(this instanceof jQuery.Event)) {
                return new jQuery.Event(src, props);
              }

              // Event object
              if (src && src.type) {
                this.originalEvent = src;
                this.type = src.type;

                // Events bubbling up the document may have been marked as prevented
                // by a handler lower down the tree; reflect the correct value.
                this.isDefaultPrevented =
                  src.defaultPrevented ||
                  (src.defaultPrevented === undefined &&
                    // Support: Android <=2.3 only
                    src.returnValue === false)
                    ? returnTrue
                    : returnFalse;

                // Create target properties
                // Support: Safari <=6 - 7 only
                // Target should not be a text node (trac-504, trac-13143)
                this.target =
                  src.target && src.target.nodeType === 3
                    ? src.target.parentNode
                    : src.target;

                this.currentTarget = src.currentTarget;
                this.relatedTarget = src.relatedTarget;

                // Event type
              } else {
                this.type = src;
              }

              // Put explicitly provided properties onto the event object
              if (props) {
                jQuery.extend(this, props);
              }

              // Create a timestamp if incoming event doesn't have one
              this.timeStamp = (src && src.timeStamp) || Date.now();

              // Mark it as fixed
              this[jQuery.expando] = true;
            };

            // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
            // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
            jQuery.Event.prototype = {
              constructor: jQuery.Event,
              isDefaultPrevented: returnFalse,
              isPropagationStopped: returnFalse,
              isImmediatePropagationStopped: returnFalse,
              isSimulated: false,

              preventDefault: function () {
                var e = this.originalEvent;

                this.isDefaultPrevented = returnTrue;

                if (e && !this.isSimulated) {
                  e.preventDefault();
                }
              },
              stopPropagation: function () {
                var e = this.originalEvent;

                this.isPropagationStopped = returnTrue;

                if (e && !this.isSimulated) {
                  e.stopPropagation();
                }
              },
              stopImmediatePropagation: function () {
                var e = this.originalEvent;

                this.isImmediatePropagationStopped = returnTrue;

                if (e && !this.isSimulated) {
                  e.stopImmediatePropagation();
                }

                this.stopPropagation();
              },
            };

            // Includes all common event props including KeyEvent and MouseEvent specific props
            jQuery.each(
              {
                altKey: true,
                bubbles: true,
                cancelable: true,
                changedTouches: true,
                ctrlKey: true,
                detail: true,
                eventPhase: true,
                metaKey: true,
                pageX: true,
                pageY: true,
                shiftKey: true,
                view: true,
                char: true,
                code: true,
                charCode: true,
                key: true,
                keyCode: true,
                button: true,
                buttons: true,
                clientX: true,
                clientY: true,
                offsetX: true,
                offsetY: true,
                pointerId: true,
                pointerType: true,
                screenX: true,
                screenY: true,
                targetTouches: true,
                toElement: true,
                touches: true,
                which: true,
              },
              jQuery.event.addProp
            );

            jQuery.each(
              { focus: "focusin", blur: "focusout" },
              function (type, delegateType) {
                function focusMappedHandler(nativeEvent) {
                  if (document.documentMode) {
                    // Support: IE 11+
                    // Attach a single focusin/focusout handler on the document while someone wants
                    // focus/blur. This is because the former are synchronous in IE while the latter
                    // are async. In other browsers, all those handlers are invoked synchronously.

                    // `handle` from private data would already wrap the event, but we need
                    // to change the `type` here.
                    var handle = dataPriv.get(this, "handle"),
                      event = jQuery.event.fix(nativeEvent);
                    event.type =
                      nativeEvent.type === "focusin" ? "focus" : "blur";
                    event.isSimulated = true;

                    // First, handle focusin/focusout
                    handle(nativeEvent);

                    // ...then, handle focus/blur
                    //
                    // focus/blur don't bubble while focusin/focusout do; simulate the former by only
                    // invoking the handler at the lower level.
                    if (event.target === event.currentTarget) {
                      // The setup part calls `leverageNative`, which, in turn, calls
                      // `jQuery.event.add`, so event handle will already have been set
                      // by this point.
                      handle(event);
                    }
                  } else {
                    // For non-IE browsers, attach a single capturing handler on the document
                    // while someone wants focusin/focusout.
                    jQuery.event.simulate(
                      delegateType,
                      nativeEvent.target,
                      jQuery.event.fix(nativeEvent)
                    );
                  }
                }

                jQuery.event.special[type] = {
                  // Utilize native event if possible so blur/focus sequence is correct
                  setup: function () {
                    var attaches;

                    // Claim the first handler
                    // dataPriv.set( this, "focus", ... )
                    // dataPriv.set( this, "blur", ... )
                    leverageNative(this, type, true);

                    if (document.documentMode) {
                      // Support: IE 9 - 11+
                      // We use the same native handler for focusin & focus (and focusout & blur)
                      // so we need to coordinate setup & teardown parts between those events.
                      // Use `delegateType` as the key as `type` is already used by `leverageNative`.
                      attaches = dataPriv.get(this, delegateType);
                      if (!attaches) {
                        this.addEventListener(delegateType, focusMappedHandler);
                      }
                      dataPriv.set(this, delegateType, (attaches || 0) + 1);
                    } else {
                      // Return false to allow normal processing in the caller
                      return false;
                    }
                  },
                  trigger: function () {
                    // Force setup before trigger
                    leverageNative(this, type);

                    // Return non-false to allow normal event-path propagation
                    return true;
                  },

                  teardown: function () {
                    var attaches;

                    if (document.documentMode) {
                      attaches = dataPriv.get(this, delegateType) - 1;
                      if (!attaches) {
                        this.removeEventListener(
                          delegateType,
                          focusMappedHandler
                        );
                        dataPriv.remove(this, delegateType);
                      } else {
                        dataPriv.set(this, delegateType, attaches);
                      }
                    } else {
                      // Return false to indicate standard teardown should be applied
                      return false;
                    }
                  },

                  // Suppress native focus or blur if we're currently inside
                  // a leveraged native-event stack
                  _default: function (event) {
                    return dataPriv.get(event.target, type);
                  },

                  delegateType: delegateType,
                };

                // Support: Firefox <=44
                // Firefox doesn't have focus(in | out) events
                // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
                //
                // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
                // focus(in | out) events fire after focus & blur events,
                // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
                // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
                //
                // Support: IE 9 - 11+
                // To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
                // attach a single handler for both events in IE.
                jQuery.event.special[delegateType] = {
                  setup: function () {
                    // Handle: regular nodes (via `this.ownerDocument`), window
                    // (via `this.document`) & document (via `this`).
                    var doc = this.ownerDocument || this.document || this,
                      dataHolder = document.documentMode ? this : doc,
                      attaches = dataPriv.get(dataHolder, delegateType);

                    // Support: IE 9 - 11+
                    // We use the same native handler for focusin & focus (and focusout & blur)
                    // so we need to coordinate setup & teardown parts between those events.
                    // Use `delegateType` as the key as `type` is already used by `leverageNative`.
                    if (!attaches) {
                      if (document.documentMode) {
                        this.addEventListener(delegateType, focusMappedHandler);
                      } else {
                        doc.addEventListener(type, focusMappedHandler, true);
                      }
                    }
                    dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
                  },
                  teardown: function () {
                    var doc = this.ownerDocument || this.document || this,
                      dataHolder = document.documentMode ? this : doc,
                      attaches = dataPriv.get(dataHolder, delegateType) - 1;

                    if (!attaches) {
                      if (document.documentMode) {
                        this.removeEventListener(
                          delegateType,
                          focusMappedHandler
                        );
                      } else {
                        doc.removeEventListener(type, focusMappedHandler, true);
                      }
                      dataPriv.remove(dataHolder, delegateType);
                    } else {
                      dataPriv.set(dataHolder, delegateType, attaches);
                    }
                  },
                };
              }
            );

            // Create mouseenter/leave events using mouseover/out and event-time checks
            // so that event delegation works in jQuery.
            // Do the same for pointerenter/pointerleave and pointerover/pointerout
            //
            // Support: Safari 7 only
            // Safari sends mouseenter too often; see:
            // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
            // for the description of the bug (it existed in older Chrome versions as well).
            jQuery.each(
              {
                mouseenter: "mouseover",
                mouseleave: "mouseout",
                pointerenter: "pointerover",
                pointerleave: "pointerout",
              },
              function (orig, fix) {
                jQuery.event.special[orig] = {
                  delegateType: fix,
                  bindType: fix,

                  handle: function (event) {
                    var ret,
                      target = this,
                      related = event.relatedTarget,
                      handleObj = event.handleObj;

                    // For mouseenter/leave call the handler if related is outside the target.
                    // NB: No relatedTarget if the mouse left/entered the browser window
                    if (
                      !related ||
                      (related !== target && !jQuery.contains(target, related))
                    ) {
                      event.type = handleObj.origType;
                      ret = handleObj.handler.apply(this, arguments);
                      event.type = fix;
                    }
                    return ret;
                  },
                };
              }
            );

            jQuery.fn.extend({
              on: function (types, selector, data, fn) {
                return on(this, types, selector, data, fn);
              },
              one: function (types, selector, data, fn) {
                return on(this, types, selector, data, fn, 1);
              },
              off: function (types, selector, fn) {
                var handleObj, type;
                if (types && types.preventDefault && types.handleObj) {
                  // ( event )  dispatched jQuery.Event
                  handleObj = types.handleObj;
                  jQuery(types.delegateTarget).off(
                    handleObj.namespace
                      ? handleObj.origType + "." + handleObj.namespace
                      : handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                  );
                  return this;
                }
                if (typeof types === "object") {
                  // ( types-object [, selector] )
                  for (type in types) {
                    this.off(type, selector, types[type]);
                  }
                  return this;
                }
                if (selector === false || typeof selector === "function") {
                  // ( types [, fn] )
                  fn = selector;
                  selector = undefined;
                }
                if (fn === false) {
                  fn = returnFalse;
                }
                return this.each(function () {
                  jQuery.event.remove(this, types, fn, selector);
                });
              },
            });

            var // Support: IE <=10 - 11, Edge 12 - 13 only
              // In IE/Edge using regex groups here causes severe slowdowns.
              // See https://connect.microsoft.com/IE/feedback/details/1736512/
              rnoInnerhtml = /<script|<style|<link/i,
              // checked="checked" or checked
              rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
              rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

            // Prefer a tbody over its parent table for containing new rows
            function manipulationTarget(elem, content) {
              if (
                nodeName(elem, "table") &&
                nodeName(
                  content.nodeType !== 11 ? content : content.firstChild,
                  "tr"
                )
              ) {
                return jQuery(elem).children("tbody")[0] || elem;
              }

              return elem;
            }

            // Replace/restore the type attribute of script elements for safe DOM manipulation
            function disableScript(elem) {
              elem.type =
                (elem.getAttribute("type") !== null) + "/" + elem.type;
              return elem;
            }
            function restoreScript(elem) {
              if ((elem.type || "").slice(0, 5) === "true/") {
                elem.type = elem.type.slice(5);
              } else {
                elem.removeAttribute("type");
              }

              return elem;
            }

            function cloneCopyEvent(src, dest) {
              var i, l, type, pdataOld, udataOld, udataCur, events;

              if (dest.nodeType !== 1) {
                return;
              }

              // 1. Copy private data: events, handlers, etc.
              if (dataPriv.hasData(src)) {
                pdataOld = dataPriv.get(src);
                events = pdataOld.events;

                if (events) {
                  dataPriv.remove(dest, "handle events");

                  for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                      jQuery.event.add(dest, type, events[type][i]);
                    }
                  }
                }
              }

              // 2. Copy user data
              if (dataUser.hasData(src)) {
                udataOld = dataUser.access(src);
                udataCur = jQuery.extend({}, udataOld);

                dataUser.set(dest, udataCur);
              }
            }

            // Fix IE bugs, see support tests
            function fixInput(src, dest) {
              var nodeName = dest.nodeName.toLowerCase();

              // Fails to persist the checked state of a cloned checkbox or radio button.
              if (nodeName === "input" && rcheckableType.test(src.type)) {
                dest.checked = src.checked;

                // Fails to return the selected option to the default selected state when cloning options
              } else if (nodeName === "input" || nodeName === "textarea") {
                dest.defaultValue = src.defaultValue;
              }
            }

            function domManip(collection, args, callback, ignored) {
              // Flatten any nested arrays
              args = flat(args);

              var fragment,
                first,
                scripts,
                hasScripts,
                node,
                doc,
                i = 0,
                l = collection.length,
                iNoClone = l - 1,
                value = args[0],
                valueIsFunction = isFunction(value);

              // We can't cloneNode fragments that contain checked, in WebKit
              if (
                valueIsFunction ||
                (l > 1 &&
                  typeof value === "string" &&
                  !support.checkClone &&
                  rchecked.test(value))
              ) {
                return collection.each(function (index) {
                  var self = collection.eq(index);
                  if (valueIsFunction) {
                    args[0] = value.call(this, index, self.html());
                  }
                  domManip(self, args, callback, ignored);
                });
              }

              if (l) {
                fragment = buildFragment(
                  args,
                  collection[0].ownerDocument,
                  false,
                  collection,
                  ignored
                );
                first = fragment.firstChild;

                if (fragment.childNodes.length === 1) {
                  fragment = first;
                }

                // Require either new content or an interest in ignored elements to invoke the callback
                if (first || ignored) {
                  scripts = jQuery.map(
                    getAll(fragment, "script"),
                    disableScript
                  );
                  hasScripts = scripts.length;

                  // Use the original fragment for the last item
                  // instead of the first because it can end up
                  // being emptied incorrectly in certain situations (trac-8070).
                  for (; i < l; i++) {
                    node = fragment;

                    if (i !== iNoClone) {
                      node = jQuery.clone(node, true, true);

                      // Keep references to cloned scripts for later restoration
                      if (hasScripts) {
                        // Support: Android <=4.0 only, PhantomJS 1 only
                        // push.apply(_, arraylike) throws on ancient WebKit
                        jQuery.merge(scripts, getAll(node, "script"));
                      }
                    }

                    callback.call(collection[i], node, i);
                  }

                  if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;

                    // Re-enable scripts
                    jQuery.map(scripts, restoreScript);

                    // Evaluate executable scripts on first document insertion
                    for (i = 0; i < hasScripts; i++) {
                      node = scripts[i];
                      if (
                        rscriptType.test(node.type || "") &&
                        !dataPriv.access(node, "globalEval") &&
                        jQuery.contains(doc, node)
                      ) {
                        if (
                          node.src &&
                          (node.type || "").toLowerCase() !== "module"
                        ) {
                          // Optional AJAX dependency, but won't run scripts if not present
                          if (jQuery._evalUrl && !node.noModule) {
                            jQuery._evalUrl(
                              node.src,
                              {
                                nonce: node.nonce || node.getAttribute("nonce"),
                              },
                              doc
                            );
                          }
                        } else {
                          // Unwrap a CDATA section containing script contents. This shouldn't be
                          // needed as in XML documents they're already not visible when
                          // inspecting element contents and in HTML documents they have no
                          // meaning but we're preserving that logic for backwards compatibility.
                          // This will be removed completely in 4.0. See gh-4904.
                          DOMEval(
                            node.textContent.replace(rcleanScript, ""),
                            node,
                            doc
                          );
                        }
                      }
                    }
                  }
                }
              }

              return collection;
            }

            function remove(elem, selector, keepData) {
              var node,
                nodes = selector ? jQuery.filter(selector, elem) : elem,
                i = 0;

              for (; (node = nodes[i]) != null; i++) {
                if (!keepData && node.nodeType === 1) {
                  jQuery.cleanData(getAll(node));
                }

                if (node.parentNode) {
                  if (keepData && isAttached(node)) {
                    setGlobalEval(getAll(node, "script"));
                  }
                  node.parentNode.removeChild(node);
                }
              }

              return elem;
            }

            jQuery.extend({
              htmlPrefilter: function (html) {
                return html;
              },

              clone: function (elem, dataAndEvents, deepDataAndEvents) {
                var i,
                  l,
                  srcElements,
                  destElements,
                  clone = elem.cloneNode(true),
                  inPage = isAttached(elem);

                // Fix IE cloning issues
                if (
                  !support.noCloneChecked &&
                  (elem.nodeType === 1 || elem.nodeType === 11) &&
                  !jQuery.isXMLDoc(elem)
                ) {
                  // We eschew jQuery#find here for performance reasons:
                  // https://jsperf.com/getall-vs-sizzle/2
                  destElements = getAll(clone);
                  srcElements = getAll(elem);

                  for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                  }
                }

                // Copy the events from the original to the clone
                if (dataAndEvents) {
                  if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);

                    for (i = 0, l = srcElements.length; i < l; i++) {
                      cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                  } else {
                    cloneCopyEvent(elem, clone);
                  }
                }

                // Preserve script evaluation history
                destElements = getAll(clone, "script");
                if (destElements.length > 0) {
                  setGlobalEval(
                    destElements,
                    !inPage && getAll(elem, "script")
                  );
                }

                // Return the cloned set
                return clone;
              },

              cleanData: function (elems) {
                var data,
                  elem,
                  type,
                  special = jQuery.event.special,
                  i = 0;

                for (; (elem = elems[i]) !== undefined; i++) {
                  if (acceptData(elem)) {
                    if ((data = elem[dataPriv.expando])) {
                      if (data.events) {
                        for (type in data.events) {
                          if (special[type]) {
                            jQuery.event.remove(elem, type);

                            // This is a shortcut to avoid jQuery.event.remove's overhead
                          } else {
                            jQuery.removeEvent(elem, type, data.handle);
                          }
                        }
                      }

                      // Support: Chrome <=35 - 45+
                      // Assign undefined instead of using delete, see Data#remove
                      elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {
                      // Support: Chrome <=35 - 45+
                      // Assign undefined instead of using delete, see Data#remove
                      elem[dataUser.expando] = undefined;
                    }
                  }
                }
              },
            });

            jQuery.fn.extend({
              detach: function (selector) {
                return remove(this, selector, true);
              },

              remove: function (selector) {
                return remove(this, selector);
              },

              text: function (value) {
                return access(
                  this,
                  function (value) {
                    return value === undefined
                      ? jQuery.text(this)
                      : this.empty().each(function () {
                          if (
                            this.nodeType === 1 ||
                            this.nodeType === 11 ||
                            this.nodeType === 9
                          ) {
                            this.textContent = value;
                          }
                        });
                  },
                  null,
                  value,
                  arguments.length
                );
              },

              append: function () {
                return domManip(this, arguments, function (elem) {
                  if (
                    this.nodeType === 1 ||
                    this.nodeType === 11 ||
                    this.nodeType === 9
                  ) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                  }
                });
              },

              prepend: function () {
                return domManip(this, arguments, function (elem) {
                  if (
                    this.nodeType === 1 ||
                    this.nodeType === 11 ||
                    this.nodeType === 9
                  ) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                  }
                });
              },

              before: function () {
                return domManip(this, arguments, function (elem) {
                  if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                  }
                });
              },

              after: function () {
                return domManip(this, arguments, function (elem) {
                  if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                  }
                });
              },

              empty: function () {
                var elem,
                  i = 0;

                for (; (elem = this[i]) != null; i++) {
                  if (elem.nodeType === 1) {
                    // Prevent memory leaks
                    jQuery.cleanData(getAll(elem, false));

                    // Remove any remaining nodes
                    elem.textContent = "";
                  }
                }

                return this;
              },

              clone: function (dataAndEvents, deepDataAndEvents) {
                dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                deepDataAndEvents =
                  deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

                return this.map(function () {
                  return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
                });
              },

              html: function (value) {
                return access(
                  this,
                  function (value) {
                    var elem = this[0] || {},
                      i = 0,
                      l = this.length;

                    if (value === undefined && elem.nodeType === 1) {
                      return elem.innerHTML;
                    }

                    // See if we can take a shortcut and just use innerHTML
                    if (
                      typeof value === "string" &&
                      !rnoInnerhtml.test(value) &&
                      !wrapMap[
                        (rtagName.exec(value) || ["", ""])[1].toLowerCase()
                      ]
                    ) {
                      value = jQuery.htmlPrefilter(value);

                      try {
                        for (; i < l; i++) {
                          elem = this[i] || {};

                          // Remove element nodes and prevent memory leaks
                          if (elem.nodeType === 1) {
                            jQuery.cleanData(getAll(elem, false));
                            elem.innerHTML = value;
                          }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                      } catch (e) {}
                    }

                    if (elem) {
                      this.empty().append(value);
                    }
                  },
                  null,
                  value,
                  arguments.length
                );
              },

              replaceWith: function () {
                var ignored = [];

                // Make the changes, replacing each non-ignored context element with the new content
                return domManip(
                  this,
                  arguments,
                  function (elem) {
                    var parent = this.parentNode;

                    if (jQuery.inArray(this, ignored) < 0) {
                      jQuery.cleanData(getAll(this));
                      if (parent) {
                        parent.replaceChild(elem, this);
                      }
                    }

                    // Force callback invocation
                  },
                  ignored
                );
              },
            });

            jQuery.each(
              {
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith",
              },
              function (name, original) {
                jQuery.fn[name] = function (selector) {
                  var elems,
                    ret = [],
                    insert = jQuery(selector),
                    last = insert.length - 1,
                    i = 0;

                  for (; i <= last; i++) {
                    elems = i === last ? this : this.clone(true);
                    jQuery(insert[i])[original](elems);

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // .get() because push.apply(_, arraylike) throws on ancient WebKit
                    push.apply(ret, elems.get());
                  }

                  return this.pushStack(ret);
                };
              }
            );
            var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

            var rcustomProp = /^--/;

            var getStyles = function (elem) {
              // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
              // IE throws on elements created in popups
              // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
              var view = elem.ownerDocument.defaultView;

              if (!view || !view.opener) {
                view = window;
              }

              return view.getComputedStyle(elem);
            };

            var swap = function (elem, options, callback) {
              var ret,
                name,
                old = {};

              // Remember the old values, and insert the new ones
              for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
              }

              ret = callback.call(elem);

              // Revert the old values
              for (name in options) {
                elem.style[name] = old[name];
              }

              return ret;
            };

            var rboxStyle = new RegExp(cssExpand.join("|"), "i");

            (function () {
              // Executing both pixelPosition & boxSizingReliable tests require only one layout
              // so they're executed at the same time to save the second computation.
              function computeStyleTests() {
                // This is a singleton, we need to execute it only once
                if (!div) {
                  return;
                }

                container.style.cssText =
                  "position:absolute;left:-11111px;width:60px;" +
                  "margin-top:1px;padding:0;border:0";
                div.style.cssText =
                  "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
                  "margin:auto;border:1px;padding:1px;" +
                  "width:60%;top:1%";
                documentElement.appendChild(container).appendChild(div);

                var divStyle = window.getComputedStyle(div);
                pixelPositionVal = divStyle.top !== "1%";

                // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
                reliableMarginLeftVal =
                  roundPixelMeasures(divStyle.marginLeft) === 12;

                // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
                // Some styles come back with percentage values, even though they shouldn't
                div.style.right = "60%";
                pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

                // Support: IE 9 - 11 only
                // Detect misreporting of content dimensions for box-sizing:border-box elements
                boxSizingReliableVal =
                  roundPixelMeasures(divStyle.width) === 36;

                // Support: IE 9 only
                // Detect overflow:scroll screwiness (gh-3699)
                // Support: Chrome <=64
                // Don't get tricked when zoom affects offsetWidth (gh-4029)
                div.style.position = "absolute";
                scrollboxSizeVal =
                  roundPixelMeasures(div.offsetWidth / 3) === 12;

                documentElement.removeChild(container);

                // Nullify the div so it wouldn't be stored in the memory and
                // it will also be a sign that checks already performed
                div = null;
              }

              function roundPixelMeasures(measure) {
                return Math.round(parseFloat(measure));
              }

              var pixelPositionVal,
                boxSizingReliableVal,
                scrollboxSizeVal,
                pixelBoxStylesVal,
                reliableTrDimensionsVal,
                reliableMarginLeftVal,
                container = document.createElement("div"),
                div = document.createElement("div");

              // Finish early in limited (non-browser) environments
              if (!div.style) {
                return;
              }

              // Support: IE <=9 - 11 only
              // Style of cloned element affects source element cloned (trac-8908)
              div.style.backgroundClip = "content-box";
              div.cloneNode(true).style.backgroundClip = "";
              support.clearCloneStyle =
                div.style.backgroundClip === "content-box";

              jQuery.extend(support, {
                boxSizingReliable: function () {
                  computeStyleTests();
                  return boxSizingReliableVal;
                },
                pixelBoxStyles: function () {
                  computeStyleTests();
                  return pixelBoxStylesVal;
                },
                pixelPosition: function () {
                  computeStyleTests();
                  return pixelPositionVal;
                },
                reliableMarginLeft: function () {
                  computeStyleTests();
                  return reliableMarginLeftVal;
                },
                scrollboxSize: function () {
                  computeStyleTests();
                  return scrollboxSizeVal;
                },

                // Support: IE 9 - 11+, Edge 15 - 18+
                // IE/Edge misreport `getComputedStyle` of table rows with width/height
                // set in CSS while `offset*` properties report correct values.
                // Behavior in IE 9 is more subtle than in newer versions & it passes
                // some versions of this test; make sure not to make it pass there!
                //
                // Support: Firefox 70+
                // Only Firefox includes border widths
                // in computed dimensions. (gh-4529)
                reliableTrDimensions: function () {
                  var table, tr, trChild, trStyle;
                  if (reliableTrDimensionsVal == null) {
                    table = document.createElement("table");
                    tr = document.createElement("tr");
                    trChild = document.createElement("div");

                    table.style.cssText =
                      "position:absolute;left:-11111px;border-collapse:separate";
                    tr.style.cssText =
                      "box-sizing:content-box;border:1px solid";

                    // Support: Chrome 86+
                    // Height set through cssText does not get applied.
                    // Computed height then comes back as 0.
                    tr.style.height = "1px";
                    trChild.style.height = "9px";

                    // Support: Android 8 Chrome 86+
                    // In our bodyBackground.html iframe,
                    // display for all div elements is set to "inline",
                    // which causes a problem only in Android 8 Chrome 86.
                    // Ensuring the div is `display: block`
                    // gets around this issue.
                    trChild.style.display = "block";

                    documentElement
                      .appendChild(table)
                      .appendChild(tr)
                      .appendChild(trChild);

                    trStyle = window.getComputedStyle(tr);
                    reliableTrDimensionsVal =
                      parseInt(trStyle.height, 10) +
                        parseInt(trStyle.borderTopWidth, 10) +
                        parseInt(trStyle.borderBottomWidth, 10) ===
                      tr.offsetHeight;

                    documentElement.removeChild(table);
                  }
                  return reliableTrDimensionsVal;
                },
              });
            })();

            function curCSS(elem, name, computed) {
              var width,
                minWidth,
                maxWidth,
                ret,
                isCustomProp = rcustomProp.test(name),
                // Support: Firefox 51+
                // Retrieving style before computed somehow
                // fixes an issue with getting wrong values
                // on detached elements
                style = elem.style;

              computed = computed || getStyles(elem);

              // getPropertyValue is needed for:
              //   .css('filter') (IE 9 only, trac-12537)
              //   .css('--customProperty) (gh-3144)
              if (computed) {
                // Support: IE <=9 - 11+
                // IE only supports `"float"` in `getPropertyValue`; in computed styles
                // it's only available as `"cssFloat"`. We no longer modify properties
                // sent to `.css()` apart from camelCasing, so we need to check both.
                // Normally, this would create difference in behavior: if
                // `getPropertyValue` returns an empty string, the value returned
                // by `.css()` would be `undefined`. This is usually the case for
                // disconnected elements. However, in IE even disconnected elements
                // with no styles return `"none"` for `getPropertyValue( "float" )`
                ret = computed.getPropertyValue(name) || computed[name];

                if (isCustomProp && ret) {
                  // Support: Firefox 105+, Chrome <=105+
                  // Spec requires trimming whitespace for custom properties (gh-4926).
                  // Firefox only trims leading whitespace. Chrome just collapses
                  // both leading & trailing whitespace to a single space.
                  //
                  // Fall back to `undefined` if empty string returned.
                  // This collapses a missing definition with property defined
                  // and set to an empty string but there's no standard API
                  // allowing us to differentiate them without a performance penalty
                  // and returning `undefined` aligns with older jQuery.
                  //
                  // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
                  // as whitespace while CSS does not, but this is not a problem
                  // because CSS preprocessing replaces them with U+000A LINE FEED
                  // (which *is* CSS whitespace)
                  // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
                  ret = ret.replace(rtrimCSS, "$1") || undefined;
                }

                if (ret === "" && !isAttached(elem)) {
                  ret = jQuery.style(elem, name);
                }

                // A tribute to the "awesome hack by Dean Edwards"
                // Android Browser returns percentage for some values,
                // but width seems to be reliably pixels.
                // This is against the CSSOM draft spec:
                // https://drafts.csswg.org/cssom/#resolved-values
                if (
                  !support.pixelBoxStyles() &&
                  rnumnonpx.test(ret) &&
                  rboxStyle.test(name)
                ) {
                  // Remember the original values
                  width = style.width;
                  minWidth = style.minWidth;
                  maxWidth = style.maxWidth;

                  // Put in the new values to get a computed value out
                  style.minWidth = style.maxWidth = style.width = ret;
                  ret = computed.width;

                  // Revert the changed values
                  style.width = width;
                  style.minWidth = minWidth;
                  style.maxWidth = maxWidth;
                }
              }

              return ret !== undefined
                ? // Support: IE <=9 - 11 only
                  // IE returns zIndex value as an integer.
                  ret + ""
                : ret;
            }

            function addGetHookIf(conditionFn, hookFn) {
              // Define the hook, we'll check on the first run if it's really needed.
              return {
                get: function () {
                  if (conditionFn()) {
                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                  }

                  // Hook needed; redefine it so that the support test is not executed again.
                  return (this.get = hookFn).apply(this, arguments);
                },
              };
            }

            var cssPrefixes = ["Webkit", "Moz", "ms"],
              emptyStyle = document.createElement("div").style,
              vendorProps = {};

            // Return a vendor-prefixed property or undefined
            function vendorPropName(name) {
              // Check for vendor prefixed names
              var capName = name[0].toUpperCase() + name.slice(1),
                i = cssPrefixes.length;

              while (i--) {
                name = cssPrefixes[i] + capName;
                if (name in emptyStyle) {
                  return name;
                }
              }
            }

            // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
            function finalPropName(name) {
              var final = jQuery.cssProps[name] || vendorProps[name];

              if (final) {
                return final;
              }
              if (name in emptyStyle) {
                return name;
              }
              return (vendorProps[name] = vendorPropName(name) || name);
            }

            var // Swappable if display is none or starts with table
              // except "table", "table-cell", or "table-caption"
              // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
              rdisplayswap = /^(none|table(?!-c[ea]).+)/,
              cssShow = {
                position: "absolute",
                visibility: "hidden",
                display: "block",
              },
              cssNormalTransform = {
                letterSpacing: "0",
                fontWeight: "400",
              };

            function setPositiveNumber(_elem, value, subtract) {
              // Any relative (+/-) values have already been
              // normalized at this point
              var matches = rcssNum.exec(value);
              return matches
                ? // Guard against undefined "subtract", e.g., when used as in cssHooks
                  Math.max(0, matches[2] - (subtract || 0)) +
                    (matches[3] || "px")
                : value;
            }

            function boxModelAdjustment(
              elem,
              dimension,
              box,
              isBorderBox,
              styles,
              computedVal
            ) {
              var i = dimension === "width" ? 1 : 0,
                extra = 0,
                delta = 0,
                marginDelta = 0;

              // Adjustment may not be necessary
              if (box === (isBorderBox ? "border" : "content")) {
                return 0;
              }

              for (; i < 4; i += 2) {
                // Both box models exclude margin
                // Count margin delta separately to only add it after scroll gutter adjustment.
                // This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
                if (box === "margin") {
                  marginDelta += jQuery.css(
                    elem,
                    box + cssExpand[i],
                    true,
                    styles
                  );
                }

                // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
                if (!isBorderBox) {
                  // Add padding
                  delta += jQuery.css(
                    elem,
                    "padding" + cssExpand[i],
                    true,
                    styles
                  );

                  // For "border" or "margin", add border
                  if (box !== "padding") {
                    delta += jQuery.css(
                      elem,
                      "border" + cssExpand[i] + "Width",
                      true,
                      styles
                    );

                    // But still keep track of it otherwise
                  } else {
                    extra += jQuery.css(
                      elem,
                      "border" + cssExpand[i] + "Width",
                      true,
                      styles
                    );
                  }

                  // If we get here with a border-box (content + padding + border), we're seeking "content" or
                  // "padding" or "margin"
                } else {
                  // For "content", subtract padding
                  if (box === "content") {
                    delta -= jQuery.css(
                      elem,
                      "padding" + cssExpand[i],
                      true,
                      styles
                    );
                  }

                  // For "content" or "padding", subtract border
                  if (box !== "margin") {
                    delta -= jQuery.css(
                      elem,
                      "border" + cssExpand[i] + "Width",
                      true,
                      styles
                    );
                  }
                }
              }

              // Account for positive content-box scroll gutter when requested by providing computedVal
              if (!isBorderBox && computedVal >= 0) {
                // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
                // Assuming integer scroll gutter, subtract the rest and round down
                delta +=
                  Math.max(
                    0,
                    Math.ceil(
                      elem[
                        "offset" +
                          dimension[0].toUpperCase() +
                          dimension.slice(1)
                      ] -
                        computedVal -
                        delta -
                        extra -
                        0.5

                      // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
                      // Use an explicit zero to avoid NaN (gh-3964)
                    )
                  ) || 0;
              }

              return delta + marginDelta;
            }

            function getWidthOrHeight(elem, dimension, extra) {
              // Start with computed style
              var styles = getStyles(elem),
                // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
                // Fake content-box until we know it's needed to know the true value.
                boxSizingNeeded = !support.boxSizingReliable() || extra,
                isBorderBox =
                  boxSizingNeeded &&
                  jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                valueIsBorderBox = isBorderBox,
                val = curCSS(elem, dimension, styles),
                offsetProp =
                  "offset" + dimension[0].toUpperCase() + dimension.slice(1);

              // Support: Firefox <=54
              // Return a confounding non-pixel value or feign ignorance, as appropriate.
              if (rnumnonpx.test(val)) {
                if (!extra) {
                  return val;
                }
                val = "auto";
              }

              // Support: IE 9 - 11 only
              // Use offsetWidth/offsetHeight for when box sizing is unreliable.
              // In those cases, the computed value can be trusted to be border-box.
              if (
                ((!support.boxSizingReliable() && isBorderBox) ||
                  // Support: IE 10 - 11+, Edge 15 - 18+
                  // IE/Edge misreport `getComputedStyle` of table rows with width/height
                  // set in CSS while `offset*` properties report correct values.
                  // Interestingly, in some cases IE 9 doesn't suffer from this issue.
                  (!support.reliableTrDimensions() && nodeName(elem, "tr")) ||
                  // Fall back to offsetWidth/offsetHeight when value is "auto"
                  // This happens for inline elements with no explicit setting (gh-3571)
                  val === "auto" ||
                  // Support: Android <=4.1 - 4.3 only
                  // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
                  (!parseFloat(val) &&
                    jQuery.css(elem, "display", false, styles) === "inline")) &&
                // Make sure the element is visible & connected
                elem.getClientRects().length
              ) {
                isBorderBox =
                  jQuery.css(elem, "boxSizing", false, styles) === "border-box";

                // Where available, offsetWidth/offsetHeight approximate border box dimensions.
                // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
                // retrieved value as a content box dimension.
                valueIsBorderBox = offsetProp in elem;
                if (valueIsBorderBox) {
                  val = elem[offsetProp];
                }
              }

              // Normalize "" and auto
              val = parseFloat(val) || 0;

              // Adjust for the element's box model
              return (
                val +
                boxModelAdjustment(
                  elem,
                  dimension,
                  extra || (isBorderBox ? "border" : "content"),
                  valueIsBorderBox,
                  styles,

                  // Provide the current computed size to request scroll gutter calculation (gh-3589)
                  val
                ) +
                "px"
              );
            }

            jQuery.extend({
              // Add in style property hooks for overriding the default
              // behavior of getting and setting a style property
              cssHooks: {
                opacity: {
                  get: function (elem, computed) {
                    if (computed) {
                      // We should always get a number back from opacity
                      var ret = curCSS(elem, "opacity");
                      return ret === "" ? "1" : ret;
                    }
                  },
                },
              },

              // Don't automatically add "px" to these possibly-unitless properties
              cssNumber: {
                animationIterationCount: true,
                aspectRatio: true,
                borderImageSlice: true,
                columnCount: true,
                flexGrow: true,
                flexShrink: true,
                fontWeight: true,
                gridArea: true,
                gridColumn: true,
                gridColumnEnd: true,
                gridColumnStart: true,
                gridRow: true,
                gridRowEnd: true,
                gridRowStart: true,
                lineHeight: true,
                opacity: true,
                order: true,
                orphans: true,
                scale: true,
                widows: true,
                zIndex: true,
                zoom: true,

                // SVG-related
                fillOpacity: true,
                floodOpacity: true,
                stopOpacity: true,
                strokeMiterlimit: true,
                strokeOpacity: true,
              },

              // Add in properties whose names you wish to fix before
              // setting or getting the value
              cssProps: {},

              // Get and set the style property on a DOM Node
              style: function (elem, name, value, extra) {
                // Don't set styles on text and comment nodes
                if (
                  !elem ||
                  elem.nodeType === 3 ||
                  elem.nodeType === 8 ||
                  !elem.style
                ) {
                  return;
                }

                // Make sure that we're working with the right name
                var ret,
                  type,
                  hooks,
                  origName = camelCase(name),
                  isCustomProp = rcustomProp.test(name),
                  style = elem.style;

                // Make sure that we're working with the right name. We don't
                // want to query the value if it is a CSS custom property
                // since they are user-defined.
                if (!isCustomProp) {
                  name = finalPropName(origName);
                }

                // Gets hook for the prefixed version, then unprefixed version
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

                // Check if we're setting a value
                if (value !== undefined) {
                  type = typeof value;

                  // Convert "+=" or "-=" to relative numbers (trac-7345)
                  if (
                    type === "string" &&
                    (ret = rcssNum.exec(value)) &&
                    ret[1]
                  ) {
                    value = adjustCSS(elem, name, ret);

                    // Fixes bug trac-9237
                    type = "number";
                  }

                  // Make sure that null and NaN values aren't set (trac-7116)
                  if (value == null || value !== value) {
                    return;
                  }

                  // If a number was passed in, add the unit (except for certain CSS properties)
                  // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                  // "px" to a few hardcoded values.
                  if (type === "number" && !isCustomProp) {
                    value +=
                      (ret && ret[3]) ||
                      (jQuery.cssNumber[origName] ? "" : "px");
                  }

                  // background-* props affect original clone's values
                  if (
                    !support.clearCloneStyle &&
                    value === "" &&
                    name.indexOf("background") === 0
                  ) {
                    style[name] = "inherit";
                  }

                  // If a hook was provided, use that value, otherwise just set the specified value
                  if (
                    !hooks ||
                    !("set" in hooks) ||
                    (value = hooks.set(elem, value, extra)) !== undefined
                  ) {
                    if (isCustomProp) {
                      style.setProperty(name, value);
                    } else {
                      style[name] = value;
                    }
                  }
                } else {
                  // If a hook was provided get the non-computed value from there
                  if (
                    hooks &&
                    "get" in hooks &&
                    (ret = hooks.get(elem, false, extra)) !== undefined
                  ) {
                    return ret;
                  }

                  // Otherwise just get the value from the style object
                  return style[name];
                }
              },

              css: function (elem, name, extra, styles) {
                var val,
                  num,
                  hooks,
                  origName = camelCase(name),
                  isCustomProp = rcustomProp.test(name);

                // Make sure that we're working with the right name. We don't
                // want to modify the value if it is a CSS custom property
                // since they are user-defined.
                if (!isCustomProp) {
                  name = finalPropName(origName);
                }

                // Try prefixed name followed by the unprefixed name
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

                // If a hook was provided get the computed value from there
                if (hooks && "get" in hooks) {
                  val = hooks.get(elem, true, extra);
                }

                // Otherwise, if a way to get the computed value exists, use that
                if (val === undefined) {
                  val = curCSS(elem, name, styles);
                }

                // Convert "normal" to computed value
                if (val === "normal" && name in cssNormalTransform) {
                  val = cssNormalTransform[name];
                }

                // Make numeric if forced or a qualifier was provided and val looks numeric
                if (extra === "" || extra) {
                  num = parseFloat(val);
                  return extra === true || isFinite(num) ? num || 0 : val;
                }

                return val;
              },
            });

            jQuery.each(["height", "width"], function (_i, dimension) {
              jQuery.cssHooks[dimension] = {
                get: function (elem, computed, extra) {
                  if (computed) {
                    // Certain elements can have dimension info if we invisibly show them
                    // but it must have a current display style that would benefit
                    return rdisplayswap.test(jQuery.css(elem, "display")) &&
                      // Support: Safari 8+
                      // Table columns in Safari have non-zero offsetWidth & zero
                      // getBoundingClientRect().width unless display is changed.
                      // Support: IE <=11 only
                      // Running getBoundingClientRect on a disconnected node
                      // in IE throws an error.
                      (!elem.getClientRects().length ||
                        !elem.getBoundingClientRect().width)
                      ? swap(elem, cssShow, function () {
                          return getWidthOrHeight(elem, dimension, extra);
                        })
                      : getWidthOrHeight(elem, dimension, extra);
                  }
                },

                set: function (elem, value, extra) {
                  var matches,
                    styles = getStyles(elem),
                    // Only read styles.position if the test has a chance to fail
                    // to avoid forcing a reflow.
                    scrollboxSizeBuggy =
                      !support.scrollboxSize() &&
                      styles.position === "absolute",
                    // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                    boxSizingNeeded = scrollboxSizeBuggy || extra,
                    isBorderBox =
                      boxSizingNeeded &&
                      jQuery.css(elem, "boxSizing", false, styles) ===
                        "border-box",
                    subtract = extra
                      ? boxModelAdjustment(
                          elem,
                          dimension,
                          extra,
                          isBorderBox,
                          styles
                        )
                      : 0;

                  // Account for unreliable border-box dimensions by comparing offset* to computed and
                  // faking a content-box to get border and padding (gh-3699)
                  if (isBorderBox && scrollboxSizeBuggy) {
                    subtract -= Math.ceil(
                      elem[
                        "offset" +
                          dimension[0].toUpperCase() +
                          dimension.slice(1)
                      ] -
                        parseFloat(styles[dimension]) -
                        boxModelAdjustment(
                          elem,
                          dimension,
                          "border",
                          false,
                          styles
                        ) -
                        0.5
                    );
                  }

                  // Convert to pixels if value adjustment is needed
                  if (
                    subtract &&
                    (matches = rcssNum.exec(value)) &&
                    (matches[3] || "px") !== "px"
                  ) {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                  }

                  return setPositiveNumber(elem, value, subtract);
                },
              };
            });

            jQuery.cssHooks.marginLeft = addGetHookIf(
              support.reliableMarginLeft,
              function (elem, computed) {
                if (computed) {
                  return (
                    (parseFloat(curCSS(elem, "marginLeft")) ||
                      elem.getBoundingClientRect().left -
                        swap(elem, { marginLeft: 0 }, function () {
                          return elem.getBoundingClientRect().left;
                        })) + "px"
                  );
                }
              }
            );

            // These hooks are used by animate to expand properties
            jQuery.each(
              {
                margin: "",
                padding: "",
                border: "Width",
              },
              function (prefix, suffix) {
                jQuery.cssHooks[prefix + suffix] = {
                  expand: function (value) {
                    var i = 0,
                      expanded = {},
                      // Assumes a single number if not a string
                      parts =
                        typeof value === "string" ? value.split(" ") : [value];

                    for (; i < 4; i++) {
                      expanded[prefix + cssExpand[i] + suffix] =
                        parts[i] || parts[i - 2] || parts[0];
                    }

                    return expanded;
                  },
                };

                if (prefix !== "margin") {
                  jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
                }
              }
            );

            jQuery.fn.extend({
              css: function (name, value) {
                return access(
                  this,
                  function (elem, name, value) {
                    var styles,
                      len,
                      map = {},
                      i = 0;

                    if (Array.isArray(name)) {
                      styles = getStyles(elem);
                      len = name.length;

                      for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                      }

                      return map;
                    }

                    return value !== undefined
                      ? jQuery.style(elem, name, value)
                      : jQuery.css(elem, name);
                  },
                  name,
                  value,
                  arguments.length > 1
                );
              },
            });

            function Tween(elem, options, prop, end, easing) {
              return new Tween.prototype.init(elem, options, prop, end, easing);
            }
            jQuery.Tween = Tween;

            Tween.prototype = {
              constructor: Tween,
              init: function (elem, options, prop, end, easing, unit) {
                this.elem = elem;
                this.prop = prop;
                this.easing = easing || jQuery.easing._default;
                this.options = options;
                this.start = this.now = this.cur();
                this.end = end;
                this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
              },
              cur: function () {
                var hooks = Tween.propHooks[this.prop];

                return hooks && hooks.get
                  ? hooks.get(this)
                  : Tween.propHooks._default.get(this);
              },
              run: function (percent) {
                var eased,
                  hooks = Tween.propHooks[this.prop];

                if (this.options.duration) {
                  this.pos = eased = jQuery.easing[this.easing](
                    percent,
                    this.options.duration * percent,
                    0,
                    1,
                    this.options.duration
                  );
                } else {
                  this.pos = eased = percent;
                }
                this.now = (this.end - this.start) * eased + this.start;

                if (this.options.step) {
                  this.options.step.call(this.elem, this.now, this);
                }

                if (hooks && hooks.set) {
                  hooks.set(this);
                } else {
                  Tween.propHooks._default.set(this);
                }
                return this;
              },
            };

            Tween.prototype.init.prototype = Tween.prototype;

            Tween.propHooks = {
              _default: {
                get: function (tween) {
                  var result;

                  // Use a property on the element directly when it is not a DOM element,
                  // or when there is no matching style property that exists.
                  if (
                    tween.elem.nodeType !== 1 ||
                    (tween.elem[tween.prop] != null &&
                      tween.elem.style[tween.prop] == null)
                  ) {
                    return tween.elem[tween.prop];
                  }

                  // Passing an empty string as a 3rd parameter to .css will automatically
                  // attempt a parseFloat and fallback to a string if the parse fails.
                  // Simple values such as "10px" are parsed to Float;
                  // complex values such as "rotate(1rad)" are returned as-is.
                  result = jQuery.css(tween.elem, tween.prop, "");

                  // Empty strings, null, undefined and "auto" are converted to 0.
                  return !result || result === "auto" ? 0 : result;
                },
                set: function (tween) {
                  // Use step hook for back compat.
                  // Use cssHook if its there.
                  // Use .style if available and use plain properties where available.
                  if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                  } else if (
                    tween.elem.nodeType === 1 &&
                    (jQuery.cssHooks[tween.prop] ||
                      tween.elem.style[finalPropName(tween.prop)] != null)
                  ) {
                    jQuery.style(
                      tween.elem,
                      tween.prop,
                      tween.now + tween.unit
                    );
                  } else {
                    tween.elem[tween.prop] = tween.now;
                  }
                },
              },
            };

            // Support: IE <=9 only
            // Panic based approach to setting things on disconnected nodes
            Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
              set: function (tween) {
                if (tween.elem.nodeType && tween.elem.parentNode) {
                  tween.elem[tween.prop] = tween.now;
                }
              },
            };

            jQuery.easing = {
              linear: function (p) {
                return p;
              },
              swing: function (p) {
                return 0.5 - Math.cos(p * Math.PI) / 2;
              },
              _default: "swing",
            };

            jQuery.fx = Tween.prototype.init;

            // Back compat <1.8 extension point
            jQuery.fx.step = {};

            var fxNow,
              inProgress,
              rfxtypes = /^(?:toggle|show|hide)$/,
              rrun = /queueHooks$/;

            function schedule() {
              if (inProgress) {
                if (document.hidden === false && window.requestAnimationFrame) {
                  window.requestAnimationFrame(schedule);
                } else {
                  window.setTimeout(schedule, jQuery.fx.interval);
                }

                jQuery.fx.tick();
              }
            }

            // Animations created synchronously will run synchronously
            function createFxNow() {
              window.setTimeout(function () {
                fxNow = undefined;
              });
              return (fxNow = Date.now());
            }

            // Generate parameters to create a standard animation
            function genFx(type, includeWidth) {
              var which,
                i = 0,
                attrs = { height: type };

              // If we include width, step value is 1 to do all cssExpand values,
              // otherwise step value is 2 to skip over Left and Right
              includeWidth = includeWidth ? 1 : 0;
              for (; i < 4; i += 2 - includeWidth) {
                which = cssExpand[i];
                attrs["margin" + which] = attrs["padding" + which] = type;
              }

              if (includeWidth) {
                attrs.opacity = attrs.width = type;
              }

              return attrs;
            }

            function createTween(value, prop, animation) {
              var tween,
                collection = (Animation.tweeners[prop] || []).concat(
                  Animation.tweeners["*"]
                ),
                index = 0,
                length = collection.length;
              for (; index < length; index++) {
                if ((tween = collection[index].call(animation, prop, value))) {
                  // We're done with this property
                  return tween;
                }
              }
            }

            function defaultPrefilter(elem, props, opts) {
              var prop,
                value,
                toggle,
                hooks,
                oldfire,
                propTween,
                restoreDisplay,
                display,
                isBox = "width" in props || "height" in props,
                anim = this,
                orig = {},
                style = elem.style,
                hidden = elem.nodeType && isHiddenWithinTree(elem),
                dataShow = dataPriv.get(elem, "fxshow");

              // Queue-skipping animations hijack the fx hooks
              if (!opts.queue) {
                hooks = jQuery._queueHooks(elem, "fx");
                if (hooks.unqueued == null) {
                  hooks.unqueued = 0;
                  oldfire = hooks.empty.fire;
                  hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                      oldfire();
                    }
                  };
                }
                hooks.unqueued++;

                anim.always(function () {
                  // Ensure the complete handler is called before this completes
                  anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                      hooks.empty.fire();
                    }
                  });
                });
              }

              // Detect show/hide animations
              for (prop in props) {
                value = props[prop];
                if (rfxtypes.test(value)) {
                  delete props[prop];
                  toggle = toggle || value === "toggle";
                  if (value === (hidden ? "hide" : "show")) {
                    // Pretend to be hidden if this is a "show" and
                    // there is still data from a stopped show/hide
                    if (
                      value === "show" &&
                      dataShow &&
                      dataShow[prop] !== undefined
                    ) {
                      hidden = true;

                      // Ignore all other no-op show/hide data
                    } else {
                      continue;
                    }
                  }
                  orig[prop] =
                    (dataShow && dataShow[prop]) || jQuery.style(elem, prop);
                }
              }

              // Bail out if this is a no-op like .hide().hide()
              propTween = !jQuery.isEmptyObject(props);
              if (!propTween && jQuery.isEmptyObject(orig)) {
                return;
              }

              // Restrict "overflow" and "display" styles during box animations
              if (isBox && elem.nodeType === 1) {
                // Support: IE <=9 - 11, Edge 12 - 15
                // Record all 3 overflow attributes because IE does not infer the shorthand
                // from identically-valued overflowX and overflowY and Edge just mirrors
                // the overflowX value there.
                opts.overflow = [
                  style.overflow,
                  style.overflowX,
                  style.overflowY,
                ];

                // Identify a display type, preferring old show/hide data over the CSS cascade
                restoreDisplay = dataShow && dataShow.display;
                if (restoreDisplay == null) {
                  restoreDisplay = dataPriv.get(elem, "display");
                }
                display = jQuery.css(elem, "display");
                if (display === "none") {
                  if (restoreDisplay) {
                    display = restoreDisplay;
                  } else {
                    // Get nonempty value(s) by temporarily forcing visibility
                    showHide([elem], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, "display");
                    showHide([elem]);
                  }
                }

                // Animate inline elements as inline-block
                if (
                  display === "inline" ||
                  (display === "inline-block" && restoreDisplay != null)
                ) {
                  if (jQuery.css(elem, "float") === "none") {
                    // Restore the original display value at the end of pure show/hide animations
                    if (!propTween) {
                      anim.done(function () {
                        style.display = restoreDisplay;
                      });
                      if (restoreDisplay == null) {
                        display = style.display;
                        restoreDisplay = display === "none" ? "" : display;
                      }
                    }
                    style.display = "inline-block";
                  }
                }
              }

              if (opts.overflow) {
                style.overflow = "hidden";
                anim.always(function () {
                  style.overflow = opts.overflow[0];
                  style.overflowX = opts.overflow[1];
                  style.overflowY = opts.overflow[2];
                });
              }

              // Implement show/hide animations
              propTween = false;
              for (prop in orig) {
                // General show/hide setup for this element animation
                if (!propTween) {
                  if (dataShow) {
                    if ("hidden" in dataShow) {
                      hidden = dataShow.hidden;
                    }
                  } else {
                    dataShow = dataPriv.access(elem, "fxshow", {
                      display: restoreDisplay,
                    });
                  }

                  // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                  if (toggle) {
                    dataShow.hidden = !hidden;
                  }

                  // Show elements before animating them
                  if (hidden) {
                    showHide([elem], true);
                  }

                  /* eslint-disable no-loop-func */

                  anim.done(function () {
                    /* eslint-enable no-loop-func */

                    // The final step of a "hide" animation is actually hiding the element
                    if (!hidden) {
                      showHide([elem]);
                    }
                    dataPriv.remove(elem, "fxshow");
                    for (prop in orig) {
                      jQuery.style(elem, prop, orig[prop]);
                    }
                  });
                }

                // Per-property setup
                propTween = createTween(
                  hidden ? dataShow[prop] : 0,
                  prop,
                  anim
                );
                if (!(prop in dataShow)) {
                  dataShow[prop] = propTween.start;
                  if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                  }
                }
              }
            }

            function propFilter(props, specialEasing) {
              var index, name, easing, value, hooks;

              // camelCase, specialEasing and expand cssHook pass
              for (index in props) {
                name = camelCase(index);
                easing = specialEasing[name];
                value = props[index];
                if (Array.isArray(value)) {
                  easing = value[1];
                  value = props[index] = value[0];
                }

                if (index !== name) {
                  props[name] = value;
                  delete props[index];
                }

                hooks = jQuery.cssHooks[name];
                if (hooks && "expand" in hooks) {
                  value = hooks.expand(value);
                  delete props[name];

                  // Not quite $.extend, this won't overwrite existing keys.
                  // Reusing 'index' because we have the correct "name"
                  for (index in value) {
                    if (!(index in props)) {
                      props[index] = value[index];
                      specialEasing[index] = easing;
                    }
                  }
                } else {
                  specialEasing[name] = easing;
                }
              }
            }

            function Animation(elem, properties, options) {
              var result,
                stopped,
                index = 0,
                length = Animation.prefilters.length,
                deferred = jQuery.Deferred().always(function () {
                  // Don't match elem in the :animated selector
                  delete tick.elem;
                }),
                tick = function () {
                  if (stopped) {
                    return false;
                  }
                  var currentTime = fxNow || createFxNow(),
                    remaining = Math.max(
                      0,
                      animation.startTime + animation.duration - currentTime
                    ),
                    // Support: Android 2.3 only
                    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;

                  for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                  }

                  deferred.notifyWith(elem, [animation, percent, remaining]);

                  // If there's more to do, yield
                  if (percent < 1 && length) {
                    return remaining;
                  }

                  // If this was an empty animation, synthesize a final progress notification
                  if (!length) {
                    deferred.notifyWith(elem, [animation, 1, 0]);
                  }

                  // Resolve the animation and report its conclusion
                  deferred.resolveWith(elem, [animation]);
                  return false;
                },
                animation = deferred.promise({
                  elem: elem,
                  props: jQuery.extend({}, properties),
                  opts: jQuery.extend(
                    true,
                    {
                      specialEasing: {},
                      easing: jQuery.easing._default,
                    },
                    options
                  ),
                  originalProperties: properties,
                  originalOptions: options,
                  startTime: fxNow || createFxNow(),
                  duration: options.duration,
                  tweens: [],
                  createTween: function (prop, end) {
                    var tween = jQuery.Tween(
                      elem,
                      animation.opts,
                      prop,
                      end,
                      animation.opts.specialEasing[prop] ||
                        animation.opts.easing
                    );
                    animation.tweens.push(tween);
                    return tween;
                  },
                  stop: function (gotoEnd) {
                    var index = 0,
                      // If we are going to the end, we want to run all the tweens
                      // otherwise we skip this part
                      length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                      return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                      animation.tweens[index].run(1);
                    }

                    // Resolve when we played the last frame; otherwise, reject
                    if (gotoEnd) {
                      deferred.notifyWith(elem, [animation, 1, 0]);
                      deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                      deferred.rejectWith(elem, [animation, gotoEnd]);
                    }
                    return this;
                  },
                }),
                props = animation.props;

              propFilter(props, animation.opts.specialEasing);

              for (; index < length; index++) {
                result = Animation.prefilters[index].call(
                  animation,
                  elem,
                  props,
                  animation.opts
                );
                if (result) {
                  if (isFunction(result.stop)) {
                    jQuery._queueHooks(
                      animation.elem,
                      animation.opts.queue
                    ).stop = result.stop.bind(result);
                  }
                  return result;
                }
              }

              jQuery.map(props, createTween, animation);

              if (isFunction(animation.opts.start)) {
                animation.opts.start.call(elem, animation);
              }

              // Attach callbacks from options
              animation
                .progress(animation.opts.progress)
                .done(animation.opts.done, animation.opts.complete)
                .fail(animation.opts.fail)
                .always(animation.opts.always);

              jQuery.fx.timer(
                jQuery.extend(tick, {
                  elem: elem,
                  anim: animation,
                  queue: animation.opts.queue,
                })
              );

              return animation;
            }

            jQuery.Animation = jQuery.extend(Animation, {
              tweeners: {
                "*": [
                  function (prop, value) {
                    var tween = this.createTween(prop, value);
                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                    return tween;
                  },
                ],
              },

              tweener: function (props, callback) {
                if (isFunction(props)) {
                  callback = props;
                  props = ["*"];
                } else {
                  props = props.match(rnothtmlwhite);
                }

                var prop,
                  index = 0,
                  length = props.length;

                for (; index < length; index++) {
                  prop = props[index];
                  Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                  Animation.tweeners[prop].unshift(callback);
                }
              },

              prefilters: [defaultPrefilter],

              prefilter: function (callback, prepend) {
                if (prepend) {
                  Animation.prefilters.unshift(callback);
                } else {
                  Animation.prefilters.push(callback);
                }
              },
            });

            jQuery.speed = function (speed, easing, fn) {
              var opt =
                speed && typeof speed === "object"
                  ? jQuery.extend({}, speed)
                  : {
                      complete:
                        fn || (!fn && easing) || (isFunction(speed) && speed),
                      duration: speed,
                      easing:
                        (fn && easing) ||
                        (easing && !isFunction(easing) && easing),
                    };

              // Go to the end state if fx are off
              if (jQuery.fx.off) {
                opt.duration = 0;
              } else {
                if (typeof opt.duration !== "number") {
                  if (opt.duration in jQuery.fx.speeds) {
                    opt.duration = jQuery.fx.speeds[opt.duration];
                  } else {
                    opt.duration = jQuery.fx.speeds._default;
                  }
                }
              }

              // Normalize opt.queue - true/undefined/null -> "fx"
              if (opt.queue == null || opt.queue === true) {
                opt.queue = "fx";
              }

              // Queueing
              opt.old = opt.complete;

              opt.complete = function () {
                if (isFunction(opt.old)) {
                  opt.old.call(this);
                }

                if (opt.queue) {
                  jQuery.dequeue(this, opt.queue);
                }
              };

              return opt;
            };

            jQuery.fn.extend({
              fadeTo: function (speed, to, easing, callback) {
                // Show any hidden elements after setting opacity to 0
                return (
                  this.filter(isHiddenWithinTree)
                    .css("opacity", 0)
                    .show()

                    // Animate to the value specified
                    .end()
                    .animate({ opacity: to }, speed, easing, callback)
                );
              },
              animate: function (prop, speed, easing, callback) {
                var empty = jQuery.isEmptyObject(prop),
                  optall = jQuery.speed(speed, easing, callback),
                  doAnimation = function () {
                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation(this, jQuery.extend({}, prop), optall);

                    // Empty animations, or finishing resolves immediately
                    if (empty || dataPriv.get(this, "finish")) {
                      anim.stop(true);
                    }
                  };

                doAnimation.finish = doAnimation;

                return empty || optall.queue === false
                  ? this.each(doAnimation)
                  : this.queue(optall.queue, doAnimation);
              },
              stop: function (type, clearQueue, gotoEnd) {
                var stopQueue = function (hooks) {
                  var stop = hooks.stop;
                  delete hooks.stop;
                  stop(gotoEnd);
                };

                if (typeof type !== "string") {
                  gotoEnd = clearQueue;
                  clearQueue = type;
                  type = undefined;
                }
                if (clearQueue) {
                  this.queue(type || "fx", []);
                }

                return this.each(function () {
                  var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = dataPriv.get(this);

                  if (index) {
                    if (data[index] && data[index].stop) {
                      stopQueue(data[index]);
                    }
                  } else {
                    for (index in data) {
                      if (data[index] && data[index].stop && rrun.test(index)) {
                        stopQueue(data[index]);
                      }
                    }
                  }

                  for (index = timers.length; index--; ) {
                    if (
                      timers[index].elem === this &&
                      (type == null || timers[index].queue === type)
                    ) {
                      timers[index].anim.stop(gotoEnd);
                      dequeue = false;
                      timers.splice(index, 1);
                    }
                  }

                  // Start the next in the queue if the last step wasn't forced.
                  // Timers currently will call their complete callbacks, which
                  // will dequeue but only if they were gotoEnd.
                  if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                  }
                });
              },
              finish: function (type) {
                if (type !== false) {
                  type = type || "fx";
                }
                return this.each(function () {
                  var index,
                    data = dataPriv.get(this),
                    queue = data[type + "queue"],
                    hooks = data[type + "queueHooks"],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                  // Enable finishing flag on private data
                  data.finish = true;

                  // Empty the queue first
                  jQuery.queue(this, type, []);

                  if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                  }

                  // Look for any active animations, and finish them
                  for (index = timers.length; index--; ) {
                    if (
                      timers[index].elem === this &&
                      timers[index].queue === type
                    ) {
                      timers[index].anim.stop(true);
                      timers.splice(index, 1);
                    }
                  }

                  // Look for any animations in the old queue and finish them
                  for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                      queue[index].finish.call(this);
                    }
                  }

                  // Turn off finishing flag
                  delete data.finish;
                });
              },
            });

            jQuery.each(["toggle", "show", "hide"], function (_i, name) {
              var cssFn = jQuery.fn[name];
              jQuery.fn[name] = function (speed, easing, callback) {
                return speed == null || typeof speed === "boolean"
                  ? cssFn.apply(this, arguments)
                  : this.animate(genFx(name, true), speed, easing, callback);
              };
            });

            // Generate shortcuts for custom animations
            jQuery.each(
              {
                slideDown: genFx("show"),
                slideUp: genFx("hide"),
                slideToggle: genFx("toggle"),
                fadeIn: { opacity: "show" },
                fadeOut: { opacity: "hide" },
                fadeToggle: { opacity: "toggle" },
              },
              function (name, props) {
                jQuery.fn[name] = function (speed, easing, callback) {
                  return this.animate(props, speed, easing, callback);
                };
              }
            );

            jQuery.timers = [];
            jQuery.fx.tick = function () {
              var timer,
                i = 0,
                timers = jQuery.timers;

              fxNow = Date.now();

              for (; i < timers.length; i++) {
                timer = timers[i];

                // Run the timer and safely remove it when done (allowing for external removal)
                if (!timer() && timers[i] === timer) {
                  timers.splice(i--, 1);
                }
              }

              if (!timers.length) {
                jQuery.fx.stop();
              }
              fxNow = undefined;
            };

            jQuery.fx.timer = function (timer) {
              jQuery.timers.push(timer);
              jQuery.fx.start();
            };

            jQuery.fx.interval = 13;
            jQuery.fx.start = function () {
              if (inProgress) {
                return;
              }

              inProgress = true;
              schedule();
            };

            jQuery.fx.stop = function () {
              inProgress = null;
            };

            jQuery.fx.speeds = {
              slow: 600,
              fast: 200,

              // Default speed
              _default: 400,
            };

            // Based off of the plugin by Clint Helfers, with permission.
            jQuery.fn.delay = function (time, type) {
              time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
              type = type || "fx";

              return this.queue(type, function (next, hooks) {
                var timeout = window.setTimeout(next, time);
                hooks.stop = function () {
                  window.clearTimeout(timeout);
                };
              });
            };

            (function () {
              var input = document.createElement("input"),
                select = document.createElement("select"),
                opt = select.appendChild(document.createElement("option"));

              input.type = "checkbox";

              // Support: Android <=4.3 only
              // Default value for a checkbox should be "on"
              support.checkOn = input.value !== "";

              // Support: IE <=11 only
              // Must access selectedIndex to make default options select
              support.optSelected = opt.selected;

              // Support: IE <=11 only
              // An input loses its value after becoming a radio
              input = document.createElement("input");
              input.value = "t";
              input.type = "radio";
              support.radioValue = input.value === "t";
            })();

            var boolHook,
              attrHandle = jQuery.expr.attrHandle;

            jQuery.fn.extend({
              attr: function (name, value) {
                return access(
                  this,
                  jQuery.attr,
                  name,
                  value,
                  arguments.length > 1
                );
              },

              removeAttr: function (name) {
                return this.each(function () {
                  jQuery.removeAttr(this, name);
                });
              },
            });

            jQuery.extend({
              attr: function (elem, name, value) {
                var ret,
                  hooks,
                  nType = elem.nodeType;

                // Don't get/set attributes on text, comment and attribute nodes
                if (nType === 3 || nType === 8 || nType === 2) {
                  return;
                }

                // Fallback to prop when attributes are not supported
                if (typeof elem.getAttribute === "undefined") {
                  return jQuery.prop(elem, name, value);
                }

                // Attribute hooks are determined by the lowercase version
                // Grab necessary hook if one is defined
                if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                  hooks =
                    jQuery.attrHooks[name.toLowerCase()] ||
                    (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
                }

                if (value !== undefined) {
                  if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                  }

                  if (
                    hooks &&
                    "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined
                  ) {
                    return ret;
                  }

                  elem.setAttribute(name, value + "");
                  return value;
                }

                if (
                  hooks &&
                  "get" in hooks &&
                  (ret = hooks.get(elem, name)) !== null
                ) {
                  return ret;
                }

                ret = jQuery.find.attr(elem, name);

                // Non-existent attributes return null, we normalize to undefined
                return ret == null ? undefined : ret;
              },

              attrHooks: {
                type: {
                  set: function (elem, value) {
                    if (
                      !support.radioValue &&
                      value === "radio" &&
                      nodeName(elem, "input")
                    ) {
                      var val = elem.value;
                      elem.setAttribute("type", value);
                      if (val) {
                        elem.value = val;
                      }
                      return value;
                    }
                  },
                },
              },

              removeAttr: function (elem, value) {
                var name,
                  i = 0,
                  // Attribute names can contain non-HTML whitespace characters
                  // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                  attrNames = value && value.match(rnothtmlwhite);

                if (attrNames && elem.nodeType === 1) {
                  while ((name = attrNames[i++])) {
                    elem.removeAttribute(name);
                  }
                }
              },
            });

            // Hooks for boolean attributes
            boolHook = {
              set: function (elem, value, name) {
                if (value === false) {
                  // Remove boolean attributes when set to false
                  jQuery.removeAttr(elem, name);
                } else {
                  elem.setAttribute(name, name);
                }
                return name;
              },
            };

            jQuery.each(
              jQuery.expr.match.bool.source.match(/\w+/g),
              function (_i, name) {
                var getter = attrHandle[name] || jQuery.find.attr;

                attrHandle[name] = function (elem, name, isXML) {
                  var ret,
                    handle,
                    lowercaseName = name.toLowerCase();

                  if (!isXML) {
                    // Avoid an infinite loop by temporarily removing this function from the getter
                    handle = attrHandle[lowercaseName];
                    attrHandle[lowercaseName] = ret;
                    ret =
                      getter(elem, name, isXML) != null ? lowercaseName : null;
                    attrHandle[lowercaseName] = handle;
                  }
                  return ret;
                };
              }
            );

            var rfocusable = /^(?:input|select|textarea|button)$/i,
              rclickable = /^(?:a|area)$/i;

            jQuery.fn.extend({
              prop: function (name, value) {
                return access(
                  this,
                  jQuery.prop,
                  name,
                  value,
                  arguments.length > 1
                );
              },

              removeProp: function (name) {
                return this.each(function () {
                  delete this[jQuery.propFix[name] || name];
                });
              },
            });

            jQuery.extend({
              prop: function (elem, name, value) {
                var ret,
                  hooks,
                  nType = elem.nodeType;

                // Don't get/set properties on text, comment and attribute nodes
                if (nType === 3 || nType === 8 || nType === 2) {
                  return;
                }

                if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                  // Fix name and attach hooks
                  name = jQuery.propFix[name] || name;
                  hooks = jQuery.propHooks[name];
                }

                if (value !== undefined) {
                  if (
                    hooks &&
                    "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined
                  ) {
                    return ret;
                  }

                  return (elem[name] = value);
                }

                if (
                  hooks &&
                  "get" in hooks &&
                  (ret = hooks.get(elem, name)) !== null
                ) {
                  return ret;
                }

                return elem[name];
              },

              propHooks: {
                tabIndex: {
                  get: function (elem) {
                    // Support: IE <=9 - 11 only
                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // Use proper attribute retrieval (trac-12072)
                    var tabindex = jQuery.find.attr(elem, "tabindex");

                    if (tabindex) {
                      return parseInt(tabindex, 10);
                    }

                    if (
                      rfocusable.test(elem.nodeName) ||
                      (rclickable.test(elem.nodeName) && elem.href)
                    ) {
                      return 0;
                    }

                    return -1;
                  },
                },
              },

              propFix: {
                for: "htmlFor",
                class: "className",
              },
            });

            // Support: IE <=11 only
            // Accessing the selectedIndex property
            // forces the browser to respect setting selected
            // on the option
            // The getter ensures a default option is selected
            // when in an optgroup
            // eslint rule "no-unused-expressions" is disabled for this code
            // since it considers such accessions noop
            if (!support.optSelected) {
              jQuery.propHooks.selected = {
                get: function (elem) {
                  /* eslint no-unused-expressions: "off" */

                  var parent = elem.parentNode;
                  if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                  }
                  return null;
                },
                set: function (elem) {
                  /* eslint no-unused-expressions: "off" */

                  var parent = elem.parentNode;
                  if (parent) {
                    parent.selectedIndex;

                    if (parent.parentNode) {
                      parent.parentNode.selectedIndex;
                    }
                  }
                },
              };
            }

            jQuery.each(
              [
                "tabIndex",
                "readOnly",
                "maxLength",
                "cellSpacing",
                "cellPadding",
                "rowSpan",
                "colSpan",
                "useMap",
                "frameBorder",
                "contentEditable",
              ],
              function () {
                jQuery.propFix[this.toLowerCase()] = this;
              }
            );

            // Strip and collapse whitespace according to HTML spec
            // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
            function stripAndCollapse(value) {
              var tokens = value.match(rnothtmlwhite) || [];
              return tokens.join(" ");
            }

            function getClass(elem) {
              return (elem.getAttribute && elem.getAttribute("class")) || "";
            }

            function classesToArray(value) {
              if (Array.isArray(value)) {
                return value;
              }
              if (typeof value === "string") {
                return value.match(rnothtmlwhite) || [];
              }
              return [];
            }

            jQuery.fn.extend({
              addClass: function (value) {
                var classNames, cur, curValue, className, i, finalValue;

                if (isFunction(value)) {
                  return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                  });
                }

                classNames = classesToArray(value);

                if (classNames.length) {
                  return this.each(function () {
                    curValue = getClass(this);
                    cur =
                      this.nodeType === 1 &&
                      " " + stripAndCollapse(curValue) + " ";

                    if (cur) {
                      for (i = 0; i < classNames.length; i++) {
                        className = classNames[i];
                        if (cur.indexOf(" " + className + " ") < 0) {
                          cur += className + " ";
                        }
                      }

                      // Only assign if different to avoid unneeded rendering.
                      finalValue = stripAndCollapse(cur);
                      if (curValue !== finalValue) {
                        this.setAttribute("class", finalValue);
                      }
                    }
                  });
                }

                return this;
              },

              removeClass: function (value) {
                var classNames, cur, curValue, className, i, finalValue;

                if (isFunction(value)) {
                  return this.each(function (j) {
                    jQuery(this).removeClass(
                      value.call(this, j, getClass(this))
                    );
                  });
                }

                if (!arguments.length) {
                  return this.attr("class", "");
                }

                classNames = classesToArray(value);

                if (classNames.length) {
                  return this.each(function () {
                    curValue = getClass(this);

                    // This expression is here for better compressibility (see addClass)
                    cur =
                      this.nodeType === 1 &&
                      " " + stripAndCollapse(curValue) + " ";

                    if (cur) {
                      for (i = 0; i < classNames.length; i++) {
                        className = classNames[i];

                        // Remove *all* instances
                        while (cur.indexOf(" " + className + " ") > -1) {
                          cur = cur.replace(" " + className + " ", " ");
                        }
                      }

                      // Only assign if different to avoid unneeded rendering.
                      finalValue = stripAndCollapse(cur);
                      if (curValue !== finalValue) {
                        this.setAttribute("class", finalValue);
                      }
                    }
                  });
                }

                return this;
              },

              toggleClass: function (value, stateVal) {
                var classNames,
                  className,
                  i,
                  self,
                  type = typeof value,
                  isValidValue = type === "string" || Array.isArray(value);

                if (isFunction(value)) {
                  return this.each(function (i) {
                    jQuery(this).toggleClass(
                      value.call(this, i, getClass(this), stateVal),
                      stateVal
                    );
                  });
                }

                if (typeof stateVal === "boolean" && isValidValue) {
                  return stateVal
                    ? this.addClass(value)
                    : this.removeClass(value);
                }

                classNames = classesToArray(value);

                return this.each(function () {
                  if (isValidValue) {
                    // Toggle individual class names
                    self = jQuery(this);

                    for (i = 0; i < classNames.length; i++) {
                      className = classNames[i];

                      // Check each className given, space separated list
                      if (self.hasClass(className)) {
                        self.removeClass(className);
                      } else {
                        self.addClass(className);
                      }
                    }

                    // Toggle whole class name
                  } else if (value === undefined || type === "boolean") {
                    className = getClass(this);
                    if (className) {
                      // Store className if set
                      dataPriv.set(this, "__className__", className);
                    }

                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    if (this.setAttribute) {
                      this.setAttribute(
                        "class",
                        className || value === false
                          ? ""
                          : dataPriv.get(this, "__className__") || ""
                      );
                    }
                  }
                });
              },

              hasClass: function (selector) {
                var className,
                  elem,
                  i = 0;

                className = " " + selector + " ";
                while ((elem = this[i++])) {
                  if (
                    elem.nodeType === 1 &&
                    (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(
                      className
                    ) > -1
                  ) {
                    return true;
                  }
                }

                return false;
              },
            });

            var rreturn = /\r/g;

            jQuery.fn.extend({
              val: function (value) {
                var hooks,
                  ret,
                  valueIsFunction,
                  elem = this[0];

                if (!arguments.length) {
                  if (elem) {
                    hooks =
                      jQuery.valHooks[elem.type] ||
                      jQuery.valHooks[elem.nodeName.toLowerCase()];

                    if (
                      hooks &&
                      "get" in hooks &&
                      (ret = hooks.get(elem, "value")) !== undefined
                    ) {
                      return ret;
                    }

                    ret = elem.value;

                    // Handle most common string cases
                    if (typeof ret === "string") {
                      return ret.replace(rreturn, "");
                    }

                    // Handle cases where value is null/undef or number
                    return ret == null ? "" : ret;
                  }

                  return;
                }

                valueIsFunction = isFunction(value);

                return this.each(function (i) {
                  var val;

                  if (this.nodeType !== 1) {
                    return;
                  }

                  if (valueIsFunction) {
                    val = value.call(this, i, jQuery(this).val());
                  } else {
                    val = value;
                  }

                  // Treat null/undefined as ""; convert numbers to string
                  if (val == null) {
                    val = "";
                  } else if (typeof val === "number") {
                    val += "";
                  } else if (Array.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                      return value == null ? "" : value + "";
                    });
                  }

                  hooks =
                    jQuery.valHooks[this.type] ||
                    jQuery.valHooks[this.nodeName.toLowerCase()];

                  // If set returns undefined, fall back to normal setting
                  if (
                    !hooks ||
                    !("set" in hooks) ||
                    hooks.set(this, val, "value") === undefined
                  ) {
                    this.value = val;
                  }
                });
              },
            });

            jQuery.extend({
              valHooks: {
                option: {
                  get: function (elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null
                      ? val
                      : // Support: IE <=10 - 11 only
                        // option.text throws exceptions (trac-14686, trac-14858)
                        // Strip and collapse whitespace
                        // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                        stripAndCollapse(jQuery.text(elem));
                  },
                },
                select: {
                  get: function (elem) {
                    var value,
                      option,
                      i,
                      options = elem.options,
                      index = elem.selectedIndex,
                      one = elem.type === "select-one",
                      values = one ? null : [],
                      max = one ? index + 1 : options.length;

                    if (index < 0) {
                      i = max;
                    } else {
                      i = one ? index : 0;
                    }

                    // Loop through all the selected options
                    for (; i < max; i++) {
                      option = options[i];

                      // Support: IE <=9 only
                      // IE8-9 doesn't update selected after form reset (trac-2551)
                      if (
                        (option.selected || i === index) &&
                        // Don't return options that are disabled or in a disabled optgroup
                        !option.disabled &&
                        (!option.parentNode.disabled ||
                          !nodeName(option.parentNode, "optgroup"))
                      ) {
                        // Get the specific value for the option
                        value = jQuery(option).val();

                        // We don't need an array for one selects
                        if (one) {
                          return value;
                        }

                        // Multi-Selects return an array
                        values.push(value);
                      }
                    }

                    return values;
                  },

                  set: function (elem, value) {
                    var optionSet,
                      option,
                      options = elem.options,
                      values = jQuery.makeArray(value),
                      i = options.length;

                    while (i--) {
                      option = options[i];

                      /* eslint-disable no-cond-assign */

                      if (
                        (option.selected =
                          jQuery.inArray(
                            jQuery.valHooks.option.get(option),
                            values
                          ) > -1)
                      ) {
                        optionSet = true;
                      }

                      /* eslint-enable no-cond-assign */
                    }

                    // Force browsers to behave consistently when non-matching value is set
                    if (!optionSet) {
                      elem.selectedIndex = -1;
                    }
                    return values;
                  },
                },
              },
            });

            // Radios and checkboxes getter/setter
            jQuery.each(["radio", "checkbox"], function () {
              jQuery.valHooks[this] = {
                set: function (elem, value) {
                  if (Array.isArray(value)) {
                    return (elem.checked =
                      jQuery.inArray(jQuery(elem).val(), value) > -1);
                  }
                },
              };
              if (!support.checkOn) {
                jQuery.valHooks[this].get = function (elem) {
                  return elem.getAttribute("value") === null
                    ? "on"
                    : elem.value;
                };
              }
            });

            // Return jQuery for attributes-only inclusion
            var location = window.location;

            var nonce = { guid: Date.now() };

            var rquery = /\?/;

            // Cross-browser xml parsing
            jQuery.parseXML = function (data) {
              var xml, parserErrorElem;
              if (!data || typeof data !== "string") {
                return null;
              }

              // Support: IE 9 - 11 only
              // IE throws on parseFromString with invalid input.
              try {
                xml = new window.DOMParser().parseFromString(data, "text/xml");
              } catch (e) {}

              parserErrorElem =
                xml && xml.getElementsByTagName("parsererror")[0];
              if (!xml || parserErrorElem) {
                jQuery.error(
                  "Invalid XML: " +
                    (parserErrorElem
                      ? jQuery
                          .map(parserErrorElem.childNodes, function (el) {
                            return el.textContent;
                          })
                          .join("\n")
                      : data)
                );
              }
              return xml;
            };

            var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
              stopPropagationCallback = function (e) {
                e.stopPropagation();
              };

            jQuery.extend(jQuery.event, {
              trigger: function (event, data, elem, onlyHandlers) {
                var i,
                  cur,
                  tmp,
                  bubbleType,
                  ontype,
                  handle,
                  special,
                  lastElement,
                  eventPath = [elem || document],
                  type = hasOwn.call(event, "type") ? event.type : event,
                  namespaces = hasOwn.call(event, "namespace")
                    ? event.namespace.split(".")
                    : [];

                cur = lastElement = tmp = elem = elem || document;

                // Don't do events on text and comment nodes
                if (elem.nodeType === 3 || elem.nodeType === 8) {
                  return;
                }

                // focus/blur morphs to focusin/out; ensure we're not firing them right now
                if (rfocusMorph.test(type + jQuery.event.triggered)) {
                  return;
                }

                if (type.indexOf(".") > -1) {
                  // Namespaced trigger; create a regexp to match event type in handle()
                  namespaces = type.split(".");
                  type = namespaces.shift();
                  namespaces.sort();
                }
                ontype = type.indexOf(":") < 0 && "on" + type;

                // Caller can pass in a jQuery.Event object, Object, or just an event type string
                event = event[jQuery.expando]
                  ? event
                  : new jQuery.Event(type, typeof event === "object" && event);

                // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
                event.isTrigger = onlyHandlers ? 2 : 3;
                event.namespace = namespaces.join(".");
                event.rnamespace = event.namespace
                  ? new RegExp(
                      "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"
                    )
                  : null;

                // Clean up the event in case it is being reused
                event.result = undefined;
                if (!event.target) {
                  event.target = elem;
                }

                // Clone any incoming data and prepend the event, creating the handler arg list
                data = data == null ? [event] : jQuery.makeArray(data, [event]);

                // Allow special events to draw outside the lines
                special = jQuery.event.special[type] || {};
                if (
                  !onlyHandlers &&
                  special.trigger &&
                  special.trigger.apply(elem, data) === false
                ) {
                  return;
                }

                // Determine event propagation path in advance, per W3C events spec (trac-9951)
                // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
                if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                  bubbleType = special.delegateType || type;
                  if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                  }
                  for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                  }

                  // Only add window if we got to document (e.g., not plain obj or detached DOM)
                  if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(
                      tmp.defaultView || tmp.parentWindow || window
                    );
                  }
                }

                // Fire handlers on the event path
                i = 0;
                while (
                  (cur = eventPath[i++]) &&
                  !event.isPropagationStopped()
                ) {
                  lastElement = cur;
                  event.type = i > 1 ? bubbleType : special.bindType || type;

                  // jQuery handler
                  handle =
                    (dataPriv.get(cur, "events") || Object.create(null))[
                      event.type
                    ] && dataPriv.get(cur, "handle");
                  if (handle) {
                    handle.apply(cur, data);
                  }

                  // Native handler
                  handle = ontype && cur[ontype];
                  if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                      event.preventDefault();
                    }
                  }
                }
                event.type = type;

                // If nobody prevented the default action, do it now
                if (!onlyHandlers && !event.isDefaultPrevented()) {
                  if (
                    (!special._default ||
                      special._default.apply(eventPath.pop(), data) ===
                        false) &&
                    acceptData(elem)
                  ) {
                    // Call a native DOM method on the target with the same name as the event.
                    // Don't do default actions on window, that's where global variables be (trac-6170)
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                      // Don't re-trigger an onFOO event when we call its FOO() method
                      tmp = elem[ontype];

                      if (tmp) {
                        elem[ontype] = null;
                      }

                      // Prevent re-triggering of the same event, since we already bubbled it above
                      jQuery.event.triggered = type;

                      if (event.isPropagationStopped()) {
                        lastElement.addEventListener(
                          type,
                          stopPropagationCallback
                        );
                      }

                      elem[type]();

                      if (event.isPropagationStopped()) {
                        lastElement.removeEventListener(
                          type,
                          stopPropagationCallback
                        );
                      }

                      jQuery.event.triggered = undefined;

                      if (tmp) {
                        elem[ontype] = tmp;
                      }
                    }
                  }
                }

                return event.result;
              },

              // Piggyback on a donor event to simulate a different one
              // Used only for `focus(in | out)` events
              simulate: function (type, elem, event) {
                var e = jQuery.extend(new jQuery.Event(), event, {
                  type: type,
                  isSimulated: true,
                });

                jQuery.event.trigger(e, null, elem);
              },
            });

            jQuery.fn.extend({
              trigger: function (type, data) {
                return this.each(function () {
                  jQuery.event.trigger(type, data, this);
                });
              },
              triggerHandler: function (type, data) {
                var elem = this[0];
                if (elem) {
                  return jQuery.event.trigger(type, data, elem, true);
                }
              },
            });

            var rbracket = /\[\]$/,
              rCRLF = /\r?\n/g,
              rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
              rsubmittable = /^(?:input|select|textarea|keygen)/i;

            function buildParams(prefix, obj, traditional, add) {
              var name;

              if (Array.isArray(obj)) {
                // Serialize array item.
                jQuery.each(obj, function (i, v) {
                  if (traditional || rbracket.test(prefix)) {
                    // Treat each array item as a scalar.
                    add(prefix, v);
                  } else {
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(
                      prefix +
                        "[" +
                        (typeof v === "object" && v != null ? i : "") +
                        "]",
                      v,
                      traditional,
                      add
                    );
                  }
                });
              } else if (!traditional && toType(obj) === "object") {
                // Serialize object item.
                for (name in obj) {
                  buildParams(
                    prefix + "[" + name + "]",
                    obj[name],
                    traditional,
                    add
                  );
                }
              } else {
                // Serialize scalar item.
                add(prefix, obj);
              }
            }

            // Serialize an array of form elements or a set of
            // key/values into a query string
            jQuery.param = function (a, traditional) {
              var prefix,
                s = [],
                add = function (key, valueOrFunction) {
                  // If value is a function, invoke it and use its return value
                  var value = isFunction(valueOrFunction)
                    ? valueOrFunction()
                    : valueOrFunction;

                  s[s.length] =
                    encodeURIComponent(key) +
                    "=" +
                    encodeURIComponent(value == null ? "" : value);
                };

              if (a == null) {
                return "";
              }

              // If an array was passed in, assume that it is an array of form elements.
              if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
                // Serialize the form elements
                jQuery.each(a, function () {
                  add(this.name, this.value);
                });
              } else {
                // If traditional, encode the "old" way (the way 1.3.2 or older
                // did it), otherwise encode params recursively.
                for (prefix in a) {
                  buildParams(prefix, a[prefix], traditional, add);
                }
              }

              // Return the resulting serialization
              return s.join("&");
            };

            jQuery.fn.extend({
              serialize: function () {
                return jQuery.param(this.serializeArray());
              },
              serializeArray: function () {
                return this.map(function () {
                  // Can add propHook for "elements" to filter or add form elements
                  var elements = jQuery.prop(this, "elements");
                  return elements ? jQuery.makeArray(elements) : this;
                })
                  .filter(function () {
                    var type = this.type;

                    // Use .is( ":disabled" ) so that fieldset[disabled] works
                    return (
                      this.name &&
                      !jQuery(this).is(":disabled") &&
                      rsubmittable.test(this.nodeName) &&
                      !rsubmitterTypes.test(type) &&
                      (this.checked || !rcheckableType.test(type))
                    );
                  })
                  .map(function (_i, elem) {
                    var val = jQuery(this).val();

                    if (val == null) {
                      return null;
                    }

                    if (Array.isArray(val)) {
                      return jQuery.map(val, function (val) {
                        return {
                          name: elem.name,
                          value: val.replace(rCRLF, "\r\n"),
                        };
                      });
                    }

                    return {
                      name: elem.name,
                      value: val.replace(rCRLF, "\r\n"),
                    };
                  })
                  .get();
              },
            });

            var r20 = /%20/g,
              rhash = /#.*$/,
              rantiCache = /([?&])_=[^&]*/,
              rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
              // trac-7653, trac-8125, trac-8152: local protocol detection
              rlocalProtocol =
                /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
              rnoContent = /^(?:GET|HEAD)$/,
              rprotocol = /^\/\//,
              /* Prefilters
               * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
               * 2) These are called:
               *    - BEFORE asking for a transport
               *    - AFTER param serialization (s.data is a string if s.processData is true)
               * 3) key is the dataType
               * 4) the catchall symbol "*" can be used
               * 5) execution will start with transport dataType and THEN continue down to "*" if needed
               */
              prefilters = {},
              /* Transports bindings
               * 1) key is the dataType
               * 2) the catchall symbol "*" can be used
               * 3) selection will start with transport dataType and THEN go to "*" if needed
               */
              transports = {},
              // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
              allTypes = "*/".concat("*"),
              // Anchor tag for parsing the document origin
              originAnchor = document.createElement("a");

            originAnchor.href = location.href;

            // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
            function addToPrefiltersOrTransports(structure) {
              // dataTypeExpression is optional and defaults to "*"
              return function (dataTypeExpression, func) {
                if (typeof dataTypeExpression !== "string") {
                  func = dataTypeExpression;
                  dataTypeExpression = "*";
                }

                var dataType,
                  i = 0,
                  dataTypes =
                    dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

                if (isFunction(func)) {
                  // For each dataType in the dataTypeExpression
                  while ((dataType = dataTypes[i++])) {
                    // Prepend if requested
                    if (dataType[0] === "+") {
                      dataType = dataType.slice(1) || "*";
                      (structure[dataType] = structure[dataType] || []).unshift(
                        func
                      );

                      // Otherwise append
                    } else {
                      (structure[dataType] = structure[dataType] || []).push(
                        func
                      );
                    }
                  }
                }
              };
            }

            // Base inspection function for prefilters and transports
            function inspectPrefiltersOrTransports(
              structure,
              options,
              originalOptions,
              jqXHR
            ) {
              var inspected = {},
                seekingTransport = structure === transports;

              function inspect(dataType) {
                var selected;
                inspected[dataType] = true;
                jQuery.each(
                  structure[dataType] || [],
                  function (_, prefilterOrFactory) {
                    var dataTypeOrTransport = prefilterOrFactory(
                      options,
                      originalOptions,
                      jqXHR
                    );
                    if (
                      typeof dataTypeOrTransport === "string" &&
                      !seekingTransport &&
                      !inspected[dataTypeOrTransport]
                    ) {
                      options.dataTypes.unshift(dataTypeOrTransport);
                      inspect(dataTypeOrTransport);
                      return false;
                    } else if (seekingTransport) {
                      return !(selected = dataTypeOrTransport);
                    }
                  }
                );
                return selected;
              }

              return (
                inspect(options.dataTypes[0]) ||
                (!inspected["*"] && inspect("*"))
              );
            }

            // A special extend for ajax options
            // that takes "flat" options (not to be deep extended)
            // Fixes trac-9887
            function ajaxExtend(target, src) {
              var key,
                deep,
                flatOptions = jQuery.ajaxSettings.flatOptions || {};

              for (key in src) {
                if (src[key] !== undefined) {
                  (flatOptions[key] ? target : deep || (deep = {}))[key] =
                    src[key];
                }
              }
              if (deep) {
                jQuery.extend(true, target, deep);
              }

              return target;
            }

            /* Handles responses to an ajax request:
             * - finds the right dataType (mediates between content-type and expected dataType)
             * - returns the corresponding response
             */
            function ajaxHandleResponses(s, jqXHR, responses) {
              var ct,
                type,
                finalDataType,
                firstDataType,
                contents = s.contents,
                dataTypes = s.dataTypes;

              // Remove auto dataType and get content-type in the process
              while (dataTypes[0] === "*") {
                dataTypes.shift();
                if (ct === undefined) {
                  ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
                }
              }

              // Check if we're dealing with a known content-type
              if (ct) {
                for (type in contents) {
                  if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                  }
                }
              }

              // Check to see if we have a response for the expected dataType
              if (dataTypes[0] in responses) {
                finalDataType = dataTypes[0];
              } else {
                // Try convertible dataTypes
                for (type in responses) {
                  if (
                    !dataTypes[0] ||
                    s.converters[type + " " + dataTypes[0]]
                  ) {
                    finalDataType = type;
                    break;
                  }
                  if (!firstDataType) {
                    firstDataType = type;
                  }
                }

                // Or just use first one
                finalDataType = finalDataType || firstDataType;
              }

              // If we found a dataType
              // We add the dataType to the list if needed
              // and return the corresponding response
              if (finalDataType) {
                if (finalDataType !== dataTypes[0]) {
                  dataTypes.unshift(finalDataType);
                }
                return responses[finalDataType];
              }
            }

            /* Chain conversions given the request and the original response
             * Also sets the responseXXX fields on the jqXHR instance
             */
            function ajaxConvert(s, response, jqXHR, isSuccess) {
              var conv2,
                current,
                conv,
                tmp,
                prev,
                converters = {},
                // Work with a copy of dataTypes in case we need to modify it for conversion
                dataTypes = s.dataTypes.slice();

              // Create converters map with lowercased keys
              if (dataTypes[1]) {
                for (conv in s.converters) {
                  converters[conv.toLowerCase()] = s.converters[conv];
                }
              }

              current = dataTypes.shift();

              // Convert to each sequential dataType
              while (current) {
                if (s.responseFields[current]) {
                  jqXHR[s.responseFields[current]] = response;
                }

                // Apply the dataFilter if provided
                if (!prev && isSuccess && s.dataFilter) {
                  response = s.dataFilter(response, s.dataType);
                }

                prev = current;
                current = dataTypes.shift();

                if (current) {
                  // There's only work to do if current dataType is non-auto
                  if (current === "*") {
                    current = prev;

                    // Convert response if prev dataType is non-auto and differs from current
                  } else if (prev !== "*" && prev !== current) {
                    // Seek a direct converter
                    conv =
                      converters[prev + " " + current] ||
                      converters["* " + current];

                    // If none found, seek a pair
                    if (!conv) {
                      for (conv2 in converters) {
                        // If conv2 outputs current
                        tmp = conv2.split(" ");
                        if (tmp[1] === current) {
                          // If prev can be converted to accepted input
                          conv =
                            converters[prev + " " + tmp[0]] ||
                            converters["* " + tmp[0]];
                          if (conv) {
                            // Condense equivalence converters
                            if (conv === true) {
                              conv = converters[conv2];

                              // Otherwise, insert the intermediate dataType
                            } else if (converters[conv2] !== true) {
                              current = tmp[0];
                              dataTypes.unshift(tmp[1]);
                            }
                            break;
                          }
                        }
                      }
                    }

                    // Apply converter (if not an equivalence)
                    if (conv !== true) {
                      // Unless errors are allowed to bubble, catch and return them
                      if (conv && s.throws) {
                        response = conv(response);
                      } else {
                        try {
                          response = conv(response);
                        } catch (e) {
                          return {
                            state: "parsererror",
                            error: conv
                              ? e
                              : "No conversion from " + prev + " to " + current,
                          };
                        }
                      }
                    }
                  }
                }
              }

              return { state: "success", data: response };
            }

            jQuery.extend({
              // Counter for holding the number of active queries
              active: 0,

              // Last-Modified header cache for next request
              lastModified: {},
              etag: {},

              ajaxSettings: {
                url: location.href,
                type: "GET",
                isLocal: rlocalProtocol.test(location.protocol),
                global: true,
                processData: true,
                async: true,
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",

                /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

                accepts: {
                  "*": allTypes,
                  text: "text/plain",
                  html: "text/html",
                  xml: "application/xml, text/xml",
                  json: "application/json, text/javascript",
                },

                contents: {
                  xml: /\bxml\b/,
                  html: /\bhtml/,
                  json: /\bjson\b/,
                },

                responseFields: {
                  xml: "responseXML",
                  text: "responseText",
                  json: "responseJSON",
                },

                // Data converters
                // Keys separate source (or catchall "*") and destination types with a single space
                converters: {
                  // Convert anything to text
                  "* text": String,

                  // Text to html (true = no transformation)
                  "text html": true,

                  // Evaluate text as a json expression
                  "text json": JSON.parse,

                  // Parse text as xml
                  "text xml": jQuery.parseXML,
                },

                // For options that shouldn't be deep extended:
                // you can add your own custom options here if
                // and when you create one that shouldn't be
                // deep extended (see ajaxExtend)
                flatOptions: {
                  url: true,
                  context: true,
                },
              },

              // Creates a full fledged settings object into target
              // with both ajaxSettings and settings fields.
              // If target is omitted, writes into ajaxSettings.
              ajaxSetup: function (target, settings) {
                return settings
                  ? // Building a settings object
                    ajaxExtend(
                      ajaxExtend(target, jQuery.ajaxSettings),
                      settings
                    )
                  : // Extending ajaxSettings
                    ajaxExtend(jQuery.ajaxSettings, target);
              },

              ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
              ajaxTransport: addToPrefiltersOrTransports(transports),

              // Main method
              ajax: function (url, options) {
                // If url is an object, simulate pre-1.5 signature
                if (typeof url === "object") {
                  options = url;
                  url = undefined;
                }

                // Force options to be an object
                options = options || {};

                var transport,
                  // URL without anti-cache param
                  cacheURL,
                  // Response headers
                  responseHeadersString,
                  responseHeaders,
                  // timeout handle
                  timeoutTimer,
                  // Url cleanup var
                  urlAnchor,
                  // Request state (becomes false upon send and true upon completion)
                  completed,
                  // To know if global events are to be dispatched
                  fireGlobals,
                  // Loop variable
                  i,
                  // uncached part of the url
                  uncached,
                  // Create the final options object
                  s = jQuery.ajaxSetup({}, options),
                  // Callbacks context
                  callbackContext = s.context || s,
                  // Context for global events is callbackContext if it is a DOM node or jQuery collection
                  globalEventContext =
                    s.context &&
                    (callbackContext.nodeType || callbackContext.jquery)
                      ? jQuery(callbackContext)
                      : jQuery.event,
                  // Deferreds
                  deferred = jQuery.Deferred(),
                  completeDeferred = jQuery.Callbacks("once memory"),
                  // Status-dependent callbacks
                  statusCode = s.statusCode || {},
                  // Headers (they are sent all at once)
                  requestHeaders = {},
                  requestHeadersNames = {},
                  // Default abort message
                  strAbort = "canceled",
                  // Fake xhr
                  jqXHR = {
                    readyState: 0,

                    // Builds headers hashtable if needed
                    getResponseHeader: function (key) {
                      var match;
                      if (completed) {
                        if (!responseHeaders) {
                          responseHeaders = {};
                          while (
                            (match = rheaders.exec(responseHeadersString))
                          ) {
                            responseHeaders[match[1].toLowerCase() + " "] = (
                              responseHeaders[match[1].toLowerCase() + " "] ||
                              []
                            ).concat(match[2]);
                          }
                        }
                        match = responseHeaders[key.toLowerCase() + " "];
                      }
                      return match == null ? null : match.join(", ");
                    },

                    // Raw string
                    getAllResponseHeaders: function () {
                      return completed ? responseHeadersString : null;
                    },

                    // Caches the header
                    setRequestHeader: function (name, value) {
                      if (completed == null) {
                        name = requestHeadersNames[name.toLowerCase()] =
                          requestHeadersNames[name.toLowerCase()] || name;
                        requestHeaders[name] = value;
                      }
                      return this;
                    },

                    // Overrides response content-type header
                    overrideMimeType: function (type) {
                      if (completed == null) {
                        s.mimeType = type;
                      }
                      return this;
                    },

                    // Status-dependent callbacks
                    statusCode: function (map) {
                      var code;
                      if (map) {
                        if (completed) {
                          // Execute the appropriate callbacks
                          jqXHR.always(map[jqXHR.status]);
                        } else {
                          // Lazy-add the new callbacks in a way that preserves old ones
                          for (code in map) {
                            statusCode[code] = [statusCode[code], map[code]];
                          }
                        }
                      }
                      return this;
                    },

                    // Cancel the request
                    abort: function (statusText) {
                      var finalText = statusText || strAbort;
                      if (transport) {
                        transport.abort(finalText);
                      }
                      done(0, finalText);
                      return this;
                    },
                  };

                // Attach deferreds
                deferred.promise(jqXHR);

                // Add protocol if not provided (prefilters might expect it)
                // Handle falsy url in the settings object (trac-10093: consistency with old signature)
                // We also use the url parameter if available
                s.url = ((url || s.url || location.href) + "").replace(
                  rprotocol,
                  location.protocol + "//"
                );

                // Alias method option to type as per ticket trac-12004
                s.type = options.method || options.type || s.method || s.type;

                // Extract dataTypes list
                s.dataTypes = (s.dataType || "*")
                  .toLowerCase()
                  .match(rnothtmlwhite) || [""];

                // A cross-domain request is in order when the origin doesn't match the current origin.
                if (s.crossDomain == null) {
                  urlAnchor = document.createElement("a");

                  // Support: IE <=8 - 11, Edge 12 - 15
                  // IE throws exception on accessing the href property if url is malformed,
                  // e.g. http://example.com:80x/
                  try {
                    urlAnchor.href = s.url;

                    // Support: IE <=8 - 11 only
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain =
                      originAnchor.protocol + "//" + originAnchor.host !==
                      urlAnchor.protocol + "//" + urlAnchor.host;
                  } catch (e) {
                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                  }
                }

                // Convert data if not already a string
                if (s.data && s.processData && typeof s.data !== "string") {
                  s.data = jQuery.param(s.data, s.traditional);
                }

                // Apply prefilters
                inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

                // If request was aborted inside a prefilter, stop there
                if (completed) {
                  return jqXHR;
                }

                // We can fire global events as of now if asked to
                // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
                fireGlobals = jQuery.event && s.global;

                // Watch for a new set of requests
                if (fireGlobals && jQuery.active++ === 0) {
                  jQuery.event.trigger("ajaxStart");
                }

                // Uppercase the type
                s.type = s.type.toUpperCase();

                // Determine if request has content
                s.hasContent = !rnoContent.test(s.type);

                // Save the URL in case we're toying with the If-Modified-Since
                // and/or If-None-Match header later on
                // Remove hash to simplify url manipulation
                cacheURL = s.url.replace(rhash, "");

                // More options handling for requests with no content
                if (!s.hasContent) {
                  // Remember the hash so we can put it back
                  uncached = s.url.slice(cacheURL.length);

                  // If data is available and should be processed, append data to url
                  if (s.data && (s.processData || typeof s.data === "string")) {
                    cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

                    // trac-9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                  }

                  // Add or update anti-cache param if needed
                  if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, "$1");
                    uncached =
                      (rquery.test(cacheURL) ? "&" : "?") +
                      "_=" +
                      nonce.guid++ +
                      uncached;
                  }

                  // Put hash and anti-cache on the URL that will be requested (gh-1732)
                  s.url = cacheURL + uncached;

                  // Change '%20' to '+' if this is encoded form body content (gh-2658)
                } else if (
                  s.data &&
                  s.processData &&
                  (s.contentType || "").indexOf(
                    "application/x-www-form-urlencoded"
                  ) === 0
                ) {
                  s.data = s.data.replace(r20, "+");
                }

                // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                if (s.ifModified) {
                  if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader(
                      "If-Modified-Since",
                      jQuery.lastModified[cacheURL]
                    );
                  }
                  if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader(
                      "If-None-Match",
                      jQuery.etag[cacheURL]
                    );
                  }
                }

                // Set the correct header, if data is being sent
                if (
                  (s.data && s.hasContent && s.contentType !== false) ||
                  options.contentType
                ) {
                  jqXHR.setRequestHeader("Content-Type", s.contentType);
                }

                // Set the Accepts header for the server, depending on the dataType
                jqXHR.setRequestHeader(
                  "Accept",
                  s.dataTypes[0] && s.accepts[s.dataTypes[0]]
                    ? s.accepts[s.dataTypes[0]] +
                        (s.dataTypes[0] !== "*"
                          ? ", " + allTypes + "; q=0.01"
                          : "")
                    : s.accepts["*"]
                );

                // Check for headers option
                for (i in s.headers) {
                  jqXHR.setRequestHeader(i, s.headers[i]);
                }

                // Allow custom headers/mimetypes and early abort
                if (
                  s.beforeSend &&
                  (s.beforeSend.call(callbackContext, jqXHR, s) === false ||
                    completed)
                ) {
                  // Abort if not done already and return
                  return jqXHR.abort();
                }

                // Aborting is no longer a cancellation
                strAbort = "abort";

                // Install callbacks on deferreds
                completeDeferred.add(s.complete);
                jqXHR.done(s.success);
                jqXHR.fail(s.error);

                // Get transport
                transport = inspectPrefiltersOrTransports(
                  transports,
                  s,
                  options,
                  jqXHR
                );

                // If no transport, we auto-abort
                if (!transport) {
                  done(-1, "No Transport");
                } else {
                  jqXHR.readyState = 1;

                  // Send global event
                  if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                  }

                  // If request was aborted inside ajaxSend, stop there
                  if (completed) {
                    return jqXHR;
                  }

                  // Timeout
                  if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function () {
                      jqXHR.abort("timeout");
                    }, s.timeout);
                  }

                  try {
                    completed = false;
                    transport.send(requestHeaders, done);
                  } catch (e) {
                    // Rethrow post-completion exceptions
                    if (completed) {
                      throw e;
                    }

                    // Propagate others as results
                    done(-1, e);
                  }
                }

                // Callback for when everything is done
                function done(status, nativeStatusText, responses, headers) {
                  var isSuccess,
                    success,
                    error,
                    response,
                    modified,
                    statusText = nativeStatusText;

                  // Ignore repeat invocations
                  if (completed) {
                    return;
                  }

                  completed = true;

                  // Clear timeout if it exists
                  if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                  }

                  // Dereference transport for early garbage collection
                  // (no matter how long the jqXHR object will be used)
                  transport = undefined;

                  // Cache response headers
                  responseHeadersString = headers || "";

                  // Set readyState
                  jqXHR.readyState = status > 0 ? 4 : 0;

                  // Determine if successful
                  isSuccess = (status >= 200 && status < 300) || status === 304;

                  // Get response data
                  if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                  }

                  // Use a noop converter for missing script but not if jsonp
                  if (
                    !isSuccess &&
                    jQuery.inArray("script", s.dataTypes) > -1 &&
                    jQuery.inArray("json", s.dataTypes) < 0
                  ) {
                    s.converters["text script"] = function () {};
                  }

                  // Convert no matter what (that way responseXXX fields are always set)
                  response = ajaxConvert(s, response, jqXHR, isSuccess);

                  // If successful, handle type chaining
                  if (isSuccess) {
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                      modified = jqXHR.getResponseHeader("Last-Modified");
                      if (modified) {
                        jQuery.lastModified[cacheURL] = modified;
                      }
                      modified = jqXHR.getResponseHeader("etag");
                      if (modified) {
                        jQuery.etag[cacheURL] = modified;
                      }
                    }

                    // if no content
                    if (status === 204 || s.type === "HEAD") {
                      statusText = "nocontent";

                      // if not modified
                    } else if (status === 304) {
                      statusText = "notmodified";

                      // If we have data, let's convert it
                    } else {
                      statusText = response.state;
                      success = response.data;
                      error = response.error;
                      isSuccess = !error;
                    }
                  } else {
                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                      statusText = "error";
                      if (status < 0) {
                        status = 0;
                      }
                    }
                  }

                  // Set data for the fake xhr object
                  jqXHR.status = status;
                  jqXHR.statusText = (nativeStatusText || statusText) + "";

                  // Success/Error
                  if (isSuccess) {
                    deferred.resolveWith(callbackContext, [
                      success,
                      statusText,
                      jqXHR,
                    ]);
                  } else {
                    deferred.rejectWith(callbackContext, [
                      jqXHR,
                      statusText,
                      error,
                    ]);
                  }

                  // Status-dependent callbacks
                  jqXHR.statusCode(statusCode);
                  statusCode = undefined;

                  if (fireGlobals) {
                    globalEventContext.trigger(
                      isSuccess ? "ajaxSuccess" : "ajaxError",
                      [jqXHR, s, isSuccess ? success : error]
                    );
                  }

                  // Complete
                  completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText,
                  ]);

                  if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                    // Handle the global AJAX counter
                    if (!--jQuery.active) {
                      jQuery.event.trigger("ajaxStop");
                    }
                  }
                }

                return jqXHR;
              },

              getJSON: function (url, data, callback) {
                return jQuery.get(url, data, callback, "json");
              },

              getScript: function (url, callback) {
                return jQuery.get(url, undefined, callback, "script");
              },
            });

            jQuery.each(["get", "post"], function (_i, method) {
              jQuery[method] = function (url, data, callback, type) {
                // Shift arguments if data argument was omitted
                if (isFunction(data)) {
                  type = type || callback;
                  callback = data;
                  data = undefined;
                }

                // The url can be an options object (which then must have .url)
                return jQuery.ajax(
                  jQuery.extend(
                    {
                      url: url,
                      type: method,
                      dataType: type,
                      data: data,
                      success: callback,
                    },
                    jQuery.isPlainObject(url) && url
                  )
                );
              };
            });

            jQuery.ajaxPrefilter(function (s) {
              var i;
              for (i in s.headers) {
                if (i.toLowerCase() === "content-type") {
                  s.contentType = s.headers[i] || "";
                }
              }
            });

            jQuery._evalUrl = function (url, options, doc) {
              return jQuery.ajax({
                url: url,

                // Make this explicit, since user can override this through ajaxSetup (trac-11264)
                type: "GET",
                dataType: "script",
                cache: true,
                async: false,
                global: false,

                // Only evaluate the response if it is successful (gh-4126)
                // dataFilter is not invoked for failure responses, so using it instead
                // of the default converter is kludgy but it works.
                converters: {
                  "text script": function () {},
                },
                dataFilter: function (response) {
                  jQuery.globalEval(response, options, doc);
                },
              });
            };

            jQuery.fn.extend({
              wrapAll: function (html) {
                var wrap;

                if (this[0]) {
                  if (isFunction(html)) {
                    html = html.call(this[0]);
                  }

                  // The elements to wrap the target around
                  wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                  if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                  }

                  wrap
                    .map(function () {
                      var elem = this;

                      while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                      }

                      return elem;
                    })
                    .append(this);
                }

                return this;
              },

              wrapInner: function (html) {
                if (isFunction(html)) {
                  return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                  });
                }

                return this.each(function () {
                  var self = jQuery(this),
                    contents = self.contents();

                  if (contents.length) {
                    contents.wrapAll(html);
                  } else {
                    self.append(html);
                  }
                });
              },

              wrap: function (html) {
                var htmlIsFunction = isFunction(html);

                return this.each(function (i) {
                  jQuery(this).wrapAll(
                    htmlIsFunction ? html.call(this, i) : html
                  );
                });
              },

              unwrap: function (selector) {
                this.parent(selector)
                  .not("body")
                  .each(function () {
                    jQuery(this).replaceWith(this.childNodes);
                  });
                return this;
              },
            });

            jQuery.expr.pseudos.hidden = function (elem) {
              return !jQuery.expr.pseudos.visible(elem);
            };
            jQuery.expr.pseudos.visible = function (elem) {
              return !!(
                elem.offsetWidth ||
                elem.offsetHeight ||
                elem.getClientRects().length
              );
            };

            jQuery.ajaxSettings.xhr = function () {
              try {
                return new window.XMLHttpRequest();
              } catch (e) {}
            };

            var xhrSuccessStatus = {
                // File protocol always yields status code 0, assume 200
                0: 200,

                // Support: IE <=9 only
                // trac-1450: sometimes IE returns 1223 when it should be 204
                1223: 204,
              },
              xhrSupported = jQuery.ajaxSettings.xhr();

            support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
            support.ajax = xhrSupported = !!xhrSupported;

            jQuery.ajaxTransport(function (options) {
              var callback, errorCallback;

              // Cross domain only allowed if supported through XMLHttpRequest
              if (support.cors || (xhrSupported && !options.crossDomain)) {
                return {
                  send: function (headers, complete) {
                    var i,
                      xhr = options.xhr();

                    xhr.open(
                      options.type,
                      options.url,
                      options.async,
                      options.username,
                      options.password
                    );

                    // Apply custom fields if provided
                    if (options.xhrFields) {
                      for (i in options.xhrFields) {
                        xhr[i] = options.xhrFields[i];
                      }
                    }

                    // Override mime type if needed
                    if (options.mimeType && xhr.overrideMimeType) {
                      xhr.overrideMimeType(options.mimeType);
                    }

                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if (!options.crossDomain && !headers["X-Requested-With"]) {
                      headers["X-Requested-With"] = "XMLHttpRequest";
                    }

                    // Set headers
                    for (i in headers) {
                      xhr.setRequestHeader(i, headers[i]);
                    }

                    // Callback
                    callback = function (type) {
                      return function () {
                        if (callback) {
                          callback =
                            errorCallback =
                            xhr.onload =
                            xhr.onerror =
                            xhr.onabort =
                            xhr.ontimeout =
                            xhr.onreadystatechange =
                              null;

                          if (type === "abort") {
                            xhr.abort();
                          } else if (type === "error") {
                            // Support: IE <=9 only
                            // On a manual native abort, IE9 throws
                            // errors on any property access that is not readyState
                            if (typeof xhr.status !== "number") {
                              complete(0, "error");
                            } else {
                              complete(
                                // File: protocol always yields status 0; see trac-8605, trac-14207
                                xhr.status,
                                xhr.statusText
                              );
                            }
                          } else {
                            complete(
                              xhrSuccessStatus[xhr.status] || xhr.status,
                              xhr.statusText,

                              // Support: IE <=9 only
                              // IE9 has no XHR2 but throws on binary (trac-11426)
                              // For XHR2 non-text, let the caller handle it (gh-2498)
                              (xhr.responseType || "text") !== "text" ||
                                typeof xhr.responseText !== "string"
                                ? { binary: xhr.response }
                                : { text: xhr.responseText },
                              xhr.getAllResponseHeaders()
                            );
                          }
                        }
                      };
                    };

                    // Listen to events
                    xhr.onload = callback();
                    errorCallback =
                      xhr.onerror =
                      xhr.ontimeout =
                        callback("error");

                    // Support: IE 9 only
                    // Use onreadystatechange to replace onabort
                    // to handle uncaught aborts
                    if (xhr.onabort !== undefined) {
                      xhr.onabort = errorCallback;
                    } else {
                      xhr.onreadystatechange = function () {
                        // Check readyState before timeout as it changes
                        if (xhr.readyState === 4) {
                          // Allow onerror to be called first,
                          // but that will not handle a native abort
                          // Also, save errorCallback to a variable
                          // as xhr.onerror cannot be accessed
                          window.setTimeout(function () {
                            if (callback) {
                              errorCallback();
                            }
                          });
                        }
                      };
                    }

                    // Create the abort callback
                    callback = callback("abort");

                    try {
                      // Do send the request (this may raise an exception)
                      xhr.send((options.hasContent && options.data) || null);
                    } catch (e) {
                      // trac-14683: Only rethrow if this hasn't been notified as an error yet
                      if (callback) {
                        throw e;
                      }
                    }
                  },

                  abort: function () {
                    if (callback) {
                      callback();
                    }
                  },
                };
              }
            });

            // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
            jQuery.ajaxPrefilter(function (s) {
              if (s.crossDomain) {
                s.contents.script = false;
              }
            });

            // Install script dataType
            jQuery.ajaxSetup({
              accepts: {
                script:
                  "text/javascript, application/javascript, " +
                  "application/ecmascript, application/x-ecmascript",
              },
              contents: {
                script: /\b(?:java|ecma)script\b/,
              },
              converters: {
                "text script": function (text) {
                  jQuery.globalEval(text);
                  return text;
                },
              },
            });

            // Handle cache's special case and crossDomain
            jQuery.ajaxPrefilter("script", function (s) {
              if (s.cache === undefined) {
                s.cache = false;
              }
              if (s.crossDomain) {
                s.type = "GET";
              }
            });

            // Bind script tag hack transport
            jQuery.ajaxTransport("script", function (s) {
              // This transport only deals with cross domain or forced-by-attrs requests
              if (s.crossDomain || s.scriptAttrs) {
                var script, callback;
                return {
                  send: function (_, complete) {
                    script = jQuery("<script>")
                      .attr(s.scriptAttrs || {})
                      .prop({ charset: s.scriptCharset, src: s.url })
                      .on(
                        "load error",
                        (callback = function (evt) {
                          script.remove();
                          callback = null;
                          if (evt) {
                            complete(
                              evt.type === "error" ? 404 : 200,
                              evt.type
                            );
                          }
                        })
                      );

                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    document.head.appendChild(script[0]);
                  },
                  abort: function () {
                    if (callback) {
                      callback();
                    }
                  },
                };
              }
            });

            var oldCallbacks = [],
              rjsonp = /(=)\?(?=&|$)|\?\?/;

            // Default jsonp settings
            jQuery.ajaxSetup({
              jsonp: "callback",
              jsonpCallback: function () {
                var callback =
                  oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
                this[callback] = true;
                return callback;
              },
            });

            // Detect, normalize options and install callbacks for jsonp requests
            jQuery.ajaxPrefilter(
              "json jsonp",
              function (s, originalSettings, jqXHR) {
                var callbackName,
                  overwritten,
                  responseContainer,
                  jsonProp =
                    s.jsonp !== false &&
                    (rjsonp.test(s.url)
                      ? "url"
                      : typeof s.data === "string" &&
                        (s.contentType || "").indexOf(
                          "application/x-www-form-urlencoded"
                        ) === 0 &&
                        rjsonp.test(s.data) &&
                        "data");

                // Handle iff the expected data type is "jsonp" or we have a parameter to set
                if (jsonProp || s.dataTypes[0] === "jsonp") {
                  // Get callback name, remembering preexisting value associated with it
                  callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)
                    ? s.jsonpCallback()
                    : s.jsonpCallback;

                  // Insert callback into url or form data
                  if (jsonProp) {
                    s[jsonProp] = s[jsonProp].replace(
                      rjsonp,
                      "$1" + callbackName
                    );
                  } else if (s.jsonp !== false) {
                    s.url +=
                      (rquery.test(s.url) ? "&" : "?") +
                      s.jsonp +
                      "=" +
                      callbackName;
                  }

                  // Use data converter to retrieve json after script execution
                  s.converters["script json"] = function () {
                    if (!responseContainer) {
                      jQuery.error(callbackName + " was not called");
                    }
                    return responseContainer[0];
                  };

                  // Force json dataType
                  s.dataTypes[0] = "json";

                  // Install callback
                  overwritten = window[callbackName];
                  window[callbackName] = function () {
                    responseContainer = arguments;
                  };

                  // Clean-up function (fires after converters)
                  jqXHR.always(function () {
                    // If previous value didn't exist - remove it
                    if (overwritten === undefined) {
                      jQuery(window).removeProp(callbackName);

                      // Otherwise restore preexisting value
                    } else {
                      window[callbackName] = overwritten;
                    }

                    // Save back as free
                    if (s[callbackName]) {
                      // Make sure that re-using the options doesn't screw things around
                      s.jsonpCallback = originalSettings.jsonpCallback;

                      // Save the callback name for future use
                      oldCallbacks.push(callbackName);
                    }

                    // Call if it was a function and we have a response
                    if (responseContainer && isFunction(overwritten)) {
                      overwritten(responseContainer[0]);
                    }

                    responseContainer = overwritten = undefined;
                  });

                  // Delegate to script
                  return "script";
                }
              }
            );

            // Support: Safari 8 only
            // In Safari 8 documents created via document.implementation.createHTMLDocument
            // collapse sibling forms: the second one becomes a child of the first one.
            // Because of that, this security measure has to be disabled in Safari 8.
            // https://bugs.webkit.org/show_bug.cgi?id=137337
            support.createHTMLDocument = (function () {
              var body = document.implementation.createHTMLDocument("").body;
              body.innerHTML = "<form></form><form></form>";
              return body.childNodes.length === 2;
            })();

            // Argument "data" should be string of html
            // context (optional): If specified, the fragment will be created in this context,
            // defaults to document
            // keepScripts (optional): If true, will include scripts passed in the html string
            jQuery.parseHTML = function (data, context, keepScripts) {
              if (typeof data !== "string") {
                return [];
              }
              if (typeof context === "boolean") {
                keepScripts = context;
                context = false;
              }

              var base, parsed, scripts;

              if (!context) {
                // Stop scripts or inline event handlers from being executed immediately
                // by using document.implementation
                if (support.createHTMLDocument) {
                  context = document.implementation.createHTMLDocument("");

                  // Set the base href for the created document
                  // so any parsed elements with URLs
                  // are based on the document's URL (gh-2965)
                  base = context.createElement("base");
                  base.href = document.location.href;
                  context.head.appendChild(base);
                } else {
                  context = document;
                }
              }

              parsed = rsingleTag.exec(data);
              scripts = !keepScripts && [];

              // Single tag
              if (parsed) {
                return [context.createElement(parsed[1])];
              }

              parsed = buildFragment([data], context, scripts);

              if (scripts && scripts.length) {
                jQuery(scripts).remove();
              }

              return jQuery.merge([], parsed.childNodes);
            };

            /**
             * Load a url into a page
             */
            jQuery.fn.load = function (url, params, callback) {
              var selector,
                type,
                response,
                self = this,
                off = url.indexOf(" ");

              if (off > -1) {
                selector = stripAndCollapse(url.slice(off));
                url = url.slice(0, off);
              }

              // If it's a function
              if (isFunction(params)) {
                // We assume that it's the callback
                callback = params;
                params = undefined;

                // Otherwise, build a param string
              } else if (params && typeof params === "object") {
                type = "POST";
              }

              // If we have elements to modify, make the request
              if (self.length > 0) {
                jQuery
                  .ajax({
                    url: url,

                    // If "type" variable is undefined, then "GET" method will be used.
                    // Make value of this field explicit since
                    // user can override it through ajaxSetup method
                    type: type || "GET",
                    dataType: "html",
                    data: params,
                  })
                  .done(function (responseText) {
                    // Save response for use in complete callback
                    response = arguments;

                    self.html(
                      selector
                        ? // If a selector was specified, locate the right elements in a dummy div
                          // Exclude scripts to avoid IE 'Permission Denied' errors
                          jQuery("<div>")
                            .append(jQuery.parseHTML(responseText))
                            .find(selector)
                        : // Otherwise use the full result
                          responseText
                    );

                    // If the request succeeds, this function gets "data", "status", "jqXHR"
                    // but they are ignored because response was set above.
                    // If it fails, this function gets "jqXHR", "status", "error"
                  })
                  .always(
                    callback &&
                      function (jqXHR, status) {
                        self.each(function () {
                          callback.apply(
                            this,
                            response || [jqXHR.responseText, status, jqXHR]
                          );
                        });
                      }
                  );
              }

              return this;
            };

            jQuery.expr.pseudos.animated = function (elem) {
              return jQuery.grep(jQuery.timers, function (fn) {
                return elem === fn.elem;
              }).length;
            };

            jQuery.offset = {
              setOffset: function (elem, options, i) {
                var curPosition,
                  curLeft,
                  curCSSTop,
                  curTop,
                  curOffset,
                  curCSSLeft,
                  calculatePosition,
                  position = jQuery.css(elem, "position"),
                  curElem = jQuery(elem),
                  props = {};

                // Set position first, in-case top/left are set even on static elem
                if (position === "static") {
                  elem.style.position = "relative";
                }

                curOffset = curElem.offset();
                curCSSTop = jQuery.css(elem, "top");
                curCSSLeft = jQuery.css(elem, "left");
                calculatePosition =
                  (position === "absolute" || position === "fixed") &&
                  (curCSSTop + curCSSLeft).indexOf("auto") > -1;

                // Need to be able to calculate position if either
                // top or left is auto and position is either absolute or fixed
                if (calculatePosition) {
                  curPosition = curElem.position();
                  curTop = curPosition.top;
                  curLeft = curPosition.left;
                } else {
                  curTop = parseFloat(curCSSTop) || 0;
                  curLeft = parseFloat(curCSSLeft) || 0;
                }

                if (isFunction(options)) {
                  // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                  options = options.call(elem, i, jQuery.extend({}, curOffset));
                }

                if (options.top != null) {
                  props.top = options.top - curOffset.top + curTop;
                }
                if (options.left != null) {
                  props.left = options.left - curOffset.left + curLeft;
                }

                if ("using" in options) {
                  options.using.call(elem, props);
                } else {
                  curElem.css(props);
                }
              },
            };

            jQuery.fn.extend({
              // offset() relates an element's border box to the document origin
              offset: function (options) {
                // Preserve chaining for setter
                if (arguments.length) {
                  return options === undefined
                    ? this
                    : this.each(function (i) {
                        jQuery.offset.setOffset(this, options, i);
                      });
                }

                var rect,
                  win,
                  elem = this[0];

                if (!elem) {
                  return;
                }

                // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
                // Support: IE <=11 only
                // Running getBoundingClientRect on a
                // disconnected node in IE throws an error
                if (!elem.getClientRects().length) {
                  return { top: 0, left: 0 };
                }

                // Get document-relative position by adding viewport scroll to viewport-relative gBCR
                rect = elem.getBoundingClientRect();
                win = elem.ownerDocument.defaultView;
                return {
                  top: rect.top + win.pageYOffset,
                  left: rect.left + win.pageXOffset,
                };
              },

              // position() relates an element's margin box to its offset parent's padding box
              // This corresponds to the behavior of CSS absolute positioning
              position: function () {
                if (!this[0]) {
                  return;
                }

                var offsetParent,
                  offset,
                  doc,
                  elem = this[0],
                  parentOffset = { top: 0, left: 0 };

                // position:fixed elements are offset from the viewport, which itself always has zero offset
                if (jQuery.css(elem, "position") === "fixed") {
                  // Assume position:fixed implies availability of getBoundingClientRect
                  offset = elem.getBoundingClientRect();
                } else {
                  offset = this.offset();

                  // Account for the *real* offset parent, which can be the document or its root element
                  // when a statically positioned element is identified
                  doc = elem.ownerDocument;
                  offsetParent = elem.offsetParent || doc.documentElement;
                  while (
                    offsetParent &&
                    (offsetParent === doc.body ||
                      offsetParent === doc.documentElement) &&
                    jQuery.css(offsetParent, "position") === "static"
                  ) {
                    offsetParent = offsetParent.parentNode;
                  }
                  if (
                    offsetParent &&
                    offsetParent !== elem &&
                    offsetParent.nodeType === 1
                  ) {
                    // Incorporate borders into its offset, since they are outside its content origin
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(
                      offsetParent,
                      "borderTopWidth",
                      true
                    );
                    parentOffset.left += jQuery.css(
                      offsetParent,
                      "borderLeftWidth",
                      true
                    );
                  }
                }

                // Subtract parent offsets and element margins
                return {
                  top:
                    offset.top -
                    parentOffset.top -
                    jQuery.css(elem, "marginTop", true),
                  left:
                    offset.left -
                    parentOffset.left -
                    jQuery.css(elem, "marginLeft", true),
                };
              },

              // This method will return documentElement in the following cases:
              // 1) For the element inside the iframe without offsetParent, this method will return
              //    documentElement of the parent window
              // 2) For the hidden or detached element
              // 3) For body or html element, i.e. in case of the html node - it will return itself
              //
              // but those exceptions were never presented as a real life use-cases
              // and might be considered as more preferable results.
              //
              // This logic, however, is not guaranteed and can change at any point in the future
              offsetParent: function () {
                return this.map(function () {
                  var offsetParent = this.offsetParent;

                  while (
                    offsetParent &&
                    jQuery.css(offsetParent, "position") === "static"
                  ) {
                    offsetParent = offsetParent.offsetParent;
                  }

                  return offsetParent || documentElement;
                });
              },
            });

            // Create scrollLeft and scrollTop methods
            jQuery.each(
              { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" },
              function (method, prop) {
                var top = "pageYOffset" === prop;

                jQuery.fn[method] = function (val) {
                  return access(
                    this,
                    function (elem, method, val) {
                      // Coalesce documents and windows
                      var win;
                      if (isWindow(elem)) {
                        win = elem;
                      } else if (elem.nodeType === 9) {
                        win = elem.defaultView;
                      }

                      if (val === undefined) {
                        return win ? win[prop] : elem[method];
                      }

                      if (win) {
                        win.scrollTo(
                          !top ? val : win.pageXOffset,
                          top ? val : win.pageYOffset
                        );
                      } else {
                        elem[method] = val;
                      }
                    },
                    method,
                    val,
                    arguments.length
                  );
                };
              }
            );

            // Support: Safari <=7 - 9.1, Chrome <=37 - 49
            // Add the top/left cssHooks using jQuery.fn.position
            // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
            // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
            // getComputedStyle returns percent when specified for top/left/bottom/right;
            // rather than make the css module depend on the offset module, just check for it here
            jQuery.each(["top", "left"], function (_i, prop) {
              jQuery.cssHooks[prop] = addGetHookIf(
                support.pixelPosition,
                function (elem, computed) {
                  if (computed) {
                    computed = curCSS(elem, prop);

                    // If curCSS returns percentage, fallback to offset
                    return rnumnonpx.test(computed)
                      ? jQuery(elem).position()[prop] + "px"
                      : computed;
                  }
                }
              );
            });

            // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
            jQuery.each(
              { Height: "height", Width: "width" },
              function (name, type) {
                jQuery.each(
                  {
                    padding: "inner" + name,
                    content: type,
                    "": "outer" + name,
                  },
                  function (defaultExtra, funcName) {
                    // Margin is only for outerHeight, outerWidth
                    jQuery.fn[funcName] = function (margin, value) {
                      var chainable =
                          arguments.length &&
                          (defaultExtra || typeof margin !== "boolean"),
                        extra =
                          defaultExtra ||
                          (margin === true || value === true
                            ? "margin"
                            : "border");

                      return access(
                        this,
                        function (elem, type, value) {
                          var doc;

                          if (isWindow(elem)) {
                            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                            return funcName.indexOf("outer") === 0
                              ? elem["inner" + name]
                              : elem.document.documentElement["client" + name];
                          }

                          // Get document width or height
                          if (elem.nodeType === 9) {
                            doc = elem.documentElement;

                            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                            // whichever is greatest
                            return Math.max(
                              elem.body["scroll" + name],
                              doc["scroll" + name],
                              elem.body["offset" + name],
                              doc["offset" + name],
                              doc["client" + name]
                            );
                          }

                          return value === undefined
                            ? // Get width or height on the element, requesting but not forcing parseFloat
                              jQuery.css(elem, type, extra)
                            : // Set width or height on the element
                              jQuery.style(elem, type, value, extra);
                        },
                        type,
                        chainable ? margin : undefined,
                        chainable
                      );
                    };
                  }
                );
              }
            );

            jQuery.each(
              [
                "ajaxStart",
                "ajaxStop",
                "ajaxComplete",
                "ajaxError",
                "ajaxSuccess",
                "ajaxSend",
              ],
              function (_i, type) {
                jQuery.fn[type] = function (fn) {
                  return this.on(type, fn);
                };
              }
            );

            jQuery.fn.extend({
              bind: function (types, data, fn) {
                return this.on(types, null, data, fn);
              },
              unbind: function (types, fn) {
                return this.off(types, null, fn);
              },

              delegate: function (selector, types, data, fn) {
                return this.on(types, selector, data, fn);
              },
              undelegate: function (selector, types, fn) {
                // ( namespace ) or ( selector, types [, fn] )
                return arguments.length === 1
                  ? this.off(selector, "**")
                  : this.off(types, selector || "**", fn);
              },

              hover: function (fnOver, fnOut) {
                return this.on("mouseenter", fnOver).on(
                  "mouseleave",
                  fnOut || fnOver
                );
              },
            });

            jQuery.each(
              (
                "blur focus focusin focusout resize scroll click dblclick " +
                "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
                "change select submit keydown keypress keyup contextmenu"
              ).split(" "),
              function (_i, name) {
                // Handle event binding
                jQuery.fn[name] = function (data, fn) {
                  return arguments.length > 0
                    ? this.on(name, null, data, fn)
                    : this.trigger(name);
                };
              }
            );

            // Support: Android <=4.0 only
            // Make sure we trim BOM and NBSP
            // Require that the "whitespace run" starts from a non-whitespace
            // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
            var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

            // Bind a function to a context, optionally partially applying any
            // arguments.
            // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
            // However, it is not slated for removal any time soon
            jQuery.proxy = function (fn, context) {
              var tmp, args, proxy;

              if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
              }

              // Quick check to determine if target is callable, in the spec
              // this throws a TypeError, but we will just return undefined.
              if (!isFunction(fn)) {
                return undefined;
              }

              // Simulated bind
              args = slice.call(arguments, 2);
              proxy = function () {
                return fn.apply(
                  context || this,
                  args.concat(slice.call(arguments))
                );
              };

              // Set the guid of unique handler to the same of original handler, so it can be removed
              proxy.guid = fn.guid = fn.guid || jQuery.guid++;

              return proxy;
            };

            jQuery.holdReady = function (hold) {
              if (hold) {
                jQuery.readyWait++;
              } else {
                jQuery.ready(true);
              }
            };
            jQuery.isArray = Array.isArray;
            jQuery.parseJSON = JSON.parse;
            jQuery.nodeName = nodeName;
            jQuery.isFunction = isFunction;
            jQuery.isWindow = isWindow;
            jQuery.camelCase = camelCase;
            jQuery.type = toType;

            jQuery.now = Date.now;

            jQuery.isNumeric = function (obj) {
              // As of jQuery 3.0, isNumeric is limited to
              // strings and numbers (primitives or objects)
              // that can be coerced to finite numbers (gh-2662)
              var type = jQuery.type(obj);
              return (
                (type === "number" || type === "string") &&
                // parseFloat NaNs numeric-cast false positives ("")
                // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
                // subtraction forces infinities to NaN
                !isNaN(obj - parseFloat(obj))
              );
            };

            jQuery.trim = function (text) {
              return text == null ? "" : (text + "").replace(rtrim, "$1");
            };

            // Register as a named AMD module, since jQuery can be concatenated with other
            // files that may use define, but not via a proper concatenation script that
            // understands anonymous AMD modules. A named AMD is safest and most robust
            // way to register. Lowercase jquery is used because AMD module names are
            // derived from file names, and jQuery is normally delivered in a lowercase
            // file name. Do this after creating the global so that if an AMD module wants
            // to call noConflict to hide this version of jQuery, it will work.

            // Note that for maximum portability, libraries that are not jQuery should
            // declare themselves as anonymous modules, and avoid setting a global if an
            // AMD loader is present. jQuery is a special case. For more information, see
            // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

            if (true) {
              !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
              (__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                return jQuery;
              }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            }

            var // Map over jQuery in case of overwrite
              _jQuery = window.jQuery,
              // Map over the $ in case of overwrite
              _$ = window.$;

            jQuery.noConflict = function (deep) {
              if (window.$ === jQuery) {
                window.$ = _$;
              }

              if (deep && window.jQuery === jQuery) {
                window.jQuery = _jQuery;
              }

              return jQuery;
            };

            // Expose jQuery and $ identifiers, even in AMD
            // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
            // and CommonJS for browser emulators (trac-13566)
            if (typeof noGlobal === "undefined") {
              window.jQuery = window.$ = jQuery;
            }

            return jQuery;
          }
        );

        /***/
      },

    /***/ "./node_modules/owl.carousel/dist/owl.carousel.js":
      /*!********************************************************!*\
  !*** ./node_modules/owl.carousel/dist/owl.carousel.js ***!
  \********************************************************/
      /*! no static exports found */
      /***/ function (module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function (
          __webpack_provided_window_dot_jQuery,
          jQuery
        ) {
          /**
           * Owl Carousel v2.3.4
           * Copyright 2013-2018 David Deutsch
           * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE
           */
          /**
           * Owl carousel
           * @version 2.3.4
           * @author Bartosz Wojciechowski
           * @author David Deutsch
           * @license The MIT License (MIT)
           * @todo Lazy Load Icon
           * @todo prevent animationend bubling
           * @todo itemsScaleUp
           * @todo Test Zepto
           * @todo stagePadding calculate wrong active classes
           */
          (function ($, window, document, undefined) {
            /**
             * Creates a carousel.
             * @class The Owl Carousel.
             * @public
             * @param {HTMLElement|jQuery} element - The element to create the carousel for.
             * @param {Object} [options] - The options
             */
            function Owl(element, options) {
              /**
               * Current settings for the carousel.
               * @public
               */
              this.settings = null;

              /**
               * Current options set by the caller including defaults.
               * @public
               */
              this.options = $.extend({}, Owl.Defaults, options);

              /**
               * Plugin element.
               * @public
               */
              this.$element = $(element);

              /**
               * Proxied event handlers.
               * @protected
               */
              this._handlers = {};

              /**
               * References to the running plugins of this carousel.
               * @protected
               */
              this._plugins = {};

              /**
               * Currently suppressed events to prevent them from being retriggered.
               * @protected
               */
              this._supress = {};

              /**
               * Absolute current position.
               * @protected
               */
              this._current = null;

              /**
               * Animation speed in milliseconds.
               * @protected
               */
              this._speed = null;

              /**
               * Coordinates of all items in pixel.
               * @todo The name of this member is missleading.
               * @protected
               */
              this._coordinates = [];

              /**
               * Current breakpoint.
               * @todo Real media queries would be nice.
               * @protected
               */
              this._breakpoint = null;

              /**
               * Current width of the plugin element.
               */
              this._width = null;

              /**
               * All real items.
               * @protected
               */
              this._items = [];

              /**
               * All cloned items.
               * @protected
               */
              this._clones = [];

              /**
               * Merge values of all items.
               * @todo Maybe this could be part of a plugin.
               * @protected
               */
              this._mergers = [];

              /**
               * Widths of all items.
               */
              this._widths = [];

              /**
               * Invalidated parts within the update process.
               * @protected
               */
              this._invalidated = {};

              /**
               * Ordered list of workers for the update process.
               * @protected
               */
              this._pipe = [];

              /**
               * Current state information for the drag operation.
               * @todo #261
               * @protected
               */
              this._drag = {
                time: null,
                target: null,
                pointer: null,
                stage: {
                  start: null,
                  current: null,
                },
                direction: null,
              };

              /**
               * Current state information and their tags.
               * @type {Object}
               * @protected
               */
              this._states = {
                current: {},
                tags: {
                  initializing: ["busy"],
                  animating: ["busy"],
                  dragging: ["interacting"],
                },
              };

              $.each(
                ["onResize", "onThrottledResize"],
                $.proxy(function (i, handler) {
                  this._handlers[handler] = $.proxy(this[handler], this);
                }, this)
              );

              $.each(
                Owl.Plugins,
                $.proxy(function (key, plugin) {
                  this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] =
                    new plugin(this);
                }, this)
              );

              $.each(
                Owl.Workers,
                $.proxy(function (priority, worker) {
                  this._pipe.push({
                    filter: worker.filter,
                    run: $.proxy(worker.run, this),
                  });
                }, this)
              );

              this.setup();
              this.initialize();
            }

            /**
             * Default options for the carousel.
             * @public
             */
            Owl.Defaults = {
              items: 3,
              loop: false,
              center: false,
              rewind: false,
              checkVisibility: true,

              mouseDrag: true,
              touchDrag: true,
              pullDrag: true,
              freeDrag: false,

              margin: 0,
              stagePadding: 0,

              merge: false,
              mergeFit: true,
              autoWidth: false,

              startPosition: 0,
              rtl: false,

              smartSpeed: 250,
              fluidSpeed: false,
              dragEndSpeed: false,

              responsive: {},
              responsiveRefreshRate: 200,
              responsiveBaseElement: window,

              fallbackEasing: "swing",
              slideTransition: "",

              info: false,

              nestedItemSelector: false,
              itemElement: "div",
              stageElement: "div",

              refreshClass: "owl-refresh",
              loadedClass: "owl-loaded",
              loadingClass: "owl-loading",
              rtlClass: "owl-rtl",
              responsiveClass: "owl-responsive",
              dragClass: "owl-drag",
              itemClass: "owl-item",
              stageClass: "owl-stage",
              stageOuterClass: "owl-stage-outer",
              grabClass: "owl-grab",
            };

            /**
             * Enumeration for width.
             * @public
             * @readonly
             * @enum {String}
             */
            Owl.Width = {
              Default: "default",
              Inner: "inner",
              Outer: "outer",
            };

            /**
             * Enumeration for types.
             * @public
             * @readonly
             * @enum {String}
             */
            Owl.Type = {
              Event: "event",
              State: "state",
            };

            /**
             * Contains all registered plugins.
             * @public
             */
            Owl.Plugins = {};

            /**
             * List of workers involved in the update process.
             */
            Owl.Workers = [
              {
                filter: ["width", "settings"],
                run: function () {
                  this._width = this.$element.width();
                },
              },
              {
                filter: ["width", "items", "settings"],
                run: function (cache) {
                  cache.current =
                    this._items && this._items[this.relative(this._current)];
                },
              },
              {
                filter: ["items", "settings"],
                run: function () {
                  this.$stage.children(".cloned").remove();
                },
              },
              {
                filter: ["width", "items", "settings"],
                run: function (cache) {
                  var margin = this.settings.margin || "",
                    grid = !this.settings.autoWidth,
                    rtl = this.settings.rtl,
                    css = {
                      width: "auto",
                      "margin-left": rtl ? margin : "",
                      "margin-right": rtl ? "" : margin,
                    };

                  !grid && this.$stage.children().css(css);

                  cache.css = css;
                },
              },
              {
                filter: ["width", "items", "settings"],
                run: function (cache) {
                  var width =
                      (this.width() / this.settings.items).toFixed(3) -
                      this.settings.margin,
                    merge = null,
                    iterator = this._items.length,
                    grid = !this.settings.autoWidth,
                    widths = [];

                  cache.items = {
                    merge: false,
                    width: width,
                  };

                  while (iterator--) {
                    merge = this._mergers[iterator];
                    merge =
                      (this.settings.mergeFit &&
                        Math.min(merge, this.settings.items)) ||
                      merge;

                    cache.items.merge = merge > 1 || cache.items.merge;

                    widths[iterator] = !grid
                      ? this._items[iterator].width()
                      : width * merge;
                  }

                  this._widths = widths;
                },
              },
              {
                filter: ["items", "settings"],
                run: function () {
                  var clones = [],
                    items = this._items,
                    settings = this.settings,
                    // TODO: Should be computed from number of min width items in stage
                    view = Math.max(settings.items * 2, 4),
                    size = Math.ceil(items.length / 2) * 2,
                    repeat =
                      settings.loop && items.length
                        ? settings.rewind
                          ? view
                          : Math.max(view, size)
                        : 0,
                    append = "",
                    prepend = "";

                  repeat /= 2;

                  while (repeat > 0) {
                    // Switch to only using appended clones
                    clones.push(this.normalize(clones.length / 2, true));
                    append =
                      append + items[clones[clones.length - 1]][0].outerHTML;
                    clones.push(
                      this.normalize(
                        items.length - 1 - (clones.length - 1) / 2,
                        true
                      )
                    );
                    prepend =
                      items[clones[clones.length - 1]][0].outerHTML + prepend;
                    repeat -= 1;
                  }

                  this._clones = clones;

                  $(append).addClass("cloned").appendTo(this.$stage);
                  $(prepend).addClass("cloned").prependTo(this.$stage);
                },
              },
              {
                filter: ["width", "items", "settings"],
                run: function () {
                  var rtl = this.settings.rtl ? 1 : -1,
                    size = this._clones.length + this._items.length,
                    iterator = -1,
                    previous = 0,
                    current = 0,
                    coordinates = [];

                  while (++iterator < size) {
                    previous = coordinates[iterator - 1] || 0;
                    current =
                      this._widths[this.relative(iterator)] +
                      this.settings.margin;
                    coordinates.push(previous + current * rtl);
                  }

                  this._coordinates = coordinates;
                },
              },
              {
                filter: ["width", "items", "settings"],
                run: function () {
                  var padding = this.settings.stagePadding,
                    coordinates = this._coordinates,
                    css = {
                      width:
                        Math.ceil(
                          Math.abs(coordinates[coordinates.length - 1])
                        ) +
                        padding * 2,
                      "padding-left": padding || "",
                      "padding-right": padding || "",
                    };

                  this.$stage.css(css);
                },
              },
              {
                filter: ["width", "items", "settings"],
                run: function (cache) {
                  var iterator = this._coordinates.length,
                    grid = !this.settings.autoWidth,
                    items = this.$stage.children();

                  if (grid && cache.items.merge) {
                    while (iterator--) {
                      cache.css.width = this._widths[this.relative(iterator)];
                      items.eq(iterator).css(cache.css);
                    }
                  } else if (grid) {
                    cache.css.width = cache.items.width;
                    items.css(cache.css);
                  }
                },
              },
              {
                filter: ["items"],
                run: function () {
                  this._coordinates.length < 1 &&
                    this.$stage.removeAttr("style");
                },
              },
              {
                filter: ["width", "items", "settings"],
                run: function (cache) {
                  cache.current = cache.current
                    ? this.$stage.children().index(cache.current)
                    : 0;
                  cache.current = Math.max(
                    this.minimum(),
                    Math.min(this.maximum(), cache.current)
                  );
                  this.reset(cache.current);
                },
              },
              {
                filter: ["position"],
                run: function () {
                  this.animate(this.coordinates(this._current));
                },
              },
              {
                filter: ["width", "position", "items", "settings"],
                run: function () {
                  var rtl = this.settings.rtl ? 1 : -1,
                    padding = this.settings.stagePadding * 2,
                    begin = this.coordinates(this.current()) + padding,
                    end = begin + this.width() * rtl,
                    inner,
                    outer,
                    matches = [],
                    i,
                    n;

                  for (i = 0, n = this._coordinates.length; i < n; i++) {
                    inner = this._coordinates[i - 1] || 0;
                    outer = Math.abs(this._coordinates[i]) + padding * rtl;

                    if (
                      (this.op(inner, "<=", begin) &&
                        this.op(inner, ">", end)) ||
                      (this.op(outer, "<", begin) && this.op(outer, ">", end))
                    ) {
                      matches.push(i);
                    }
                  }

                  this.$stage.children(".active").removeClass("active");
                  this.$stage
                    .children(":eq(" + matches.join("), :eq(") + ")")
                    .addClass("active");

                  this.$stage.children(".center").removeClass("center");
                  if (this.settings.center) {
                    this.$stage
                      .children()
                      .eq(this.current())
                      .addClass("center");
                  }
                },
              },
            ];

            /**
             * Create the stage DOM element
             */
            Owl.prototype.initializeStage = function () {
              this.$stage = this.$element.find("." + this.settings.stageClass);

              // if the stage is already in the DOM, grab it and skip stage initialization
              if (this.$stage.length) {
                return;
              }

              this.$element.addClass(this.options.loadingClass);

              // create stage
              this.$stage = $("<" + this.settings.stageElement + ">", {
                class: this.settings.stageClass,
              }).wrap(
                $("<div/>", {
                  class: this.settings.stageOuterClass,
                })
              );

              // append stage
              this.$element.append(this.$stage.parent());
            };

            /**
             * Create item DOM elements
             */
            Owl.prototype.initializeItems = function () {
              var $items = this.$element.find(".owl-item");

              // if the items are already in the DOM, grab them and skip item initialization
              if ($items.length) {
                this._items = $items.get().map(function (item) {
                  return $(item);
                });

                this._mergers = this._items.map(function () {
                  return 1;
                });

                this.refresh();

                return;
              }

              // append content
              this.replace(this.$element.children().not(this.$stage.parent()));

              // check visibility
              if (this.isVisible()) {
                // update view
                this.refresh();
              } else {
                // invalidate width
                this.invalidate("width");
              }

              this.$element
                .removeClass(this.options.loadingClass)
                .addClass(this.options.loadedClass);
            };

            /**
             * Initializes the carousel.
             * @protected
             */
            Owl.prototype.initialize = function () {
              this.enter("initializing");
              this.trigger("initialize");

              this.$element.toggleClass(
                this.settings.rtlClass,
                this.settings.rtl
              );

              if (this.settings.autoWidth && !this.is("pre-loading")) {
                var imgs, nestedSelector, width;
                imgs = this.$element.find("img");
                nestedSelector = this.settings.nestedItemSelector
                  ? "." + this.settings.nestedItemSelector
                  : undefined;
                width = this.$element.children(nestedSelector).width();

                if (imgs.length && width <= 0) {
                  this.preloadAutoWidthImages(imgs);
                }
              }

              this.initializeStage();
              this.initializeItems();

              // register event handlers
              this.registerEventHandlers();

              this.leave("initializing");
              this.trigger("initialized");
            };

            /**
             * @returns {Boolean} visibility of $element
             *                    if you know the carousel will always be visible you can set `checkVisibility` to `false` to
             *                    prevent the expensive browser layout forced reflow the $element.is(':visible') does
             */
            Owl.prototype.isVisible = function () {
              return this.settings.checkVisibility
                ? this.$element.is(":visible")
                : true;
            };

            /**
             * Setups the current settings.
             * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?
             * @todo Support for media queries by using `matchMedia` would be nice.
             * @public
             */
            Owl.prototype.setup = function () {
              var viewport = this.viewport(),
                overwrites = this.options.responsive,
                match = -1,
                settings = null;

              if (!overwrites) {
                settings = $.extend({}, this.options);
              } else {
                $.each(overwrites, function (breakpoint) {
                  if (breakpoint <= viewport && breakpoint > match) {
                    match = Number(breakpoint);
                  }
                });

                settings = $.extend({}, this.options, overwrites[match]);
                if (typeof settings.stagePadding === "function") {
                  settings.stagePadding = settings.stagePadding();
                }
                delete settings.responsive;

                // responsive class
                if (settings.responsiveClass) {
                  this.$element.attr(
                    "class",
                    this.$element
                      .attr("class")
                      .replace(
                        new RegExp(
                          "(" + this.options.responsiveClass + "-)\\S+\\s",
                          "g"
                        ),
                        "$1" + match
                      )
                  );
                }
              }

              this.trigger("change", {
                property: { name: "settings", value: settings },
              });
              this._breakpoint = match;
              this.settings = settings;
              this.invalidate("settings");
              this.trigger("changed", {
                property: { name: "settings", value: this.settings },
              });
            };

            /**
             * Updates option logic if necessery.
             * @protected
             */
            Owl.prototype.optionsLogic = function () {
              if (this.settings.autoWidth) {
                this.settings.stagePadding = false;
                this.settings.merge = false;
              }
            };

            /**
             * Prepares an item before add.
             * @todo Rename event parameter `content` to `item`.
             * @protected
             * @returns {jQuery|HTMLElement} - The item container.
             */
            Owl.prototype.prepare = function (item) {
              var event = this.trigger("prepare", { content: item });

              if (!event.data) {
                event.data = $("<" + this.settings.itemElement + "/>")
                  .addClass(this.options.itemClass)
                  .append(item);
              }

              this.trigger("prepared", { content: event.data });

              return event.data;
            };

            /**
             * Updates the view.
             * @public
             */
            Owl.prototype.update = function () {
              var i = 0,
                n = this._pipe.length,
                filter = $.proxy(function (p) {
                  return this[p];
                }, this._invalidated),
                cache = {};

              while (i < n) {
                if (
                  this._invalidated.all ||
                  $.grep(this._pipe[i].filter, filter).length > 0
                ) {
                  this._pipe[i].run(cache);
                }
                i++;
              }

              this._invalidated = {};

              !this.is("valid") && this.enter("valid");
            };

            /**
             * Gets the width of the view.
             * @public
             * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.
             * @returns {Number} - The width of the view in pixel.
             */
            Owl.prototype.width = function (dimension) {
              dimension = dimension || Owl.Width.Default;
              switch (dimension) {
                case Owl.Width.Inner:
                case Owl.Width.Outer:
                  return this._width;
                default:
                  return (
                    this._width -
                    this.settings.stagePadding * 2 +
                    this.settings.margin
                  );
              }
            };

            /**
             * Refreshes the carousel primarily for adaptive purposes.
             * @public
             */
            Owl.prototype.refresh = function () {
              this.enter("refreshing");
              this.trigger("refresh");

              this.setup();

              this.optionsLogic();

              this.$element.addClass(this.options.refreshClass);

              this.update();

              this.$element.removeClass(this.options.refreshClass);

              this.leave("refreshing");
              this.trigger("refreshed");
            };

            /**
             * Checks window `resize` event.
             * @protected
             */
            Owl.prototype.onThrottledResize = function () {
              window.clearTimeout(this.resizeTimer);
              this.resizeTimer = window.setTimeout(
                this._handlers.onResize,
                this.settings.responsiveRefreshRate
              );
            };

            /**
             * Checks window `resize` event.
             * @protected
             */
            Owl.prototype.onResize = function () {
              if (!this._items.length) {
                return false;
              }

              if (this._width === this.$element.width()) {
                return false;
              }

              if (!this.isVisible()) {
                return false;
              }

              this.enter("resizing");

              if (this.trigger("resize").isDefaultPrevented()) {
                this.leave("resizing");
                return false;
              }

              this.invalidate("width");

              this.refresh();

              this.leave("resizing");
              this.trigger("resized");
            };

            /**
             * Registers event handlers.
             * @todo Check `msPointerEnabled`
             * @todo #261
             * @protected
             */
            Owl.prototype.registerEventHandlers = function () {
              if ($.support.transition) {
                this.$stage.on(
                  $.support.transition.end + ".owl.core",
                  $.proxy(this.onTransitionEnd, this)
                );
              }

              if (this.settings.responsive !== false) {
                this.on(window, "resize", this._handlers.onThrottledResize);
              }

              if (this.settings.mouseDrag) {
                this.$element.addClass(this.options.dragClass);
                this.$stage.on(
                  "mousedown.owl.core",
                  $.proxy(this.onDragStart, this)
                );
                this.$stage.on(
                  "dragstart.owl.core selectstart.owl.core",
                  function () {
                    return false;
                  }
                );
              }

              if (this.settings.touchDrag) {
                this.$stage.on(
                  "touchstart.owl.core",
                  $.proxy(this.onDragStart, this)
                );
                this.$stage.on(
                  "touchcancel.owl.core",
                  $.proxy(this.onDragEnd, this)
                );
              }
            };

            /**
             * Handles `touchstart` and `mousedown` events.
             * @todo Horizontal swipe threshold as option
             * @todo #261
             * @protected
             * @param {Event} event - The event arguments.
             */
            Owl.prototype.onDragStart = function (event) {
              var stage = null;

              if (event.which === 3) {
                return;
              }

              if ($.support.transform) {
                stage = this.$stage
                  .css("transform")
                  .replace(/.*\(|\)| /g, "")
                  .split(",");
                stage = {
                  x: stage[stage.length === 16 ? 12 : 4],
                  y: stage[stage.length === 16 ? 13 : 5],
                };
              } else {
                stage = this.$stage.position();
                stage = {
                  x: this.settings.rtl
                    ? stage.left +
                      this.$stage.width() -
                      this.width() +
                      this.settings.margin
                    : stage.left,
                  y: stage.top,
                };
              }

              if (this.is("animating")) {
                $.support.transform
                  ? this.animate(stage.x)
                  : this.$stage.stop();
                this.invalidate("position");
              }

              this.$element.toggleClass(
                this.options.grabClass,
                event.type === "mousedown"
              );

              this.speed(0);

              this._drag.time = new Date().getTime();
              this._drag.target = $(event.target);
              this._drag.stage.start = stage;
              this._drag.stage.current = stage;
              this._drag.pointer = this.pointer(event);

              $(document).on(
                "mouseup.owl.core touchend.owl.core",
                $.proxy(this.onDragEnd, this)
              );

              $(document).one(
                "mousemove.owl.core touchmove.owl.core",
                $.proxy(function (event) {
                  var delta = this.difference(
                    this._drag.pointer,
                    this.pointer(event)
                  );

                  $(document).on(
                    "mousemove.owl.core touchmove.owl.core",
                    $.proxy(this.onDragMove, this)
                  );

                  if (
                    Math.abs(delta.x) < Math.abs(delta.y) &&
                    this.is("valid")
                  ) {
                    return;
                  }

                  event.preventDefault();

                  this.enter("dragging");
                  this.trigger("drag");
                }, this)
              );
            };

            /**
             * Handles the `touchmove` and `mousemove` events.
             * @todo #261
             * @protected
             * @param {Event} event - The event arguments.
             */
            Owl.prototype.onDragMove = function (event) {
              var minimum = null,
                maximum = null,
                pull = null,
                delta = this.difference(
                  this._drag.pointer,
                  this.pointer(event)
                ),
                stage = this.difference(this._drag.stage.start, delta);

              if (!this.is("dragging")) {
                return;
              }

              event.preventDefault();

              if (this.settings.loop) {
                minimum = this.coordinates(this.minimum());
                maximum = this.coordinates(this.maximum() + 1) - minimum;
                stage.x =
                  ((((stage.x - minimum) % maximum) + maximum) % maximum) +
                  minimum;
              } else {
                minimum = this.settings.rtl
                  ? this.coordinates(this.maximum())
                  : this.coordinates(this.minimum());
                maximum = this.settings.rtl
                  ? this.coordinates(this.minimum())
                  : this.coordinates(this.maximum());
                pull = this.settings.pullDrag ? (-1 * delta.x) / 5 : 0;
                stage.x = Math.max(
                  Math.min(stage.x, minimum + pull),
                  maximum + pull
                );
              }

              this._drag.stage.current = stage;

              this.animate(stage.x);
            };

            /**
             * Handles the `touchend` and `mouseup` events.
             * @todo #261
             * @todo Threshold for click event
             * @protected
             * @param {Event} event - The event arguments.
             */
            Owl.prototype.onDragEnd = function (event) {
              var delta = this.difference(
                  this._drag.pointer,
                  this.pointer(event)
                ),
                stage = this._drag.stage.current,
                direction =
                  (delta.x > 0) ^ this.settings.rtl ? "left" : "right";

              $(document).off(".owl.core");

              this.$element.removeClass(this.options.grabClass);

              if ((delta.x !== 0 && this.is("dragging")) || !this.is("valid")) {
                this.speed(
                  this.settings.dragEndSpeed || this.settings.smartSpeed
                );
                this.current(
                  this.closest(
                    stage.x,
                    delta.x !== 0 ? direction : this._drag.direction
                  )
                );
                this.invalidate("position");
                this.update();

                this._drag.direction = direction;

                if (
                  Math.abs(delta.x) > 3 ||
                  new Date().getTime() - this._drag.time > 300
                ) {
                  this._drag.target.one("click.owl.core", function () {
                    return false;
                  });
                }
              }

              if (!this.is("dragging")) {
                return;
              }

              this.leave("dragging");
              this.trigger("dragged");
            };

            /**
             * Gets absolute position of the closest item for a coordinate.
             * @todo Setting `freeDrag` makes `closest` not reusable. See #165.
             * @protected
             * @param {Number} coordinate - The coordinate in pixel.
             * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.
             * @return {Number} - The absolute position of the closest item.
             */
            Owl.prototype.closest = function (coordinate, direction) {
              var position = -1,
                pull = 30,
                width = this.width(),
                coordinates = this.coordinates();

              if (!this.settings.freeDrag) {
                // check closest item
                $.each(
                  coordinates,
                  $.proxy(function (index, value) {
                    // on a left pull, check on current index
                    if (
                      direction === "left" &&
                      coordinate > value - pull &&
                      coordinate < value + pull
                    ) {
                      position = index;
                      // on a right pull, check on previous index
                      // to do so, subtract width from value and set position = index + 1
                    } else if (
                      direction === "right" &&
                      coordinate > value - width - pull &&
                      coordinate < value - width + pull
                    ) {
                      position = index + 1;
                    } else if (
                      this.op(coordinate, "<", value) &&
                      this.op(
                        coordinate,
                        ">",
                        coordinates[index + 1] !== undefined
                          ? coordinates[index + 1]
                          : value - width
                      )
                    ) {
                      position = direction === "left" ? index + 1 : index;
                    }
                    return position === -1;
                  }, this)
                );
              }

              if (!this.settings.loop) {
                // non loop boundries
                if (this.op(coordinate, ">", coordinates[this.minimum()])) {
                  position = coordinate = this.minimum();
                } else if (
                  this.op(coordinate, "<", coordinates[this.maximum()])
                ) {
                  position = coordinate = this.maximum();
                }
              }

              return position;
            };

            /**
             * Animates the stage.
             * @todo #270
             * @public
             * @param {Number} coordinate - The coordinate in pixels.
             */
            Owl.prototype.animate = function (coordinate) {
              var animate = this.speed() > 0;

              this.is("animating") && this.onTransitionEnd();

              if (animate) {
                this.enter("animating");
                this.trigger("translate");
              }

              if ($.support.transform3d && $.support.transition) {
                this.$stage.css({
                  transform: "translate3d(" + coordinate + "px,0px,0px)",
                  transition:
                    this.speed() / 1000 +
                    "s" +
                    (this.settings.slideTransition
                      ? " " + this.settings.slideTransition
                      : ""),
                });
              } else if (animate) {
                this.$stage.animate(
                  {
                    left: coordinate + "px",
                  },
                  this.speed(),
                  this.settings.fallbackEasing,
                  $.proxy(this.onTransitionEnd, this)
                );
              } else {
                this.$stage.css({
                  left: coordinate + "px",
                });
              }
            };

            /**
             * Checks whether the carousel is in a specific state or not.
             * @param {String} state - The state to check.
             * @returns {Boolean} - The flag which indicates if the carousel is busy.
             */
            Owl.prototype.is = function (state) {
              return (
                this._states.current[state] && this._states.current[state] > 0
              );
            };

            /**
             * Sets the absolute position of the current item.
             * @public
             * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.
             * @returns {Number} - The absolute position of the current item.
             */
            Owl.prototype.current = function (position) {
              if (position === undefined) {
                return this._current;
              }

              if (this._items.length === 0) {
                return undefined;
              }

              position = this.normalize(position);

              if (this._current !== position) {
                var event = this.trigger("change", {
                  property: { name: "position", value: position },
                });

                if (event.data !== undefined) {
                  position = this.normalize(event.data);
                }

                this._current = position;

                this.invalidate("position");

                this.trigger("changed", {
                  property: { name: "position", value: this._current },
                });
              }

              return this._current;
            };

            /**
             * Invalidates the given part of the update routine.
             * @param {String} [part] - The part to invalidate.
             * @returns {Array.<String>} - The invalidated parts.
             */
            Owl.prototype.invalidate = function (part) {
              if ($.type(part) === "string") {
                this._invalidated[part] = true;
                this.is("valid") && this.leave("valid");
              }
              return $.map(this._invalidated, function (v, i) {
                return i;
              });
            };

            /**
             * Resets the absolute position of the current item.
             * @public
             * @param {Number} position - The absolute position of the new item.
             */
            Owl.prototype.reset = function (position) {
              position = this.normalize(position);

              if (position === undefined) {
                return;
              }

              this._speed = 0;
              this._current = position;

              this.suppress(["translate", "translated"]);

              this.animate(this.coordinates(position));

              this.release(["translate", "translated"]);
            };

            /**
             * Normalizes an absolute or a relative position of an item.
             * @public
             * @param {Number} position - The absolute or relative position to normalize.
             * @param {Boolean} [relative=false] - Whether the given position is relative or not.
             * @returns {Number} - The normalized position.
             */
            Owl.prototype.normalize = function (position, relative) {
              var n = this._items.length,
                m = relative ? 0 : this._clones.length;

              if (!this.isNumeric(position) || n < 1) {
                position = undefined;
              } else if (position < 0 || position >= n + m) {
                position = ((((position - m / 2) % n) + n) % n) + m / 2;
              }

              return position;
            };

            /**
             * Converts an absolute position of an item into a relative one.
             * @public
             * @param {Number} position - The absolute position to convert.
             * @returns {Number} - The converted position.
             */
            Owl.prototype.relative = function (position) {
              position -= this._clones.length / 2;
              return this.normalize(position, true);
            };

            /**
             * Gets the maximum position for the current item.
             * @public
             * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
             * @returns {Number}
             */
            Owl.prototype.maximum = function (relative) {
              var settings = this.settings,
                maximum = this._coordinates.length,
                iterator,
                reciprocalItemsWidth,
                elementWidth;

              if (settings.loop) {
                maximum = this._clones.length / 2 + this._items.length - 1;
              } else if (settings.autoWidth || settings.merge) {
                iterator = this._items.length;
                if (iterator) {
                  reciprocalItemsWidth = this._items[--iterator].width();
                  elementWidth = this.$element.width();
                  while (iterator--) {
                    reciprocalItemsWidth +=
                      this._items[iterator].width() + this.settings.margin;
                    if (reciprocalItemsWidth > elementWidth) {
                      break;
                    }
                  }
                }
                maximum = iterator + 1;
              } else if (settings.center) {
                maximum = this._items.length - 1;
              } else {
                maximum = this._items.length - settings.items;
              }

              if (relative) {
                maximum -= this._clones.length / 2;
              }

              return Math.max(maximum, 0);
            };

            /**
             * Gets the minimum position for the current item.
             * @public
             * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
             * @returns {Number}
             */
            Owl.prototype.minimum = function (relative) {
              return relative ? 0 : this._clones.length / 2;
            };

            /**
             * Gets an item at the specified relative position.
             * @public
             * @param {Number} [position] - The relative position of the item.
             * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
             */
            Owl.prototype.items = function (position) {
              if (position === undefined) {
                return this._items.slice();
              }

              position = this.normalize(position, true);
              return this._items[position];
            };

            /**
             * Gets an item at the specified relative position.
             * @public
             * @param {Number} [position] - The relative position of the item.
             * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
             */
            Owl.prototype.mergers = function (position) {
              if (position === undefined) {
                return this._mergers.slice();
              }

              position = this.normalize(position, true);
              return this._mergers[position];
            };

            /**
             * Gets the absolute positions of clones for an item.
             * @public
             * @param {Number} [position] - The relative position of the item.
             * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.
             */
            Owl.prototype.clones = function (position) {
              var odd = this._clones.length / 2,
                even = odd + this._items.length,
                map = function (index) {
                  return index % 2 === 0
                    ? even + index / 2
                    : odd - (index + 1) / 2;
                };

              if (position === undefined) {
                return $.map(this._clones, function (v, i) {
                  return map(i);
                });
              }

              return $.map(this._clones, function (v, i) {
                return v === position ? map(i) : null;
              });
            };

            /**
             * Sets the current animation speed.
             * @public
             * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.
             * @returns {Number} - The current animation speed in milliseconds.
             */
            Owl.prototype.speed = function (speed) {
              if (speed !== undefined) {
                this._speed = speed;
              }

              return this._speed;
            };

            /**
             * Gets the coordinate of an item.
             * @todo The name of this method is missleanding.
             * @public
             * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.
             * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.
             */
            Owl.prototype.coordinates = function (position) {
              var multiplier = 1,
                newPosition = position - 1,
                coordinate;

              if (position === undefined) {
                return $.map(
                  this._coordinates,
                  $.proxy(function (coordinate, index) {
                    return this.coordinates(index);
                  }, this)
                );
              }

              if (this.settings.center) {
                if (this.settings.rtl) {
                  multiplier = -1;
                  newPosition = position + 1;
                }

                coordinate = this._coordinates[position];
                coordinate +=
                  ((this.width() -
                    coordinate +
                    (this._coordinates[newPosition] || 0)) /
                    2) *
                  multiplier;
              } else {
                coordinate = this._coordinates[newPosition] || 0;
              }

              coordinate = Math.ceil(coordinate);

              return coordinate;
            };

            /**
             * Calculates the speed for a translation.
             * @protected
             * @param {Number} from - The absolute position of the start item.
             * @param {Number} to - The absolute position of the target item.
             * @param {Number} [factor=undefined] - The time factor in milliseconds.
             * @returns {Number} - The time in milliseconds for the translation.
             */
            Owl.prototype.duration = function (from, to, factor) {
              if (factor === 0) {
                return 0;
              }

              return (
                Math.min(Math.max(Math.abs(to - from), 1), 6) *
                Math.abs(factor || this.settings.smartSpeed)
              );
            };

            /**
             * Slides to the specified item.
             * @public
             * @param {Number} position - The position of the item.
             * @param {Number} [speed] - The time in milliseconds for the transition.
             */
            Owl.prototype.to = function (position, speed) {
              var current = this.current(),
                revert = null,
                distance = position - this.relative(current),
                direction = (distance > 0) - (distance < 0),
                items = this._items.length,
                minimum = this.minimum(),
                maximum = this.maximum();

              if (this.settings.loop) {
                if (!this.settings.rewind && Math.abs(distance) > items / 2) {
                  distance += direction * -1 * items;
                }

                position = current + distance;
                revert =
                  ((((position - minimum) % items) + items) % items) + minimum;

                if (
                  revert !== position &&
                  revert - distance <= maximum &&
                  revert - distance > 0
                ) {
                  current = revert - distance;
                  position = revert;
                  this.reset(current);
                }
              } else if (this.settings.rewind) {
                maximum += 1;
                position = ((position % maximum) + maximum) % maximum;
              } else {
                position = Math.max(minimum, Math.min(maximum, position));
              }

              this.speed(this.duration(current, position, speed));
              this.current(position);

              if (this.isVisible()) {
                this.update();
              }
            };

            /**
             * Slides to the next item.
             * @public
             * @param {Number} [speed] - The time in milliseconds for the transition.
             */
            Owl.prototype.next = function (speed) {
              speed = speed || false;
              this.to(this.relative(this.current()) + 1, speed);
            };

            /**
             * Slides to the previous item.
             * @public
             * @param {Number} [speed] - The time in milliseconds for the transition.
             */
            Owl.prototype.prev = function (speed) {
              speed = speed || false;
              this.to(this.relative(this.current()) - 1, speed);
            };

            /**
             * Handles the end of an animation.
             * @protected
             * @param {Event} event - The event arguments.
             */
            Owl.prototype.onTransitionEnd = function (event) {
              // if css2 animation then event object is undefined
              if (event !== undefined) {
                event.stopPropagation();

                // Catch only owl-stage transitionEnd event
                if (
                  (event.target || event.srcElement || event.originalTarget) !==
                  this.$stage.get(0)
                ) {
                  return false;
                }
              }

              this.leave("animating");
              this.trigger("translated");
            };

            /**
             * Gets viewport width.
             * @protected
             * @return {Number} - The width in pixel.
             */
            Owl.prototype.viewport = function () {
              var width;
              if (this.options.responsiveBaseElement !== window) {
                width = $(this.options.responsiveBaseElement).width();
              } else if (window.innerWidth) {
                width = window.innerWidth;
              } else if (
                document.documentElement &&
                document.documentElement.clientWidth
              ) {
                width = document.documentElement.clientWidth;
              } else {
                console.warn("Can not detect viewport width.");
              }
              return width;
            };

            /**
             * Replaces the current content.
             * @public
             * @param {HTMLElement|jQuery|String} content - The new content.
             */
            Owl.prototype.replace = function (content) {
              this.$stage.empty();
              this._items = [];

              if (content) {
                content = content instanceof jQuery ? content : $(content);
              }

              if (this.settings.nestedItemSelector) {
                content = content.find("." + this.settings.nestedItemSelector);
              }

              content
                .filter(function () {
                  return this.nodeType === 1;
                })
                .each(
                  $.proxy(function (index, item) {
                    item = this.prepare(item);
                    this.$stage.append(item);
                    this._items.push(item);
                    this._mergers.push(
                      item
                        .find("[data-merge]")
                        .addBack("[data-merge]")
                        .attr("data-merge") * 1 || 1
                    );
                  }, this)
                );

              this.reset(
                this.isNumeric(this.settings.startPosition)
                  ? this.settings.startPosition
                  : 0
              );

              this.invalidate("items");
            };

            /**
             * Adds an item.
             * @todo Use `item` instead of `content` for the event arguments.
             * @public
             * @param {HTMLElement|jQuery|String} content - The item content to add.
             * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.
             */
            Owl.prototype.add = function (content, position) {
              var current = this.relative(this._current);

              position =
                position === undefined
                  ? this._items.length
                  : this.normalize(position, true);
              content = content instanceof jQuery ? content : $(content);

              this.trigger("add", { content: content, position: position });

              content = this.prepare(content);

              if (this._items.length === 0 || position === this._items.length) {
                this._items.length === 0 && this.$stage.append(content);
                this._items.length !== 0 &&
                  this._items[position - 1].after(content);
                this._items.push(content);
                this._mergers.push(
                  content
                    .find("[data-merge]")
                    .addBack("[data-merge]")
                    .attr("data-merge") * 1 || 1
                );
              } else {
                this._items[position].before(content);
                this._items.splice(position, 0, content);
                this._mergers.splice(
                  position,
                  0,
                  content
                    .find("[data-merge]")
                    .addBack("[data-merge]")
                    .attr("data-merge") * 1 || 1
                );
              }

              this._items[current] && this.reset(this._items[current].index());

              this.invalidate("items");

              this.trigger("added", { content: content, position: position });
            };

            /**
             * Removes an item by its position.
             * @todo Use `item` instead of `content` for the event arguments.
             * @public
             * @param {Number} position - The relative position of the item to remove.
             */
            Owl.prototype.remove = function (position) {
              position = this.normalize(position, true);

              if (position === undefined) {
                return;
              }

              this.trigger("remove", {
                content: this._items[position],
                position: position,
              });

              this._items[position].remove();
              this._items.splice(position, 1);
              this._mergers.splice(position, 1);

              this.invalidate("items");

              this.trigger("removed", { content: null, position: position });
            };

            /**
             * Preloads images with auto width.
             * @todo Replace by a more generic approach
             * @protected
             */
            Owl.prototype.preloadAutoWidthImages = function (images) {
              images.each(
                $.proxy(function (i, element) {
                  this.enter("pre-loading");
                  element = $(element);
                  $(new Image())
                    .one(
                      "load",
                      $.proxy(function (e) {
                        element.attr("src", e.target.src);
                        element.css("opacity", 1);
                        this.leave("pre-loading");
                        !this.is("pre-loading") &&
                          !this.is("initializing") &&
                          this.refresh();
                      }, this)
                    )
                    .attr(
                      "src",
                      element.attr("src") ||
                        element.attr("data-src") ||
                        element.attr("data-src-retina")
                    );
                }, this)
              );
            };

            /**
             * Destroys the carousel.
             * @public
             */
            Owl.prototype.destroy = function () {
              this.$element.off(".owl.core");
              this.$stage.off(".owl.core");
              $(document).off(".owl.core");

              if (this.settings.responsive !== false) {
                window.clearTimeout(this.resizeTimer);
                this.off(window, "resize", this._handlers.onThrottledResize);
              }

              for (var i in this._plugins) {
                this._plugins[i].destroy();
              }

              this.$stage.children(".cloned").remove();

              this.$stage.unwrap();
              this.$stage.children().contents().unwrap();
              this.$stage.children().unwrap();
              this.$stage.remove();
              this.$element
                .removeClass(this.options.refreshClass)
                .removeClass(this.options.loadingClass)
                .removeClass(this.options.loadedClass)
                .removeClass(this.options.rtlClass)
                .removeClass(this.options.dragClass)
                .removeClass(this.options.grabClass)
                .attr(
                  "class",
                  this.$element
                    .attr("class")
                    .replace(
                      new RegExp(
                        this.options.responsiveClass + "-\\S+\\s",
                        "g"
                      ),
                      ""
                    )
                )
                .removeData("owl.carousel");
            };

            /**
             * Operators to calculate right-to-left and left-to-right.
             * @protected
             * @param {Number} [a] - The left side operand.
             * @param {String} [o] - The operator.
             * @param {Number} [b] - The right side operand.
             */
            Owl.prototype.op = function (a, o, b) {
              var rtl = this.settings.rtl;
              switch (o) {
                case "<":
                  return rtl ? a > b : a < b;
                case ">":
                  return rtl ? a < b : a > b;
                case ">=":
                  return rtl ? a <= b : a >= b;
                case "<=":
                  return rtl ? a >= b : a <= b;
                default:
                  break;
              }
            };

            /**
             * Attaches to an internal event.
             * @protected
             * @param {HTMLElement} element - The event source.
             * @param {String} event - The event name.
             * @param {Function} listener - The event handler to attach.
             * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.
             */
            Owl.prototype.on = function (element, event, listener, capture) {
              if (element.addEventListener) {
                element.addEventListener(event, listener, capture);
              } else if (element.attachEvent) {
                element.attachEvent("on" + event, listener);
              }
            };

            /**
             * Detaches from an internal event.
             * @protected
             * @param {HTMLElement} element - The event source.
             * @param {String} event - The event name.
             * @param {Function} listener - The attached event handler to detach.
             * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.
             */
            Owl.prototype.off = function (element, event, listener, capture) {
              if (element.removeEventListener) {
                element.removeEventListener(event, listener, capture);
              } else if (element.detachEvent) {
                element.detachEvent("on" + event, listener);
              }
            };

            /**
             * Triggers a public event.
             * @todo Remove `status`, `relatedTarget` should be used instead.
             * @protected
             * @param {String} name - The event name.
             * @param {*} [data=null] - The event data.
             * @param {String} [namespace=carousel] - The event namespace.
             * @param {String} [state] - The state which is associated with the event.
             * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.
             * @returns {Event} - The event arguments.
             */
            Owl.prototype.trigger = function (
              name,
              data,
              namespace,
              state,
              enter
            ) {
              var status = {
                  item: { count: this._items.length, index: this.current() },
                },
                handler = $.camelCase(
                  $.grep(["on", name, namespace], function (v) {
                    return v;
                  })
                    .join("-")
                    .toLowerCase()
                ),
                event = $.Event(
                  [name, "owl", namespace || "carousel"]
                    .join(".")
                    .toLowerCase(),
                  $.extend({ relatedTarget: this }, status, data)
                );

              if (!this._supress[name]) {
                $.each(this._plugins, function (name, plugin) {
                  if (plugin.onTrigger) {
                    plugin.onTrigger(event);
                  }
                });

                this.register({ type: Owl.Type.Event, name: name });
                this.$element.trigger(event);

                if (
                  this.settings &&
                  typeof this.settings[handler] === "function"
                ) {
                  this.settings[handler].call(this, event);
                }
              }

              return event;
            };

            /**
             * Enters a state.
             * @param name - The state name.
             */
            Owl.prototype.enter = function (name) {
              $.each(
                [name].concat(this._states.tags[name] || []),
                $.proxy(function (i, name) {
                  if (this._states.current[name] === undefined) {
                    this._states.current[name] = 0;
                  }

                  this._states.current[name]++;
                }, this)
              );
            };

            /**
             * Leaves a state.
             * @param name - The state name.
             */
            Owl.prototype.leave = function (name) {
              $.each(
                [name].concat(this._states.tags[name] || []),
                $.proxy(function (i, name) {
                  this._states.current[name]--;
                }, this)
              );
            };

            /**
             * Registers an event or state.
             * @public
             * @param {Object} object - The event or state to register.
             */
            Owl.prototype.register = function (object) {
              if (object.type === Owl.Type.Event) {
                if (!$.event.special[object.name]) {
                  $.event.special[object.name] = {};
                }

                if (!$.event.special[object.name].owl) {
                  var _default = $.event.special[object.name]._default;
                  $.event.special[object.name]._default = function (e) {
                    if (
                      _default &&
                      _default.apply &&
                      (!e.namespace || e.namespace.indexOf("owl") === -1)
                    ) {
                      return _default.apply(this, arguments);
                    }
                    return e.namespace && e.namespace.indexOf("owl") > -1;
                  };
                  $.event.special[object.name].owl = true;
                }
              } else if (object.type === Owl.Type.State) {
                if (!this._states.tags[object.name]) {
                  this._states.tags[object.name] = object.tags;
                } else {
                  this._states.tags[object.name] = this._states.tags[
                    object.name
                  ].concat(object.tags);
                }

                this._states.tags[object.name] = $.grep(
                  this._states.tags[object.name],
                  $.proxy(function (tag, i) {
                    return $.inArray(tag, this._states.tags[object.name]) === i;
                  }, this)
                );
              }
            };

            /**
             * Suppresses events.
             * @protected
             * @param {Array.<String>} events - The events to suppress.
             */
            Owl.prototype.suppress = function (events) {
              $.each(
                events,
                $.proxy(function (index, event) {
                  this._supress[event] = true;
                }, this)
              );
            };

            /**
             * Releases suppressed events.
             * @protected
             * @param {Array.<String>} events - The events to release.
             */
            Owl.prototype.release = function (events) {
              $.each(
                events,
                $.proxy(function (index, event) {
                  delete this._supress[event];
                }, this)
              );
            };

            /**
             * Gets unified pointer coordinates from event.
             * @todo #261
             * @protected
             * @param {Event} - The `mousedown` or `touchstart` event.
             * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.
             */
            Owl.prototype.pointer = function (event) {
              var result = { x: null, y: null };

              event = event.originalEvent || event || window.event;

              event =
                event.touches && event.touches.length
                  ? event.touches[0]
                  : event.changedTouches && event.changedTouches.length
                  ? event.changedTouches[0]
                  : event;

              if (event.pageX) {
                result.x = event.pageX;
                result.y = event.pageY;
              } else {
                result.x = event.clientX;
                result.y = event.clientY;
              }

              return result;
            };

            /**
             * Determines if the input is a Number or something that can be coerced to a Number
             * @protected
             * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested
             * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number
             */
            Owl.prototype.isNumeric = function (number) {
              return !isNaN(parseFloat(number));
            };

            /**
             * Gets the difference of two vectors.
             * @todo #261
             * @protected
             * @param {Object} - The first vector.
             * @param {Object} - The second vector.
             * @returns {Object} - The difference.
             */
            Owl.prototype.difference = function (first, second) {
              return {
                x: first.x - second.x,
                y: first.y - second.y,
              };
            };

            /**
             * The jQuery Plugin for the Owl Carousel
             * @todo Navigation plugin `next` and `prev`
             * @public
             */
            $.fn.owlCarousel = function (option) {
              var args = Array.prototype.slice.call(arguments, 1);

              return this.each(function () {
                var $this = $(this),
                  data = $this.data("owl.carousel");

                if (!data) {
                  data = new Owl(this, typeof option == "object" && option);
                  $this.data("owl.carousel", data);

                  $.each(
                    [
                      "next",
                      "prev",
                      "to",
                      "destroy",
                      "refresh",
                      "replace",
                      "add",
                      "remove",
                    ],
                    function (i, event) {
                      data.register({ type: Owl.Type.Event, name: event });
                      data.$element.on(
                        event + ".owl.carousel.core",
                        $.proxy(function (e) {
                          if (e.namespace && e.relatedTarget !== this) {
                            this.suppress([event]);
                            data[event].apply(
                              this,
                              [].slice.call(arguments, 1)
                            );
                            this.release([event]);
                          }
                        }, data)
                      );
                    }
                  );
                }

                if (typeof option == "string" && option.charAt(0) !== "_") {
                  data[option].apply(data, args);
                }
              });
            };

            /**
             * The constructor for the jQuery Plugin
             * @public
             */
            $.fn.owlCarousel.Constructor = Owl;
          })(
            window.Zepto || __webpack_provided_window_dot_jQuery,
            window,
            document
          );

          /**
           * AutoRefresh Plugin
           * @version 2.3.4
           * @author Artus Kolanowski
           * @author David Deutsch
           * @license The MIT License (MIT)
           */
          (function ($, window, document, undefined) {
            /**
             * Creates the auto refresh plugin.
             * @class The Auto Refresh Plugin
             * @param {Owl} carousel - The Owl Carousel
             */
            var AutoRefresh = function (carousel) {
              /**
               * Reference to the core.
               * @protected
               * @type {Owl}
               */
              this._core = carousel;

              /**
               * Refresh interval.
               * @protected
               * @type {number}
               */
              this._interval = null;

              /**
               * Whether the element is currently visible or not.
               * @protected
               * @type {Boolean}
               */
              this._visible = null;

              /**
               * All event handlers.
               * @protected
               * @type {Object}
               */
              this._handlers = {
                "initialized.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && this._core.settings.autoRefresh) {
                    this.watch();
                  }
                }, this),
              };

              // set default options
              this._core.options = $.extend(
                {},
                AutoRefresh.Defaults,
                this._core.options
              );

              // register event handlers
              this._core.$element.on(this._handlers);
            };

            /**
             * Default options.
             * @public
             */
            AutoRefresh.Defaults = {
              autoRefresh: true,
              autoRefreshInterval: 500,
            };

            /**
             * Watches the element.
             */
            AutoRefresh.prototype.watch = function () {
              if (this._interval) {
                return;
              }

              this._visible = this._core.isVisible();
              this._interval = window.setInterval(
                $.proxy(this.refresh, this),
                this._core.settings.autoRefreshInterval
              );
            };

            /**
             * Refreshes the element.
             */
            AutoRefresh.prototype.refresh = function () {
              if (this._core.isVisible() === this._visible) {
                return;
              }

              this._visible = !this._visible;

              this._core.$element.toggleClass("owl-hidden", !this._visible);

              this._visible &&
                this._core.invalidate("width") &&
                this._core.refresh();
            };

            /**
             * Destroys the plugin.
             */
            AutoRefresh.prototype.destroy = function () {
              var handler, property;

              window.clearInterval(this._interval);

              for (handler in this._handlers) {
                this._core.$element.off(handler, this._handlers[handler]);
              }
              for (property in Object.getOwnPropertyNames(this)) {
                typeof this[property] != "function" && (this[property] = null);
              }
            };

            $.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;
          })(
            window.Zepto || __webpack_provided_window_dot_jQuery,
            window,
            document
          );

          /**
           * Lazy Plugin
           * @version 2.3.4
           * @author Bartosz Wojciechowski
           * @author David Deutsch
           * @license The MIT License (MIT)
           */
          (function ($, window, document, undefined) {
            /**
             * Creates the lazy plugin.
             * @class The Lazy Plugin
             * @param {Owl} carousel - The Owl Carousel
             */
            var Lazy = function (carousel) {
              /**
               * Reference to the core.
               * @protected
               * @type {Owl}
               */
              this._core = carousel;

              /**
               * Already loaded items.
               * @protected
               * @type {Array.<jQuery>}
               */
              this._loaded = [];

              /**
               * Event handlers.
               * @protected
               * @type {Object}
               */
              this._handlers = {
                "initialized.owl.carousel change.owl.carousel resized.owl.carousel":
                  $.proxy(function (e) {
                    if (!e.namespace) {
                      return;
                    }

                    if (!this._core.settings || !this._core.settings.lazyLoad) {
                      return;
                    }

                    if (
                      (e.property && e.property.name == "position") ||
                      e.type == "initialized"
                    ) {
                      var settings = this._core.settings,
                        n =
                          (settings.center && Math.ceil(settings.items / 2)) ||
                          settings.items,
                        i = (settings.center && n * -1) || 0,
                        position =
                          (e.property && e.property.value !== undefined
                            ? e.property.value
                            : this._core.current()) + i,
                        clones = this._core.clones().length,
                        load = $.proxy(function (i, v) {
                          this.load(v);
                        }, this);
                      //TODO: Need documentation for this new option
                      if (settings.lazyLoadEager > 0) {
                        n += settings.lazyLoadEager;
                        // If the carousel is looping also preload images that are to the "left"
                        if (settings.loop) {
                          position -= settings.lazyLoadEager;
                          n++;
                        }
                      }

                      while (i++ < n) {
                        this.load(clones / 2 + this._core.relative(position));
                        clones &&
                          $.each(
                            this._core.clones(this._core.relative(position)),
                            load
                          );
                        position++;
                      }
                    }
                  }, this),
              };

              // set the default options
              this._core.options = $.extend(
                {},
                Lazy.Defaults,
                this._core.options
              );

              // register event handler
              this._core.$element.on(this._handlers);
            };

            /**
             * Default options.
             * @public
             */
            Lazy.Defaults = {
              lazyLoad: false,
              lazyLoadEager: 0,
            };

            /**
             * Loads all resources of an item at the specified position.
             * @param {Number} position - The absolute position of the item.
             * @protected
             */
            Lazy.prototype.load = function (position) {
              var $item = this._core.$stage.children().eq(position),
                $elements = $item && $item.find(".owl-lazy");

              if (!$elements || $.inArray($item.get(0), this._loaded) > -1) {
                return;
              }

              $elements.each(
                $.proxy(function (index, element) {
                  var $element = $(element),
                    image,
                    url =
                      (window.devicePixelRatio > 1 &&
                        $element.attr("data-src-retina")) ||
                      $element.attr("data-src") ||
                      $element.attr("data-srcset");

                  this._core.trigger(
                    "load",
                    { element: $element, url: url },
                    "lazy"
                  );

                  if ($element.is("img")) {
                    $element
                      .one(
                        "load.owl.lazy",
                        $.proxy(function () {
                          $element.css("opacity", 1);
                          this._core.trigger(
                            "loaded",
                            { element: $element, url: url },
                            "lazy"
                          );
                        }, this)
                      )
                      .attr("src", url);
                  } else if ($element.is("source")) {
                    $element
                      .one(
                        "load.owl.lazy",
                        $.proxy(function () {
                          this._core.trigger(
                            "loaded",
                            { element: $element, url: url },
                            "lazy"
                          );
                        }, this)
                      )
                      .attr("srcset", url);
                  } else {
                    image = new Image();
                    image.onload = $.proxy(function () {
                      $element.css({
                        "background-image": 'url("' + url + '")',
                        opacity: "1",
                      });
                      this._core.trigger(
                        "loaded",
                        { element: $element, url: url },
                        "lazy"
                      );
                    }, this);
                    image.src = url;
                  }
                }, this)
              );

              this._loaded.push($item.get(0));
            };

            /**
             * Destroys the plugin.
             * @public
             */
            Lazy.prototype.destroy = function () {
              var handler, property;

              for (handler in this.handlers) {
                this._core.$element.off(handler, this.handlers[handler]);
              }
              for (property in Object.getOwnPropertyNames(this)) {
                typeof this[property] != "function" && (this[property] = null);
              }
            };

            $.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;
          })(
            window.Zepto || __webpack_provided_window_dot_jQuery,
            window,
            document
          );

          /**
           * AutoHeight Plugin
           * @version 2.3.4
           * @author Bartosz Wojciechowski
           * @author David Deutsch
           * @license The MIT License (MIT)
           */
          (function ($, window, document, undefined) {
            /**
             * Creates the auto height plugin.
             * @class The Auto Height Plugin
             * @param {Owl} carousel - The Owl Carousel
             */
            var AutoHeight = function (carousel) {
              /**
               * Reference to the core.
               * @protected
               * @type {Owl}
               */
              this._core = carousel;

              this._previousHeight = null;

              /**
               * All event handlers.
               * @protected
               * @type {Object}
               */
              this._handlers = {
                "initialized.owl.carousel refreshed.owl.carousel": $.proxy(
                  function (e) {
                    if (e.namespace && this._core.settings.autoHeight) {
                      this.update();
                    }
                  },
                  this
                ),
                "changed.owl.carousel": $.proxy(function (e) {
                  if (
                    e.namespace &&
                    this._core.settings.autoHeight &&
                    e.property.name === "position"
                  ) {
                    this.update();
                  }
                }, this),
                "loaded.owl.lazy": $.proxy(function (e) {
                  if (
                    e.namespace &&
                    this._core.settings.autoHeight &&
                    e.element
                      .closest("." + this._core.settings.itemClass)
                      .index() === this._core.current()
                  ) {
                    this.update();
                  }
                }, this),
              };

              // set default options
              this._core.options = $.extend(
                {},
                AutoHeight.Defaults,
                this._core.options
              );

              // register event handlers
              this._core.$element.on(this._handlers);
              this._intervalId = null;
              var refThis = this;

              // These changes have been taken from a PR by gavrochelegnou proposed in #1575
              // and have been made compatible with the latest jQuery version
              $(window).on("load", function () {
                if (refThis._core.settings.autoHeight) {
                  refThis.update();
                }
              });

              // Autoresize the height of the carousel when window is resized
              // When carousel has images, the height is dependent on the width
              // and should also change on resize
              $(window).resize(function () {
                if (refThis._core.settings.autoHeight) {
                  if (refThis._intervalId != null) {
                    clearTimeout(refThis._intervalId);
                  }

                  refThis._intervalId = setTimeout(function () {
                    refThis.update();
                  }, 250);
                }
              });
            };

            /**
             * Default options.
             * @public
             */
            AutoHeight.Defaults = {
              autoHeight: false,
              autoHeightClass: "owl-height",
            };

            /**
             * Updates the view.
             */
            AutoHeight.prototype.update = function () {
              var start = this._core._current,
                end = start + this._core.settings.items,
                lazyLoadEnabled = this._core.settings.lazyLoad,
                visible = this._core.$stage
                  .children()
                  .toArray()
                  .slice(start, end),
                heights = [],
                maxheight = 0;

              $.each(visible, function (index, item) {
                heights.push($(item).height());
              });

              maxheight = Math.max.apply(null, heights);

              if (maxheight <= 1 && lazyLoadEnabled && this._previousHeight) {
                maxheight = this._previousHeight;
              }

              this._previousHeight = maxheight;

              this._core.$stage
                .parent()
                .height(maxheight)
                .addClass(this._core.settings.autoHeightClass);
            };

            AutoHeight.prototype.destroy = function () {
              var handler, property;

              for (handler in this._handlers) {
                this._core.$element.off(handler, this._handlers[handler]);
              }
              for (property in Object.getOwnPropertyNames(this)) {
                typeof this[property] !== "function" && (this[property] = null);
              }
            };

            $.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;
          })(
            window.Zepto || __webpack_provided_window_dot_jQuery,
            window,
            document
          );

          /**
           * Video Plugin
           * @version 2.3.4
           * @author Bartosz Wojciechowski
           * @author David Deutsch
           * @license The MIT License (MIT)
           */
          (function ($, window, document, undefined) {
            /**
             * Creates the video plugin.
             * @class The Video Plugin
             * @param {Owl} carousel - The Owl Carousel
             */
            var Video = function (carousel) {
              /**
               * Reference to the core.
               * @protected
               * @type {Owl}
               */
              this._core = carousel;

              /**
               * Cache all video URLs.
               * @protected
               * @type {Object}
               */
              this._videos = {};

              /**
               * Current playing item.
               * @protected
               * @type {jQuery}
               */
              this._playing = null;

              /**
               * All event handlers.
               * @todo The cloned content removale is too late
               * @protected
               * @type {Object}
               */
              this._handlers = {
                "initialized.owl.carousel": $.proxy(function (e) {
                  if (e.namespace) {
                    this._core.register({
                      type: "state",
                      name: "playing",
                      tags: ["interacting"],
                    });
                  }
                }, this),
                "resize.owl.carousel": $.proxy(function (e) {
                  if (
                    e.namespace &&
                    this._core.settings.video &&
                    this.isInFullScreen()
                  ) {
                    e.preventDefault();
                  }
                }, this),
                "refreshed.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && this._core.is("resizing")) {
                    this._core.$stage.find(".cloned .owl-video-frame").remove();
                  }
                }, this),
                "changed.owl.carousel": $.proxy(function (e) {
                  if (
                    e.namespace &&
                    e.property.name === "position" &&
                    this._playing
                  ) {
                    this.stop();
                  }
                }, this),
                "prepared.owl.carousel": $.proxy(function (e) {
                  if (!e.namespace) {
                    return;
                  }

                  var $element = $(e.content).find(".owl-video");

                  if ($element.length) {
                    $element.css("display", "none");
                    this.fetch($element, $(e.content));
                  }
                }, this),
              };

              // set default options
              this._core.options = $.extend(
                {},
                Video.Defaults,
                this._core.options
              );

              // register event handlers
              this._core.$element.on(this._handlers);

              this._core.$element.on(
                "click.owl.video",
                ".owl-video-play-icon",
                $.proxy(function (e) {
                  this.play(e);
                }, this)
              );
            };

            /**
             * Default options.
             * @public
             */
            Video.Defaults = {
              video: false,
              videoHeight: false,
              videoWidth: false,
            };

            /**
             * Gets the video ID and the type (YouTube/Vimeo/vzaar only).
             * @protected
             * @param {jQuery} target - The target containing the video data.
             * @param {jQuery} item - The item containing the video.
             */
            Video.prototype.fetch = function (target, item) {
              var type = (function () {
                  if (target.attr("data-vimeo-id")) {
                    return "vimeo";
                  } else if (target.attr("data-vzaar-id")) {
                    return "vzaar";
                  } else {
                    return "youtube";
                  }
                })(),
                id =
                  target.attr("data-vimeo-id") ||
                  target.attr("data-youtube-id") ||
                  target.attr("data-vzaar-id"),
                width =
                  target.attr("data-width") || this._core.settings.videoWidth,
                height =
                  target.attr("data-height") || this._core.settings.videoHeight,
                url = target.attr("href");

              if (url) {
                /*
					Parses the id's out of the following urls (and probably more):
					https://www.youtube.com/watch?v=:id
					https://youtu.be/:id
					https://vimeo.com/:id
					https://vimeo.com/channels/:channel/:id
					https://vimeo.com/groups/:group/videos/:id
					https://app.vzaar.com/videos/:id

					Visual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F
			*/

                id = url.match(
                  /(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/
                );

                if (id[3].indexOf("youtu") > -1) {
                  type = "youtube";
                } else if (id[3].indexOf("vimeo") > -1) {
                  type = "vimeo";
                } else if (id[3].indexOf("vzaar") > -1) {
                  type = "vzaar";
                } else {
                  throw new Error("Video URL not supported.");
                }
                id = id[6];
              } else {
                throw new Error("Missing video URL.");
              }

              this._videos[url] = {
                type: type,
                id: id,
                width: width,
                height: height,
              };

              item.attr("data-video", url);

              this.thumbnail(target, this._videos[url]);
            };

            /**
             * Creates video thumbnail.
             * @protected
             * @param {jQuery} target - The target containing the video data.
             * @param {Object} info - The video info object.
             * @see `fetch`
             */
            Video.prototype.thumbnail = function (target, video) {
              var tnLink,
                icon,
                path,
                dimensions =
                  video.width && video.height
                    ? "width:" +
                      video.width +
                      "px;height:" +
                      video.height +
                      "px;"
                    : "",
                customTn = target.find("img"),
                srcType = "src",
                lazyClass = "",
                settings = this._core.settings,
                create = function (path) {
                  icon = '<div class="owl-video-play-icon"></div>';

                  if (settings.lazyLoad) {
                    tnLink = $("<div/>", {
                      class: "owl-video-tn " + lazyClass,
                      srcType: path,
                    });
                  } else {
                    tnLink = $("<div/>", {
                      class: "owl-video-tn",
                      style: "opacity:1;background-image:url(" + path + ")",
                    });
                  }
                  target.after(tnLink);
                  target.after(icon);
                };

              // wrap video content into owl-video-wrapper div
              target.wrap(
                $("<div/>", {
                  class: "owl-video-wrapper",
                  style: dimensions,
                })
              );

              if (this._core.settings.lazyLoad) {
                srcType = "data-src";
                lazyClass = "owl-lazy";
              }

              // custom thumbnail
              if (customTn.length) {
                create(customTn.attr(srcType));
                customTn.remove();
                return false;
              }

              if (video.type === "youtube") {
                path = "//img.youtube.com/vi/" + video.id + "/hqdefault.jpg";
                create(path);
              } else if (video.type === "vimeo") {
                $.ajax({
                  type: "GET",
                  url: "//vimeo.com/api/v2/video/" + video.id + ".json",
                  jsonp: "callback",
                  dataType: "jsonp",
                  success: function (data) {
                    path = data[0].thumbnail_large;
                    create(path);
                  },
                });
              } else if (video.type === "vzaar") {
                $.ajax({
                  type: "GET",
                  url: "//vzaar.com/api/videos/" + video.id + ".json",
                  jsonp: "callback",
                  dataType: "jsonp",
                  success: function (data) {
                    path = data.framegrab_url;
                    create(path);
                  },
                });
              }
            };

            /**
             * Stops the current video.
             * @public
             */
            Video.prototype.stop = function () {
              this._core.trigger("stop", null, "video");
              this._playing.find(".owl-video-frame").remove();
              this._playing.removeClass("owl-video-playing");
              this._playing = null;
              this._core.leave("playing");
              this._core.trigger("stopped", null, "video");
            };

            /**
             * Starts the current video.
             * @public
             * @param {Event} event - The event arguments.
             */
            Video.prototype.play = function (event) {
              var target = $(event.target),
                item = target.closest("." + this._core.settings.itemClass),
                video = this._videos[item.attr("data-video")],
                width = video.width || "100%",
                height = video.height || this._core.$stage.height(),
                html,
                iframe;

              if (this._playing) {
                return;
              }

              this._core.enter("playing");
              this._core.trigger("play", null, "video");

              item = this._core.items(this._core.relative(item.index()));

              this._core.reset(item.index());

              html = $(
                '<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'
              );
              html.attr("height", height);
              html.attr("width", width);
              if (video.type === "youtube") {
                html.attr(
                  "src",
                  "//www.youtube.com/embed/" +
                    video.id +
                    "?autoplay=1&rel=0&v=" +
                    video.id
                );
              } else if (video.type === "vimeo") {
                html.attr(
                  "src",
                  "//player.vimeo.com/video/" + video.id + "?autoplay=1"
                );
              } else if (video.type === "vzaar") {
                html.attr(
                  "src",
                  "//view.vzaar.com/" + video.id + "/player?autoplay=true"
                );
              }

              iframe = $(html)
                .wrap('<div class="owl-video-frame" />')
                .insertAfter(item.find(".owl-video"));

              this._playing = item.addClass("owl-video-playing");
            };

            /**
             * Checks whether an video is currently in full screen mode or not.
             * @todo Bad style because looks like a readonly method but changes members.
             * @protected
             * @returns {Boolean}
             */
            Video.prototype.isInFullScreen = function () {
              var element =
                document.fullscreenElement ||
                document.mozFullScreenElement ||
                document.webkitFullscreenElement;

              return element && $(element).parent().hasClass("owl-video-frame");
            };

            /**
             * Destroys the plugin.
             */
            Video.prototype.destroy = function () {
              var handler, property;

              this._core.$element.off("click.owl.video");

              for (handler in this._handlers) {
                this._core.$element.off(handler, this._handlers[handler]);
              }
              for (property in Object.getOwnPropertyNames(this)) {
                typeof this[property] != "function" && (this[property] = null);
              }
            };

            $.fn.owlCarousel.Constructor.Plugins.Video = Video;
          })(
            window.Zepto || __webpack_provided_window_dot_jQuery,
            window,
            document
          );

          /**
           * Animate Plugin
           * @version 2.3.4
           * @author Bartosz Wojciechowski
           * @author David Deutsch
           * @license The MIT License (MIT)
           */
          (function ($, window, document, undefined) {
            /**
             * Creates the animate plugin.
             * @class The Navigation Plugin
             * @param {Owl} scope - The Owl Carousel
             */
            var Animate = function (scope) {
              this.core = scope;
              this.core.options = $.extend(
                {},
                Animate.Defaults,
                this.core.options
              );
              this.swapping = true;
              this.previous = undefined;
              this.next = undefined;

              this.handlers = {
                "change.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && e.property.name == "position") {
                    this.previous = this.core.current();
                    this.next = e.property.value;
                  }
                }, this),
                "drag.owl.carousel dragged.owl.carousel translated.owl.carousel":
                  $.proxy(function (e) {
                    if (e.namespace) {
                      this.swapping = e.type == "translated";
                    }
                  }, this),
                "translate.owl.carousel": $.proxy(function (e) {
                  if (
                    e.namespace &&
                    this.swapping &&
                    (this.core.options.animateOut ||
                      this.core.options.animateIn)
                  ) {
                    this.swap();
                  }
                }, this),
              };

              this.core.$element.on(this.handlers);
            };

            /**
             * Default options.
             * @public
             */
            Animate.Defaults = {
              animateOut: false,
              animateIn: false,
            };

            /**
             * Toggles the animation classes whenever an translations starts.
             * @protected
             * @returns {Boolean|undefined}
             */
            Animate.prototype.swap = function () {
              if (this.core.settings.items !== 1) {
                return;
              }

              if (!$.support.animation || !$.support.transition) {
                return;
              }

              this.core.speed(0);

              var left,
                clear = $.proxy(this.clear, this),
                previous = this.core.$stage.children().eq(this.previous),
                next = this.core.$stage.children().eq(this.next),
                incoming = this.core.settings.animateIn,
                outgoing = this.core.settings.animateOut;

              if (this.core.current() === this.previous) {
                return;
              }

              if (outgoing) {
                left =
                  this.core.coordinates(this.previous) -
                  this.core.coordinates(this.next);
                previous
                  .one($.support.animation.end, clear)
                  .css({ left: left + "px" })
                  .addClass("animated owl-animated-out")
                  .addClass(outgoing);
              }

              if (incoming) {
                next
                  .one($.support.animation.end, clear)
                  .addClass("animated owl-animated-in")
                  .addClass(incoming);
              }
            };

            Animate.prototype.clear = function (e) {
              $(e.target)
                .css({ left: "" })
                .removeClass("animated owl-animated-out owl-animated-in")
                .removeClass(this.core.settings.animateIn)
                .removeClass(this.core.settings.animateOut);
              this.core.onTransitionEnd();
            };

            /**
             * Destroys the plugin.
             * @public
             */
            Animate.prototype.destroy = function () {
              var handler, property;

              for (handler in this.handlers) {
                this.core.$element.off(handler, this.handlers[handler]);
              }
              for (property in Object.getOwnPropertyNames(this)) {
                typeof this[property] != "function" && (this[property] = null);
              }
            };

            $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;
          })(
            window.Zepto || __webpack_provided_window_dot_jQuery,
            window,
            document
          );

          /**
           * Autoplay Plugin
           * @version 2.3.4
           * @author Bartosz Wojciechowski
           * @author Artus Kolanowski
           * @author David Deutsch
           * @author Tom De Caluwé
           * @license The MIT License (MIT)
           */
          (function ($, window, document, undefined) {
            /**
             * Creates the autoplay plugin.
             * @class The Autoplay Plugin
             * @param {Owl} scope - The Owl Carousel
             */
            var Autoplay = function (carousel) {
              /**
               * Reference to the core.
               * @protected
               * @type {Owl}
               */
              this._core = carousel;

              /**
               * The autoplay timeout id.
               * @type {Number}
               */
              this._call = null;

              /**
               * Depending on the state of the plugin, this variable contains either
               * the start time of the timer or the current timer value if it's
               * paused. Since we start in a paused state we initialize the timer
               * value.
               * @type {Number}
               */
              this._time = 0;

              /**
               * Stores the timeout currently used.
               * @type {Number}
               */
              this._timeout = 0;

              /**
               * Indicates whenever the autoplay is paused.
               * @type {Boolean}
               */
              this._paused = true;

              /**
               * All event handlers.
               * @protected
               * @type {Object}
               */
              this._handlers = {
                "changed.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && e.property.name === "settings") {
                    if (this._core.settings.autoplay) {
                      this.play();
                    } else {
                      this.stop();
                    }
                  } else if (
                    e.namespace &&
                    e.property.name === "position" &&
                    this._paused
                  ) {
                    // Reset the timer. This code is triggered when the position
                    // of the carousel was changed through user interaction.
                    this._time = 0;
                  }
                }, this),
                "initialized.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && this._core.settings.autoplay) {
                    this.play();
                  }
                }, this),
                "play.owl.autoplay": $.proxy(function (e, t, s) {
                  if (e.namespace) {
                    this.play(t, s);
                  }
                }, this),
                "stop.owl.autoplay": $.proxy(function (e) {
                  if (e.namespace) {
                    this.stop();
                  }
                }, this),
                "mouseover.owl.autoplay": $.proxy(function () {
                  if (
                    this._core.settings.autoplayHoverPause &&
                    this._core.is("rotating")
                  ) {
                    this.pause();
                  }
                }, this),
                "mouseleave.owl.autoplay": $.proxy(function () {
                  if (
                    this._core.settings.autoplayHoverPause &&
                    this._core.is("rotating")
                  ) {
                    this.play();
                  }
                }, this),
                "touchstart.owl.core": $.proxy(function () {
                  if (
                    this._core.settings.autoplayHoverPause &&
                    this._core.is("rotating")
                  ) {
                    this.pause();
                  }
                }, this),
                "touchend.owl.core": $.proxy(function () {
                  if (this._core.settings.autoplayHoverPause) {
                    this.play();
                  }
                }, this),
              };

              // register event handlers
              this._core.$element.on(this._handlers);

              // set default options
              this._core.options = $.extend(
                {},
                Autoplay.Defaults,
                this._core.options
              );
            };

            /**
             * Default options.
             * @public
             */
            Autoplay.Defaults = {
              autoplay: false,
              autoplayTimeout: 5000,
              autoplayHoverPause: false,
              autoplaySpeed: false,
            };

            /**
             * Transition to the next slide and set a timeout for the next transition.
             * @private
             * @param {Number} [speed] - The animation speed for the animations.
             */
            Autoplay.prototype._next = function (speed) {
              this._call = window.setTimeout(
                $.proxy(this._next, this, speed),
                this._timeout * (Math.round(this.read() / this._timeout) + 1) -
                  this.read()
              );

              if (this._core.is("interacting") || document.hidden) {
                return;
              }
              this._core.next(speed || this._core.settings.autoplaySpeed);
            };

            /**
             * Reads the current timer value when the timer is playing.
             * @public
             */
            Autoplay.prototype.read = function () {
              return new Date().getTime() - this._time;
            };

            /**
             * Starts the autoplay.
             * @public
             * @param {Number} [timeout] - The interval before the next animation starts.
             * @param {Number} [speed] - The animation speed for the animations.
             */
            Autoplay.prototype.play = function (timeout, speed) {
              var elapsed;

              if (!this._core.is("rotating")) {
                this._core.enter("rotating");
              }

              timeout = timeout || this._core.settings.autoplayTimeout;

              // Calculate the elapsed time since the last transition. If the carousel
              // wasn't playing this calculation will yield zero.
              elapsed = Math.min(
                this._time % (this._timeout || timeout),
                timeout
              );

              if (this._paused) {
                // Start the clock.
                this._time = this.read();
                this._paused = false;
              } else {
                // Clear the active timeout to allow replacement.
                window.clearTimeout(this._call);
              }

              // Adjust the origin of the timer to match the new timeout value.
              this._time += (this.read() % timeout) - elapsed;

              this._timeout = timeout;
              this._call = window.setTimeout(
                $.proxy(this._next, this, speed),
                timeout - elapsed
              );
            };

            /**
             * Stops the autoplay.
             * @public
             */
            Autoplay.prototype.stop = function () {
              if (this._core.is("rotating")) {
                // Reset the clock.
                this._time = 0;
                this._paused = true;

                window.clearTimeout(this._call);
                this._core.leave("rotating");
              }
            };

            /**
             * Pauses the autoplay.
             * @public
             */
            Autoplay.prototype.pause = function () {
              if (this._core.is("rotating") && !this._paused) {
                // Pause the clock.
                this._time = this.read();
                this._paused = true;

                window.clearTimeout(this._call);
              }
            };

            /**
             * Destroys the plugin.
             */
            Autoplay.prototype.destroy = function () {
              var handler, property;

              this.stop();

              for (handler in this._handlers) {
                this._core.$element.off(handler, this._handlers[handler]);
              }
              for (property in Object.getOwnPropertyNames(this)) {
                typeof this[property] != "function" && (this[property] = null);
              }
            };

            $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;
          })(
            window.Zepto || __webpack_provided_window_dot_jQuery,
            window,
            document
          );

          /**
           * Navigation Plugin
           * @version 2.3.4
           * @author Artus Kolanowski
           * @author David Deutsch
           * @license The MIT License (MIT)
           */
          (function ($, window, document, undefined) {
            "use strict";

            /**
             * Creates the navigation plugin.
             * @class The Navigation Plugin
             * @param {Owl} carousel - The Owl Carousel.
             */
            var Navigation = function (carousel) {
              /**
               * Reference to the core.
               * @protected
               * @type {Owl}
               */
              this._core = carousel;

              /**
               * Indicates whether the plugin is initialized or not.
               * @protected
               * @type {Boolean}
               */
              this._initialized = false;

              /**
               * The current paging indexes.
               * @protected
               * @type {Array}
               */
              this._pages = [];

              /**
               * All DOM elements of the user interface.
               * @protected
               * @type {Object}
               */
              this._controls = {};

              /**
               * Markup for an indicator.
               * @protected
               * @type {Array.<String>}
               */
              this._templates = [];

              /**
               * The carousel element.
               * @type {jQuery}
               */
              this.$element = this._core.$element;

              /**
               * Overridden methods of the carousel.
               * @protected
               * @type {Object}
               */
              this._overrides = {
                next: this._core.next,
                prev: this._core.prev,
                to: this._core.to,
              };

              /**
               * All event handlers.
               * @protected
               * @type {Object}
               */
              this._handlers = {
                "prepared.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && this._core.settings.dotsData) {
                    this._templates.push(
                      '<div class="' +
                        this._core.settings.dotClass +
                        '">' +
                        $(e.content)
                          .find("[data-dot]")
                          .addBack("[data-dot]")
                          .attr("data-dot") +
                        "</div>"
                    );
                  }
                }, this),
                "added.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && this._core.settings.dotsData) {
                    this._templates.splice(
                      e.position,
                      0,
                      this._templates.pop()
                    );
                  }
                }, this),
                "remove.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && this._core.settings.dotsData) {
                    this._templates.splice(e.position, 1);
                  }
                }, this),
                "changed.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && e.property.name == "position") {
                    this.draw();
                  }
                }, this),
                "initialized.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && !this._initialized) {
                    this._core.trigger("initialize", null, "navigation");
                    this.initialize();
                    this.update();
                    this.draw();
                    this._initialized = true;
                    this._core.trigger("initialized", null, "navigation");
                  }
                }, this),
                "refreshed.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && this._initialized) {
                    this._core.trigger("refresh", null, "navigation");
                    this.update();
                    this.draw();
                    this._core.trigger("refreshed", null, "navigation");
                  }
                }, this),
              };

              // set default options
              this._core.options = $.extend(
                {},
                Navigation.Defaults,
                this._core.options
              );

              // register event handlers
              this.$element.on(this._handlers);
            };

            /**
             * Default options.
             * @public
             * @todo Rename `slideBy` to `navBy`
             */
            Navigation.Defaults = {
              nav: false,
              navText: [
                '<span aria-label="' + "Previous" + '">&#x2039;</span>',
                '<span aria-label="' + "Next" + '">&#x203a;</span>',
              ],
              navSpeed: false,
              navElement: 'button type="button" role="presentation"',
              navContainer: false,
              navContainerClass: "owl-nav",
              navClass: ["owl-prev", "owl-next"],
              slideBy: 1,
              dotClass: "owl-dot",
              dotsClass: "owl-dots",
              dots: true,
              dotsEach: false,
              dotsData: false,
              dotsSpeed: false,
              dotsContainer: false,
            };

            /**
             * Initializes the layout of the plugin and extends the carousel.
             * @protected
             */
            Navigation.prototype.initialize = function () {
              var override,
                settings = this._core.settings;

              // create DOM structure for relative navigation
              this._controls.$relative = (
                settings.navContainer
                  ? $(settings.navContainer)
                  : $("<div>")
                      .addClass(settings.navContainerClass)
                      .appendTo(this.$element)
              ).addClass("disabled");

              this._controls.$previous = $("<" + settings.navElement + ">")
                .addClass(settings.navClass[0])
                .html(settings.navText[0])
                .prependTo(this._controls.$relative)
                .on(
                  "click",
                  $.proxy(function (e) {
                    this.prev(settings.navSpeed);
                  }, this)
                );
              this._controls.$next = $("<" + settings.navElement + ">")
                .addClass(settings.navClass[1])
                .html(settings.navText[1])
                .appendTo(this._controls.$relative)
                .on(
                  "click",
                  $.proxy(function (e) {
                    this.next(settings.navSpeed);
                  }, this)
                );

              // create DOM structure for absolute navigation
              if (!settings.dotsData) {
                this._templates = [
                  $('<button role="button">')
                    .addClass(settings.dotClass)
                    .append($("<span>"))
                    .prop("outerHTML"),
                ];
              }

              this._controls.$absolute = (
                settings.dotsContainer
                  ? $(settings.dotsContainer)
                  : $("<div>")
                      .addClass(settings.dotsClass)
                      .appendTo(this.$element)
              ).addClass("disabled");

              this._controls.$absolute.on(
                "click",
                "button",
                $.proxy(function (e) {
                  var index = $(e.target).parent().is(this._controls.$absolute)
                    ? $(e.target).index()
                    : $(e.target).parent().index();

                  e.preventDefault();

                  this.to(index, settings.dotsSpeed);
                }, this)
              );

              /*$el.on('focusin', function() {
			$(document).off(".carousel");

			$(document).on('keydown.carousel', function(e) {
				if(e.keyCode == 37) {
					$el.trigger('prev.owl')
				}
				if(e.keyCode == 39) {
					$el.trigger('next.owl')
				}
			});
		});*/

              // override public methods of the carousel
              for (override in this._overrides) {
                this._core[override] = $.proxy(this[override], this);
              }
            };

            /**
             * Destroys the plugin.
             * @protected
             */
            Navigation.prototype.destroy = function () {
              var handler, control, property, override, settings;
              settings = this._core.settings;

              for (handler in this._handlers) {
                this.$element.off(handler, this._handlers[handler]);
              }
              for (control in this._controls) {
                if (control === "$relative" && settings.navContainer) {
                  this._controls[control].html("");
                } else {
                  this._controls[control].remove();
                }
              }
              for (override in this.overides) {
                this._core[override] = this._overrides[override];
              }
              for (property in Object.getOwnPropertyNames(this)) {
                typeof this[property] != "function" && (this[property] = null);
              }
            };

            /**
             * Updates the internal state.
             * @protected
             */
            Navigation.prototype.update = function () {
              var i,
                j,
                k,
                lower = this._core.clones().length / 2,
                upper = lower + this._core.items().length,
                maximum = this._core.maximum(true),
                settings = this._core.settings,
                size =
                  settings.center || settings.autoWidth || settings.dotsData
                    ? 1
                    : settings.dotsEach || settings.items;

              if (settings.slideBy !== "page") {
                settings.slideBy = Math.min(settings.slideBy, settings.items);
              }

              if (settings.dots || settings.slideBy == "page") {
                this._pages = [];

                for (i = lower, j = 0, k = 0; i < upper; i++) {
                  if (j >= size || j === 0) {
                    this._pages.push({
                      start: Math.min(maximum, i - lower),
                      end: i - lower + size - 1,
                    });
                    if (Math.min(maximum, i - lower) === maximum) {
                      break;
                    }
                    (j = 0), ++k;
                  }
                  j += this._core.mergers(this._core.relative(i));
                }
              }
            };

            /**
             * Draws the user interface.
             * @todo The option `dotsData` wont work.
             * @protected
             */
            Navigation.prototype.draw = function () {
              var difference,
                settings = this._core.settings,
                disabled = this._core.items().length <= settings.items,
                index = this._core.relative(this._core.current()),
                loop = settings.loop || settings.rewind;

              this._controls.$relative.toggleClass(
                "disabled",
                !settings.nav || disabled
              );

              if (settings.nav) {
                this._controls.$previous.toggleClass(
                  "disabled",
                  !loop && index <= this._core.minimum(true)
                );
                this._controls.$next.toggleClass(
                  "disabled",
                  !loop && index >= this._core.maximum(true)
                );
              }

              this._controls.$absolute.toggleClass(
                "disabled",
                !settings.dots || disabled
              );

              if (settings.dots) {
                difference =
                  this._pages.length -
                  this._controls.$absolute.children().length;

                if (settings.dotsData && difference !== 0) {
                  this._controls.$absolute.html(this._templates.join(""));
                } else if (difference > 0) {
                  this._controls.$absolute.append(
                    new Array(difference + 1).join(this._templates[0])
                  );
                } else if (difference < 0) {
                  this._controls.$absolute
                    .children()
                    .slice(difference)
                    .remove();
                }

                this._controls.$absolute.find(".active").removeClass("active");
                this._controls.$absolute
                  .children()
                  .eq($.inArray(this.current(), this._pages))
                  .addClass("active");
              }
            };

            /**
             * Extends event data.
             * @protected
             * @param {Event} event - The event object which gets thrown.
             */
            Navigation.prototype.onTrigger = function (event) {
              var settings = this._core.settings;

              event.page = {
                index: $.inArray(this.current(), this._pages),
                count: this._pages.length,
                size:
                  settings &&
                  (settings.center || settings.autoWidth || settings.dotsData
                    ? 1
                    : settings.dotsEach || settings.items),
              };
            };

            /**
             * Gets the current page position of the carousel.
             * @protected
             * @returns {Number}
             */
            Navigation.prototype.current = function () {
              var current = this._core.relative(this._core.current());
              return $.grep(
                this._pages,
                $.proxy(function (page, index) {
                  return page.start <= current && page.end >= current;
                }, this)
              ).pop();
            };

            /**
             * Gets the current succesor/predecessor position.
             * @protected
             * @returns {Number}
             */
            Navigation.prototype.getPosition = function (successor) {
              var position,
                length,
                settings = this._core.settings;

              if (settings.slideBy == "page") {
                position = $.inArray(this.current(), this._pages);
                length = this._pages.length;
                successor ? ++position : --position;
                position =
                  this._pages[((position % length) + length) % length].start;
              } else {
                position = this._core.relative(this._core.current());
                length = this._core.items().length;
                successor
                  ? (position += settings.slideBy)
                  : (position -= settings.slideBy);
              }

              return position;
            };

            /**
             * Slides to the next item or page.
             * @public
             * @param {Number} [speed=false] - The time in milliseconds for the transition.
             */
            Navigation.prototype.next = function (speed) {
              $.proxy(this._overrides.to, this._core)(
                this.getPosition(true),
                speed
              );
            };

            /**
             * Slides to the previous item or page.
             * @public
             * @param {Number} [speed=false] - The time in milliseconds for the transition.
             */
            Navigation.prototype.prev = function (speed) {
              $.proxy(this._overrides.to, this._core)(
                this.getPosition(false),
                speed
              );
            };

            /**
             * Slides to the specified item or page.
             * @public
             * @param {Number} position - The position of the item or page.
             * @param {Number} [speed] - The time in milliseconds for the transition.
             * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.
             */
            Navigation.prototype.to = function (position, speed, standard) {
              var length;

              if (!standard && this._pages.length) {
                length = this._pages.length;
                $.proxy(this._overrides.to, this._core)(
                  this._pages[((position % length) + length) % length].start,
                  speed
                );
              } else {
                $.proxy(this._overrides.to, this._core)(position, speed);
              }
            };

            $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;
          })(
            window.Zepto || __webpack_provided_window_dot_jQuery,
            window,
            document
          );

          /**
           * Hash Plugin
           * @version 2.3.4
           * @author Artus Kolanowski
           * @author David Deutsch
           * @license The MIT License (MIT)
           */
          (function ($, window, document, undefined) {
            "use strict";

            /**
             * Creates the hash plugin.
             * @class The Hash Plugin
             * @param {Owl} carousel - The Owl Carousel
             */
            var Hash = function (carousel) {
              /**
               * Reference to the core.
               * @protected
               * @type {Owl}
               */
              this._core = carousel;

              /**
               * Hash index for the items.
               * @protected
               * @type {Object}
               */
              this._hashes = {};

              /**
               * The carousel element.
               * @type {jQuery}
               */
              this.$element = this._core.$element;

              /**
               * All event handlers.
               * @protected
               * @type {Object}
               */
              this._handlers = {
                "initialized.owl.carousel": $.proxy(function (e) {
                  if (
                    e.namespace &&
                    this._core.settings.startPosition === "URLHash"
                  ) {
                    $(window).trigger("hashchange.owl.navigation");
                  }
                }, this),
                "prepared.owl.carousel": $.proxy(function (e) {
                  if (e.namespace) {
                    var hash = $(e.content)
                      .find("[data-hash]")
                      .addBack("[data-hash]")
                      .attr("data-hash");

                    if (!hash) {
                      return;
                    }

                    this._hashes[hash] = e.content;
                  }
                }, this),
                "changed.owl.carousel": $.proxy(function (e) {
                  if (e.namespace && e.property.name === "position") {
                    var current = this._core.items(
                        this._core.relative(this._core.current())
                      ),
                      hash = $.map(this._hashes, function (item, hash) {
                        return item === current ? hash : null;
                      }).join();

                    if (!hash || window.location.hash.slice(1) === hash) {
                      return;
                    }

                    window.location.hash = hash;
                  }
                }, this),
              };

              // set default options
              this._core.options = $.extend(
                {},
                Hash.Defaults,
                this._core.options
              );

              // register the event handlers
              this.$element.on(this._handlers);

              // register event listener for hash navigation
              $(window).on(
                "hashchange.owl.navigation",
                $.proxy(function (e) {
                  var hash = window.location.hash.substring(1),
                    items = this._core.$stage.children(),
                    position =
                      this._hashes[hash] && items.index(this._hashes[hash]);

                  if (
                    position === undefined ||
                    position === this._core.current()
                  ) {
                    return;
                  }

                  this._core.to(this._core.relative(position), false, true);
                }, this)
              );
            };

            /**
             * Default options.
             * @public
             */
            Hash.Defaults = {
              URLhashListener: false,
            };

            /**
             * Destroys the plugin.
             * @public
             */
            Hash.prototype.destroy = function () {
              var handler, property;

              $(window).off("hashchange.owl.navigation");

              for (handler in this._handlers) {
                this._core.$element.off(handler, this._handlers[handler]);
              }
              for (property in Object.getOwnPropertyNames(this)) {
                typeof this[property] != "function" && (this[property] = null);
              }
            };

            $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;
          })(
            window.Zepto || __webpack_provided_window_dot_jQuery,
            window,
            document
          );

          /**
           * Support Plugin
           *
           * @version 2.3.4
           * @author Vivid Planet Software GmbH
           * @author Artus Kolanowski
           * @author David Deutsch
           * @license The MIT License (MIT)
           */
          (function ($, window, document, undefined) {
            var style = $("<support>").get(0).style,
              prefixes = "Webkit Moz O ms".split(" "),
              events = {
                transition: {
                  end: {
                    WebkitTransition: "webkitTransitionEnd",
                    MozTransition: "transitionend",
                    OTransition: "oTransitionEnd",
                    transition: "transitionend",
                  },
                },
                animation: {
                  end: {
                    WebkitAnimation: "webkitAnimationEnd",
                    MozAnimation: "animationend",
                    OAnimation: "oAnimationEnd",
                    animation: "animationend",
                  },
                },
              },
              tests = {
                csstransforms: function () {
                  return !!test("transform");
                },
                csstransforms3d: function () {
                  return !!test("perspective");
                },
                csstransitions: function () {
                  return !!test("transition");
                },
                cssanimations: function () {
                  return !!test("animation");
                },
              };

            function test(property, prefixed) {
              var result = false,
                upper = property.charAt(0).toUpperCase() + property.slice(1);

              $.each(
                (property + " " + prefixes.join(upper + " ") + upper).split(
                  " "
                ),
                function (i, property) {
                  if (style[property] !== undefined) {
                    result = prefixed ? property : true;
                    return false;
                  }
                }
              );

              return result;
            }

            function prefixed(property) {
              return test(property, true);
            }

            if (tests.csstransitions()) {
              /* jshint -W053 */
              $.support.transition = new String(prefixed("transition"));
              $.support.transition.end =
                events.transition.end[$.support.transition];
            }

            if (tests.cssanimations()) {
              /* jshint -W053 */
              $.support.animation = new String(prefixed("animation"));
              $.support.animation.end =
                events.animation.end[$.support.animation];
            }

            if (tests.csstransforms()) {
              /* jshint -W053 */
              $.support.transform = new String(prefixed("transform"));
              $.support.transform3d = tests.csstransforms3d();
            }
          })(
            window.Zepto || __webpack_provided_window_dot_jQuery,
            window,
            document
          );

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          ),
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./node_modules/swiper/modules/a11y.mjs":
      /*!**********************************************!*\
  !*** ./node_modules/swiper/modules/a11y.mjs ***!
  \**********************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return A11y;
          }
        );
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );
        /* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/classes-to-selector.mjs */ "./node_modules/swiper/shared/classes-to-selector.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function A11y(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            a11y: {
              enabled: true,
              notificationClass: "swiper-notification",
              prevSlideMessage: "Previous slide",
              nextSlideMessage: "Next slide",
              firstSlideMessage: "This is the first slide",
              lastSlideMessage: "This is the last slide",
              paginationBulletMessage: "Go to slide {{index}}",
              slideLabelMessage: "{{index}} / {{slidesLength}}",
              containerMessage: null,
              containerRoleDescriptionMessage: null,
              itemRoleDescriptionMessage: null,
              slideRole: "group",
              id: null,
            },
          });
          swiper.a11y = {
            clicked: false,
          };
          let liveRegion = null;
          let preventFocusHandler;
          let focusTargetSlideEl;
          let visibilityChangedTimestamp = new Date().getTime();
          function notify(message) {
            const notification = liveRegion;
            if (notification.length === 0) return;
            notification.innerHTML = "";
            notification.innerHTML = message;
          }
          function getRandomNumber(size) {
            if (size === void 0) {
              size = 16;
            }
            const randomChar = () =>
              Math.round(16 * Math.random()).toString(16);
            return "x".repeat(size).replace(/x/g, randomChar);
          }
          function makeElFocusable(el) {
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.setAttribute("tabIndex", "0");
            });
          }
          function makeElNotFocusable(el) {
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.setAttribute("tabIndex", "-1");
            });
          }
          function addElRole(el, role) {
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.setAttribute("role", role);
            });
          }
          function addElRoleDescription(el, description) {
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.setAttribute("aria-roledescription", description);
            });
          }
          function addElControls(el, controls) {
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.setAttribute("aria-controls", controls);
            });
          }
          function addElLabel(el, label) {
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.setAttribute("aria-label", label);
            });
          }
          function addElId(el, id) {
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.setAttribute("id", id);
            });
          }
          function addElLive(el, live) {
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.setAttribute("aria-live", live);
            });
          }
          function disableEl(el) {
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.setAttribute("aria-disabled", true);
            });
          }
          function enableEl(el) {
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.setAttribute("aria-disabled", false);
            });
          }
          function onEnterOrSpaceKey(e) {
            if (e.keyCode !== 13 && e.keyCode !== 32) return;
            const params = swiper.params.a11y;
            const targetEl = e.target;
            if (
              swiper.pagination &&
              swiper.pagination.el &&
              (targetEl === swiper.pagination.el ||
                swiper.pagination.el.contains(e.target))
            ) {
              if (
                !e.target.matches(
                  Object(
                    _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__[
                      "c"
                    ]
                  )(swiper.params.pagination.bulletClass)
                )
              )
                return;
            }
            if (
              swiper.navigation &&
              swiper.navigation.prevEl &&
              swiper.navigation.nextEl
            ) {
              const prevEls = Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"]
              )(swiper.navigation.prevEl);
              const nextEls = Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"]
              )(swiper.navigation.nextEl);
              if (nextEls.includes(targetEl)) {
                if (!(swiper.isEnd && !swiper.params.loop)) {
                  swiper.slideNext();
                }
                if (swiper.isEnd) {
                  notify(params.lastSlideMessage);
                } else {
                  notify(params.nextSlideMessage);
                }
              }
              if (prevEls.includes(targetEl)) {
                if (!(swiper.isBeginning && !swiper.params.loop)) {
                  swiper.slidePrev();
                }
                if (swiper.isBeginning) {
                  notify(params.firstSlideMessage);
                } else {
                  notify(params.prevSlideMessage);
                }
              }
            }
            if (
              swiper.pagination &&
              targetEl.matches(
                Object(
                  _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__[
                    "c"
                  ]
                )(swiper.params.pagination.bulletClass)
              )
            ) {
              targetEl.click();
            }
          }
          function updateNavigation() {
            if (
              swiper.params.loop ||
              swiper.params.rewind ||
              !swiper.navigation
            )
              return;
            const { nextEl, prevEl } = swiper.navigation;
            if (prevEl) {
              if (swiper.isBeginning) {
                disableEl(prevEl);
                makeElNotFocusable(prevEl);
              } else {
                enableEl(prevEl);
                makeElFocusable(prevEl);
              }
            }
            if (nextEl) {
              if (swiper.isEnd) {
                disableEl(nextEl);
                makeElNotFocusable(nextEl);
              } else {
                enableEl(nextEl);
                makeElFocusable(nextEl);
              }
            }
          }
          function hasPagination() {
            return (
              swiper.pagination &&
              swiper.pagination.bullets &&
              swiper.pagination.bullets.length
            );
          }
          function hasClickablePagination() {
            return hasPagination() && swiper.params.pagination.clickable;
          }
          function updatePagination() {
            const params = swiper.params.a11y;
            if (!hasPagination()) return;
            swiper.pagination.bullets.forEach((bulletEl) => {
              if (swiper.params.pagination.clickable) {
                makeElFocusable(bulletEl);
                if (!swiper.params.pagination.renderBullet) {
                  addElRole(bulletEl, "button");
                  addElLabel(
                    bulletEl,
                    params.paginationBulletMessage.replace(
                      /\{\{index\}\}/,
                      Object(
                        _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["h"]
                      )(bulletEl) + 1
                    )
                  );
                }
              }
              if (
                bulletEl.matches(
                  Object(
                    _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__[
                      "c"
                    ]
                  )(swiper.params.pagination.bulletActiveClass)
                )
              ) {
                bulletEl.setAttribute("aria-current", "true");
              } else {
                bulletEl.removeAttribute("aria-current");
              }
            });
          }
          const initNavEl = (el, wrapperId, message) => {
            makeElFocusable(el);
            if (el.tagName !== "BUTTON") {
              addElRole(el, "button");
              el.addEventListener("keydown", onEnterOrSpaceKey);
            }
            addElLabel(el, message);
            addElControls(el, wrapperId);
          };
          const handlePointerDown = (e) => {
            if (
              focusTargetSlideEl &&
              focusTargetSlideEl !== e.target &&
              !focusTargetSlideEl.contains(e.target)
            ) {
              preventFocusHandler = true;
            }
            swiper.a11y.clicked = true;
          };
          const handlePointerUp = () => {
            preventFocusHandler = false;
            requestAnimationFrame(() => {
              requestAnimationFrame(() => {
                if (!swiper.destroyed) {
                  swiper.a11y.clicked = false;
                }
              });
            });
          };
          const onVisibilityChange = (e) => {
            visibilityChangedTimestamp = new Date().getTime();
          };
          const handleFocus = (e) => {
            if (swiper.a11y.clicked) return;
            if (new Date().getTime() - visibilityChangedTimestamp < 100) return;
            const slideEl = e.target.closest(
              `.${swiper.params.slideClass}, swiper-slide`
            );
            if (!slideEl || !swiper.slides.includes(slideEl)) return;
            focusTargetSlideEl = slideEl;
            const isActive =
              swiper.slides.indexOf(slideEl) === swiper.activeIndex;
            const isVisible =
              swiper.params.watchSlidesProgress &&
              swiper.visibleSlides &&
              swiper.visibleSlides.includes(slideEl);
            if (isActive || isVisible) return;
            if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents)
              return;
            if (swiper.isHorizontal()) {
              swiper.el.scrollLeft = 0;
            } else {
              swiper.el.scrollTop = 0;
            }
            requestAnimationFrame(() => {
              if (preventFocusHandler) return;
              swiper.slideTo(swiper.slides.indexOf(slideEl), 0);
              preventFocusHandler = false;
            });
          };
          const initSlides = () => {
            const params = swiper.params.a11y;
            if (params.itemRoleDescriptionMessage) {
              addElRoleDescription(
                swiper.slides,
                params.itemRoleDescriptionMessage
              );
            }
            if (params.slideRole) {
              addElRole(swiper.slides, params.slideRole);
            }
            const slidesLength = swiper.slides.length;
            if (params.slideLabelMessage) {
              swiper.slides.forEach((slideEl, index) => {
                const slideIndex = swiper.params.loop
                  ? parseInt(
                      slideEl.getAttribute("data-swiper-slide-index"),
                      10
                    )
                  : index;
                const ariaLabelMessage = params.slideLabelMessage
                  .replace(/\{\{index\}\}/, slideIndex + 1)
                  .replace(/\{\{slidesLength\}\}/, slidesLength);
                addElLabel(slideEl, ariaLabelMessage);
              });
            }
          };
          const init = () => {
            const params = swiper.params.a11y;
            swiper.el.append(liveRegion);

            // Container
            const containerEl = swiper.el;
            if (params.containerRoleDescriptionMessage) {
              addElRoleDescription(
                containerEl,
                params.containerRoleDescriptionMessage
              );
            }
            if (params.containerMessage) {
              addElLabel(containerEl, params.containerMessage);
            }

            // Wrapper
            const wrapperEl = swiper.wrapperEl;
            const wrapperId =
              params.id ||
              wrapperEl.getAttribute("id") ||
              `swiper-wrapper-${getRandomNumber(16)}`;
            const live =
              swiper.params.autoplay && swiper.params.autoplay.enabled
                ? "off"
                : "polite";
            addElId(wrapperEl, wrapperId);
            addElLive(wrapperEl, live);

            // Slide
            initSlides();

            // Navigation
            let { nextEl, prevEl } = swiper.navigation ? swiper.navigation : {};
            nextEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"]
            )(nextEl);
            prevEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"]
            )(prevEl);
            if (nextEl) {
              nextEl.forEach((el) =>
                initNavEl(el, wrapperId, params.nextSlideMessage)
              );
            }
            if (prevEl) {
              prevEl.forEach((el) =>
                initNavEl(el, wrapperId, params.prevSlideMessage)
              );
            }

            // Pagination
            if (hasClickablePagination()) {
              const paginationEl = Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"]
              )(swiper.pagination.el);
              paginationEl.forEach((el) => {
                el.addEventListener("keydown", onEnterOrSpaceKey);
              });
            }

            // Tab focus
            const document = Object(
              _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
            )();
            document.addEventListener("visibilitychange", onVisibilityChange);
            swiper.el.addEventListener("focus", handleFocus, true);
            swiper.el.addEventListener("focus", handleFocus, true);
            swiper.el.addEventListener("pointerdown", handlePointerDown, true);
            swiper.el.addEventListener("pointerup", handlePointerUp, true);
          };
          function destroy() {
            if (liveRegion) liveRegion.remove();
            let { nextEl, prevEl } = swiper.navigation ? swiper.navigation : {};
            nextEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"]
            )(nextEl);
            prevEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"]
            )(prevEl);
            if (nextEl) {
              nextEl.forEach((el) =>
                el.removeEventListener("keydown", onEnterOrSpaceKey)
              );
            }
            if (prevEl) {
              prevEl.forEach((el) =>
                el.removeEventListener("keydown", onEnterOrSpaceKey)
              );
            }

            // Pagination
            if (hasClickablePagination()) {
              const paginationEl = Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"]
              )(swiper.pagination.el);
              paginationEl.forEach((el) => {
                el.removeEventListener("keydown", onEnterOrSpaceKey);
              });
            }
            const document = Object(
              _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
            )();
            document.removeEventListener(
              "visibilitychange",
              onVisibilityChange
            );
            // Tab focus
            swiper.el.removeEventListener("focus", handleFocus, true);
            swiper.el.removeEventListener(
              "pointerdown",
              handlePointerDown,
              true
            );
            swiper.el.removeEventListener("pointerup", handlePointerUp, true);
          }
          on("beforeInit", () => {
            liveRegion = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["c"]
            )("span", swiper.params.a11y.notificationClass);
            liveRegion.setAttribute("aria-live", "assertive");
            liveRegion.setAttribute("aria-atomic", "true");
          });
          on("afterInit", () => {
            if (!swiper.params.a11y.enabled) return;
            init();
          });
          on(
            "slidesLengthChange snapGridLengthChange slidesGridLengthChange",
            () => {
              if (!swiper.params.a11y.enabled) return;
              initSlides();
            }
          );
          on("fromEdge toEdge afterInit lock unlock", () => {
            if (!swiper.params.a11y.enabled) return;
            updateNavigation();
          });
          on("paginationUpdate", () => {
            if (!swiper.params.a11y.enabled) return;
            updatePagination();
          });
          on("destroy", () => {
            if (!swiper.params.a11y.enabled) return;
            destroy();
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/autoplay.mjs":
      /*!**************************************************!*\
  !*** ./node_modules/swiper/modules/autoplay.mjs ***!
  \**************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Autoplay;
          }
        );
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );

        /* eslint no-underscore-dangle: "off" */
        /* eslint no-use-before-define: "off" */
        function Autoplay(_ref) {
          let { swiper, extendParams, on, emit, params } = _ref;
          swiper.autoplay = {
            running: false,
            paused: false,
            timeLeft: 0,
          };
          extendParams({
            autoplay: {
              enabled: false,
              delay: 3000,
              waitForTransition: true,
              disableOnInteraction: false,
              stopOnLastSlide: false,
              reverseDirection: false,
              pauseOnMouseEnter: false,
            },
          });
          let timeout;
          let raf;
          let autoplayDelayTotal =
            params && params.autoplay ? params.autoplay.delay : 3000;
          let autoplayDelayCurrent =
            params && params.autoplay ? params.autoplay.delay : 3000;
          let autoplayTimeLeft;
          let autoplayStartTime = new Date().getTime();
          let wasPaused;
          let isTouched;
          let pausedByTouch;
          let touchStartTimeout;
          let slideChanged;
          let pausedByInteraction;
          let pausedByPointerEnter;
          function onTransitionEnd(e) {
            if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;
            if (e.target !== swiper.wrapperEl) return;
            swiper.wrapperEl.removeEventListener(
              "transitionend",
              onTransitionEnd
            );
            if (
              pausedByPointerEnter ||
              (e.detail && e.detail.bySwiperTouchMove)
            ) {
              return;
            }
            resume();
          }
          const calcTimeLeft = () => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            if (swiper.autoplay.paused) {
              wasPaused = true;
            } else if (wasPaused) {
              autoplayDelayCurrent = autoplayTimeLeft;
              wasPaused = false;
            }
            const timeLeft = swiper.autoplay.paused
              ? autoplayTimeLeft
              : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();
            swiper.autoplay.timeLeft = timeLeft;
            emit("autoplayTimeLeft", timeLeft, timeLeft / autoplayDelayTotal);
            raf = requestAnimationFrame(() => {
              calcTimeLeft();
            });
          };
          const getSlideDelay = () => {
            let activeSlideEl;
            if (swiper.virtual && swiper.params.virtual.enabled) {
              activeSlideEl = swiper.slides.filter((slideEl) =>
                slideEl.classList.contains("swiper-slide-active")
              )[0];
            } else {
              activeSlideEl = swiper.slides[swiper.activeIndex];
            }
            if (!activeSlideEl) return undefined;
            const currentSlideDelay = parseInt(
              activeSlideEl.getAttribute("data-swiper-autoplay"),
              10
            );
            return currentSlideDelay;
          };
          const run = (delayForce) => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            cancelAnimationFrame(raf);
            calcTimeLeft();
            let delay =
              typeof delayForce === "undefined"
                ? swiper.params.autoplay.delay
                : delayForce;
            autoplayDelayTotal = swiper.params.autoplay.delay;
            autoplayDelayCurrent = swiper.params.autoplay.delay;
            const currentSlideDelay = getSlideDelay();
            if (
              !Number.isNaN(currentSlideDelay) &&
              currentSlideDelay > 0 &&
              typeof delayForce === "undefined"
            ) {
              delay = currentSlideDelay;
              autoplayDelayTotal = currentSlideDelay;
              autoplayDelayCurrent = currentSlideDelay;
            }
            autoplayTimeLeft = delay;
            const speed = swiper.params.speed;
            const proceed = () => {
              if (!swiper || swiper.destroyed) return;
              if (swiper.params.autoplay.reverseDirection) {
                if (
                  !swiper.isBeginning ||
                  swiper.params.loop ||
                  swiper.params.rewind
                ) {
                  swiper.slidePrev(speed, true, true);
                  emit("autoplay");
                } else if (!swiper.params.autoplay.stopOnLastSlide) {
                  swiper.slideTo(swiper.slides.length - 1, speed, true, true);
                  emit("autoplay");
                }
              } else {
                if (
                  !swiper.isEnd ||
                  swiper.params.loop ||
                  swiper.params.rewind
                ) {
                  swiper.slideNext(speed, true, true);
                  emit("autoplay");
                } else if (!swiper.params.autoplay.stopOnLastSlide) {
                  swiper.slideTo(0, speed, true, true);
                  emit("autoplay");
                }
              }
              if (swiper.params.cssMode) {
                autoplayStartTime = new Date().getTime();
                requestAnimationFrame(() => {
                  run();
                });
              }
            };
            if (delay > 0) {
              clearTimeout(timeout);
              timeout = setTimeout(() => {
                proceed();
              }, delay);
            } else {
              requestAnimationFrame(() => {
                proceed();
              });
            }

            // eslint-disable-next-line
            return delay;
          };
          const start = () => {
            autoplayStartTime = new Date().getTime();
            swiper.autoplay.running = true;
            run();
            emit("autoplayStart");
          };
          const stop = () => {
            swiper.autoplay.running = false;
            clearTimeout(timeout);
            cancelAnimationFrame(raf);
            emit("autoplayStop");
          };
          const pause = (internal, reset) => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            clearTimeout(timeout);
            if (!internal) {
              pausedByInteraction = true;
            }
            const proceed = () => {
              emit("autoplayPause");
              if (swiper.params.autoplay.waitForTransition) {
                swiper.wrapperEl.addEventListener(
                  "transitionend",
                  onTransitionEnd
                );
              } else {
                resume();
              }
            };
            swiper.autoplay.paused = true;
            if (reset) {
              if (slideChanged) {
                autoplayTimeLeft = swiper.params.autoplay.delay;
              }
              slideChanged = false;
              proceed();
              return;
            }
            const delay = autoplayTimeLeft || swiper.params.autoplay.delay;
            autoplayTimeLeft =
              delay - (new Date().getTime() - autoplayStartTime);
            if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop)
              return;
            if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;
            proceed();
          };
          const resume = () => {
            if (
              (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) ||
              swiper.destroyed ||
              !swiper.autoplay.running
            )
              return;
            autoplayStartTime = new Date().getTime();
            if (pausedByInteraction) {
              pausedByInteraction = false;
              run(autoplayTimeLeft);
            } else {
              run();
            }
            swiper.autoplay.paused = false;
            emit("autoplayResume");
          };
          const onVisibilityChange = () => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            const document = Object(
              _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
            )();
            if (document.visibilityState === "hidden") {
              pausedByInteraction = true;
              pause(true);
            }
            if (document.visibilityState === "visible") {
              resume();
            }
          };
          const onPointerEnter = (e) => {
            if (e.pointerType !== "mouse") return;
            pausedByInteraction = true;
            pausedByPointerEnter = true;
            if (swiper.animating || swiper.autoplay.paused) return;
            pause(true);
          };
          const onPointerLeave = (e) => {
            if (e.pointerType !== "mouse") return;
            pausedByPointerEnter = false;
            if (swiper.autoplay.paused) {
              resume();
            }
          };
          const attachMouseEvents = () => {
            if (swiper.params.autoplay.pauseOnMouseEnter) {
              swiper.el.addEventListener("pointerenter", onPointerEnter);
              swiper.el.addEventListener("pointerleave", onPointerLeave);
            }
          };
          const detachMouseEvents = () => {
            swiper.el.removeEventListener("pointerenter", onPointerEnter);
            swiper.el.removeEventListener("pointerleave", onPointerLeave);
          };
          const attachDocumentEvents = () => {
            const document = Object(
              _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
            )();
            document.addEventListener("visibilitychange", onVisibilityChange);
          };
          const detachDocumentEvents = () => {
            const document = Object(
              _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
            )();
            document.removeEventListener(
              "visibilitychange",
              onVisibilityChange
            );
          };
          on("init", () => {
            if (swiper.params.autoplay.enabled) {
              attachMouseEvents();
              attachDocumentEvents();
              start();
            }
          });
          on("destroy", () => {
            detachMouseEvents();
            detachDocumentEvents();
            if (swiper.autoplay.running) {
              stop();
            }
          });
          on("_freeModeStaticRelease", () => {
            if (pausedByTouch || pausedByInteraction) {
              resume();
            }
          });
          on("_freeModeNoMomentumRelease", () => {
            if (!swiper.params.autoplay.disableOnInteraction) {
              pause(true, true);
            } else {
              stop();
            }
          });
          on("beforeTransitionStart", (_s, speed, internal) => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            if (internal || !swiper.params.autoplay.disableOnInteraction) {
              pause(true, true);
            } else {
              stop();
            }
          });
          on("sliderFirstMove", () => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            if (swiper.params.autoplay.disableOnInteraction) {
              stop();
              return;
            }
            isTouched = true;
            pausedByTouch = false;
            pausedByInteraction = false;
            touchStartTimeout = setTimeout(() => {
              pausedByInteraction = true;
              pausedByTouch = true;
              pause(true);
            }, 200);
          });
          on("touchEnd", () => {
            if (swiper.destroyed || !swiper.autoplay.running || !isTouched)
              return;
            clearTimeout(touchStartTimeout);
            clearTimeout(timeout);
            if (swiper.params.autoplay.disableOnInteraction) {
              pausedByTouch = false;
              isTouched = false;
              return;
            }
            if (pausedByTouch && swiper.params.cssMode) resume();
            pausedByTouch = false;
            isTouched = false;
          });
          on("slideChange", () => {
            if (swiper.destroyed || !swiper.autoplay.running) return;
            slideChanged = true;
          });
          Object.assign(swiper.autoplay, {
            start,
            stop,
            pause,
            resume,
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/controller.mjs":
      /*!****************************************************!*\
  !*** ./node_modules/swiper/modules/controller.mjs ***!
  \****************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Controller;
          }
        );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        /* eslint no-bitwise: ["error", { "allow": [">>"] }] */
        function Controller(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            controller: {
              control: undefined,
              inverse: false,
              by: "slide", // or 'container'
            },
          });

          swiper.controller = {
            control: undefined,
          };
          function LinearSpline(x, y) {
            const binarySearch = (function search() {
              let maxIndex;
              let minIndex;
              let guess;
              return (array, val) => {
                minIndex = -1;
                maxIndex = array.length;
                while (maxIndex - minIndex > 1) {
                  guess = (maxIndex + minIndex) >> 1;
                  if (array[guess] <= val) {
                    minIndex = guess;
                  } else {
                    maxIndex = guess;
                  }
                }
                return maxIndex;
              };
            })();
            this.x = x;
            this.y = y;
            this.lastIndex = x.length - 1;
            // Given an x value (x2), return the expected y2 value:
            // (x1,y1) is the known point before given value,
            // (x3,y3) is the known point after given value.
            let i1;
            let i3;
            this.interpolate = function interpolate(x2) {
              if (!x2) return 0;

              // Get the indexes of x1 and x3 (the array indexes before and after given x2):
              i3 = binarySearch(this.x, x2);
              i1 = i3 - 1;

              // We have our indexes i1 & i3, so we can calculate already:
              // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
              return (
                ((x2 - this.x[i1]) * (this.y[i3] - this.y[i1])) /
                  (this.x[i3] - this.x[i1]) +
                this.y[i1]
              );
            };
            return this;
          }
          function getInterpolateFunction(c) {
            swiper.controller.spline = swiper.params.loop
              ? new LinearSpline(swiper.slidesGrid, c.slidesGrid)
              : new LinearSpline(swiper.snapGrid, c.snapGrid);
          }
          function setTranslate(_t, byController) {
            const controlled = swiper.controller.control;
            let multiplier;
            let controlledTranslate;
            const Swiper = swiper.constructor;
            function setControlledTranslate(c) {
              if (c.destroyed) return;

              // this will create an Interpolate function based on the snapGrids
              // x is the Grid of the scrolled scroller and y will be the controlled scroller
              // it makes sense to create this only once and recall it for the interpolation
              // the function does a lot of value caching for performance
              const translate = swiper.rtlTranslate
                ? -swiper.translate
                : swiper.translate;
              if (swiper.params.controller.by === "slide") {
                getInterpolateFunction(c);
                // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
                // but it did not work out
                controlledTranslate = -swiper.controller.spline.interpolate(
                  -translate
                );
              }
              if (
                !controlledTranslate ||
                swiper.params.controller.by === "container"
              ) {
                multiplier =
                  (c.maxTranslate() - c.minTranslate()) /
                  (swiper.maxTranslate() - swiper.minTranslate());
                if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {
                  multiplier = 1;
                }
                controlledTranslate =
                  (translate - swiper.minTranslate()) * multiplier +
                  c.minTranslate();
              }
              if (swiper.params.controller.inverse) {
                controlledTranslate = c.maxTranslate() - controlledTranslate;
              }
              c.updateProgress(controlledTranslate);
              c.setTranslate(controlledTranslate, swiper);
              c.updateActiveIndex();
              c.updateSlidesClasses();
            }
            if (Array.isArray(controlled)) {
              for (let i = 0; i < controlled.length; i += 1) {
                if (
                  controlled[i] !== byController &&
                  controlled[i] instanceof Swiper
                ) {
                  setControlledTranslate(controlled[i]);
                }
              }
            } else if (
              controlled instanceof Swiper &&
              byController !== controlled
            ) {
              setControlledTranslate(controlled);
            }
          }
          function setTransition(duration, byController) {
            const Swiper = swiper.constructor;
            const controlled = swiper.controller.control;
            let i;
            function setControlledTransition(c) {
              if (c.destroyed) return;
              c.setTransition(duration, swiper);
              if (duration !== 0) {
                c.transitionStart();
                if (c.params.autoHeight) {
                  Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["n"])(
                    () => {
                      c.updateAutoHeight();
                    }
                  );
                }
                Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["k"])(
                  c.wrapperEl,
                  () => {
                    if (!controlled) return;
                    c.transitionEnd();
                  }
                );
              }
            }
            if (Array.isArray(controlled)) {
              for (i = 0; i < controlled.length; i += 1) {
                if (
                  controlled[i] !== byController &&
                  controlled[i] instanceof Swiper
                ) {
                  setControlledTransition(controlled[i]);
                }
              }
            } else if (
              controlled instanceof Swiper &&
              byController !== controlled
            ) {
              setControlledTransition(controlled);
            }
          }
          function removeSpline() {
            if (!swiper.controller.control) return;
            if (swiper.controller.spline) {
              swiper.controller.spline = undefined;
              delete swiper.controller.spline;
            }
          }
          on("beforeInit", () => {
            if (
              typeof window !== "undefined" &&
              // eslint-disable-line
              (typeof swiper.params.controller.control === "string" ||
                swiper.params.controller.control instanceof HTMLElement)
            ) {
              const controlElement = document.querySelector(
                swiper.params.controller.control
              );
              if (controlElement && controlElement.swiper) {
                swiper.controller.control = controlElement.swiper;
              } else if (controlElement) {
                const onControllerSwiper = (e) => {
                  swiper.controller.control = e.detail[0];
                  swiper.update();
                  controlElement.removeEventListener(
                    "init",
                    onControllerSwiper
                  );
                };
                controlElement.addEventListener("init", onControllerSwiper);
              }
              return;
            }
            swiper.controller.control = swiper.params.controller.control;
          });
          on("update", () => {
            removeSpline();
          });
          on("resize", () => {
            removeSpline();
          });
          on("observerUpdate", () => {
            removeSpline();
          });
          on("setTranslate", (_s, translate, byController) => {
            if (
              !swiper.controller.control ||
              swiper.controller.control.destroyed
            )
              return;
            swiper.controller.setTranslate(translate, byController);
          });
          on("setTransition", (_s, duration, byController) => {
            if (
              !swiper.controller.control ||
              swiper.controller.control.destroyed
            )
              return;
            swiper.controller.setTransition(duration, byController);
          });
          Object.assign(swiper.controller, {
            setTranslate,
            setTransition,
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/effect-cards.mjs":
      /*!******************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cards.mjs ***!
  \******************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return EffectCards;
          }
        );
        /* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/create-shadow.mjs */ "./node_modules/swiper/shared/create-shadow.mjs"
          );
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ "./node_modules/swiper/shared/effect-init.mjs"
          );
        /* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/effect-target.mjs */ "./node_modules/swiper/shared/effect-target.mjs"
          );
        /* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/effect-virtual-transition-end.mjs */ "./node_modules/swiper/shared/effect-virtual-transition-end.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function EffectCards(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            cardsEffect: {
              slideShadows: true,
              rotate: true,
              perSlideRotate: 2,
              perSlideOffset: 8,
            },
          });
          const setTranslate = () => {
            const { slides, activeIndex, rtlTranslate: rtl } = swiper;
            const params = swiper.params.cardsEffect;
            const { startTranslate, isTouched } = swiper.touchEventsData;
            const currentTranslate = rtl ? -swiper.translate : swiper.translate;
            for (let i = 0; i < slides.length; i += 1) {
              const slideEl = slides[i];
              const slideProgress = slideEl.progress;
              const progress = Math.min(Math.max(slideProgress, -4), 4);
              let offset = slideEl.swiperSlideOffset;
              if (swiper.params.centeredSlides && !swiper.params.cssMode) {
                swiper.wrapperEl.style.transform = `translateX(${swiper.minTranslate()}px)`;
              }
              if (swiper.params.centeredSlides && swiper.params.cssMode) {
                offset -= slides[0].swiperSlideOffset;
              }
              let tX = swiper.params.cssMode
                ? -offset - swiper.translate
                : -offset;
              let tY = 0;
              const tZ = -100 * Math.abs(progress);
              let scale = 1;
              let rotate = -params.perSlideRotate * progress;
              let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;
              const slideIndex =
                swiper.virtual && swiper.params.virtual.enabled
                  ? swiper.virtual.from + i
                  : i;
              const isSwipeToNext =
                (slideIndex === activeIndex ||
                  slideIndex === activeIndex - 1) &&
                progress > 0 &&
                progress < 1 &&
                (isTouched || swiper.params.cssMode) &&
                currentTranslate < startTranslate;
              const isSwipeToPrev =
                (slideIndex === activeIndex ||
                  slideIndex === activeIndex + 1) &&
                progress < 0 &&
                progress > -1 &&
                (isTouched || swiper.params.cssMode) &&
                currentTranslate > startTranslate;
              if (isSwipeToNext || isSwipeToPrev) {
                const subProgress =
                  (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;
                rotate += -28 * progress * subProgress;
                scale += -0.5 * subProgress;
                tXAdd += 96 * subProgress;
                tY = `${-25 * subProgress * Math.abs(progress)}%`;
              }
              if (progress < 0) {
                // next
                tX = `calc(${tX}px ${rtl ? "-" : "+"} (${
                  tXAdd * Math.abs(progress)
                }%))`;
              } else if (progress > 0) {
                // prev
                tX = `calc(${tX}px ${rtl ? "-" : "+"} (-${
                  tXAdd * Math.abs(progress)
                }%))`;
              } else {
                tX = `${tX}px`;
              }
              if (!swiper.isHorizontal()) {
                const prevY = tY;
                tY = tX;
                tX = prevY;
              }
              const scaleString =
                progress < 0
                  ? `${1 + (1 - scale) * progress}`
                  : `${1 - (1 - scale) * progress}`;

              /* eslint-disable */
              const transform = `
        translate3d(${tX}, ${tY}, ${tZ}px)
        rotateZ(${params.rotate ? (rtl ? -rotate : rotate) : 0}deg)
        scale(${scaleString})
      `;
              /* eslint-enable */

              if (params.slideShadows) {
                // Set shadows
                let shadowEl = slideEl.querySelector(".swiper-slide-shadow");
                if (!shadowEl) {
                  shadowEl = Object(
                    _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__["c"]
                  )("cards", slideEl);
                }
                if (shadowEl)
                  shadowEl.style.opacity = Math.min(
                    Math.max((Math.abs(progress) - 0.5) / 0.5, 0),
                    1
                  );
              }
              slideEl.style.zIndex =
                -Math.abs(Math.round(slideProgress)) + slides.length;
              const targetEl = Object(
                _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__["e"]
              )(params, slideEl);
              targetEl.style.transform = transform;
            }
          };
          const setTransition = (duration) => {
            const transformElements = swiper.slides.map((slideEl) =>
              Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__["g"])(
                slideEl
              )
            );
            transformElements.forEach((el) => {
              el.style.transitionDuration = `${duration}ms`;
              el.querySelectorAll(".swiper-slide-shadow").forEach(
                (shadowEl) => {
                  shadowEl.style.transitionDuration = `${duration}ms`;
                }
              );
            });
            Object(
              _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__[
                "e"
              ]
            )({
              swiper,
              duration,
              transformElements,
            });
          };
          Object(_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])({
            effect: "cards",
            swiper,
            on,
            setTranslate,
            setTransition,
            perspective: () => true,
            overwriteParams: () => ({
              watchSlidesProgress: true,
              virtualTranslate: !swiper.params.cssMode,
            }),
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/effect-coverflow.mjs":
      /*!**********************************************************!*\
  !*** ./node_modules/swiper/modules/effect-coverflow.mjs ***!
  \**********************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return EffectCoverflow;
          }
        );
        /* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/create-shadow.mjs */ "./node_modules/swiper/shared/create-shadow.mjs"
          );
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ "./node_modules/swiper/shared/effect-init.mjs"
          );
        /* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/effect-target.mjs */ "./node_modules/swiper/shared/effect-target.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function EffectCoverflow(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            coverflowEffect: {
              rotate: 50,
              stretch: 0,
              depth: 100,
              scale: 1,
              modifier: 1,
              slideShadows: true,
            },
          });
          const setTranslate = () => {
            const {
              width: swiperWidth,
              height: swiperHeight,
              slides,
              slidesSizesGrid,
            } = swiper;
            const params = swiper.params.coverflowEffect;
            const isHorizontal = swiper.isHorizontal();
            const transform = swiper.translate;
            const center = isHorizontal
              ? -transform + swiperWidth / 2
              : -transform + swiperHeight / 2;
            const rotate = isHorizontal ? params.rotate : -params.rotate;
            const translate = params.depth;
            // Each slide offset from center
            for (let i = 0, length = slides.length; i < length; i += 1) {
              const slideEl = slides[i];
              const slideSize = slidesSizesGrid[i];
              const slideOffset = slideEl.swiperSlideOffset;
              const centerOffset =
                (center - slideOffset - slideSize / 2) / slideSize;
              const offsetMultiplier =
                typeof params.modifier === "function"
                  ? params.modifier(centerOffset)
                  : centerOffset * params.modifier;
              let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
              let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;
              // var rotateZ = 0
              let translateZ = -translate * Math.abs(offsetMultiplier);
              let stretch = params.stretch;
              // Allow percentage to make a relative stretch for responsive sliders
              if (typeof stretch === "string" && stretch.indexOf("%") !== -1) {
                stretch = (parseFloat(params.stretch) / 100) * slideSize;
              }
              let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;
              let translateX = isHorizontal ? stretch * offsetMultiplier : 0;
              let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);

              // Fix for ultra small values
              if (Math.abs(translateX) < 0.001) translateX = 0;
              if (Math.abs(translateY) < 0.001) translateY = 0;
              if (Math.abs(translateZ) < 0.001) translateZ = 0;
              if (Math.abs(rotateY) < 0.001) rotateY = 0;
              if (Math.abs(rotateX) < 0.001) rotateX = 0;
              if (Math.abs(scale) < 0.001) scale = 0;
              if (swiper.browser && swiper.browser.need3dFix) {
                if ((Math.abs(rotateY) / 90) % 2 === 1) {
                  rotateY += 0.001;
                }
                if ((Math.abs(rotateX) / 90) % 2 === 1) {
                  rotateX += 0.001;
                }
              }
              const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;
              const targetEl = Object(
                _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__["e"]
              )(params, slideEl);
              targetEl.style.transform = slideTransform;
              slideEl.style.zIndex =
                -Math.abs(Math.round(offsetMultiplier)) + 1;
              if (params.slideShadows) {
                // Set shadows
                let shadowBeforeEl = isHorizontal
                  ? slideEl.querySelector(".swiper-slide-shadow-left")
                  : slideEl.querySelector(".swiper-slide-shadow-top");
                let shadowAfterEl = isHorizontal
                  ? slideEl.querySelector(".swiper-slide-shadow-right")
                  : slideEl.querySelector(".swiper-slide-shadow-bottom");
                if (!shadowBeforeEl) {
                  shadowBeforeEl = Object(
                    _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__["c"]
                  )("coverflow", slideEl, isHorizontal ? "left" : "top");
                }
                if (!shadowAfterEl) {
                  shadowAfterEl = Object(
                    _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__["c"]
                  )("coverflow", slideEl, isHorizontal ? "right" : "bottom");
                }
                if (shadowBeforeEl)
                  shadowBeforeEl.style.opacity =
                    offsetMultiplier > 0 ? offsetMultiplier : 0;
                if (shadowAfterEl)
                  shadowAfterEl.style.opacity =
                    -offsetMultiplier > 0 ? -offsetMultiplier : 0;
              }
            }
          };
          const setTransition = (duration) => {
            const transformElements = swiper.slides.map((slideEl) =>
              Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__["g"])(
                slideEl
              )
            );
            transformElements.forEach((el) => {
              el.style.transitionDuration = `${duration}ms`;
              el.querySelectorAll(
                ".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left"
              ).forEach((shadowEl) => {
                shadowEl.style.transitionDuration = `${duration}ms`;
              });
            });
          };
          Object(_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])({
            effect: "coverflow",
            swiper,
            on,
            setTranslate,
            setTransition,
            perspective: () => true,
            overwriteParams: () => ({
              watchSlidesProgress: true,
            }),
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/effect-creative.mjs":
      /*!*********************************************************!*\
  !*** ./node_modules/swiper/modules/effect-creative.mjs ***!
  \*********************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return EffectCreative;
          }
        );
        /* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/create-shadow.mjs */ "./node_modules/swiper/shared/create-shadow.mjs"
          );
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ "./node_modules/swiper/shared/effect-init.mjs"
          );
        /* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/effect-target.mjs */ "./node_modules/swiper/shared/effect-target.mjs"
          );
        /* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/effect-virtual-transition-end.mjs */ "./node_modules/swiper/shared/effect-virtual-transition-end.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function EffectCreative(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            creativeEffect: {
              limitProgress: 1,
              shadowPerProgress: false,
              progressMultiplier: 1,
              perspective: true,
              prev: {
                translate: [0, 0, 0],
                rotate: [0, 0, 0],
                opacity: 1,
                scale: 1,
              },
              next: {
                translate: [0, 0, 0],
                rotate: [0, 0, 0],
                opacity: 1,
                scale: 1,
              },
            },
          });
          const getTranslateValue = (value) => {
            if (typeof value === "string") return value;
            return `${value}px`;
          };
          const setTranslate = () => {
            const { slides, wrapperEl, slidesSizesGrid } = swiper;
            const params = swiper.params.creativeEffect;
            const { progressMultiplier: multiplier } = params;
            const isCenteredSlides = swiper.params.centeredSlides;
            if (isCenteredSlides) {
              const margin =
                slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;
              wrapperEl.style.transform = `translateX(calc(50% - ${margin}px))`;
            }
            for (let i = 0; i < slides.length; i += 1) {
              const slideEl = slides[i];
              const slideProgress = slideEl.progress;
              const progress = Math.min(
                Math.max(slideEl.progress, -params.limitProgress),
                params.limitProgress
              );
              let originalProgress = progress;
              if (!isCenteredSlides) {
                originalProgress = Math.min(
                  Math.max(slideEl.originalProgress, -params.limitProgress),
                  params.limitProgress
                );
              }
              const offset = slideEl.swiperSlideOffset;
              const t = [
                swiper.params.cssMode ? -offset - swiper.translate : -offset,
                0,
                0,
              ];
              const r = [0, 0, 0];
              let custom = false;
              if (!swiper.isHorizontal()) {
                t[1] = t[0];
                t[0] = 0;
              }
              let data = {
                translate: [0, 0, 0],
                rotate: [0, 0, 0],
                scale: 1,
                opacity: 1,
              };
              if (progress < 0) {
                data = params.next;
                custom = true;
              } else if (progress > 0) {
                data = params.prev;
                custom = true;
              }
              // set translate
              t.forEach((value, index) => {
                t[index] = `calc(${value}px + (${getTranslateValue(
                  data.translate[index]
                )} * ${Math.abs(progress * multiplier)}))`;
              });
              // set rotates
              r.forEach((value, index) => {
                let val = data.rotate[index] * Math.abs(progress * multiplier);
                if (
                  swiper.browser &&
                  swiper.browser.need3dFix &&
                  (Math.abs(val) / 90) % 2 === 1
                ) {
                  val += 0.001;
                }
                r[index] = val;
              });
              slideEl.style.zIndex =
                -Math.abs(Math.round(slideProgress)) + slides.length;
              const translateString = t.join(", ");
              const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;
              const scaleString =
                originalProgress < 0
                  ? `scale(${
                      1 + (1 - data.scale) * originalProgress * multiplier
                    })`
                  : `scale(${
                      1 - (1 - data.scale) * originalProgress * multiplier
                    })`;
              const opacityString =
                originalProgress < 0
                  ? 1 + (1 - data.opacity) * originalProgress * multiplier
                  : 1 - (1 - data.opacity) * originalProgress * multiplier;
              const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`;

              // Set shadows
              if ((custom && data.shadow) || !custom) {
                let shadowEl = slideEl.querySelector(".swiper-slide-shadow");
                if (!shadowEl && data.shadow) {
                  shadowEl = Object(
                    _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__["c"]
                  )("creative", slideEl);
                }
                if (shadowEl) {
                  const shadowOpacity = params.shadowPerProgress
                    ? progress * (1 / params.limitProgress)
                    : progress;
                  shadowEl.style.opacity = Math.min(
                    Math.max(Math.abs(shadowOpacity), 0),
                    1
                  );
                }
              }
              const targetEl = Object(
                _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__["e"]
              )(params, slideEl);
              targetEl.style.transform = transform;
              targetEl.style.opacity = opacityString;
              if (data.origin) {
                targetEl.style.transformOrigin = data.origin;
              }
            }
          };
          const setTransition = (duration) => {
            const transformElements = swiper.slides.map((slideEl) =>
              Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__["g"])(
                slideEl
              )
            );
            transformElements.forEach((el) => {
              el.style.transitionDuration = `${duration}ms`;
              el.querySelectorAll(".swiper-slide-shadow").forEach(
                (shadowEl) => {
                  shadowEl.style.transitionDuration = `${duration}ms`;
                }
              );
            });
            Object(
              _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__[
                "e"
              ]
            )({
              swiper,
              duration,
              transformElements,
              allSlides: true,
            });
          };
          Object(_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])({
            effect: "creative",
            swiper,
            on,
            setTranslate,
            setTransition,
            perspective: () => swiper.params.creativeEffect.perspective,
            overwriteParams: () => ({
              watchSlidesProgress: true,
              virtualTranslate: !swiper.params.cssMode,
            }),
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/effect-cube.mjs":
      /*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cube.mjs ***!
  \*****************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return EffectCube;
          }
        );
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ "./node_modules/swiper/shared/effect-init.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function EffectCube(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            cubeEffect: {
              slideShadows: true,
              shadow: true,
              shadowOffset: 20,
              shadowScale: 0.94,
            },
          });
          const createSlideShadows = (slideEl, progress, isHorizontal) => {
            let shadowBefore = isHorizontal
              ? slideEl.querySelector(".swiper-slide-shadow-left")
              : slideEl.querySelector(".swiper-slide-shadow-top");
            let shadowAfter = isHorizontal
              ? slideEl.querySelector(".swiper-slide-shadow-right")
              : slideEl.querySelector(".swiper-slide-shadow-bottom");
            if (!shadowBefore) {
              shadowBefore = Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["c"]
              )(
                "div",
                `swiper-slide-shadow-cube swiper-slide-shadow-${
                  isHorizontal ? "left" : "top"
                }`.split(" ")
              );
              slideEl.append(shadowBefore);
            }
            if (!shadowAfter) {
              shadowAfter = Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["c"]
              )(
                "div",
                `swiper-slide-shadow-cube swiper-slide-shadow-${
                  isHorizontal ? "right" : "bottom"
                }`.split(" ")
              );
              slideEl.append(shadowAfter);
            }
            if (shadowBefore)
              shadowBefore.style.opacity = Math.max(-progress, 0);
            if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);
          };
          const recreateShadows = () => {
            // create new ones
            const isHorizontal = swiper.isHorizontal();
            swiper.slides.forEach((slideEl) => {
              const progress = Math.max(Math.min(slideEl.progress, 1), -1);
              createSlideShadows(slideEl, progress, isHorizontal);
            });
          };
          const setTranslate = () => {
            const {
              el,
              wrapperEl,
              slides,
              width: swiperWidth,
              height: swiperHeight,
              rtlTranslate: rtl,
              size: swiperSize,
              browser,
            } = swiper;
            const params = swiper.params.cubeEffect;
            const isHorizontal = swiper.isHorizontal();
            const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
            let wrapperRotate = 0;
            let cubeShadowEl;
            if (params.shadow) {
              if (isHorizontal) {
                cubeShadowEl = swiper.wrapperEl.querySelector(
                  ".swiper-cube-shadow"
                );
                if (!cubeShadowEl) {
                  cubeShadowEl = Object(
                    _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["c"]
                  )("div", "swiper-cube-shadow");
                  swiper.wrapperEl.append(cubeShadowEl);
                }
                cubeShadowEl.style.height = `${swiperWidth}px`;
              } else {
                cubeShadowEl = el.querySelector(".swiper-cube-shadow");
                if (!cubeShadowEl) {
                  cubeShadowEl = Object(
                    _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["c"]
                  )("div", "swiper-cube-shadow");
                  el.append(cubeShadowEl);
                }
              }
            }
            for (let i = 0; i < slides.length; i += 1) {
              const slideEl = slides[i];
              let slideIndex = i;
              if (isVirtual) {
                slideIndex = parseInt(
                  slideEl.getAttribute("data-swiper-slide-index"),
                  10
                );
              }
              let slideAngle = slideIndex * 90;
              let round = Math.floor(slideAngle / 360);
              if (rtl) {
                slideAngle = -slideAngle;
                round = Math.floor(-slideAngle / 360);
              }
              const progress = Math.max(Math.min(slideEl.progress, 1), -1);
              let tx = 0;
              let ty = 0;
              let tz = 0;
              if (slideIndex % 4 === 0) {
                tx = -round * 4 * swiperSize;
                tz = 0;
              } else if ((slideIndex - 1) % 4 === 0) {
                tx = 0;
                tz = -round * 4 * swiperSize;
              } else if ((slideIndex - 2) % 4 === 0) {
                tx = swiperSize + round * 4 * swiperSize;
                tz = swiperSize;
              } else if ((slideIndex - 3) % 4 === 0) {
                tx = -swiperSize;
                tz = 3 * swiperSize + swiperSize * 4 * round;
              }
              if (rtl) {
                tx = -tx;
              }
              if (!isHorizontal) {
                ty = tx;
                tx = 0;
              }
              const transform = `rotateX(${
                isHorizontal ? 0 : -slideAngle
              }deg) rotateY(${
                isHorizontal ? slideAngle : 0
              }deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;
              if (progress <= 1 && progress > -1) {
                wrapperRotate = slideIndex * 90 + progress * 90;
                if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;
                if (
                  swiper.browser &&
                  swiper.browser.need3dFix &&
                  (Math.abs(wrapperRotate) / 90) % 2 === 1
                ) {
                  wrapperRotate += 0.001;
                }
              }
              slideEl.style.transform = transform;
              if (params.slideShadows) {
                createSlideShadows(slideEl, progress, isHorizontal);
              }
            }
            wrapperEl.style.transformOrigin = `50% 50% -${swiperSize / 2}px`;
            wrapperEl.style["-webkit-transform-origin"] = `50% 50% -${
              swiperSize / 2
            }px`;
            if (params.shadow) {
              if (isHorizontal) {
                cubeShadowEl.style.transform = `translate3d(0px, ${
                  swiperWidth / 2 + params.shadowOffset
                }px, ${
                  -swiperWidth / 2
                }px) rotateX(89.99deg) rotateZ(0deg) scale(${
                  params.shadowScale
                })`;
              } else {
                const shadowAngle =
                  Math.abs(wrapperRotate) -
                  Math.floor(Math.abs(wrapperRotate) / 90) * 90;
                const multiplier =
                  1.5 -
                  (Math.sin((shadowAngle * 2 * Math.PI) / 360) / 2 +
                    Math.cos((shadowAngle * 2 * Math.PI) / 360) / 2);
                const scale1 = params.shadowScale;
                const scale2 = params.shadowScale / multiplier;
                const offset = params.shadowOffset;
                cubeShadowEl.style.transform = `scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${
                  swiperHeight / 2 + offset
                }px, ${-swiperHeight / 2 / scale2}px) rotateX(-89.99deg)`;
              }
            }
            const zFactor =
              (browser.isSafari || browser.isWebView) &&
              browser.needPerspectiveFix
                ? -swiperSize / 2
                : 0;
            wrapperEl.style.transform = `translate3d(0px,0,${zFactor}px) rotateX(${
              swiper.isHorizontal() ? 0 : wrapperRotate
            }deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`;
            wrapperEl.style.setProperty(
              "--swiper-cube-translate-z",
              `${zFactor}px`
            );
          };
          const setTransition = (duration) => {
            const { el, slides } = swiper;
            slides.forEach((slideEl) => {
              slideEl.style.transitionDuration = `${duration}ms`;
              slideEl
                .querySelectorAll(
                  ".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left"
                )
                .forEach((subEl) => {
                  subEl.style.transitionDuration = `${duration}ms`;
                });
            });
            if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
              const shadowEl = el.querySelector(".swiper-cube-shadow");
              if (shadowEl) shadowEl.style.transitionDuration = `${duration}ms`;
            }
          };
          Object(_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__["e"])({
            effect: "cube",
            swiper,
            on,
            setTranslate,
            setTransition,
            recreateShadows,
            getEffectParams: () => swiper.params.cubeEffect,
            perspective: () => true,
            overwriteParams: () => ({
              slidesPerView: 1,
              slidesPerGroup: 1,
              watchSlidesProgress: true,
              resistanceRatio: 0,
              spaceBetween: 0,
              centeredSlides: false,
              virtualTranslate: true,
            }),
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/effect-fade.mjs":
      /*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-fade.mjs ***!
  \*****************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return EffectFade;
          }
        );
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ "./node_modules/swiper/shared/effect-init.mjs"
          );
        /* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/effect-target.mjs */ "./node_modules/swiper/shared/effect-target.mjs"
          );
        /* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/effect-virtual-transition-end.mjs */ "./node_modules/swiper/shared/effect-virtual-transition-end.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function EffectFade(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            fadeEffect: {
              crossFade: false,
            },
          });
          const setTranslate = () => {
            const { slides } = swiper;
            const params = swiper.params.fadeEffect;
            for (let i = 0; i < slides.length; i += 1) {
              const slideEl = swiper.slides[i];
              const offset = slideEl.swiperSlideOffset;
              let tx = -offset;
              if (!swiper.params.virtualTranslate) tx -= swiper.translate;
              let ty = 0;
              if (!swiper.isHorizontal()) {
                ty = tx;
                tx = 0;
              }
              const slideOpacity = swiper.params.fadeEffect.crossFade
                ? Math.max(1 - Math.abs(slideEl.progress), 0)
                : 1 + Math.min(Math.max(slideEl.progress, -1), 0);
              const targetEl = Object(
                _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__["e"]
              )(params, slideEl);
              targetEl.style.opacity = slideOpacity;
              targetEl.style.transform = `translate3d(${tx}px, ${ty}px, 0px)`;
            }
          };
          const setTransition = (duration) => {
            const transformElements = swiper.slides.map((slideEl) =>
              Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__["g"])(
                slideEl
              )
            );
            transformElements.forEach((el) => {
              el.style.transitionDuration = `${duration}ms`;
            });
            Object(
              _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__[
                "e"
              ]
            )({
              swiper,
              duration,
              transformElements,
              allSlides: true,
            });
          };
          Object(_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__["e"])({
            effect: "fade",
            swiper,
            on,
            setTranslate,
            setTransition,
            overwriteParams: () => ({
              slidesPerView: 1,
              slidesPerGroup: 1,
              watchSlidesProgress: true,
              spaceBetween: 0,
              virtualTranslate: !swiper.params.cssMode,
            }),
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/effect-flip.mjs":
      /*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-flip.mjs ***!
  \*****************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return EffectFlip;
          }
        );
        /* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/create-shadow.mjs */ "./node_modules/swiper/shared/create-shadow.mjs"
          );
        /* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/effect-init.mjs */ "./node_modules/swiper/shared/effect-init.mjs"
          );
        /* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/effect-target.mjs */ "./node_modules/swiper/shared/effect-target.mjs"
          );
        /* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/effect-virtual-transition-end.mjs */ "./node_modules/swiper/shared/effect-virtual-transition-end.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function EffectFlip(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            flipEffect: {
              slideShadows: true,
              limitRotation: true,
            },
          });
          const createSlideShadows = (slideEl, progress) => {
            let shadowBefore = swiper.isHorizontal()
              ? slideEl.querySelector(".swiper-slide-shadow-left")
              : slideEl.querySelector(".swiper-slide-shadow-top");
            let shadowAfter = swiper.isHorizontal()
              ? slideEl.querySelector(".swiper-slide-shadow-right")
              : slideEl.querySelector(".swiper-slide-shadow-bottom");
            if (!shadowBefore) {
              shadowBefore = Object(
                _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__["c"]
              )("flip", slideEl, swiper.isHorizontal() ? "left" : "top");
            }
            if (!shadowAfter) {
              shadowAfter = Object(
                _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__["c"]
              )("flip", slideEl, swiper.isHorizontal() ? "right" : "bottom");
            }
            if (shadowBefore)
              shadowBefore.style.opacity = Math.max(-progress, 0);
            if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);
          };
          const recreateShadows = () => {
            // Set shadows
            swiper.params.flipEffect;
            swiper.slides.forEach((slideEl) => {
              let progress = slideEl.progress;
              if (swiper.params.flipEffect.limitRotation) {
                progress = Math.max(Math.min(slideEl.progress, 1), -1);
              }
              createSlideShadows(slideEl, progress);
            });
          };
          const setTranslate = () => {
            const { slides, rtlTranslate: rtl } = swiper;
            const params = swiper.params.flipEffect;
            for (let i = 0; i < slides.length; i += 1) {
              const slideEl = slides[i];
              let progress = slideEl.progress;
              if (swiper.params.flipEffect.limitRotation) {
                progress = Math.max(Math.min(slideEl.progress, 1), -1);
              }
              const offset = slideEl.swiperSlideOffset;
              const rotate = -180 * progress;
              let rotateY = rotate;
              let rotateX = 0;
              let tx = swiper.params.cssMode
                ? -offset - swiper.translate
                : -offset;
              let ty = 0;
              if (!swiper.isHorizontal()) {
                ty = tx;
                tx = 0;
                rotateX = -rotateY;
                rotateY = 0;
              } else if (rtl) {
                rotateY = -rotateY;
              }
              if (swiper.browser && swiper.browser.need3dFix) {
                if ((Math.abs(rotateY) / 90) % 2 === 1) {
                  rotateY += 0.001;
                }
                if ((Math.abs(rotateX) / 90) % 2 === 1) {
                  rotateX += 0.001;
                }
              }
              slideEl.style.zIndex =
                -Math.abs(Math.round(progress)) + slides.length;
              if (params.slideShadows) {
                createSlideShadows(slideEl, progress);
              }
              const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
              const targetEl = Object(
                _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__["e"]
              )(params, slideEl);
              targetEl.style.transform = transform;
            }
          };
          const setTransition = (duration) => {
            const transformElements = swiper.slides.map((slideEl) =>
              Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__["g"])(
                slideEl
              )
            );
            transformElements.forEach((el) => {
              el.style.transitionDuration = `${duration}ms`;
              el.querySelectorAll(
                ".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left"
              ).forEach((shadowEl) => {
                shadowEl.style.transitionDuration = `${duration}ms`;
              });
            });
            Object(
              _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__[
                "e"
              ]
            )({
              swiper,
              duration,
              transformElements,
            });
          };
          Object(_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])({
            effect: "flip",
            swiper,
            on,
            setTranslate,
            setTransition,
            recreateShadows,
            getEffectParams: () => swiper.params.flipEffect,
            perspective: () => true,
            overwriteParams: () => ({
              slidesPerView: 1,
              slidesPerGroup: 1,
              watchSlidesProgress: true,
              spaceBetween: 0,
              virtualTranslate: !swiper.params.cssMode,
            }),
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/free-mode.mjs":
      /*!***************************************************!*\
  !*** ./node_modules/swiper/modules/free-mode.mjs ***!
  \***************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return freeMode;
          }
        );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function freeMode(_ref) {
          let { swiper, extendParams, emit, once } = _ref;
          extendParams({
            freeMode: {
              enabled: false,
              momentum: true,
              momentumRatio: 1,
              momentumBounce: true,
              momentumBounceRatio: 1,
              momentumVelocityRatio: 1,
              sticky: false,
              minimumVelocity: 0.02,
            },
          });
          function onTouchStart() {
            if (swiper.params.cssMode) return;
            const translate = swiper.getTranslate();
            swiper.setTranslate(translate);
            swiper.setTransition(0);
            swiper.touchEventsData.velocities.length = 0;
            swiper.freeMode.onTouchEnd({
              currentPos: swiper.rtl ? swiper.translate : -swiper.translate,
            });
          }
          function onTouchMove() {
            if (swiper.params.cssMode) return;
            const { touchEventsData: data, touches } = swiper;
            // Velocity
            if (data.velocities.length === 0) {
              data.velocities.push({
                position: touches[swiper.isHorizontal() ? "startX" : "startY"],
                time: data.touchStartTime,
              });
            }
            data.velocities.push({
              position:
                touches[swiper.isHorizontal() ? "currentX" : "currentY"],
              time: Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["d"]
              )(),
            });
          }
          function onTouchEnd(_ref2) {
            let { currentPos } = _ref2;
            if (swiper.params.cssMode) return;
            const {
              params,
              wrapperEl,
              rtlTranslate: rtl,
              snapGrid,
              touchEventsData: data,
            } = swiper;
            // Time diff
            const touchEndTime = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["d"]
            )();
            const timeDiff = touchEndTime - data.touchStartTime;
            if (currentPos < -swiper.minTranslate()) {
              swiper.slideTo(swiper.activeIndex);
              return;
            }
            if (currentPos > -swiper.maxTranslate()) {
              if (swiper.slides.length < snapGrid.length) {
                swiper.slideTo(snapGrid.length - 1);
              } else {
                swiper.slideTo(swiper.slides.length - 1);
              }
              return;
            }
            if (params.freeMode.momentum) {
              if (data.velocities.length > 1) {
                const lastMoveEvent = data.velocities.pop();
                const velocityEvent = data.velocities.pop();
                const distance =
                  lastMoveEvent.position - velocityEvent.position;
                const time = lastMoveEvent.time - velocityEvent.time;
                swiper.velocity = distance / time;
                swiper.velocity /= 2;
                if (
                  Math.abs(swiper.velocity) < params.freeMode.minimumVelocity
                ) {
                  swiper.velocity = 0;
                }
                // this implies that the user stopped moving a finger then released.
                // There would be no events with distance zero, so the last event is stale.
                if (
                  time > 150 ||
                  Object(
                    _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["d"]
                  )() -
                    lastMoveEvent.time >
                    300
                ) {
                  swiper.velocity = 0;
                }
              } else {
                swiper.velocity = 0;
              }
              swiper.velocity *= params.freeMode.momentumVelocityRatio;
              data.velocities.length = 0;
              let momentumDuration = 1000 * params.freeMode.momentumRatio;
              const momentumDistance = swiper.velocity * momentumDuration;
              let newPosition = swiper.translate + momentumDistance;
              if (rtl) newPosition = -newPosition;
              let doBounce = false;
              let afterBouncePosition;
              const bounceAmount =
                Math.abs(swiper.velocity) *
                20 *
                params.freeMode.momentumBounceRatio;
              let needsLoopFix;
              if (newPosition < swiper.maxTranslate()) {
                if (params.freeMode.momentumBounce) {
                  if (newPosition + swiper.maxTranslate() < -bounceAmount) {
                    newPosition = swiper.maxTranslate() - bounceAmount;
                  }
                  afterBouncePosition = swiper.maxTranslate();
                  doBounce = true;
                  data.allowMomentumBounce = true;
                } else {
                  newPosition = swiper.maxTranslate();
                }
                if (params.loop && params.centeredSlides) needsLoopFix = true;
              } else if (newPosition > swiper.minTranslate()) {
                if (params.freeMode.momentumBounce) {
                  if (newPosition - swiper.minTranslate() > bounceAmount) {
                    newPosition = swiper.minTranslate() + bounceAmount;
                  }
                  afterBouncePosition = swiper.minTranslate();
                  doBounce = true;
                  data.allowMomentumBounce = true;
                } else {
                  newPosition = swiper.minTranslate();
                }
                if (params.loop && params.centeredSlides) needsLoopFix = true;
              } else if (params.freeMode.sticky) {
                let nextSlide;
                for (let j = 0; j < snapGrid.length; j += 1) {
                  if (snapGrid[j] > -newPosition) {
                    nextSlide = j;
                    break;
                  }
                }
                if (
                  Math.abs(snapGrid[nextSlide] - newPosition) <
                    Math.abs(snapGrid[nextSlide - 1] - newPosition) ||
                  swiper.swipeDirection === "next"
                ) {
                  newPosition = snapGrid[nextSlide];
                } else {
                  newPosition = snapGrid[nextSlide - 1];
                }
                newPosition = -newPosition;
              }
              if (needsLoopFix) {
                once("transitionEnd", () => {
                  swiper.loopFix();
                });
              }
              // Fix duration
              if (swiper.velocity !== 0) {
                if (rtl) {
                  momentumDuration = Math.abs(
                    (-newPosition - swiper.translate) / swiper.velocity
                  );
                } else {
                  momentumDuration = Math.abs(
                    (newPosition - swiper.translate) / swiper.velocity
                  );
                }
                if (params.freeMode.sticky) {
                  // If freeMode.sticky is active and the user ends a swipe with a slow-velocity
                  // event, then durations can be 20+ seconds to slide one (or zero!) slides.
                  // It's easy to see this when simulating touch with mouse events. To fix this,
                  // limit single-slide swipes to the default slide duration. This also has the
                  // nice side effect of matching slide speed if the user stopped moving before
                  // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
                  // For faster swipes, also apply limits (albeit higher ones).
                  const moveDistance = Math.abs(
                    (rtl ? -newPosition : newPosition) - swiper.translate
                  );
                  const currentSlideSize =
                    swiper.slidesSizesGrid[swiper.activeIndex];
                  if (moveDistance < currentSlideSize) {
                    momentumDuration = params.speed;
                  } else if (moveDistance < 2 * currentSlideSize) {
                    momentumDuration = params.speed * 1.5;
                  } else {
                    momentumDuration = params.speed * 2.5;
                  }
                }
              } else if (params.freeMode.sticky) {
                swiper.slideToClosest();
                return;
              }
              if (params.freeMode.momentumBounce && doBounce) {
                swiper.updateProgress(afterBouncePosition);
                swiper.setTransition(momentumDuration);
                swiper.setTranslate(newPosition);
                swiper.transitionStart(true, swiper.swipeDirection);
                swiper.animating = true;
                Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["k"])(
                  wrapperEl,
                  () => {
                    if (
                      !swiper ||
                      swiper.destroyed ||
                      !data.allowMomentumBounce
                    )
                      return;
                    emit("momentumBounce");
                    swiper.setTransition(params.speed);
                    setTimeout(() => {
                      swiper.setTranslate(afterBouncePosition);
                      Object(
                        _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["k"]
                      )(wrapperEl, () => {
                        if (!swiper || swiper.destroyed) return;
                        swiper.transitionEnd();
                      });
                    }, 0);
                  }
                );
              } else if (swiper.velocity) {
                emit("_freeModeNoMomentumRelease");
                swiper.updateProgress(newPosition);
                swiper.setTransition(momentumDuration);
                swiper.setTranslate(newPosition);
                swiper.transitionStart(true, swiper.swipeDirection);
                if (!swiper.animating) {
                  swiper.animating = true;
                  Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["k"])(
                    wrapperEl,
                    () => {
                      if (!swiper || swiper.destroyed) return;
                      swiper.transitionEnd();
                    }
                  );
                }
              } else {
                swiper.updateProgress(newPosition);
              }
              swiper.updateActiveIndex();
              swiper.updateSlidesClasses();
            } else if (params.freeMode.sticky) {
              swiper.slideToClosest();
              return;
            } else if (params.freeMode) {
              emit("_freeModeNoMomentumRelease");
            }
            if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {
              emit("_freeModeStaticRelease");
              swiper.updateProgress();
              swiper.updateActiveIndex();
              swiper.updateSlidesClasses();
            }
          }
          Object.assign(swiper, {
            freeMode: {
              onTouchStart,
              onTouchMove,
              onTouchEnd,
            },
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/grid.mjs":
      /*!**********************************************!*\
  !*** ./node_modules/swiper/modules/grid.mjs ***!
  \**********************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Grid;
          }
        );
        function Grid(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            grid: {
              rows: 1,
              fill: "column",
            },
          });
          let slidesNumberEvenToRows;
          let slidesPerRow;
          let numFullColumns;
          let wasMultiRow;
          const getSpaceBetween = () => {
            let spaceBetween = swiper.params.spaceBetween;
            if (
              typeof spaceBetween === "string" &&
              spaceBetween.indexOf("%") >= 0
            ) {
              spaceBetween =
                (parseFloat(spaceBetween.replace("%", "")) / 100) * swiper.size;
            } else if (typeof spaceBetween === "string") {
              spaceBetween = parseFloat(spaceBetween);
            }
            return spaceBetween;
          };
          const initSlides = (slides) => {
            const { slidesPerView } = swiper.params;
            const { rows, fill } = swiper.params.grid;
            const slidesLength =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.virtual.slides.length
                : slides.length;
            numFullColumns = Math.floor(slidesLength / rows);
            if (Math.floor(slidesLength / rows) === slidesLength / rows) {
              slidesNumberEvenToRows = slidesLength;
            } else {
              slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;
            }
            if (slidesPerView !== "auto" && fill === "row") {
              slidesNumberEvenToRows = Math.max(
                slidesNumberEvenToRows,
                slidesPerView * rows
              );
            }
            slidesPerRow = slidesNumberEvenToRows / rows;
          };
          const unsetSlides = () => {
            if (swiper.slides) {
              swiper.slides.forEach((slide) => {
                if (slide.swiperSlideGridSet) {
                  slide.style.height = "";
                  slide.style[swiper.getDirectionLabel("margin-top")] = "";
                }
              });
            }
          };
          const updateSlide = (i, slide, slides) => {
            const { slidesPerGroup } = swiper.params;
            const spaceBetween = getSpaceBetween();
            const { rows, fill } = swiper.params.grid;
            const slidesLength =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.virtual.slides.length
                : slides.length;
            // Set slides order
            let newSlideOrderIndex;
            let column;
            let row;
            if (fill === "row" && slidesPerGroup > 1) {
              const groupIndex = Math.floor(i / (slidesPerGroup * rows));
              const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;
              const columnsInGroup =
                groupIndex === 0
                  ? slidesPerGroup
                  : Math.min(
                      Math.ceil(
                        (slidesLength - groupIndex * rows * slidesPerGroup) /
                          rows
                      ),
                      slidesPerGroup
                    );
              row = Math.floor(slideIndexInGroup / columnsInGroup);
              column =
                slideIndexInGroup -
                row * columnsInGroup +
                groupIndex * slidesPerGroup;
              newSlideOrderIndex =
                column + (row * slidesNumberEvenToRows) / rows;
              slide.style.order = newSlideOrderIndex;
            } else if (fill === "column") {
              column = Math.floor(i / rows);
              row = i - column * rows;
              if (
                column > numFullColumns ||
                (column === numFullColumns && row === rows - 1)
              ) {
                row += 1;
                if (row >= rows) {
                  row = 0;
                  column += 1;
                }
              }
            } else {
              row = Math.floor(i / slidesPerRow);
              column = i - row * slidesPerRow;
            }
            slide.row = row;
            slide.column = column;
            slide.style.height = `calc((100% - ${
              (rows - 1) * spaceBetween
            }px) / ${rows})`;
            slide.style[swiper.getDirectionLabel("margin-top")] =
              row !== 0 ? spaceBetween && `${spaceBetween}px` : "";
            slide.swiperSlideGridSet = true;
          };
          const updateWrapperSize = (slideSize, snapGrid) => {
            const { centeredSlides, roundLengths } = swiper.params;
            const spaceBetween = getSpaceBetween();
            const { rows } = swiper.params.grid;
            swiper.virtualSize =
              (slideSize + spaceBetween) * slidesNumberEvenToRows;
            swiper.virtualSize =
              Math.ceil(swiper.virtualSize / rows) - spaceBetween;
            if (!swiper.params.cssMode) {
              swiper.wrapperEl.style[swiper.getDirectionLabel("width")] = `${
                swiper.virtualSize + spaceBetween
              }px`;
            }
            if (centeredSlides) {
              const newSlidesGrid = [];
              for (let i = 0; i < snapGrid.length; i += 1) {
                let slidesGridItem = snapGrid[i];
                if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);
                if (snapGrid[i] < swiper.virtualSize + snapGrid[0])
                  newSlidesGrid.push(slidesGridItem);
              }
              snapGrid.splice(0, snapGrid.length);
              snapGrid.push(...newSlidesGrid);
            }
          };
          const onInit = () => {
            wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;
          };
          const onUpdate = () => {
            const { params, el } = swiper;
            const isMultiRow = params.grid && params.grid.rows > 1;
            if (wasMultiRow && !isMultiRow) {
              el.classList.remove(
                `${params.containerModifierClass}grid`,
                `${params.containerModifierClass}grid-column`
              );
              numFullColumns = 1;
              swiper.emitContainerClasses();
            } else if (!wasMultiRow && isMultiRow) {
              el.classList.add(`${params.containerModifierClass}grid`);
              if (params.grid.fill === "column") {
                el.classList.add(`${params.containerModifierClass}grid-column`);
              }
              swiper.emitContainerClasses();
            }
            wasMultiRow = isMultiRow;
          };
          on("init", onInit);
          on("update", onUpdate);
          swiper.grid = {
            initSlides,
            unsetSlides,
            updateSlide,
            updateWrapperSize,
          };
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/hash-navigation.mjs":
      /*!*********************************************************!*\
  !*** ./node_modules/swiper/modules/hash-navigation.mjs ***!
  \*********************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return HashNavigation;
          }
        );
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function HashNavigation(_ref) {
          let { swiper, extendParams, emit, on } = _ref;
          let initialized = false;
          const document = Object(
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )();
          const window = Object(
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          extendParams({
            hashNavigation: {
              enabled: false,
              replaceState: false,
              watchState: false,
              getSlideIndex(_s, hash) {
                if (swiper.virtual && swiper.params.virtual.enabled) {
                  const slideWithHash = swiper.slides.filter(
                    (slideEl) => slideEl.getAttribute("data-hash") === hash
                  )[0];
                  if (!slideWithHash) return 0;
                  const index = parseInt(
                    slideWithHash.getAttribute("data-swiper-slide-index"),
                    10
                  );
                  return index;
                }
                return swiper.getSlideIndex(
                  Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
                    swiper.slidesEl,
                    `.${swiper.params.slideClass}[data-hash="${hash}"], swiper-slide[data-hash="${hash}"]`
                  )[0]
                );
              },
            },
          });
          const onHashChange = () => {
            emit("hashChange");
            const newHash = document.location.hash.replace("#", "");
            const activeSlideEl =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.slidesEl.querySelector(
                    `[data-swiper-slide-index="${swiper.activeIndex}"]`
                  )
                : swiper.slides[swiper.activeIndex];
            const activeSlideHash = activeSlideEl
              ? activeSlideEl.getAttribute("data-hash")
              : "";
            if (newHash !== activeSlideHash) {
              const newIndex = swiper.params.hashNavigation.getSlideIndex(
                swiper,
                newHash
              );
              if (typeof newIndex === "undefined" || Number.isNaN(newIndex))
                return;
              swiper.slideTo(newIndex);
            }
          };
          const setHash = () => {
            if (!initialized || !swiper.params.hashNavigation.enabled) return;
            const activeSlideEl =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.slidesEl.querySelector(
                    `[data-swiper-slide-index="${swiper.activeIndex}"]`
                  )
                : swiper.slides[swiper.activeIndex];
            const activeSlideHash = activeSlideEl
              ? activeSlideEl.getAttribute("data-hash") ||
                activeSlideEl.getAttribute("data-history")
              : "";
            if (
              swiper.params.hashNavigation.replaceState &&
              window.history &&
              window.history.replaceState
            ) {
              window.history.replaceState(
                null,
                null,
                `#${activeSlideHash}` || ""
              );
              emit("hashSet");
            } else {
              document.location.hash = activeSlideHash || "";
              emit("hashSet");
            }
          };
          const init = () => {
            if (
              !swiper.params.hashNavigation.enabled ||
              (swiper.params.history && swiper.params.history.enabled)
            )
              return;
            initialized = true;
            const hash = document.location.hash.replace("#", "");
            if (hash) {
              const speed = 0;
              const index = swiper.params.hashNavigation.getSlideIndex(
                swiper,
                hash
              );
              swiper.slideTo(
                index || 0,
                speed,
                swiper.params.runCallbacksOnInit,
                true
              );
            }
            if (swiper.params.hashNavigation.watchState) {
              window.addEventListener("hashchange", onHashChange);
            }
          };
          const destroy = () => {
            if (swiper.params.hashNavigation.watchState) {
              window.removeEventListener("hashchange", onHashChange);
            }
          };
          on("init", () => {
            if (swiper.params.hashNavigation.enabled) {
              init();
            }
          });
          on("destroy", () => {
            if (swiper.params.hashNavigation.enabled) {
              destroy();
            }
          });
          on("transitionEnd _freeModeNoMomentumRelease", () => {
            if (initialized) {
              setHash();
            }
          });
          on("slideChange", () => {
            if (initialized && swiper.params.cssMode) {
              setHash();
            }
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/history.mjs":
      /*!*************************************************!*\
  !*** ./node_modules/swiper/modules/history.mjs ***!
  \*************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return History;
          }
        );
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );

        function History(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            history: {
              enabled: false,
              root: "",
              replaceState: false,
              key: "slides",
              keepQuery: false,
            },
          });
          let initialized = false;
          let paths = {};
          const slugify = (text) => {
            return text
              .toString()
              .replace(/\s+/g, "-")
              .replace(/[^\w-]+/g, "")
              .replace(/--+/g, "-")
              .replace(/^-+/, "")
              .replace(/-+$/, "");
          };
          const getPathValues = (urlOverride) => {
            const window = Object(
              _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
            )();
            let location;
            if (urlOverride) {
              location = new URL(urlOverride);
            } else {
              location = window.location;
            }
            const pathArray = location.pathname
              .slice(1)
              .split("/")
              .filter((part) => part !== "");
            const total = pathArray.length;
            const key = pathArray[total - 2];
            const value = pathArray[total - 1];
            return {
              key,
              value,
            };
          };
          const setHistory = (key, index) => {
            const window = Object(
              _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
            )();
            if (!initialized || !swiper.params.history.enabled) return;
            let location;
            if (swiper.params.url) {
              location = new URL(swiper.params.url);
            } else {
              location = window.location;
            }
            const slide =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.slidesEl.querySelector(
                    `[data-swiper-slide-index="${index}"]`
                  )
                : swiper.slides[index];
            let value = slugify(slide.getAttribute("data-history"));
            if (swiper.params.history.root.length > 0) {
              let root = swiper.params.history.root;
              if (root[root.length - 1] === "/")
                root = root.slice(0, root.length - 1);
              value = `${root}/${key ? `${key}/` : ""}${value}`;
            } else if (!location.pathname.includes(key)) {
              value = `${key ? `${key}/` : ""}${value}`;
            }
            if (swiper.params.history.keepQuery) {
              value += location.search;
            }
            const currentState = window.history.state;
            if (currentState && currentState.value === value) {
              return;
            }
            if (swiper.params.history.replaceState) {
              window.history.replaceState(
                {
                  value,
                },
                null,
                value
              );
            } else {
              window.history.pushState(
                {
                  value,
                },
                null,
                value
              );
            }
          };
          const scrollToSlide = (speed, value, runCallbacks) => {
            if (value) {
              for (
                let i = 0, length = swiper.slides.length;
                i < length;
                i += 1
              ) {
                const slide = swiper.slides[i];
                const slideHistory = slugify(
                  slide.getAttribute("data-history")
                );
                if (slideHistory === value) {
                  const index = swiper.getSlideIndex(slide);
                  swiper.slideTo(index, speed, runCallbacks);
                }
              }
            } else {
              swiper.slideTo(0, speed, runCallbacks);
            }
          };
          const setHistoryPopState = () => {
            paths = getPathValues(swiper.params.url);
            scrollToSlide(swiper.params.speed, paths.value, false);
          };
          const init = () => {
            const window = Object(
              _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
            )();
            if (!swiper.params.history) return;
            if (!window.history || !window.history.pushState) {
              swiper.params.history.enabled = false;
              swiper.params.hashNavigation.enabled = true;
              return;
            }
            initialized = true;
            paths = getPathValues(swiper.params.url);
            if (!paths.key && !paths.value) {
              if (!swiper.params.history.replaceState) {
                window.addEventListener("popstate", setHistoryPopState);
              }
              return;
            }
            scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);
            if (!swiper.params.history.replaceState) {
              window.addEventListener("popstate", setHistoryPopState);
            }
          };
          const destroy = () => {
            const window = Object(
              _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
            )();
            if (!swiper.params.history.replaceState) {
              window.removeEventListener("popstate", setHistoryPopState);
            }
          };
          on("init", () => {
            if (swiper.params.history.enabled) {
              init();
            }
          });
          on("destroy", () => {
            if (swiper.params.history.enabled) {
              destroy();
            }
          });
          on("transitionEnd _freeModeNoMomentumRelease", () => {
            if (initialized) {
              setHistory(swiper.params.history.key, swiper.activeIndex);
            }
          });
          on("slideChange", () => {
            if (initialized && swiper.params.cssMode) {
              setHistory(swiper.params.history.key, swiper.activeIndex);
            }
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/keyboard.mjs":
      /*!**************************************************!*\
  !*** ./node_modules/swiper/modules/keyboard.mjs ***!
  \**************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Keyboard;
          }
        );
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        /* eslint-disable consistent-return */
        function Keyboard(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const document = Object(
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )();
          const window = Object(
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          swiper.keyboard = {
            enabled: false,
          };
          extendParams({
            keyboard: {
              enabled: false,
              onlyInViewport: true,
              pageUpDown: true,
            },
          });
          function handle(event) {
            if (!swiper.enabled) return;
            const { rtlTranslate: rtl } = swiper;
            let e = event;
            if (e.originalEvent) e = e.originalEvent; // jquery fix
            const kc = e.keyCode || e.charCode;
            const pageUpDown = swiper.params.keyboard.pageUpDown;
            const isPageUp = pageUpDown && kc === 33;
            const isPageDown = pageUpDown && kc === 34;
            const isArrowLeft = kc === 37;
            const isArrowRight = kc === 39;
            const isArrowUp = kc === 38;
            const isArrowDown = kc === 40;
            // Directions locks
            if (
              !swiper.allowSlideNext &&
              ((swiper.isHorizontal() && isArrowRight) ||
                (swiper.isVertical() && isArrowDown) ||
                isPageDown)
            ) {
              return false;
            }
            if (
              !swiper.allowSlidePrev &&
              ((swiper.isHorizontal() && isArrowLeft) ||
                (swiper.isVertical() && isArrowUp) ||
                isPageUp)
            ) {
              return false;
            }
            if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
              return undefined;
            }
            if (
              document.activeElement &&
              document.activeElement.nodeName &&
              (document.activeElement.nodeName.toLowerCase() === "input" ||
                document.activeElement.nodeName.toLowerCase() === "textarea")
            ) {
              return undefined;
            }
            if (
              swiper.params.keyboard.onlyInViewport &&
              (isPageUp ||
                isPageDown ||
                isArrowLeft ||
                isArrowRight ||
                isArrowUp ||
                isArrowDown)
            ) {
              let inView = false;
              // Check that swiper should be inside of visible area of window
              if (
                Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["a"])(
                  swiper.el,
                  `.${swiper.params.slideClass}, swiper-slide`
                ).length > 0 &&
                Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["a"])(
                  swiper.el,
                  `.${swiper.params.slideActiveClass}`
                ).length === 0
              ) {
                return undefined;
              }
              const el = swiper.el;
              const swiperWidth = el.clientWidth;
              const swiperHeight = el.clientHeight;
              const windowWidth = window.innerWidth;
              const windowHeight = window.innerHeight;
              const swiperOffset = Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["b"]
              )(el);
              if (rtl) swiperOffset.left -= el.scrollLeft;
              const swiperCoord = [
                [swiperOffset.left, swiperOffset.top],
                [swiperOffset.left + swiperWidth, swiperOffset.top],
                [swiperOffset.left, swiperOffset.top + swiperHeight],
                [
                  swiperOffset.left + swiperWidth,
                  swiperOffset.top + swiperHeight,
                ],
              ];
              for (let i = 0; i < swiperCoord.length; i += 1) {
                const point = swiperCoord[i];
                if (
                  point[0] >= 0 &&
                  point[0] <= windowWidth &&
                  point[1] >= 0 &&
                  point[1] <= windowHeight
                ) {
                  if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line
                  inView = true;
                }
              }
              if (!inView) return undefined;
            }
            if (swiper.isHorizontal()) {
              if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {
                if (e.preventDefault) e.preventDefault();
                else e.returnValue = false;
              }
              if (
                ((isPageDown || isArrowRight) && !rtl) ||
                ((isPageUp || isArrowLeft) && rtl)
              )
                swiper.slideNext();
              if (
                ((isPageUp || isArrowLeft) && !rtl) ||
                ((isPageDown || isArrowRight) && rtl)
              )
                swiper.slidePrev();
            } else {
              if (isPageUp || isPageDown || isArrowUp || isArrowDown) {
                if (e.preventDefault) e.preventDefault();
                else e.returnValue = false;
              }
              if (isPageDown || isArrowDown) swiper.slideNext();
              if (isPageUp || isArrowUp) swiper.slidePrev();
            }
            emit("keyPress", kc);
            return undefined;
          }
          function enable() {
            if (swiper.keyboard.enabled) return;
            document.addEventListener("keydown", handle);
            swiper.keyboard.enabled = true;
          }
          function disable() {
            if (!swiper.keyboard.enabled) return;
            document.removeEventListener("keydown", handle);
            swiper.keyboard.enabled = false;
          }
          on("init", () => {
            if (swiper.params.keyboard.enabled) {
              enable();
            }
          });
          on("destroy", () => {
            if (swiper.keyboard.enabled) {
              disable();
            }
          });
          Object.assign(swiper.keyboard, {
            enable,
            disable,
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/manipulation.mjs":
      /*!******************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation.mjs ***!
  \******************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Manipulation;
          }
        );
        function appendSlide(slides) {
          const swiper = this;
          const { params, slidesEl } = swiper;
          if (params.loop) {
            swiper.loopDestroy();
          }
          const appendElement = (slideEl) => {
            if (typeof slideEl === "string") {
              const tempDOM = document.createElement("div");
              tempDOM.innerHTML = slideEl;
              slidesEl.append(tempDOM.children[0]);
              tempDOM.innerHTML = "";
            } else {
              slidesEl.append(slideEl);
            }
          };
          if (typeof slides === "object" && "length" in slides) {
            for (let i = 0; i < slides.length; i += 1) {
              if (slides[i]) appendElement(slides[i]);
            }
          } else {
            appendElement(slides);
          }
          swiper.recalcSlides();
          if (params.loop) {
            swiper.loopCreate();
          }
          if (!params.observer || swiper.isElement) {
            swiper.update();
          }
        }

        function prependSlide(slides) {
          const swiper = this;
          const { params, activeIndex, slidesEl } = swiper;
          if (params.loop) {
            swiper.loopDestroy();
          }
          let newActiveIndex = activeIndex + 1;
          const prependElement = (slideEl) => {
            if (typeof slideEl === "string") {
              const tempDOM = document.createElement("div");
              tempDOM.innerHTML = slideEl;
              slidesEl.prepend(tempDOM.children[0]);
              tempDOM.innerHTML = "";
            } else {
              slidesEl.prepend(slideEl);
            }
          };
          if (typeof slides === "object" && "length" in slides) {
            for (let i = 0; i < slides.length; i += 1) {
              if (slides[i]) prependElement(slides[i]);
            }
            newActiveIndex = activeIndex + slides.length;
          } else {
            prependElement(slides);
          }
          swiper.recalcSlides();
          if (params.loop) {
            swiper.loopCreate();
          }
          if (!params.observer || swiper.isElement) {
            swiper.update();
          }
          swiper.slideTo(newActiveIndex, 0, false);
        }

        function addSlide(index, slides) {
          const swiper = this;
          const { params, activeIndex, slidesEl } = swiper;
          let activeIndexBuffer = activeIndex;
          if (params.loop) {
            activeIndexBuffer -= swiper.loopedSlides;
            swiper.loopDestroy();
            swiper.recalcSlides();
          }
          const baseLength = swiper.slides.length;
          if (index <= 0) {
            swiper.prependSlide(slides);
            return;
          }
          if (index >= baseLength) {
            swiper.appendSlide(slides);
            return;
          }
          let newActiveIndex =
            activeIndexBuffer > index
              ? activeIndexBuffer + 1
              : activeIndexBuffer;
          const slidesBuffer = [];
          for (let i = baseLength - 1; i >= index; i -= 1) {
            const currentSlide = swiper.slides[i];
            currentSlide.remove();
            slidesBuffer.unshift(currentSlide);
          }
          if (typeof slides === "object" && "length" in slides) {
            for (let i = 0; i < slides.length; i += 1) {
              if (slides[i]) slidesEl.append(slides[i]);
            }
            newActiveIndex =
              activeIndexBuffer > index
                ? activeIndexBuffer + slides.length
                : activeIndexBuffer;
          } else {
            slidesEl.append(slides);
          }
          for (let i = 0; i < slidesBuffer.length; i += 1) {
            slidesEl.append(slidesBuffer[i]);
          }
          swiper.recalcSlides();
          if (params.loop) {
            swiper.loopCreate();
          }
          if (!params.observer || swiper.isElement) {
            swiper.update();
          }
          if (params.loop) {
            swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
          } else {
            swiper.slideTo(newActiveIndex, 0, false);
          }
        }

        function removeSlide(slidesIndexes) {
          const swiper = this;
          const { params, activeIndex } = swiper;
          let activeIndexBuffer = activeIndex;
          if (params.loop) {
            activeIndexBuffer -= swiper.loopedSlides;
            swiper.loopDestroy();
          }
          let newActiveIndex = activeIndexBuffer;
          let indexToRemove;
          if (typeof slidesIndexes === "object" && "length" in slidesIndexes) {
            for (let i = 0; i < slidesIndexes.length; i += 1) {
              indexToRemove = slidesIndexes[i];
              if (swiper.slides[indexToRemove])
                swiper.slides[indexToRemove].remove();
              if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
            }
            newActiveIndex = Math.max(newActiveIndex, 0);
          } else {
            indexToRemove = slidesIndexes;
            if (swiper.slides[indexToRemove])
              swiper.slides[indexToRemove].remove();
            if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
            newActiveIndex = Math.max(newActiveIndex, 0);
          }
          swiper.recalcSlides();
          if (params.loop) {
            swiper.loopCreate();
          }
          if (!params.observer || swiper.isElement) {
            swiper.update();
          }
          if (params.loop) {
            swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
          } else {
            swiper.slideTo(newActiveIndex, 0, false);
          }
        }

        function removeAllSlides() {
          const swiper = this;
          const slidesIndexes = [];
          for (let i = 0; i < swiper.slides.length; i += 1) {
            slidesIndexes.push(i);
          }
          swiper.removeSlide(slidesIndexes);
        }

        function Manipulation(_ref) {
          let { swiper } = _ref;
          Object.assign(swiper, {
            appendSlide: appendSlide.bind(swiper),
            prependSlide: prependSlide.bind(swiper),
            addSlide: addSlide.bind(swiper),
            removeSlide: removeSlide.bind(swiper),
            removeAllSlides: removeAllSlides.bind(swiper),
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/mousewheel.mjs":
      /*!****************************************************!*\
  !*** ./node_modules/swiper/modules/mousewheel.mjs ***!
  \****************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Mousewheel;
          }
        );
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        /* eslint-disable consistent-return */
        function Mousewheel(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const window = Object(
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          extendParams({
            mousewheel: {
              enabled: false,
              releaseOnEdges: false,
              invert: false,
              forceToAxis: false,
              sensitivity: 1,
              eventsTarget: "container",
              thresholdDelta: null,
              thresholdTime: null,
              noMousewheelClass: "swiper-no-mousewheel",
            },
          });
          swiper.mousewheel = {
            enabled: false,
          };
          let timeout;
          let lastScrollTime = Object(
            _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["d"]
          )();
          let lastEventBeforeSnap;
          const recentWheelEvents = [];
          function normalize(e) {
            // Reasonable defaults
            const PIXEL_STEP = 10;
            const LINE_HEIGHT = 40;
            const PAGE_HEIGHT = 800;
            let sX = 0;
            let sY = 0; // spinX, spinY
            let pX = 0;
            let pY = 0; // pixelX, pixelY

            // Legacy
            if ("detail" in e) {
              sY = e.detail;
            }
            if ("wheelDelta" in e) {
              sY = -e.wheelDelta / 120;
            }
            if ("wheelDeltaY" in e) {
              sY = -e.wheelDeltaY / 120;
            }
            if ("wheelDeltaX" in e) {
              sX = -e.wheelDeltaX / 120;
            }

            // side scrolling on FF with DOMMouseScroll
            if ("axis" in e && e.axis === e.HORIZONTAL_AXIS) {
              sX = sY;
              sY = 0;
            }
            pX = sX * PIXEL_STEP;
            pY = sY * PIXEL_STEP;
            if ("deltaY" in e) {
              pY = e.deltaY;
            }
            if ("deltaX" in e) {
              pX = e.deltaX;
            }
            if (e.shiftKey && !pX) {
              // if user scrolls with shift he wants horizontal scroll
              pX = pY;
              pY = 0;
            }
            if ((pX || pY) && e.deltaMode) {
              if (e.deltaMode === 1) {
                // delta in LINE units
                pX *= LINE_HEIGHT;
                pY *= LINE_HEIGHT;
              } else {
                // delta in PAGE units
                pX *= PAGE_HEIGHT;
                pY *= PAGE_HEIGHT;
              }
            }

            // Fall-back if spin cannot be determined
            if (pX && !sX) {
              sX = pX < 1 ? -1 : 1;
            }
            if (pY && !sY) {
              sY = pY < 1 ? -1 : 1;
            }
            return {
              spinX: sX,
              spinY: sY,
              pixelX: pX,
              pixelY: pY,
            };
          }
          function handleMouseEnter() {
            if (!swiper.enabled) return;
            swiper.mouseEntered = true;
          }
          function handleMouseLeave() {
            if (!swiper.enabled) return;
            swiper.mouseEntered = false;
          }
          function animateSlider(newEvent) {
            if (
              swiper.params.mousewheel.thresholdDelta &&
              newEvent.delta < swiper.params.mousewheel.thresholdDelta
            ) {
              // Prevent if delta of wheel scroll delta is below configured threshold
              return false;
            }
            if (
              swiper.params.mousewheel.thresholdTime &&
              Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["d"])() -
                lastScrollTime <
                swiper.params.mousewheel.thresholdTime
            ) {
              // Prevent if time between scrolls is below configured threshold
              return false;
            }

            // If the movement is NOT big enough and
            // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):
            //   Don't go any further (avoid insignificant scroll movement).
            if (
              newEvent.delta >= 6 &&
              Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["d"])() -
                lastScrollTime <
                60
            ) {
              // Return false as a default
              return true;
            }
            // If user is scrolling towards the end:
            //   If the slider hasn't hit the latest slide or
            //   if the slider is a loop and
            //   if the slider isn't moving right now:
            //     Go to next slide and
            //     emit a scroll event.
            // Else (the user is scrolling towards the beginning) and
            // if the slider hasn't hit the first slide or
            // if the slider is a loop and
            // if the slider isn't moving right now:
            //   Go to prev slide and
            //   emit a scroll event.
            if (newEvent.direction < 0) {
              if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
                swiper.slideNext();
                emit("scroll", newEvent.raw);
              }
            } else if (
              (!swiper.isBeginning || swiper.params.loop) &&
              !swiper.animating
            ) {
              swiper.slidePrev();
              emit("scroll", newEvent.raw);
            }
            // If you got here is because an animation has been triggered so store the current time
            lastScrollTime = new window.Date().getTime();
            // Return false as a default
            return false;
          }
          function releaseScroll(newEvent) {
            const params = swiper.params.mousewheel;
            if (newEvent.direction < 0) {
              if (
                swiper.isEnd &&
                !swiper.params.loop &&
                params.releaseOnEdges
              ) {
                // Return true to animate scroll on edges
                return true;
              }
            } else if (
              swiper.isBeginning &&
              !swiper.params.loop &&
              params.releaseOnEdges
            ) {
              // Return true to animate scroll on edges
              return true;
            }
            return false;
          }
          function handle(event) {
            let e = event;
            let disableParentSwiper = true;
            if (!swiper.enabled) return;

            // Ignore event if the target or its parents have the swiper-no-mousewheel class
            if (
              event.target.closest(
                `.${swiper.params.mousewheel.noMousewheelClass}`
              )
            )
              return;
            const params = swiper.params.mousewheel;
            if (swiper.params.cssMode) {
              e.preventDefault();
            }
            let targetEl = swiper.el;
            if (swiper.params.mousewheel.eventsTarget !== "container") {
              targetEl = document.querySelector(
                swiper.params.mousewheel.eventsTarget
              );
            }
            const targetElContainsTarget =
              targetEl && targetEl.contains(e.target);
            if (
              !swiper.mouseEntered &&
              !targetElContainsTarget &&
              !params.releaseOnEdges
            )
              return true;
            if (e.originalEvent) e = e.originalEvent; // jquery fix
            let delta = 0;
            const rtlFactor = swiper.rtlTranslate ? -1 : 1;
            const data = normalize(e);
            if (params.forceToAxis) {
              if (swiper.isHorizontal()) {
                if (Math.abs(data.pixelX) > Math.abs(data.pixelY))
                  delta = -data.pixelX * rtlFactor;
                else return true;
              } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX))
                delta = -data.pixelY;
              else return true;
            } else {
              delta =
                Math.abs(data.pixelX) > Math.abs(data.pixelY)
                  ? -data.pixelX * rtlFactor
                  : -data.pixelY;
            }
            if (delta === 0) return true;
            if (params.invert) delta = -delta;

            // Get the scroll positions
            let positions = swiper.getTranslate() + delta * params.sensitivity;
            if (positions >= swiper.minTranslate())
              positions = swiper.minTranslate();
            if (positions <= swiper.maxTranslate())
              positions = swiper.maxTranslate();

            // When loop is true:
            //     the disableParentSwiper will be true.
            // When loop is false:
            //     if the scroll positions is not on edge,
            //     then the disableParentSwiper will be true.
            //     if the scroll on edge positions,
            //     then the disableParentSwiper will be false.
            disableParentSwiper = swiper.params.loop
              ? true
              : !(
                  positions === swiper.minTranslate() ||
                  positions === swiper.maxTranslate()
                );
            if (disableParentSwiper && swiper.params.nested)
              e.stopPropagation();
            if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {
              // Register the new event in a variable which stores the relevant data
              const newEvent = {
                time: Object(
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["d"]
                )(),
                delta: Math.abs(delta),
                direction: Math.sign(delta),
                raw: event,
              };

              // Keep the most recent events
              if (recentWheelEvents.length >= 2) {
                recentWheelEvents.shift(); // only store the last N events
              }

              const prevEvent = recentWheelEvents.length
                ? recentWheelEvents[recentWheelEvents.length - 1]
                : undefined;
              recentWheelEvents.push(newEvent);

              // If there is at least one previous recorded event:
              //   If direction has changed or
              //   if the scroll is quicker than the previous one:
              //     Animate the slider.
              // Else (this is the first time the wheel is moved):
              //     Animate the slider.
              if (prevEvent) {
                if (
                  newEvent.direction !== prevEvent.direction ||
                  newEvent.delta > prevEvent.delta ||
                  newEvent.time > prevEvent.time + 150
                ) {
                  animateSlider(newEvent);
                }
              } else {
                animateSlider(newEvent);
              }

              // If it's time to release the scroll:
              //   Return now so you don't hit the preventDefault.
              if (releaseScroll(newEvent)) {
                return true;
              }
            } else {
              // Freemode or scrollContainer:

              // If we recently snapped after a momentum scroll, then ignore wheel events
              // to give time for the deceleration to finish. Stop ignoring after 500 msecs
              // or if it's a new scroll (larger delta or inverse sign as last event before
              // an end-of-momentum snap).
              const newEvent = {
                time: Object(
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["d"]
                )(),
                delta: Math.abs(delta),
                direction: Math.sign(delta),
              };
              const ignoreWheelEvents =
                lastEventBeforeSnap &&
                newEvent.time < lastEventBeforeSnap.time + 500 &&
                newEvent.delta <= lastEventBeforeSnap.delta &&
                newEvent.direction === lastEventBeforeSnap.direction;
              if (!ignoreWheelEvents) {
                lastEventBeforeSnap = undefined;
                let position =
                  swiper.getTranslate() + delta * params.sensitivity;
                const wasBeginning = swiper.isBeginning;
                const wasEnd = swiper.isEnd;
                if (position >= swiper.minTranslate())
                  position = swiper.minTranslate();
                if (position <= swiper.maxTranslate())
                  position = swiper.maxTranslate();
                swiper.setTransition(0);
                swiper.setTranslate(position);
                swiper.updateProgress();
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
                if (
                  (!wasBeginning && swiper.isBeginning) ||
                  (!wasEnd && swiper.isEnd)
                ) {
                  swiper.updateSlidesClasses();
                }
                if (swiper.params.loop) {
                  swiper.loopFix({
                    direction: newEvent.direction < 0 ? "next" : "prev",
                    byMousewheel: true,
                  });
                }
                if (swiper.params.freeMode.sticky) {
                  // When wheel scrolling starts with sticky (aka snap) enabled, then detect
                  // the end of a momentum scroll by storing recent (N=15?) wheel events.
                  // 1. do all N events have decreasing or same (absolute value) delta?
                  // 2. did all N events arrive in the last M (M=500?) msecs?
                  // 3. does the earliest event have an (absolute value) delta that's
                  //    at least P (P=1?) larger than the most recent event's delta?
                  // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?
                  // If 1-4 are "yes" then we're near the end of a momentum scroll deceleration.
                  // Snap immediately and ignore remaining wheel events in this scroll.
                  // See comment above for "remaining wheel events in this scroll" determination.
                  // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.
                  clearTimeout(timeout);
                  timeout = undefined;
                  if (recentWheelEvents.length >= 15) {
                    recentWheelEvents.shift(); // only store the last N events
                  }

                  const prevEvent = recentWheelEvents.length
                    ? recentWheelEvents[recentWheelEvents.length - 1]
                    : undefined;
                  const firstEvent = recentWheelEvents[0];
                  recentWheelEvents.push(newEvent);
                  if (
                    prevEvent &&
                    (newEvent.delta > prevEvent.delta ||
                      newEvent.direction !== prevEvent.direction)
                  ) {
                    // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.
                    recentWheelEvents.splice(0);
                  } else if (
                    recentWheelEvents.length >= 15 &&
                    newEvent.time - firstEvent.time < 500 &&
                    firstEvent.delta - newEvent.delta >= 1 &&
                    newEvent.delta <= 6
                  ) {
                    // We're at the end of the deceleration of a momentum scroll, so there's no need
                    // to wait for more events. Snap ASAP on the next tick.
                    // Also, because there's some remaining momentum we'll bias the snap in the
                    // direction of the ongoing scroll because it's better UX for the scroll to snap
                    // in the same direction as the scroll instead of reversing to snap.  Therefore,
                    // if it's already scrolled more than 20% in the current direction, keep going.
                    const snapToThreshold = delta > 0 ? 0.8 : 0.2;
                    lastEventBeforeSnap = newEvent;
                    recentWheelEvents.splice(0);
                    timeout = Object(
                      _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["n"]
                    )(() => {
                      swiper.slideToClosest(
                        swiper.params.speed,
                        true,
                        undefined,
                        snapToThreshold
                      );
                    }, 0); // no delay; move on next tick
                  }

                  if (!timeout) {
                    // if we get here, then we haven't detected the end of a momentum scroll, so
                    // we'll consider a scroll "complete" when there haven't been any wheel events
                    // for 500ms.
                    timeout = Object(
                      _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["n"]
                    )(() => {
                      const snapToThreshold = 0.5;
                      lastEventBeforeSnap = newEvent;
                      recentWheelEvents.splice(0);
                      swiper.slideToClosest(
                        swiper.params.speed,
                        true,
                        undefined,
                        snapToThreshold
                      );
                    }, 500);
                  }
                }

                // Emit event
                if (!ignoreWheelEvents) emit("scroll", e);

                // Stop autoplay
                if (
                  swiper.params.autoplay &&
                  swiper.params.autoplayDisableOnInteraction
                )
                  swiper.autoplay.stop();
                // Return page scroll on edge positions
                if (
                  params.releaseOnEdges &&
                  (position === swiper.minTranslate() ||
                    position === swiper.maxTranslate())
                ) {
                  return true;
                }
              }
            }
            if (e.preventDefault) e.preventDefault();
            else e.returnValue = false;
            return false;
          }
          function events(method) {
            let targetEl = swiper.el;
            if (swiper.params.mousewheel.eventsTarget !== "container") {
              targetEl = document.querySelector(
                swiper.params.mousewheel.eventsTarget
              );
            }
            targetEl[method]("mouseenter", handleMouseEnter);
            targetEl[method]("mouseleave", handleMouseLeave);
            targetEl[method]("wheel", handle);
          }
          function enable() {
            if (swiper.params.cssMode) {
              swiper.wrapperEl.removeEventListener("wheel", handle);
              return true;
            }
            if (swiper.mousewheel.enabled) return false;
            events("addEventListener");
            swiper.mousewheel.enabled = true;
            return true;
          }
          function disable() {
            if (swiper.params.cssMode) {
              swiper.wrapperEl.addEventListener(event, handle);
              return true;
            }
            if (!swiper.mousewheel.enabled) return false;
            events("removeEventListener");
            swiper.mousewheel.enabled = false;
            return true;
          }
          on("init", () => {
            if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {
              disable();
            }
            if (swiper.params.mousewheel.enabled) enable();
          });
          on("destroy", () => {
            if (swiper.params.cssMode) {
              enable();
            }
            if (swiper.mousewheel.enabled) disable();
          });
          Object.assign(swiper.mousewheel, {
            enable,
            disable,
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/navigation.mjs":
      /*!****************************************************!*\
  !*** ./node_modules/swiper/modules/navigation.mjs ***!
  \****************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Navigation;
          }
        );
        /* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/create-element-if-not-defined.mjs */ "./node_modules/swiper/shared/create-element-if-not-defined.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function Navigation(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          extendParams({
            navigation: {
              nextEl: null,
              prevEl: null,
              hideOnClick: false,
              disabledClass: "swiper-button-disabled",
              hiddenClass: "swiper-button-hidden",
              lockClass: "swiper-button-lock",
              navigationDisabledClass: "swiper-navigation-disabled",
            },
          });
          swiper.navigation = {
            nextEl: null,
            prevEl: null,
          };
          function getEl(el) {
            let res;
            if (el && typeof el === "string" && swiper.isElement) {
              res = swiper.el.querySelector(el);
              if (res) return res;
            }
            if (el) {
              if (typeof el === "string")
                res = [...document.querySelectorAll(el)];
              if (
                swiper.params.uniqueNavElements &&
                typeof el === "string" &&
                res &&
                res.length > 1 &&
                swiper.el.querySelectorAll(el).length === 1
              ) {
                res = swiper.el.querySelector(el);
              } else if (res && res.length === 1) {
                res = res[0];
              }
            }
            if (el && !res) return el;
            // if (Array.isArray(res) && res.length === 1) res = res[0];
            return res;
          }
          function toggleEl(el, disabled) {
            const params = swiper.params.navigation;
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["m"])(
              el
            );
            el.forEach((subEl) => {
              if (subEl) {
                subEl.classList[disabled ? "add" : "remove"](
                  ...params.disabledClass.split(" ")
                );
                if (subEl.tagName === "BUTTON") subEl.disabled = disabled;
                if (swiper.params.watchOverflow && swiper.enabled) {
                  subEl.classList[swiper.isLocked ? "add" : "remove"](
                    params.lockClass
                  );
                }
              }
            });
          }
          function update() {
            // Update Navigation Buttons
            const { nextEl, prevEl } = swiper.navigation;
            if (swiper.params.loop) {
              toggleEl(prevEl, false);
              toggleEl(nextEl, false);
              return;
            }
            toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);
            toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);
          }
          function onPrevClick(e) {
            e.preventDefault();
            if (
              swiper.isBeginning &&
              !swiper.params.loop &&
              !swiper.params.rewind
            )
              return;
            swiper.slidePrev();
            emit("navigationPrev");
          }
          function onNextClick(e) {
            e.preventDefault();
            if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind)
              return;
            swiper.slideNext();
            emit("navigationNext");
          }
          function init() {
            const params = swiper.params.navigation;
            swiper.params.navigation = Object(
              _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__[
                "c"
              ]
            )(
              swiper,
              swiper.originalParams.navigation,
              swiper.params.navigation,
              {
                nextEl: "swiper-button-next",
                prevEl: "swiper-button-prev",
              }
            );
            if (!(params.nextEl || params.prevEl)) return;
            let nextEl = getEl(params.nextEl);
            let prevEl = getEl(params.prevEl);
            Object.assign(swiper.navigation, {
              nextEl,
              prevEl,
            });
            nextEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["m"]
            )(nextEl);
            prevEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["m"]
            )(prevEl);
            const initButton = (el, dir) => {
              if (el) {
                el.addEventListener(
                  "click",
                  dir === "next" ? onNextClick : onPrevClick
                );
              }
              if (!swiper.enabled && el) {
                el.classList.add(...params.lockClass.split(" "));
              }
            };
            nextEl.forEach((el) => initButton(el, "next"));
            prevEl.forEach((el) => initButton(el, "prev"));
          }
          function destroy() {
            let { nextEl, prevEl } = swiper.navigation;
            nextEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["m"]
            )(nextEl);
            prevEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["m"]
            )(prevEl);
            const destroyButton = (el, dir) => {
              el.removeEventListener(
                "click",
                dir === "next" ? onNextClick : onPrevClick
              );
              el.classList.remove(
                ...swiper.params.navigation.disabledClass.split(" ")
              );
            };
            nextEl.forEach((el) => destroyButton(el, "next"));
            prevEl.forEach((el) => destroyButton(el, "prev"));
          }
          on("init", () => {
            if (swiper.params.navigation.enabled === false) {
              // eslint-disable-next-line
              disable();
            } else {
              init();
              update();
            }
          });
          on("toEdge fromEdge lock unlock", () => {
            update();
          });
          on("destroy", () => {
            destroy();
          });
          on("enable disable", () => {
            let { nextEl, prevEl } = swiper.navigation;
            nextEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["m"]
            )(nextEl);
            prevEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["m"]
            )(prevEl);
            if (swiper.enabled) {
              update();
              return;
            }
            [...nextEl, ...prevEl]
              .filter((el) => !!el)
              .forEach((el) =>
                el.classList.add(swiper.params.navigation.lockClass)
              );
          });
          on("click", (_s, e) => {
            let { nextEl, prevEl } = swiper.navigation;
            nextEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["m"]
            )(nextEl);
            prevEl = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["m"]
            )(prevEl);
            const targetEl = e.target;
            if (
              swiper.params.navigation.hideOnClick &&
              !prevEl.includes(targetEl) &&
              !nextEl.includes(targetEl)
            ) {
              if (
                swiper.pagination &&
                swiper.params.pagination &&
                swiper.params.pagination.clickable &&
                (swiper.pagination.el === targetEl ||
                  swiper.pagination.el.contains(targetEl))
              )
                return;
              let isHidden;
              if (nextEl.length) {
                isHidden = nextEl[0].classList.contains(
                  swiper.params.navigation.hiddenClass
                );
              } else if (prevEl.length) {
                isHidden = prevEl[0].classList.contains(
                  swiper.params.navigation.hiddenClass
                );
              }
              if (isHidden === true) {
                emit("navigationShow");
              } else {
                emit("navigationHide");
              }
              [...nextEl, ...prevEl]
                .filter((el) => !!el)
                .forEach((el) =>
                  el.classList.toggle(swiper.params.navigation.hiddenClass)
                );
            }
          });
          const enable = () => {
            swiper.el.classList.remove(
              ...swiper.params.navigation.navigationDisabledClass.split(" ")
            );
            init();
            update();
          };
          const disable = () => {
            swiper.el.classList.add(
              ...swiper.params.navigation.navigationDisabledClass.split(" ")
            );
            destroy();
          };
          Object.assign(swiper.navigation, {
            enable,
            disable,
            update,
            init,
            destroy,
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/pagination.mjs":
      /*!****************************************************!*\
  !*** ./node_modules/swiper/modules/pagination.mjs ***!
  \****************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Pagination;
          }
        );
        /* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/classes-to-selector.mjs */ "./node_modules/swiper/shared/classes-to-selector.mjs"
          );
        /* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/create-element-if-not-defined.mjs */ "./node_modules/swiper/shared/create-element-if-not-defined.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function Pagination(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const pfx = "swiper-pagination";
          extendParams({
            pagination: {
              el: null,
              bulletElement: "span",
              clickable: false,
              hideOnClick: false,
              renderBullet: null,
              renderProgressbar: null,
              renderFraction: null,
              renderCustom: null,
              progressbarOpposite: false,
              type: "bullets",
              // 'bullets' or 'progressbar' or 'fraction' or 'custom'
              dynamicBullets: false,
              dynamicMainBullets: 1,
              formatFractionCurrent: (number) => number,
              formatFractionTotal: (number) => number,
              bulletClass: `${pfx}-bullet`,
              bulletActiveClass: `${pfx}-bullet-active`,
              modifierClass: `${pfx}-`,
              currentClass: `${pfx}-current`,
              totalClass: `${pfx}-total`,
              hiddenClass: `${pfx}-hidden`,
              progressbarFillClass: `${pfx}-progressbar-fill`,
              progressbarOppositeClass: `${pfx}-progressbar-opposite`,
              clickableClass: `${pfx}-clickable`,
              lockClass: `${pfx}-lock`,
              horizontalClass: `${pfx}-horizontal`,
              verticalClass: `${pfx}-vertical`,
              paginationDisabledClass: `${pfx}-disabled`,
            },
          });
          swiper.pagination = {
            el: null,
            bullets: [],
          };
          let bulletSize;
          let dynamicBulletIndex = 0;
          function isPaginationDisabled() {
            return (
              !swiper.params.pagination.el ||
              !swiper.pagination.el ||
              (Array.isArray(swiper.pagination.el) &&
                swiper.pagination.el.length === 0)
            );
          }
          function setSideBullets(bulletEl, position) {
            const { bulletActiveClass } = swiper.params.pagination;
            if (!bulletEl) return;
            bulletEl =
              bulletEl[
                `${position === "prev" ? "previous" : "next"}ElementSibling`
              ];
            if (bulletEl) {
              bulletEl.classList.add(`${bulletActiveClass}-${position}`);
              bulletEl =
                bulletEl[
                  `${position === "prev" ? "previous" : "next"}ElementSibling`
                ];
              if (bulletEl) {
                bulletEl.classList.add(
                  `${bulletActiveClass}-${position}-${position}`
                );
              }
            }
          }
          function onBulletClick(e) {
            const bulletEl = e.target.closest(
              Object(
                _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__[
                  "c"
                ]
              )(swiper.params.pagination.bulletClass)
            );
            if (!bulletEl) {
              return;
            }
            e.preventDefault();
            const index =
              Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["h"])(
                bulletEl
              ) * swiper.params.slidesPerGroup;
            if (swiper.params.loop) {
              if (swiper.realIndex === index) return;
              swiper.slideToLoop(index);
            } else {
              swiper.slideTo(index);
            }
          }
          function update() {
            // Render || Update Pagination bullets/items
            const rtl = swiper.rtl;
            const params = swiper.params.pagination;
            if (isPaginationDisabled()) return;
            let el = swiper.pagination.el;
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            // Current/Total
            let current;
            let previousIndex;
            const slidesLength =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.virtual.slides.length
                : swiper.slides.length;
            const total = swiper.params.loop
              ? Math.ceil(slidesLength / swiper.params.slidesPerGroup)
              : swiper.snapGrid.length;
            if (swiper.params.loop) {
              previousIndex = swiper.previousRealIndex || 0;
              current =
                swiper.params.slidesPerGroup > 1
                  ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup)
                  : swiper.realIndex;
            } else if (typeof swiper.snapIndex !== "undefined") {
              current = swiper.snapIndex;
              previousIndex = swiper.previousSnapIndex;
            } else {
              previousIndex = swiper.previousIndex || 0;
              current = swiper.activeIndex || 0;
            }
            // Types
            if (
              params.type === "bullets" &&
              swiper.pagination.bullets &&
              swiper.pagination.bullets.length > 0
            ) {
              const bullets = swiper.pagination.bullets;
              let firstIndex;
              let lastIndex;
              let midIndex;
              if (params.dynamicBullets) {
                bulletSize = Object(
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["f"]
                )(bullets[0], swiper.isHorizontal() ? "width" : "height", true);
                el.forEach((subEl) => {
                  subEl.style[swiper.isHorizontal() ? "width" : "height"] = `${
                    bulletSize * (params.dynamicMainBullets + 4)
                  }px`;
                });
                if (
                  params.dynamicMainBullets > 1 &&
                  previousIndex !== undefined
                ) {
                  dynamicBulletIndex += current - (previousIndex || 0);
                  if (dynamicBulletIndex > params.dynamicMainBullets - 1) {
                    dynamicBulletIndex = params.dynamicMainBullets - 1;
                  } else if (dynamicBulletIndex < 0) {
                    dynamicBulletIndex = 0;
                  }
                }
                firstIndex = Math.max(current - dynamicBulletIndex, 0);
                lastIndex =
                  firstIndex +
                  (Math.min(bullets.length, params.dynamicMainBullets) - 1);
                midIndex = (lastIndex + firstIndex) / 2;
              }
              bullets.forEach((bulletEl) => {
                const classesToRemove = [
                  ...[
                    "",
                    "-next",
                    "-next-next",
                    "-prev",
                    "-prev-prev",
                    "-main",
                  ].map((suffix) => `${params.bulletActiveClass}${suffix}`),
                ]
                  .map((s) =>
                    typeof s === "string" && s.includes(" ") ? s.split(" ") : s
                  )
                  .flat();
                bulletEl.classList.remove(...classesToRemove);
              });
              if (el.length > 1) {
                bullets.forEach((bullet) => {
                  const bulletIndex = Object(
                    _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["h"]
                  )(bullet);
                  if (bulletIndex === current) {
                    bullet.classList.add(
                      ...params.bulletActiveClass.split(" ")
                    );
                  } else if (swiper.isElement) {
                    bullet.setAttribute("part", "bullet");
                  }
                  if (params.dynamicBullets) {
                    if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
                      bullet.classList.add(
                        ...`${params.bulletActiveClass}-main`.split(" ")
                      );
                    }
                    if (bulletIndex === firstIndex) {
                      setSideBullets(bullet, "prev");
                    }
                    if (bulletIndex === lastIndex) {
                      setSideBullets(bullet, "next");
                    }
                  }
                });
              } else {
                const bullet = bullets[current];
                if (bullet) {
                  bullet.classList.add(...params.bulletActiveClass.split(" "));
                }
                if (swiper.isElement) {
                  bullets.forEach((bulletEl, bulletIndex) => {
                    bulletEl.setAttribute(
                      "part",
                      bulletIndex === current ? "bullet-active" : "bullet"
                    );
                  });
                }
                if (params.dynamicBullets) {
                  const firstDisplayedBullet = bullets[firstIndex];
                  const lastDisplayedBullet = bullets[lastIndex];
                  for (let i = firstIndex; i <= lastIndex; i += 1) {
                    if (bullets[i]) {
                      bullets[i].classList.add(
                        ...`${params.bulletActiveClass}-main`.split(" ")
                      );
                    }
                  }
                  setSideBullets(firstDisplayedBullet, "prev");
                  setSideBullets(lastDisplayedBullet, "next");
                }
              }
              if (params.dynamicBullets) {
                const dynamicBulletsLength = Math.min(
                  bullets.length,
                  params.dynamicMainBullets + 4
                );
                const bulletsOffset =
                  (bulletSize * dynamicBulletsLength - bulletSize) / 2 -
                  midIndex * bulletSize;
                const offsetProp = rtl ? "right" : "left";
                bullets.forEach((bullet) => {
                  bullet.style[
                    swiper.isHorizontal() ? offsetProp : "top"
                  ] = `${bulletsOffset}px`;
                });
              }
            }
            el.forEach((subEl, subElIndex) => {
              if (params.type === "fraction") {
                subEl
                  .querySelectorAll(
                    Object(
                      _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__[
                        "c"
                      ]
                    )(params.currentClass)
                  )
                  .forEach((fractionEl) => {
                    fractionEl.textContent = params.formatFractionCurrent(
                      current + 1
                    );
                  });
                subEl
                  .querySelectorAll(
                    Object(
                      _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__[
                        "c"
                      ]
                    )(params.totalClass)
                  )
                  .forEach((totalEl) => {
                    totalEl.textContent = params.formatFractionTotal(total);
                  });
              }
              if (params.type === "progressbar") {
                let progressbarDirection;
                if (params.progressbarOpposite) {
                  progressbarDirection = swiper.isHorizontal()
                    ? "vertical"
                    : "horizontal";
                } else {
                  progressbarDirection = swiper.isHorizontal()
                    ? "horizontal"
                    : "vertical";
                }
                const scale = (current + 1) / total;
                let scaleX = 1;
                let scaleY = 1;
                if (progressbarDirection === "horizontal") {
                  scaleX = scale;
                } else {
                  scaleY = scale;
                }
                subEl
                  .querySelectorAll(
                    Object(
                      _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__[
                        "c"
                      ]
                    )(params.progressbarFillClass)
                  )
                  .forEach((progressEl) => {
                    progressEl.style.transform = `translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`;
                    progressEl.style.transitionDuration = `${swiper.params.speed}ms`;
                  });
              }
              if (params.type === "custom" && params.renderCustom) {
                subEl.innerHTML = params.renderCustom(
                  swiper,
                  current + 1,
                  total
                );
                if (subElIndex === 0) emit("paginationRender", subEl);
              } else {
                if (subElIndex === 0) emit("paginationRender", subEl);
                emit("paginationUpdate", subEl);
              }
              if (swiper.params.watchOverflow && swiper.enabled) {
                subEl.classList[swiper.isLocked ? "add" : "remove"](
                  params.lockClass
                );
              }
            });
          }
          function render() {
            // Render Container
            const params = swiper.params.pagination;
            if (isPaginationDisabled()) return;
            const slidesLength =
              swiper.virtual && swiper.params.virtual.enabled
                ? swiper.virtual.slides.length
                : swiper.grid && swiper.params.grid.rows > 1
                ? swiper.slides.length / Math.ceil(swiper.params.grid.rows)
                : swiper.slides.length;
            let el = swiper.pagination.el;
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            let paginationHTML = "";
            if (params.type === "bullets") {
              let numberOfBullets = swiper.params.loop
                ? Math.ceil(slidesLength / swiper.params.slidesPerGroup)
                : swiper.snapGrid.length;
              if (
                swiper.params.freeMode &&
                swiper.params.freeMode.enabled &&
                numberOfBullets > slidesLength
              ) {
                numberOfBullets = slidesLength;
              }
              for (let i = 0; i < numberOfBullets; i += 1) {
                if (params.renderBullet) {
                  paginationHTML += params.renderBullet.call(
                    swiper,
                    i,
                    params.bulletClass
                  );
                } else {
                  // prettier-ignore
                  paginationHTML += `<${params.bulletElement} ${swiper.isElement ? 'part="bullet"' : ''} class="${params.bulletClass}"></${params.bulletElement}>`;
                }
              }
            }
            if (params.type === "fraction") {
              if (params.renderFraction) {
                paginationHTML = params.renderFraction.call(
                  swiper,
                  params.currentClass,
                  params.totalClass
                );
              } else {
                paginationHTML =
                  `<span class="${params.currentClass}"></span>` +
                  " / " +
                  `<span class="${params.totalClass}"></span>`;
              }
            }
            if (params.type === "progressbar") {
              if (params.renderProgressbar) {
                paginationHTML = params.renderProgressbar.call(
                  swiper,
                  params.progressbarFillClass
                );
              } else {
                paginationHTML = `<span class="${params.progressbarFillClass}"></span>`;
              }
            }
            swiper.pagination.bullets = [];
            el.forEach((subEl) => {
              if (params.type !== "custom") {
                subEl.innerHTML = paginationHTML || "";
              }
              if (params.type === "bullets") {
                swiper.pagination.bullets.push(
                  ...subEl.querySelectorAll(
                    Object(
                      _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__[
                        "c"
                      ]
                    )(params.bulletClass)
                  )
                );
              }
            });
            if (params.type !== "custom") {
              emit("paginationRender", el[0]);
            }
          }
          function init() {
            swiper.params.pagination = Object(
              _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__[
                "c"
              ]
            )(
              swiper,
              swiper.originalParams.pagination,
              swiper.params.pagination,
              {
                el: "swiper-pagination",
              }
            );
            const params = swiper.params.pagination;
            if (!params.el) return;
            let el;
            if (typeof params.el === "string" && swiper.isElement) {
              el = swiper.el.querySelector(params.el);
            }
            if (!el && typeof params.el === "string") {
              el = [...document.querySelectorAll(params.el)];
            }
            if (!el) {
              el = params.el;
            }
            if (!el || el.length === 0) return;
            if (
              swiper.params.uniqueNavElements &&
              typeof params.el === "string" &&
              Array.isArray(el) &&
              el.length > 1
            ) {
              el = [...swiper.el.querySelectorAll(params.el)];
              // check if it belongs to another nested Swiper
              if (el.length > 1) {
                el = el.filter((subEl) => {
                  if (
                    Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["a"])(
                      subEl,
                      ".swiper"
                    )[0] !== swiper.el
                  )
                    return false;
                  return true;
                })[0];
              }
            }
            if (Array.isArray(el) && el.length === 1) el = el[0];
            Object.assign(swiper.pagination, {
              el,
            });
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              if (params.type === "bullets" && params.clickable) {
                subEl.classList.add(
                  ...(params.clickableClass || "").split(" ")
                );
              }
              subEl.classList.add(params.modifierClass + params.type);
              subEl.classList.add(
                swiper.isHorizontal()
                  ? params.horizontalClass
                  : params.verticalClass
              );
              if (params.type === "bullets" && params.dynamicBullets) {
                subEl.classList.add(
                  `${params.modifierClass}${params.type}-dynamic`
                );
                dynamicBulletIndex = 0;
                if (params.dynamicMainBullets < 1) {
                  params.dynamicMainBullets = 1;
                }
              }
              if (params.type === "progressbar" && params.progressbarOpposite) {
                subEl.classList.add(params.progressbarOppositeClass);
              }
              if (params.clickable) {
                subEl.addEventListener("click", onBulletClick);
              }
              if (!swiper.enabled) {
                subEl.classList.add(params.lockClass);
              }
            });
          }
          function destroy() {
            const params = swiper.params.pagination;
            if (isPaginationDisabled()) return;
            let el = swiper.pagination.el;
            if (el) {
              el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
                el
              );
              el.forEach((subEl) => {
                subEl.classList.remove(params.hiddenClass);
                subEl.classList.remove(params.modifierClass + params.type);
                subEl.classList.remove(
                  swiper.isHorizontal()
                    ? params.horizontalClass
                    : params.verticalClass
                );
                if (params.clickable) {
                  subEl.classList.remove(
                    ...(params.clickableClass || "").split(" ")
                  );
                  subEl.removeEventListener("click", onBulletClick);
                }
              });
            }
            if (swiper.pagination.bullets)
              swiper.pagination.bullets.forEach((subEl) =>
                subEl.classList.remove(...params.bulletActiveClass.split(" "))
              );
          }
          on("changeDirection", () => {
            if (!swiper.pagination || !swiper.pagination.el) return;
            const params = swiper.params.pagination;
            let { el } = swiper.pagination;
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.classList.remove(
                params.horizontalClass,
                params.verticalClass
              );
              subEl.classList.add(
                swiper.isHorizontal()
                  ? params.horizontalClass
                  : params.verticalClass
              );
            });
          });
          on("init", () => {
            if (swiper.params.pagination.enabled === false) {
              // eslint-disable-next-line
              disable();
            } else {
              init();
              render();
              update();
            }
          });
          on("activeIndexChange", () => {
            if (typeof swiper.snapIndex === "undefined") {
              update();
            }
          });
          on("snapIndexChange", () => {
            update();
          });
          on("snapGridLengthChange", () => {
            render();
            update();
          });
          on("destroy", () => {
            destroy();
          });
          on("enable disable", () => {
            let { el } = swiper.pagination;
            if (el) {
              el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
                el
              );
              el.forEach((subEl) =>
                subEl.classList[swiper.enabled ? "remove" : "add"](
                  swiper.params.pagination.lockClass
                )
              );
            }
          });
          on("lock unlock", () => {
            update();
          });
          on("click", (_s, e) => {
            const targetEl = e.target;
            const el = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"]
            )(swiper.pagination.el);
            if (
              swiper.params.pagination.el &&
              swiper.params.pagination.hideOnClick &&
              el &&
              el.length > 0 &&
              !targetEl.classList.contains(swiper.params.pagination.bulletClass)
            ) {
              if (
                swiper.navigation &&
                ((swiper.navigation.nextEl &&
                  targetEl === swiper.navigation.nextEl) ||
                  (swiper.navigation.prevEl &&
                    targetEl === swiper.navigation.prevEl))
              )
                return;
              const isHidden = el[0].classList.contains(
                swiper.params.pagination.hiddenClass
              );
              if (isHidden === true) {
                emit("paginationShow");
              } else {
                emit("paginationHide");
              }
              el.forEach((subEl) =>
                subEl.classList.toggle(swiper.params.pagination.hiddenClass)
              );
            }
          });
          const enable = () => {
            swiper.el.classList.remove(
              swiper.params.pagination.paginationDisabledClass
            );
            let { el } = swiper.pagination;
            if (el) {
              el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
                el
              );
              el.forEach((subEl) =>
                subEl.classList.remove(
                  swiper.params.pagination.paginationDisabledClass
                )
              );
            }
            init();
            render();
            update();
          };
          const disable = () => {
            swiper.el.classList.add(
              swiper.params.pagination.paginationDisabledClass
            );
            let { el } = swiper.pagination;
            if (el) {
              el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__["m"])(
                el
              );
              el.forEach((subEl) =>
                subEl.classList.add(
                  swiper.params.pagination.paginationDisabledClass
                )
              );
            }
            destroy();
          };
          Object.assign(swiper.pagination, {
            enable,
            disable,
            render,
            update,
            init,
            destroy,
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/parallax.mjs":
      /*!**************************************************!*\
  !*** ./node_modules/swiper/modules/parallax.mjs ***!
  \**************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Parallax;
          }
        );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function Parallax(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            parallax: {
              enabled: false,
            },
          });
          const elementsSelector =
            "[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]";
          const setTransform = (el, progress) => {
            const { rtl } = swiper;
            const rtlFactor = rtl ? -1 : 1;
            const p = el.getAttribute("data-swiper-parallax") || "0";
            let x = el.getAttribute("data-swiper-parallax-x");
            let y = el.getAttribute("data-swiper-parallax-y");
            const scale = el.getAttribute("data-swiper-parallax-scale");
            const opacity = el.getAttribute("data-swiper-parallax-opacity");
            const rotate = el.getAttribute("data-swiper-parallax-rotate");
            if (x || y) {
              x = x || "0";
              y = y || "0";
            } else if (swiper.isHorizontal()) {
              x = p;
              y = "0";
            } else {
              y = p;
              x = "0";
            }
            if (x.indexOf("%") >= 0) {
              x = `${parseInt(x, 10) * progress * rtlFactor}%`;
            } else {
              x = `${x * progress * rtlFactor}px`;
            }
            if (y.indexOf("%") >= 0) {
              y = `${parseInt(y, 10) * progress}%`;
            } else {
              y = `${y * progress}px`;
            }
            if (typeof opacity !== "undefined" && opacity !== null) {
              const currentOpacity =
                opacity - (opacity - 1) * (1 - Math.abs(progress));
              el.style.opacity = currentOpacity;
            }
            let transform = `translate3d(${x}, ${y}, 0px)`;
            if (typeof scale !== "undefined" && scale !== null) {
              const currentScale =
                scale - (scale - 1) * (1 - Math.abs(progress));
              transform += ` scale(${currentScale})`;
            }
            if (rotate && typeof rotate !== "undefined" && rotate !== null) {
              const currentRotate = rotate * progress * -1;
              transform += ` rotate(${currentRotate}deg)`;
            }
            el.style.transform = transform;
          };
          const setTranslate = () => {
            const { el, slides, progress, snapGrid, isElement } = swiper;
            const elements = Object(
              _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["e"]
            )(el, elementsSelector);
            if (swiper.isElement) {
              elements.push(
                ...Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["e"])(
                  swiper.hostEl,
                  elementsSelector
                )
              );
            }
            elements.forEach((subEl) => {
              setTransform(subEl, progress);
            });
            slides.forEach((slideEl, slideIndex) => {
              let slideProgress = slideEl.progress;
              if (
                swiper.params.slidesPerGroup > 1 &&
                swiper.params.slidesPerView !== "auto"
              ) {
                slideProgress +=
                  Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);
              }
              slideProgress = Math.min(Math.max(slideProgress, -1), 1);
              slideEl
                .querySelectorAll(
                  `${elementsSelector}, [data-swiper-parallax-rotate]`
                )
                .forEach((subEl) => {
                  setTransform(subEl, slideProgress);
                });
            });
          };
          const setTransition = function (duration) {
            if (duration === void 0) {
              duration = swiper.params.speed;
            }
            const { el, hostEl } = swiper;
            const elements = [...el.querySelectorAll(elementsSelector)];
            if (swiper.isElement) {
              elements.push(...hostEl.querySelectorAll(elementsSelector));
            }
            elements.forEach((parallaxEl) => {
              let parallaxDuration =
                parseInt(
                  parallaxEl.getAttribute("data-swiper-parallax-duration"),
                  10
                ) || duration;
              if (duration === 0) parallaxDuration = 0;
              parallaxEl.style.transitionDuration = `${parallaxDuration}ms`;
            });
          };
          on("beforeInit", () => {
            if (!swiper.params.parallax.enabled) return;
            swiper.params.watchSlidesProgress = true;
            swiper.originalParams.watchSlidesProgress = true;
          });
          on("init", () => {
            if (!swiper.params.parallax.enabled) return;
            setTranslate();
          });
          on("setTranslate", () => {
            if (!swiper.params.parallax.enabled) return;
            setTranslate();
          });
          on("setTransition", (_swiper, duration) => {
            if (!swiper.params.parallax.enabled) return;
            setTransition(duration);
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/scrollbar.mjs":
      /*!***************************************************!*\
  !*** ./node_modules/swiper/modules/scrollbar.mjs ***!
  \***************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Scrollbar;
          }
        );
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );
        /* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ../shared/create-element-if-not-defined.mjs */ "./node_modules/swiper/shared/create-element-if-not-defined.mjs"
          );
        /* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ../shared/classes-to-selector.mjs */ "./node_modules/swiper/shared/classes-to-selector.mjs"
          );

        function Scrollbar(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const document = Object(
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )();
          let isTouched = false;
          let timeout = null;
          let dragTimeout = null;
          let dragStartPos;
          let dragSize;
          let trackSize;
          let divider;
          extendParams({
            scrollbar: {
              el: null,
              dragSize: "auto",
              hide: false,
              draggable: false,
              snapOnRelease: true,
              lockClass: "swiper-scrollbar-lock",
              dragClass: "swiper-scrollbar-drag",
              scrollbarDisabledClass: "swiper-scrollbar-disabled",
              horizontalClass: `swiper-scrollbar-horizontal`,
              verticalClass: `swiper-scrollbar-vertical`,
            },
          });
          swiper.scrollbar = {
            el: null,
            dragEl: null,
          };
          function setTranslate() {
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
            const { scrollbar, rtlTranslate: rtl } = swiper;
            const { dragEl, el } = scrollbar;
            const params = swiper.params.scrollbar;
            const progress = swiper.params.loop
              ? swiper.progressLoop
              : swiper.progress;
            let newSize = dragSize;
            let newPos = (trackSize - dragSize) * progress;
            if (rtl) {
              newPos = -newPos;
              if (newPos > 0) {
                newSize = dragSize - newPos;
                newPos = 0;
              } else if (-newPos + dragSize > trackSize) {
                newSize = trackSize + newPos;
              }
            } else if (newPos < 0) {
              newSize = dragSize + newPos;
              newPos = 0;
            } else if (newPos + dragSize > trackSize) {
              newSize = trackSize - newPos;
            }
            if (swiper.isHorizontal()) {
              dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;
              dragEl.style.width = `${newSize}px`;
            } else {
              dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;
              dragEl.style.height = `${newSize}px`;
            }
            if (params.hide) {
              clearTimeout(timeout);
              el.style.opacity = 1;
              timeout = setTimeout(() => {
                el.style.opacity = 0;
                el.style.transitionDuration = "400ms";
              }, 1000);
            }
          }
          function setTransition(duration) {
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
            swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;
          }
          function updateSize() {
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
            const { scrollbar } = swiper;
            const { dragEl, el } = scrollbar;
            dragEl.style.width = "";
            dragEl.style.height = "";
            trackSize = swiper.isHorizontal()
              ? el.offsetWidth
              : el.offsetHeight;
            divider =
              swiper.size /
              (swiper.virtualSize +
                swiper.params.slidesOffsetBefore -
                (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));
            if (swiper.params.scrollbar.dragSize === "auto") {
              dragSize = trackSize * divider;
            } else {
              dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
            }
            if (swiper.isHorizontal()) {
              dragEl.style.width = `${dragSize}px`;
            } else {
              dragEl.style.height = `${dragSize}px`;
            }
            if (divider >= 1) {
              el.style.display = "none";
            } else {
              el.style.display = "";
            }
            if (swiper.params.scrollbar.hide) {
              el.style.opacity = 0;
            }
            if (swiper.params.watchOverflow && swiper.enabled) {
              scrollbar.el.classList[swiper.isLocked ? "add" : "remove"](
                swiper.params.scrollbar.lockClass
              );
            }
          }
          function getPointerPosition(e) {
            return swiper.isHorizontal() ? e.clientX : e.clientY;
          }
          function setDragPosition(e) {
            const { scrollbar, rtlTranslate: rtl } = swiper;
            const { el } = scrollbar;
            let positionRatio;
            positionRatio =
              (getPointerPosition(e) -
                Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["b"])(el)[
                  swiper.isHorizontal() ? "left" : "top"
                ] -
                (dragStartPos !== null ? dragStartPos : dragSize / 2)) /
              (trackSize - dragSize);
            positionRatio = Math.max(Math.min(positionRatio, 1), 0);
            if (rtl) {
              positionRatio = 1 - positionRatio;
            }
            const position =
              swiper.minTranslate() +
              (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;
            swiper.updateProgress(position);
            swiper.setTranslate(position);
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
          }
          function onDragStart(e) {
            const params = swiper.params.scrollbar;
            const { scrollbar, wrapperEl } = swiper;
            const { el, dragEl } = scrollbar;
            isTouched = true;
            dragStartPos =
              e.target === dragEl
                ? getPointerPosition(e) -
                  e.target.getBoundingClientRect()[
                    swiper.isHorizontal() ? "left" : "top"
                  ]
                : null;
            e.preventDefault();
            e.stopPropagation();
            wrapperEl.style.transitionDuration = "100ms";
            dragEl.style.transitionDuration = "100ms";
            setDragPosition(e);
            clearTimeout(dragTimeout);
            el.style.transitionDuration = "0ms";
            if (params.hide) {
              el.style.opacity = 1;
            }
            if (swiper.params.cssMode) {
              swiper.wrapperEl.style["scroll-snap-type"] = "none";
            }
            emit("scrollbarDragStart", e);
          }
          function onDragMove(e) {
            const { scrollbar, wrapperEl } = swiper;
            const { el, dragEl } = scrollbar;
            if (!isTouched) return;
            if (e.preventDefault && e.cancelable) e.preventDefault();
            else e.returnValue = false;
            setDragPosition(e);
            wrapperEl.style.transitionDuration = "0ms";
            el.style.transitionDuration = "0ms";
            dragEl.style.transitionDuration = "0ms";
            emit("scrollbarDragMove", e);
          }
          function onDragEnd(e) {
            const params = swiper.params.scrollbar;
            const { scrollbar, wrapperEl } = swiper;
            const { el } = scrollbar;
            if (!isTouched) return;
            isTouched = false;
            if (swiper.params.cssMode) {
              swiper.wrapperEl.style["scroll-snap-type"] = "";
              wrapperEl.style.transitionDuration = "";
            }
            if (params.hide) {
              clearTimeout(dragTimeout);
              dragTimeout = Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["n"]
              )(() => {
                el.style.opacity = 0;
                el.style.transitionDuration = "400ms";
              }, 1000);
            }
            emit("scrollbarDragEnd", e);
            if (params.snapOnRelease) {
              swiper.slideToClosest();
            }
          }
          function events(method) {
            const { scrollbar, params } = swiper;
            const el = scrollbar.el;
            if (!el) return;
            const target = el;
            const activeListener = params.passiveListeners
              ? {
                  passive: false,
                  capture: false,
                }
              : false;
            const passiveListener = params.passiveListeners
              ? {
                  passive: true,
                  capture: false,
                }
              : false;
            if (!target) return;
            const eventMethod =
              method === "on" ? "addEventListener" : "removeEventListener";
            target[eventMethod]("pointerdown", onDragStart, activeListener);
            document[eventMethod]("pointermove", onDragMove, activeListener);
            document[eventMethod]("pointerup", onDragEnd, passiveListener);
          }
          function enableDraggable() {
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
            events("on");
          }
          function disableDraggable() {
            if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
            events("off");
          }
          function init() {
            const { scrollbar, el: swiperEl } = swiper;
            swiper.params.scrollbar = Object(
              _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__[
                "c"
              ]
            )(
              swiper,
              swiper.originalParams.scrollbar,
              swiper.params.scrollbar,
              {
                el: "swiper-scrollbar",
              }
            );
            const params = swiper.params.scrollbar;
            if (!params.el) return;
            let el;
            if (typeof params.el === "string" && swiper.isElement) {
              el = swiper.el.querySelector(params.el);
            }
            if (!el && typeof params.el === "string") {
              el = document.querySelectorAll(params.el);
              if (!el.length) return;
            } else if (!el) {
              el = params.el;
            }
            if (
              swiper.params.uniqueNavElements &&
              typeof params.el === "string" &&
              el.length > 1 &&
              swiperEl.querySelectorAll(params.el).length === 1
            ) {
              el = swiperEl.querySelector(params.el);
            }
            if (el.length > 0) el = el[0];
            el.classList.add(
              swiper.isHorizontal()
                ? params.horizontalClass
                : params.verticalClass
            );
            let dragEl;
            if (el) {
              dragEl = el.querySelector(
                Object(
                  _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__[
                    "c"
                  ]
                )(swiper.params.scrollbar.dragClass)
              );
              if (!dragEl) {
                dragEl = Object(
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["c"]
                )("div", swiper.params.scrollbar.dragClass);
                el.append(dragEl);
              }
            }
            Object.assign(scrollbar, {
              el,
              dragEl,
            });
            if (params.draggable) {
              enableDraggable();
            }
            if (el) {
              el.classList[swiper.enabled ? "remove" : "add"](
                ...Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["i"])(
                  swiper.params.scrollbar.lockClass
                )
              );
            }
          }
          function destroy() {
            const params = swiper.params.scrollbar;
            const el = swiper.scrollbar.el;
            if (el) {
              el.classList.remove(
                ...Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["i"])(
                  swiper.isHorizontal()
                    ? params.horizontalClass
                    : params.verticalClass
                )
              );
            }
            disableDraggable();
          }
          on("changeDirection", () => {
            if (!swiper.scrollbar || !swiper.scrollbar.el) return;
            const params = swiper.params.scrollbar;
            let { el } = swiper.scrollbar;
            el = Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["m"])(
              el
            );
            el.forEach((subEl) => {
              subEl.classList.remove(
                params.horizontalClass,
                params.verticalClass
              );
              subEl.classList.add(
                swiper.isHorizontal()
                  ? params.horizontalClass
                  : params.verticalClass
              );
            });
          });
          on("init", () => {
            if (swiper.params.scrollbar.enabled === false) {
              // eslint-disable-next-line
              disable();
            } else {
              init();
              updateSize();
              setTranslate();
            }
          });
          on("update resize observerUpdate lock unlock changeDirection", () => {
            updateSize();
          });
          on("setTranslate", () => {
            setTranslate();
          });
          on("setTransition", (_s, duration) => {
            setTransition(duration);
          });
          on("enable disable", () => {
            const { el } = swiper.scrollbar;
            if (el) {
              el.classList[swiper.enabled ? "remove" : "add"](
                ...Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["i"])(
                  swiper.params.scrollbar.lockClass
                )
              );
            }
          });
          on("destroy", () => {
            destroy();
          });
          const enable = () => {
            swiper.el.classList.remove(
              ...Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["i"])(
                swiper.params.scrollbar.scrollbarDisabledClass
              )
            );
            if (swiper.scrollbar.el) {
              swiper.scrollbar.el.classList.remove(
                ...Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["i"])(
                  swiper.params.scrollbar.scrollbarDisabledClass
                )
              );
            }
            init();
            updateSize();
            setTranslate();
          };
          const disable = () => {
            swiper.el.classList.add(
              ...Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["i"])(
                swiper.params.scrollbar.scrollbarDisabledClass
              )
            );
            if (swiper.scrollbar.el) {
              swiper.scrollbar.el.classList.add(
                ...Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["i"])(
                  swiper.params.scrollbar.scrollbarDisabledClass
                )
              );
            }
            destroy();
          };
          Object.assign(swiper.scrollbar, {
            enable,
            disable,
            updateSize,
            setTranslate,
            init,
            destroy,
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/thumbs.mjs":
      /*!************************************************!*\
  !*** ./node_modules/swiper/modules/thumbs.mjs ***!
  \************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Thumb;
          }
        );
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function Thumb(_ref) {
          let { swiper, extendParams, on } = _ref;
          extendParams({
            thumbs: {
              swiper: null,
              multipleActiveThumbs: true,
              autoScrollOffset: 0,
              slideThumbActiveClass: "swiper-slide-thumb-active",
              thumbsContainerClass: "swiper-thumbs",
            },
          });
          let initialized = false;
          let swiperCreated = false;
          swiper.thumbs = {
            swiper: null,
          };
          function onThumbClick() {
            const thumbsSwiper = swiper.thumbs.swiper;
            if (!thumbsSwiper || thumbsSwiper.destroyed) return;
            const clickedIndex = thumbsSwiper.clickedIndex;
            const clickedSlide = thumbsSwiper.clickedSlide;
            if (
              clickedSlide &&
              clickedSlide.classList.contains(
                swiper.params.thumbs.slideThumbActiveClass
              )
            )
              return;
            if (typeof clickedIndex === "undefined" || clickedIndex === null)
              return;
            let slideToIndex;
            if (thumbsSwiper.params.loop) {
              slideToIndex = parseInt(
                thumbsSwiper.clickedSlide.getAttribute(
                  "data-swiper-slide-index"
                ),
                10
              );
            } else {
              slideToIndex = clickedIndex;
            }
            if (swiper.params.loop) {
              swiper.slideToLoop(slideToIndex);
            } else {
              swiper.slideTo(slideToIndex);
            }
          }
          function init() {
            const { thumbs: thumbsParams } = swiper.params;
            if (initialized) return false;
            initialized = true;
            const SwiperClass = swiper.constructor;
            if (thumbsParams.swiper instanceof SwiperClass) {
              swiper.thumbs.swiper = thumbsParams.swiper;
              Object.assign(swiper.thumbs.swiper.originalParams, {
                watchSlidesProgress: true,
                slideToClickedSlide: false,
              });
              Object.assign(swiper.thumbs.swiper.params, {
                watchSlidesProgress: true,
                slideToClickedSlide: false,
              });
              swiper.thumbs.swiper.update();
            } else if (
              Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["l"])(
                thumbsParams.swiper
              )
            ) {
              const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);
              Object.assign(thumbsSwiperParams, {
                watchSlidesProgress: true,
                slideToClickedSlide: false,
              });
              swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);
              swiperCreated = true;
            }
            swiper.thumbs.swiper.el.classList.add(
              swiper.params.thumbs.thumbsContainerClass
            );
            swiper.thumbs.swiper.on("tap", onThumbClick);
            return true;
          }
          function update(initial) {
            const thumbsSwiper = swiper.thumbs.swiper;
            if (!thumbsSwiper || thumbsSwiper.destroyed) return;
            const slidesPerView =
              thumbsSwiper.params.slidesPerView === "auto"
                ? thumbsSwiper.slidesPerViewDynamic()
                : thumbsSwiper.params.slidesPerView;

            // Activate thumbs
            let thumbsToActivate = 1;
            const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;
            if (
              swiper.params.slidesPerView > 1 &&
              !swiper.params.centeredSlides
            ) {
              thumbsToActivate = swiper.params.slidesPerView;
            }
            if (!swiper.params.thumbs.multipleActiveThumbs) {
              thumbsToActivate = 1;
            }
            thumbsToActivate = Math.floor(thumbsToActivate);
            thumbsSwiper.slides.forEach((slideEl) =>
              slideEl.classList.remove(thumbActiveClass)
            );
            if (
              thumbsSwiper.params.loop ||
              (thumbsSwiper.params.virtual &&
                thumbsSwiper.params.virtual.enabled)
            ) {
              for (let i = 0; i < thumbsToActivate; i += 1) {
                Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
                  thumbsSwiper.slidesEl,
                  `[data-swiper-slide-index="${swiper.realIndex + i}"]`
                ).forEach((slideEl) => {
                  slideEl.classList.add(thumbActiveClass);
                });
              }
            } else {
              for (let i = 0; i < thumbsToActivate; i += 1) {
                if (thumbsSwiper.slides[swiper.realIndex + i]) {
                  thumbsSwiper.slides[swiper.realIndex + i].classList.add(
                    thumbActiveClass
                  );
                }
              }
            }
            const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;
            const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;
            if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {
              const currentThumbsIndex = thumbsSwiper.activeIndex;
              let newThumbsIndex;
              let direction;
              if (thumbsSwiper.params.loop) {
                const newThumbsSlide = thumbsSwiper.slides.filter(
                  (slideEl) =>
                    slideEl.getAttribute("data-swiper-slide-index") ===
                    `${swiper.realIndex}`
                )[0];
                newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);
                direction =
                  swiper.activeIndex > swiper.previousIndex ? "next" : "prev";
              } else {
                newThumbsIndex = swiper.realIndex;
                direction =
                  newThumbsIndex > swiper.previousIndex ? "next" : "prev";
              }
              if (useOffset) {
                newThumbsIndex +=
                  direction === "next"
                    ? autoScrollOffset
                    : -1 * autoScrollOffset;
              }
              if (
                thumbsSwiper.visibleSlidesIndexes &&
                thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0
              ) {
                if (thumbsSwiper.params.centeredSlides) {
                  if (newThumbsIndex > currentThumbsIndex) {
                    newThumbsIndex =
                      newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
                  } else {
                    newThumbsIndex =
                      newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
                  }
                } else if (
                  newThumbsIndex > currentThumbsIndex &&
                  thumbsSwiper.params.slidesPerGroup === 1
                );
                thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
              }
            }
          }
          on("beforeInit", () => {
            const { thumbs } = swiper.params;
            if (!thumbs || !thumbs.swiper) return;
            if (
              typeof thumbs.swiper === "string" ||
              thumbs.swiper instanceof HTMLElement
            ) {
              const document = Object(
                _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
              )();
              const getThumbsElementAndInit = () => {
                const thumbsElement =
                  typeof thumbs.swiper === "string"
                    ? document.querySelector(thumbs.swiper)
                    : thumbs.swiper;
                if (thumbsElement && thumbsElement.swiper) {
                  thumbs.swiper = thumbsElement.swiper;
                  init();
                  update(true);
                } else if (thumbsElement) {
                  const onThumbsSwiper = (e) => {
                    thumbs.swiper = e.detail[0];
                    thumbsElement.removeEventListener("init", onThumbsSwiper);
                    init();
                    update(true);
                    thumbs.swiper.update();
                    swiper.update();
                  };
                  thumbsElement.addEventListener("init", onThumbsSwiper);
                }
                return thumbsElement;
              };
              const watchForThumbsToAppear = () => {
                if (swiper.destroyed) return;
                const thumbsElement = getThumbsElementAndInit();
                if (!thumbsElement) {
                  requestAnimationFrame(watchForThumbsToAppear);
                }
              };
              requestAnimationFrame(watchForThumbsToAppear);
            } else {
              init();
              update(true);
            }
          });
          on("slideChange update resize observerUpdate", () => {
            update();
          });
          on("setTransition", (_s, duration) => {
            const thumbsSwiper = swiper.thumbs.swiper;
            if (!thumbsSwiper || thumbsSwiper.destroyed) return;
            thumbsSwiper.setTransition(duration);
          });
          on("beforeDestroy", () => {
            const thumbsSwiper = swiper.thumbs.swiper;
            if (!thumbsSwiper || thumbsSwiper.destroyed) return;
            if (swiperCreated) {
              thumbsSwiper.destroy();
            }
          });
          Object.assign(swiper.thumbs, {
            init,
            update,
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/virtual.mjs":
      /*!*************************************************!*\
  !*** ./node_modules/swiper/modules/virtual.mjs ***!
  \*************************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Virtual;
          }
        );
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function Virtual(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          extendParams({
            virtual: {
              enabled: false,
              slides: [],
              cache: true,
              renderSlide: null,
              renderExternal: null,
              renderExternalUpdate: true,
              addSlidesBefore: 0,
              addSlidesAfter: 0,
            },
          });
          let cssModeTimeout;
          const document = Object(
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )();
          swiper.virtual = {
            cache: {},
            from: undefined,
            to: undefined,
            slides: [],
            offset: 0,
            slidesGrid: [],
          };
          const tempDOM = document.createElement("div");
          function renderSlide(slide, index) {
            const params = swiper.params.virtual;
            if (params.cache && swiper.virtual.cache[index]) {
              return swiper.virtual.cache[index];
            }
            // eslint-disable-next-line
            let slideEl;
            if (params.renderSlide) {
              slideEl = params.renderSlide.call(swiper, slide, index);
              if (typeof slideEl === "string") {
                tempDOM.innerHTML = slideEl;
                slideEl = tempDOM.children[0];
              }
            } else if (swiper.isElement) {
              slideEl = Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["c"]
              )("swiper-slide");
            } else {
              slideEl = Object(
                _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["c"]
              )("div", swiper.params.slideClass);
            }
            slideEl.setAttribute("data-swiper-slide-index", index);
            if (!params.renderSlide) {
              slideEl.innerHTML = slide;
            }
            if (params.cache) {
              swiper.virtual.cache[index] = slideEl;
            }
            return slideEl;
          }
          function update(force, beforeInit) {
            const {
              slidesPerView,
              slidesPerGroup,
              centeredSlides,
              loop: isLoop,
              initialSlide,
            } = swiper.params;
            if (beforeInit && !isLoop && initialSlide > 0) {
              return;
            }
            const { addSlidesBefore, addSlidesAfter } = swiper.params.virtual;
            const {
              from: previousFrom,
              to: previousTo,
              slides,
              slidesGrid: previousSlidesGrid,
              offset: previousOffset,
            } = swiper.virtual;
            if (!swiper.params.cssMode) {
              swiper.updateActiveIndex();
            }
            const activeIndex = swiper.activeIndex || 0;
            let offsetProp;
            if (swiper.rtlTranslate) offsetProp = "right";
            else offsetProp = swiper.isHorizontal() ? "left" : "top";
            let slidesAfter;
            let slidesBefore;
            if (centeredSlides) {
              slidesAfter =
                Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
              slidesBefore =
                Math.floor(slidesPerView / 2) +
                slidesPerGroup +
                addSlidesBefore;
            } else {
              slidesAfter =
                slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;
              slidesBefore =
                (isLoop ? slidesPerView : slidesPerGroup) + addSlidesBefore;
            }
            let from = activeIndex - slidesBefore;
            let to = activeIndex + slidesAfter;
            if (!isLoop) {
              from = Math.max(from, 0);
              to = Math.min(to, slides.length - 1);
            }
            let offset =
              (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
            if (isLoop && activeIndex >= slidesBefore) {
              from -= slidesBefore;
              if (!centeredSlides) offset += swiper.slidesGrid[0];
            } else if (isLoop && activeIndex < slidesBefore) {
              from = -slidesBefore;
              if (centeredSlides) offset += swiper.slidesGrid[0];
            }
            Object.assign(swiper.virtual, {
              from,
              to,
              offset,
              slidesGrid: swiper.slidesGrid,
              slidesBefore,
              slidesAfter,
            });
            function onRendered() {
              swiper.updateSlides();
              swiper.updateProgress();
              swiper.updateSlidesClasses();
              emit("virtualUpdate");
            }
            if (previousFrom === from && previousTo === to && !force) {
              if (
                swiper.slidesGrid !== previousSlidesGrid &&
                offset !== previousOffset
              ) {
                swiper.slides.forEach((slideEl) => {
                  slideEl.style[offsetProp] = `${
                    offset - Math.abs(swiper.cssOverflowAdjustment())
                  }px`;
                });
              }
              swiper.updateProgress();
              emit("virtualUpdate");
              return;
            }
            if (swiper.params.virtual.renderExternal) {
              swiper.params.virtual.renderExternal.call(swiper, {
                offset,
                from,
                to,
                slides: (function getSlides() {
                  const slidesToRender = [];
                  for (let i = from; i <= to; i += 1) {
                    slidesToRender.push(slides[i]);
                  }
                  return slidesToRender;
                })(),
              });
              if (swiper.params.virtual.renderExternalUpdate) {
                onRendered();
              } else {
                emit("virtualUpdate");
              }
              return;
            }
            const prependIndexes = [];
            const appendIndexes = [];
            const getSlideIndex = (index) => {
              let slideIndex = index;
              if (index < 0) {
                slideIndex = slides.length + index;
              } else if (slideIndex >= slides.length) {
                // eslint-disable-next-line
                slideIndex = slideIndex - slides.length;
              }
              return slideIndex;
            };
            if (force) {
              swiper.slides
                .filter((el) =>
                  el.matches(`.${swiper.params.slideClass}, swiper-slide`)
                )
                .forEach((slideEl) => {
                  slideEl.remove();
                });
            } else {
              for (let i = previousFrom; i <= previousTo; i += 1) {
                if (i < from || i > to) {
                  const slideIndex = getSlideIndex(i);
                  swiper.slides
                    .filter((el) =>
                      el.matches(
                        `.${swiper.params.slideClass}[data-swiper-slide-index="${slideIndex}"], swiper-slide[data-swiper-slide-index="${slideIndex}"]`
                      )
                    )
                    .forEach((slideEl) => {
                      slideEl.remove();
                    });
                }
              }
            }
            const loopFrom = isLoop ? -slides.length : 0;
            const loopTo = isLoop ? slides.length * 2 : slides.length;
            for (let i = loopFrom; i < loopTo; i += 1) {
              if (i >= from && i <= to) {
                const slideIndex = getSlideIndex(i);
                if (typeof previousTo === "undefined" || force) {
                  appendIndexes.push(slideIndex);
                } else {
                  if (i > previousTo) appendIndexes.push(slideIndex);
                  if (i < previousFrom) prependIndexes.push(slideIndex);
                }
              }
            }
            appendIndexes.forEach((index) => {
              swiper.slidesEl.append(renderSlide(slides[index], index));
            });
            if (isLoop) {
              for (let i = prependIndexes.length - 1; i >= 0; i -= 1) {
                const index = prependIndexes[i];
                swiper.slidesEl.prepend(renderSlide(slides[index], index));
              }
            } else {
              prependIndexes.sort((a, b) => b - a);
              prependIndexes.forEach((index) => {
                swiper.slidesEl.prepend(renderSlide(slides[index], index));
              });
            }
            Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
              swiper.slidesEl,
              ".swiper-slide, swiper-slide"
            ).forEach((slideEl) => {
              slideEl.style[offsetProp] = `${
                offset - Math.abs(swiper.cssOverflowAdjustment())
              }px`;
            });
            onRendered();
          }
          function appendSlide(slides) {
            if (typeof slides === "object" && "length" in slides) {
              for (let i = 0; i < slides.length; i += 1) {
                if (slides[i]) swiper.virtual.slides.push(slides[i]);
              }
            } else {
              swiper.virtual.slides.push(slides);
            }
            update(true);
          }
          function prependSlide(slides) {
            const activeIndex = swiper.activeIndex;
            let newActiveIndex = activeIndex + 1;
            let numberOfNewSlides = 1;
            if (Array.isArray(slides)) {
              for (let i = 0; i < slides.length; i += 1) {
                if (slides[i]) swiper.virtual.slides.unshift(slides[i]);
              }
              newActiveIndex = activeIndex + slides.length;
              numberOfNewSlides = slides.length;
            } else {
              swiper.virtual.slides.unshift(slides);
            }
            if (swiper.params.virtual.cache) {
              const cache = swiper.virtual.cache;
              const newCache = {};
              Object.keys(cache).forEach((cachedIndex) => {
                const cachedEl = cache[cachedIndex];
                const cachedElIndex = cachedEl.getAttribute(
                  "data-swiper-slide-index"
                );
                if (cachedElIndex) {
                  cachedEl.setAttribute(
                    "data-swiper-slide-index",
                    parseInt(cachedElIndex, 10) + numberOfNewSlides
                  );
                }
                newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] =
                  cachedEl;
              });
              swiper.virtual.cache = newCache;
            }
            update(true);
            swiper.slideTo(newActiveIndex, 0);
          }
          function removeSlide(slidesIndexes) {
            if (typeof slidesIndexes === "undefined" || slidesIndexes === null)
              return;
            let activeIndex = swiper.activeIndex;
            if (Array.isArray(slidesIndexes)) {
              for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {
                if (swiper.params.virtual.cache) {
                  delete swiper.virtual.cache[slidesIndexes[i]];
                  // shift cache indexes
                  Object.keys(swiper.virtual.cache).forEach((key) => {
                    if (key > slidesIndexes) {
                      swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];
                      swiper.virtual.cache[key - 1].setAttribute(
                        "data-swiper-slide-index",
                        key - 1
                      );
                      delete swiper.virtual.cache[key];
                    }
                  });
                }
                swiper.virtual.slides.splice(slidesIndexes[i], 1);
                if (slidesIndexes[i] < activeIndex) activeIndex -= 1;
                activeIndex = Math.max(activeIndex, 0);
              }
            } else {
              if (swiper.params.virtual.cache) {
                delete swiper.virtual.cache[slidesIndexes];
                // shift cache indexes
                Object.keys(swiper.virtual.cache).forEach((key) => {
                  if (key > slidesIndexes) {
                    swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];
                    swiper.virtual.cache[key - 1].setAttribute(
                      "data-swiper-slide-index",
                      key - 1
                    );
                    delete swiper.virtual.cache[key];
                  }
                });
              }
              swiper.virtual.slides.splice(slidesIndexes, 1);
              if (slidesIndexes < activeIndex) activeIndex -= 1;
              activeIndex = Math.max(activeIndex, 0);
            }
            update(true);
            swiper.slideTo(activeIndex, 0);
          }
          function removeAllSlides() {
            swiper.virtual.slides = [];
            if (swiper.params.virtual.cache) {
              swiper.virtual.cache = {};
            }
            update(true);
            swiper.slideTo(0, 0);
          }
          on("beforeInit", () => {
            if (!swiper.params.virtual.enabled) return;
            let domSlidesAssigned;
            if (typeof swiper.passedParams.virtual.slides === "undefined") {
              const slides = [...swiper.slidesEl.children].filter((el) =>
                el.matches(`.${swiper.params.slideClass}, swiper-slide`)
              );
              if (slides && slides.length) {
                swiper.virtual.slides = [...slides];
                domSlidesAssigned = true;
                slides.forEach((slideEl, slideIndex) => {
                  slideEl.setAttribute("data-swiper-slide-index", slideIndex);
                  swiper.virtual.cache[slideIndex] = slideEl;
                  slideEl.remove();
                });
              }
            }
            if (!domSlidesAssigned) {
              swiper.virtual.slides = swiper.params.virtual.slides;
            }
            swiper.classNames.push(
              `${swiper.params.containerModifierClass}virtual`
            );
            swiper.params.watchSlidesProgress = true;
            swiper.originalParams.watchSlidesProgress = true;
            update(false, true);
          });
          on("setTranslate", () => {
            if (!swiper.params.virtual.enabled) return;
            if (swiper.params.cssMode && !swiper._immediateVirtual) {
              clearTimeout(cssModeTimeout);
              cssModeTimeout = setTimeout(() => {
                update();
              }, 100);
            } else {
              update();
            }
          });
          on("init update resize", () => {
            if (!swiper.params.virtual.enabled) return;
            if (swiper.params.cssMode) {
              Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["s"])(
                swiper.wrapperEl,
                "--swiper-virtual-size",
                `${swiper.virtualSize}px`
              );
            }
          });
          Object.assign(swiper.virtual, {
            appendSlide,
            prependSlide,
            removeSlide,
            removeAllSlides,
            update,
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/modules/zoom.mjs":
      /*!**********************************************!*\
  !*** ./node_modules/swiper/modules/zoom.mjs ***!
  \**********************************************/
      /*! exports provided: default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Zoom;
          }
        );
        /* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ../shared/ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );
        /* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ../shared/utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function Zoom(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const window = Object(
            _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          extendParams({
            zoom: {
              enabled: false,
              limitToOriginalSize: false,
              maxRatio: 3,
              minRatio: 1,
              toggle: true,
              containerClass: "swiper-zoom-container",
              zoomedSlideClass: "swiper-slide-zoomed",
            },
          });
          swiper.zoom = {
            enabled: false,
          };
          let currentScale = 1;
          let isScaling = false;
          let fakeGestureTouched;
          let fakeGestureMoved;
          const evCache = [];
          const gesture = {
            originX: 0,
            originY: 0,
            slideEl: undefined,
            slideWidth: undefined,
            slideHeight: undefined,
            imageEl: undefined,
            imageWrapEl: undefined,
            maxRatio: 3,
          };
          const image = {
            isTouched: undefined,
            isMoved: undefined,
            currentX: undefined,
            currentY: undefined,
            minX: undefined,
            minY: undefined,
            maxX: undefined,
            maxY: undefined,
            width: undefined,
            height: undefined,
            startX: undefined,
            startY: undefined,
            touchesStart: {},
            touchesCurrent: {},
          };
          const velocity = {
            x: undefined,
            y: undefined,
            prevPositionX: undefined,
            prevPositionY: undefined,
            prevTime: undefined,
          };
          let scale = 1;
          Object.defineProperty(swiper.zoom, "scale", {
            get() {
              return scale;
            },
            set(value) {
              if (scale !== value) {
                const imageEl = gesture.imageEl;
                const slideEl = gesture.slideEl;
                emit("zoomChange", value, imageEl, slideEl);
              }
              scale = value;
            },
          });
          function getDistanceBetweenTouches() {
            if (evCache.length < 2) return 1;
            const x1 = evCache[0].pageX;
            const y1 = evCache[0].pageY;
            const x2 = evCache[1].pageX;
            const y2 = evCache[1].pageY;
            const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
            return distance;
          }
          function getMaxRatio() {
            const params = swiper.params.zoom;
            const maxRatio =
              gesture.imageWrapEl.getAttribute("data-swiper-zoom") ||
              params.maxRatio;
            if (
              params.limitToOriginalSize &&
              gesture.imageEl &&
              gesture.imageEl.naturalWidth
            ) {
              const imageMaxRatio =
                gesture.imageEl.naturalWidth / gesture.imageEl.offsetWidth;
              return Math.min(imageMaxRatio, maxRatio);
            }
            return maxRatio;
          }
          function getScaleOrigin() {
            if (evCache.length < 2)
              return {
                x: null,
                y: null,
              };
            const box = gesture.imageEl.getBoundingClientRect();
            return [
              (evCache[0].pageX +
                (evCache[1].pageX - evCache[0].pageX) / 2 -
                box.x -
                window.scrollX) /
                currentScale,
              (evCache[0].pageY +
                (evCache[1].pageY - evCache[0].pageY) / 2 -
                box.y -
                window.scrollY) /
                currentScale,
            ];
          }
          function getSlideSelector() {
            return swiper.isElement
              ? `swiper-slide`
              : `.${swiper.params.slideClass}`;
          }
          function eventWithinSlide(e) {
            const slideSelector = getSlideSelector();
            if (e.target.matches(slideSelector)) return true;
            if (
              swiper.slides.filter((slideEl) => slideEl.contains(e.target))
                .length > 0
            )
              return true;
            return false;
          }
          function eventWithinZoomContainer(e) {
            const selector = `.${swiper.params.zoom.containerClass}`;
            if (e.target.matches(selector)) return true;
            if (
              [...swiper.hostEl.querySelectorAll(selector)].filter(
                (containerEl) => containerEl.contains(e.target)
              ).length > 0
            )
              return true;
            return false;
          }

          // Events
          function onGestureStart(e) {
            if (e.pointerType === "mouse") {
              evCache.splice(0, evCache.length);
            }
            if (!eventWithinSlide(e)) return;
            const params = swiper.params.zoom;
            fakeGestureTouched = false;
            fakeGestureMoved = false;
            evCache.push(e);
            if (evCache.length < 2) {
              return;
            }
            fakeGestureTouched = true;
            gesture.scaleStart = getDistanceBetweenTouches();
            if (!gesture.slideEl) {
              gesture.slideEl = e.target.closest(
                `.${swiper.params.slideClass}, swiper-slide`
              );
              if (!gesture.slideEl)
                gesture.slideEl = swiper.slides[swiper.activeIndex];
              let imageEl = gesture.slideEl.querySelector(
                `.${params.containerClass}`
              );
              if (imageEl) {
                imageEl = imageEl.querySelectorAll(
                  "picture, img, svg, canvas, .swiper-zoom-target"
                )[0];
              }
              gesture.imageEl = imageEl;
              if (imageEl) {
                gesture.imageWrapEl = Object(
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["a"]
                )(gesture.imageEl, `.${params.containerClass}`)[0];
              } else {
                gesture.imageWrapEl = undefined;
              }
              if (!gesture.imageWrapEl) {
                gesture.imageEl = undefined;
                return;
              }
              gesture.maxRatio = getMaxRatio();
            }
            if (gesture.imageEl) {
              const [originX, originY] = getScaleOrigin();
              gesture.originX = originX;
              gesture.originY = originY;
              gesture.imageEl.style.transitionDuration = "0ms";
            }
            isScaling = true;
          }
          function onGestureChange(e) {
            if (!eventWithinSlide(e)) return;
            const params = swiper.params.zoom;
            const zoom = swiper.zoom;
            const pointerIndex = evCache.findIndex(
              (cachedEv) => cachedEv.pointerId === e.pointerId
            );
            if (pointerIndex >= 0) evCache[pointerIndex] = e;
            if (evCache.length < 2) {
              return;
            }
            fakeGestureMoved = true;
            gesture.scaleMove = getDistanceBetweenTouches();
            if (!gesture.imageEl) {
              return;
            }
            zoom.scale =
              (gesture.scaleMove / gesture.scaleStart) * currentScale;
            if (zoom.scale > gesture.maxRatio) {
              zoom.scale =
                gesture.maxRatio -
                1 +
                (zoom.scale - gesture.maxRatio + 1) ** 0.5;
            }
            if (zoom.scale < params.minRatio) {
              zoom.scale =
                params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;
            }
            gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
          }
          function onGestureEnd(e) {
            if (!eventWithinSlide(e)) return;
            if (e.pointerType === "mouse" && e.type === "pointerout") return;
            const params = swiper.params.zoom;
            const zoom = swiper.zoom;
            const pointerIndex = evCache.findIndex(
              (cachedEv) => cachedEv.pointerId === e.pointerId
            );
            if (pointerIndex >= 0) evCache.splice(pointerIndex, 1);
            if (!fakeGestureTouched || !fakeGestureMoved) {
              return;
            }
            fakeGestureTouched = false;
            fakeGestureMoved = false;
            if (!gesture.imageEl) return;
            zoom.scale = Math.max(
              Math.min(zoom.scale, gesture.maxRatio),
              params.minRatio
            );
            gesture.imageEl.style.transitionDuration = `${swiper.params.speed}ms`;
            gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
            currentScale = zoom.scale;
            isScaling = false;
            if (zoom.scale > 1 && gesture.slideEl) {
              gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);
            } else if (zoom.scale <= 1 && gesture.slideEl) {
              gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);
            }
            if (zoom.scale === 1) {
              gesture.originX = 0;
              gesture.originY = 0;
              gesture.slideEl = undefined;
            }
          }
          let allowTouchMoveTimeout;
          function allowTouchMove() {
            swiper.touchEventsData.preventTouchMoveFromPointerMove = false;
          }
          function preventTouchMove() {
            clearTimeout(allowTouchMoveTimeout);
            swiper.touchEventsData.preventTouchMoveFromPointerMove = true;
            allowTouchMoveTimeout = setTimeout(() => {
              allowTouchMove();
            });
          }
          function onTouchStart(e) {
            const device = swiper.device;
            if (!gesture.imageEl) return;
            if (image.isTouched) return;
            if (device.android && e.cancelable) e.preventDefault();
            image.isTouched = true;
            const event = evCache.length > 0 ? evCache[0] : e;
            image.touchesStart.x = event.pageX;
            image.touchesStart.y = event.pageY;
          }
          function onTouchMove(e) {
            if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) {
              return;
            }
            const zoom = swiper.zoom;
            if (!gesture.imageEl) {
              return;
            }
            if (!image.isTouched || !gesture.slideEl) {
              return;
            }
            if (!image.isMoved) {
              image.width =
                gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;
              image.height =
                gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;
              image.startX =
                Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["j"])(
                  gesture.imageWrapEl,
                  "x"
                ) || 0;
              image.startY =
                Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["j"])(
                  gesture.imageWrapEl,
                  "y"
                ) || 0;
              gesture.slideWidth = gesture.slideEl.offsetWidth;
              gesture.slideHeight = gesture.slideEl.offsetHeight;
              gesture.imageWrapEl.style.transitionDuration = "0ms";
            }
            // Define if we need image drag
            const scaledWidth = image.width * zoom.scale;
            const scaledHeight = image.height * zoom.scale;
            if (
              scaledWidth < gesture.slideWidth &&
              scaledHeight < gesture.slideHeight
            ) {
              allowTouchMove();
              return;
            }
            image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
            image.maxX = -image.minX;
            image.minY = Math.min(
              gesture.slideHeight / 2 - scaledHeight / 2,
              0
            );
            image.maxY = -image.minY;
            image.touchesCurrent.x =
              evCache.length > 0 ? evCache[0].pageX : e.pageX;
            image.touchesCurrent.y =
              evCache.length > 0 ? evCache[0].pageY : e.pageY;
            const touchesDiff = Math.max(
              Math.abs(image.touchesCurrent.x - image.touchesStart.x),
              Math.abs(image.touchesCurrent.y - image.touchesStart.y)
            );
            if (touchesDiff > 5) {
              swiper.allowClick = false;
            }
            if (!image.isMoved && !isScaling) {
              if (
                swiper.isHorizontal() &&
                ((Math.floor(image.minX) === Math.floor(image.startX) &&
                  image.touchesCurrent.x < image.touchesStart.x) ||
                  (Math.floor(image.maxX) === Math.floor(image.startX) &&
                    image.touchesCurrent.x > image.touchesStart.x))
              ) {
                image.isTouched = false;
                allowTouchMove();
                return;
              }
              if (
                !swiper.isHorizontal() &&
                ((Math.floor(image.minY) === Math.floor(image.startY) &&
                  image.touchesCurrent.y < image.touchesStart.y) ||
                  (Math.floor(image.maxY) === Math.floor(image.startY) &&
                    image.touchesCurrent.y > image.touchesStart.y))
              ) {
                image.isTouched = false;
                allowTouchMove();
                return;
              }
            }
            if (e.cancelable) {
              e.preventDefault();
            }
            e.stopPropagation();
            preventTouchMove();
            image.isMoved = true;
            const scaleRatio =
              (zoom.scale - currentScale) /
              (gesture.maxRatio - swiper.params.zoom.minRatio);
            const { originX, originY } = gesture;
            image.currentX =
              image.touchesCurrent.x -
              image.touchesStart.x +
              image.startX +
              scaleRatio * (image.width - originX * 2);
            image.currentY =
              image.touchesCurrent.y -
              image.touchesStart.y +
              image.startY +
              scaleRatio * (image.height - originY * 2);
            if (image.currentX < image.minX) {
              image.currentX =
                image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;
            }
            if (image.currentX > image.maxX) {
              image.currentX =
                image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;
            }
            if (image.currentY < image.minY) {
              image.currentY =
                image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;
            }
            if (image.currentY > image.maxY) {
              image.currentY =
                image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;
            }

            // Velocity
            if (!velocity.prevPositionX)
              velocity.prevPositionX = image.touchesCurrent.x;
            if (!velocity.prevPositionY)
              velocity.prevPositionY = image.touchesCurrent.y;
            if (!velocity.prevTime) velocity.prevTime = Date.now();
            velocity.x =
              (image.touchesCurrent.x - velocity.prevPositionX) /
              (Date.now() - velocity.prevTime) /
              2;
            velocity.y =
              (image.touchesCurrent.y - velocity.prevPositionY) /
              (Date.now() - velocity.prevTime) /
              2;
            if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2)
              velocity.x = 0;
            if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2)
              velocity.y = 0;
            velocity.prevPositionX = image.touchesCurrent.x;
            velocity.prevPositionY = image.touchesCurrent.y;
            velocity.prevTime = Date.now();
            gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;
          }
          function onTouchEnd() {
            const zoom = swiper.zoom;
            if (!gesture.imageEl) return;
            if (!image.isTouched || !image.isMoved) {
              image.isTouched = false;
              image.isMoved = false;
              return;
            }
            image.isTouched = false;
            image.isMoved = false;
            let momentumDurationX = 300;
            let momentumDurationY = 300;
            const momentumDistanceX = velocity.x * momentumDurationX;
            const newPositionX = image.currentX + momentumDistanceX;
            const momentumDistanceY = velocity.y * momentumDurationY;
            const newPositionY = image.currentY + momentumDistanceY;

            // Fix duration
            if (velocity.x !== 0)
              momentumDurationX = Math.abs(
                (newPositionX - image.currentX) / velocity.x
              );
            if (velocity.y !== 0)
              momentumDurationY = Math.abs(
                (newPositionY - image.currentY) / velocity.y
              );
            const momentumDuration = Math.max(
              momentumDurationX,
              momentumDurationY
            );
            image.currentX = newPositionX;
            image.currentY = newPositionY;
            // Define if we need image drag
            const scaledWidth = image.width * zoom.scale;
            const scaledHeight = image.height * zoom.scale;
            image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
            image.maxX = -image.minX;
            image.minY = Math.min(
              gesture.slideHeight / 2 - scaledHeight / 2,
              0
            );
            image.maxY = -image.minY;
            image.currentX = Math.max(
              Math.min(image.currentX, image.maxX),
              image.minX
            );
            image.currentY = Math.max(
              Math.min(image.currentY, image.maxY),
              image.minY
            );
            gesture.imageWrapEl.style.transitionDuration = `${momentumDuration}ms`;
            gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;
          }
          function onTransitionEnd() {
            const zoom = swiper.zoom;
            if (
              gesture.slideEl &&
              swiper.activeIndex !== swiper.slides.indexOf(gesture.slideEl)
            ) {
              if (gesture.imageEl) {
                gesture.imageEl.style.transform = "translate3d(0,0,0) scale(1)";
              }
              if (gesture.imageWrapEl) {
                gesture.imageWrapEl.style.transform = "translate3d(0,0,0)";
              }
              gesture.slideEl.classList.remove(
                `${swiper.params.zoom.zoomedSlideClass}`
              );
              zoom.scale = 1;
              currentScale = 1;
              gesture.slideEl = undefined;
              gesture.imageEl = undefined;
              gesture.imageWrapEl = undefined;
              gesture.originX = 0;
              gesture.originY = 0;
            }
          }
          function zoomIn(e) {
            const zoom = swiper.zoom;
            const params = swiper.params.zoom;
            if (!gesture.slideEl) {
              if (e && e.target) {
                gesture.slideEl = e.target.closest(
                  `.${swiper.params.slideClass}, swiper-slide`
                );
              }
              if (!gesture.slideEl) {
                if (
                  swiper.params.virtual &&
                  swiper.params.virtual.enabled &&
                  swiper.virtual
                ) {
                  gesture.slideEl = Object(
                    _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"]
                  )(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];
                } else {
                  gesture.slideEl = swiper.slides[swiper.activeIndex];
                }
              }
              let imageEl = gesture.slideEl.querySelector(
                `.${params.containerClass}`
              );
              if (imageEl) {
                imageEl = imageEl.querySelectorAll(
                  "picture, img, svg, canvas, .swiper-zoom-target"
                )[0];
              }
              gesture.imageEl = imageEl;
              if (imageEl) {
                gesture.imageWrapEl = Object(
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["a"]
                )(gesture.imageEl, `.${params.containerClass}`)[0];
              } else {
                gesture.imageWrapEl = undefined;
              }
            }
            if (!gesture.imageEl || !gesture.imageWrapEl) return;
            if (swiper.params.cssMode) {
              swiper.wrapperEl.style.overflow = "hidden";
              swiper.wrapperEl.style.touchAction = "none";
            }
            gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);
            let touchX;
            let touchY;
            let offsetX;
            let offsetY;
            let diffX;
            let diffY;
            let translateX;
            let translateY;
            let imageWidth;
            let imageHeight;
            let scaledWidth;
            let scaledHeight;
            let translateMinX;
            let translateMinY;
            let translateMaxX;
            let translateMaxY;
            let slideWidth;
            let slideHeight;
            if (typeof image.touchesStart.x === "undefined" && e) {
              touchX = e.pageX;
              touchY = e.pageY;
            } else {
              touchX = image.touchesStart.x;
              touchY = image.touchesStart.y;
            }
            const forceZoomRatio = typeof e === "number" ? e : null;
            if (currentScale === 1 && forceZoomRatio) {
              touchX = undefined;
              touchY = undefined;
            }
            const maxRatio = getMaxRatio();
            zoom.scale = forceZoomRatio || maxRatio;
            currentScale = forceZoomRatio || maxRatio;
            if (e && !(currentScale === 1 && forceZoomRatio)) {
              slideWidth = gesture.slideEl.offsetWidth;
              slideHeight = gesture.slideEl.offsetHeight;
              offsetX =
                Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["b"])(
                  gesture.slideEl
                ).left + window.scrollX;
              offsetY =
                Object(_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["b"])(
                  gesture.slideEl
                ).top + window.scrollY;
              diffX = offsetX + slideWidth / 2 - touchX;
              diffY = offsetY + slideHeight / 2 - touchY;
              imageWidth =
                gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;
              imageHeight =
                gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;
              scaledWidth = imageWidth * zoom.scale;
              scaledHeight = imageHeight * zoom.scale;
              translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
              translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
              translateMaxX = -translateMinX;
              translateMaxY = -translateMinY;
              translateX = diffX * zoom.scale;
              translateY = diffY * zoom.scale;
              if (translateX < translateMinX) {
                translateX = translateMinX;
              }
              if (translateX > translateMaxX) {
                translateX = translateMaxX;
              }
              if (translateY < translateMinY) {
                translateY = translateMinY;
              }
              if (translateY > translateMaxY) {
                translateY = translateMaxY;
              }
            } else {
              translateX = 0;
              translateY = 0;
            }
            if (forceZoomRatio && zoom.scale === 1) {
              gesture.originX = 0;
              gesture.originY = 0;
            }
            gesture.imageWrapEl.style.transitionDuration = "300ms";
            gesture.imageWrapEl.style.transform = `translate3d(${translateX}px, ${translateY}px,0)`;
            gesture.imageEl.style.transitionDuration = "300ms";
            gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
          }
          function zoomOut() {
            const zoom = swiper.zoom;
            const params = swiper.params.zoom;
            if (!gesture.slideEl) {
              if (
                swiper.params.virtual &&
                swiper.params.virtual.enabled &&
                swiper.virtual
              ) {
                gesture.slideEl = Object(
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"]
                )(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];
              } else {
                gesture.slideEl = swiper.slides[swiper.activeIndex];
              }
              let imageEl = gesture.slideEl.querySelector(
                `.${params.containerClass}`
              );
              if (imageEl) {
                imageEl = imageEl.querySelectorAll(
                  "picture, img, svg, canvas, .swiper-zoom-target"
                )[0];
              }
              gesture.imageEl = imageEl;
              if (imageEl) {
                gesture.imageWrapEl = Object(
                  _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["a"]
                )(gesture.imageEl, `.${params.containerClass}`)[0];
              } else {
                gesture.imageWrapEl = undefined;
              }
            }
            if (!gesture.imageEl || !gesture.imageWrapEl) return;
            if (swiper.params.cssMode) {
              swiper.wrapperEl.style.overflow = "";
              swiper.wrapperEl.style.touchAction = "";
            }
            zoom.scale = 1;
            currentScale = 1;
            gesture.imageWrapEl.style.transitionDuration = "300ms";
            gesture.imageWrapEl.style.transform = "translate3d(0,0,0)";
            gesture.imageEl.style.transitionDuration = "300ms";
            gesture.imageEl.style.transform = "translate3d(0,0,0) scale(1)";
            gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);
            gesture.slideEl = undefined;
            gesture.originX = 0;
            gesture.originY = 0;
          }

          // Toggle Zoom
          function zoomToggle(e) {
            const zoom = swiper.zoom;
            if (zoom.scale && zoom.scale !== 1) {
              // Zoom Out
              zoomOut();
            } else {
              // Zoom In
              zoomIn(e);
            }
          }
          function getListeners() {
            const passiveListener = swiper.params.passiveListeners
              ? {
                  passive: true,
                  capture: false,
                }
              : false;
            const activeListenerWithCapture = swiper.params.passiveListeners
              ? {
                  passive: false,
                  capture: true,
                }
              : true;
            return {
              passiveListener,
              activeListenerWithCapture,
            };
          }

          // Attach/Detach Events
          function enable() {
            const zoom = swiper.zoom;
            if (zoom.enabled) return;
            zoom.enabled = true;
            const { passiveListener, activeListenerWithCapture } =
              getListeners();

            // Scale image
            swiper.wrapperEl.addEventListener(
              "pointerdown",
              onGestureStart,
              passiveListener
            );
            swiper.wrapperEl.addEventListener(
              "pointermove",
              onGestureChange,
              activeListenerWithCapture
            );
            ["pointerup", "pointercancel", "pointerout"].forEach(
              (eventName) => {
                swiper.wrapperEl.addEventListener(
                  eventName,
                  onGestureEnd,
                  passiveListener
                );
              }
            );

            // Move image
            swiper.wrapperEl.addEventListener(
              "pointermove",
              onTouchMove,
              activeListenerWithCapture
            );
          }
          function disable() {
            const zoom = swiper.zoom;
            if (!zoom.enabled) return;
            zoom.enabled = false;
            const { passiveListener, activeListenerWithCapture } =
              getListeners();

            // Scale image
            swiper.wrapperEl.removeEventListener(
              "pointerdown",
              onGestureStart,
              passiveListener
            );
            swiper.wrapperEl.removeEventListener(
              "pointermove",
              onGestureChange,
              activeListenerWithCapture
            );
            ["pointerup", "pointercancel", "pointerout"].forEach(
              (eventName) => {
                swiper.wrapperEl.removeEventListener(
                  eventName,
                  onGestureEnd,
                  passiveListener
                );
              }
            );

            // Move image
            swiper.wrapperEl.removeEventListener(
              "pointermove",
              onTouchMove,
              activeListenerWithCapture
            );
          }
          on("init", () => {
            if (swiper.params.zoom.enabled) {
              enable();
            }
          });
          on("destroy", () => {
            disable();
          });
          on("touchStart", (_s, e) => {
            if (!swiper.zoom.enabled) return;
            onTouchStart(e);
          });
          on("touchEnd", (_s, e) => {
            if (!swiper.zoom.enabled) return;
            onTouchEnd();
          });
          on("doubleTap", (_s, e) => {
            if (
              !swiper.animating &&
              swiper.params.zoom.enabled &&
              swiper.zoom.enabled &&
              swiper.params.zoom.toggle
            ) {
              zoomToggle(e);
            }
          });
          on("transitionEnd", () => {
            if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
              onTransitionEnd();
            }
          });
          on("slideChange", () => {
            if (
              swiper.zoom.enabled &&
              swiper.params.zoom.enabled &&
              swiper.params.cssMode
            ) {
              onTransitionEnd();
            }
          });
          Object.assign(swiper.zoom, {
            enable,
            disable,
            in: zoomIn,
            out: zoomOut,
            toggle: zoomToggle,
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/shared/classes-to-selector.mjs":
      /*!************************************************************!*\
  !*** ./node_modules/swiper/shared/classes-to-selector.mjs ***!
  \************************************************************/
      /*! exports provided: c */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "c",
          function () {
            return classesToSelector;
          }
        );
        function classesToSelector(classes) {
          if (classes === void 0) {
            classes = "";
          }
          return `.${classes
            .trim()
            .replace(/([\.:!+\/])/g, "\\$1") // eslint-disable-line
            .replace(/ /g, ".")}`;
        }

        /***/
      },

    /***/ "./node_modules/swiper/shared/create-element-if-not-defined.mjs":
      /*!**********************************************************************!*\
  !*** ./node_modules/swiper/shared/create-element-if-not-defined.mjs ***!
  \**********************************************************************/
      /*! exports provided: c */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "c",
          function () {
            return createElementIfNotDefined;
          }
        );
        /* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function createElementIfNotDefined(
          swiper,
          originalParams,
          params,
          checkProps
        ) {
          if (swiper.params.createElements) {
            Object.keys(checkProps).forEach((key) => {
              if (!params[key] && params.auto === true) {
                let element = Object(
                  _utils_mjs__WEBPACK_IMPORTED_MODULE_0__["e"]
                )(swiper.el, `.${checkProps[key]}`)[0];
                if (!element) {
                  element = Object(
                    _utils_mjs__WEBPACK_IMPORTED_MODULE_0__["c"]
                  )("div", checkProps[key]);
                  element.className = checkProps[key];
                  swiper.el.append(element);
                }
                params[key] = element;
                originalParams[key] = element;
              }
            });
          }
          return params;
        }

        /***/
      },

    /***/ "./node_modules/swiper/shared/create-shadow.mjs":
      /*!******************************************************!*\
  !*** ./node_modules/swiper/shared/create-shadow.mjs ***!
  \******************************************************/
      /*! exports provided: c */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "c",
          function () {
            return createShadow;
          }
        );
        /* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function createShadow(suffix, slideEl, side) {
          const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ""}${
            suffix ? ` swiper-slide-shadow-${suffix}` : ""
          }`;
          const shadowContainer = Object(
            _utils_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )(slideEl);
          let shadowEl = shadowContainer.querySelector(
            `.${shadowClass.split(" ").join(".")}`
          );
          if (!shadowEl) {
            shadowEl = Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["c"])(
              "div",
              shadowClass.split(" ")
            );
            shadowContainer.append(shadowEl);
          }
          return shadowEl;
        }

        /***/
      },

    /***/ "./node_modules/swiper/shared/effect-init.mjs":
      /*!****************************************************!*\
  !*** ./node_modules/swiper/shared/effect-init.mjs ***!
  \****************************************************/
      /*! exports provided: e */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "e",
          function () {
            return effectInit;
          }
        );
        function effectInit(params) {
          const {
            effect,
            swiper,
            on,
            setTranslate,
            setTransition,
            overwriteParams,
            perspective,
            recreateShadows,
            getEffectParams,
          } = params;
          on("beforeInit", () => {
            if (swiper.params.effect !== effect) return;
            swiper.classNames.push(
              `${swiper.params.containerModifierClass}${effect}`
            );
            if (perspective && perspective()) {
              swiper.classNames.push(
                `${swiper.params.containerModifierClass}3d`
              );
            }
            const overwriteParamsResult = overwriteParams
              ? overwriteParams()
              : {};
            Object.assign(swiper.params, overwriteParamsResult);
            Object.assign(swiper.originalParams, overwriteParamsResult);
          });
          on("setTranslate", () => {
            if (swiper.params.effect !== effect) return;
            setTranslate();
          });
          on("setTransition", (_s, duration) => {
            if (swiper.params.effect !== effect) return;
            setTransition(duration);
          });
          on("transitionEnd", () => {
            if (swiper.params.effect !== effect) return;
            if (recreateShadows) {
              if (!getEffectParams || !getEffectParams().slideShadows) return;
              // remove shadows
              swiper.slides.forEach((slideEl) => {
                slideEl
                  .querySelectorAll(
                    ".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left"
                  )
                  .forEach((shadowEl) => shadowEl.remove());
              });
              // create new one
              recreateShadows();
            }
          });
          let requireUpdateOnVirtual;
          on("virtualUpdate", () => {
            if (swiper.params.effect !== effect) return;
            if (!swiper.slides.length) {
              requireUpdateOnVirtual = true;
            }
            requestAnimationFrame(() => {
              if (
                requireUpdateOnVirtual &&
                swiper.slides &&
                swiper.slides.length
              ) {
                setTranslate();
                requireUpdateOnVirtual = false;
              }
            });
          });
        }

        /***/
      },

    /***/ "./node_modules/swiper/shared/effect-target.mjs":
      /*!******************************************************!*\
  !*** ./node_modules/swiper/shared/effect-target.mjs ***!
  \******************************************************/
      /*! exports provided: e */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "e",
          function () {
            return effectTarget;
          }
        );
        /* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function effectTarget(effectParams, slideEl) {
          const transformEl = Object(
            _utils_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )(slideEl);
          if (transformEl !== slideEl) {
            transformEl.style.backfaceVisibility = "hidden";
            transformEl.style["-webkit-backface-visibility"] = "hidden";
          }
          return transformEl;
        }

        /***/
      },

    /***/ "./node_modules/swiper/shared/effect-virtual-transition-end.mjs":
      /*!**********************************************************************!*\
  !*** ./node_modules/swiper/shared/effect-virtual-transition-end.mjs ***!
  \**********************************************************************/
      /*! exports provided: e */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "e",
          function () {
            return effectVirtualTransitionEnd;
          }
        );
        /* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        function effectVirtualTransitionEnd(_ref) {
          let { swiper, duration, transformElements, allSlides } = _ref;
          const { activeIndex } = swiper;
          const getSlide = (el) => {
            if (!el.parentElement) {
              // assume shadow root
              const slide = swiper.slides.filter(
                (slideEl) =>
                  slideEl.shadowRoot && slideEl.shadowRoot === el.parentNode
              )[0];
              return slide;
            }
            return el.parentElement;
          };
          if (swiper.params.virtualTranslate && duration !== 0) {
            let eventTriggered = false;
            let transitionEndTarget;
            if (allSlides) {
              transitionEndTarget = transformElements;
            } else {
              transitionEndTarget = transformElements.filter((transformEl) => {
                const el = transformEl.classList.contains(
                  "swiper-slide-transform"
                )
                  ? getSlide(transformEl)
                  : transformEl;
                return swiper.getSlideIndex(el) === activeIndex;
              });
            }
            transitionEndTarget.forEach((el) => {
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_0__["k"])(el, () => {
                if (eventTriggered) return;
                if (!swiper || swiper.destroyed) return;
                eventTriggered = true;
                swiper.animating = false;
                const evt = new window.CustomEvent("transitionend", {
                  bubbles: true,
                  cancelable: true,
                });
                swiper.wrapperEl.dispatchEvent(evt);
              });
            });
          }
        }

        /***/
      },

    /***/ "./node_modules/swiper/shared/ssr-window.esm.mjs":
      /*!*******************************************************!*\
  !*** ./node_modules/swiper/shared/ssr-window.esm.mjs ***!
  \*******************************************************/
      /*! exports provided: a, g */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "a",
          function () {
            return getWindow;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "g",
          function () {
            return getDocument;
          }
        );
        /**
         * SSR Window 4.0.2
         * Better handling for window object in SSR environment
         * https://github.com/nolimits4web/ssr-window
         *
         * Copyright 2021, Vladimir Kharlampidi
         *
         * Licensed under MIT
         *
         * Released on: December 13, 2021
         */
        /* eslint-disable no-param-reassign */
        function isObject(obj) {
          return (
            obj !== null &&
            typeof obj === "object" &&
            "constructor" in obj &&
            obj.constructor === Object
          );
        }
        function extend(target, src) {
          if (target === void 0) {
            target = {};
          }
          if (src === void 0) {
            src = {};
          }
          Object.keys(src).forEach((key) => {
            if (typeof target[key] === "undefined") target[key] = src[key];
            else if (
              isObject(src[key]) &&
              isObject(target[key]) &&
              Object.keys(src[key]).length > 0
            ) {
              extend(target[key], src[key]);
            }
          });
        }
        const ssrDocument = {
          body: {},
          addEventListener() {},
          removeEventListener() {},
          activeElement: {
            blur() {},
            nodeName: "",
          },
          querySelector() {
            return null;
          },
          querySelectorAll() {
            return [];
          },
          getElementById() {
            return null;
          },
          createEvent() {
            return {
              initEvent() {},
            };
          },
          createElement() {
            return {
              children: [],
              childNodes: [],
              style: {},
              setAttribute() {},
              getElementsByTagName() {
                return [];
              },
            };
          },
          createElementNS() {
            return {};
          },
          importNode() {
            return null;
          },
          location: {
            hash: "",
            host: "",
            hostname: "",
            href: "",
            origin: "",
            pathname: "",
            protocol: "",
            search: "",
          },
        };
        function getDocument() {
          const doc = typeof document !== "undefined" ? document : {};
          extend(doc, ssrDocument);
          return doc;
        }
        const ssrWindow = {
          document: ssrDocument,
          navigator: {
            userAgent: "",
          },
          location: {
            hash: "",
            host: "",
            hostname: "",
            href: "",
            origin: "",
            pathname: "",
            protocol: "",
            search: "",
          },
          history: {
            replaceState() {},
            pushState() {},
            go() {},
            back() {},
          },
          CustomEvent: function CustomEvent() {
            return this;
          },
          addEventListener() {},
          removeEventListener() {},
          getComputedStyle() {
            return {
              getPropertyValue() {
                return "";
              },
            };
          },
          Image() {},
          Date() {},
          screen: {},
          setTimeout() {},
          clearTimeout() {},
          matchMedia() {
            return {};
          },
          requestAnimationFrame(callback) {
            if (typeof setTimeout === "undefined") {
              callback();
              return null;
            }
            return setTimeout(callback, 0);
          },
          cancelAnimationFrame(id) {
            if (typeof setTimeout === "undefined") {
              return;
            }
            clearTimeout(id);
          },
        };
        function getWindow() {
          const win = typeof window !== "undefined" ? window : {};
          extend(win, ssrWindow);
          return win;
        }

        /***/
      },

    /***/ "./node_modules/swiper/shared/swiper-core.mjs":
      /*!****************************************************!*\
  !*** ./node_modules/swiper/shared/swiper-core.mjs ***!
  \****************************************************/
      /*! exports provided: S, d */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "S",
          function () {
            return Swiper;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "d",
          function () {
            return defaults;
          }
        );
        /* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );
        /* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./utils.mjs */ "./node_modules/swiper/shared/utils.mjs"
          );

        let support;
        function calcSupport() {
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          const document = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )();
          return {
            smoothScroll:
              document.documentElement &&
              document.documentElement.style &&
              "scrollBehavior" in document.documentElement.style,
            touch: !!(
              "ontouchstart" in window ||
              (window.DocumentTouch && document instanceof window.DocumentTouch)
            ),
          };
        }
        function getSupport() {
          if (!support) {
            support = calcSupport();
          }
          return support;
        }

        let deviceCached;
        function calcDevice(_temp) {
          let { userAgent } = _temp === void 0 ? {} : _temp;
          const support = getSupport();
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          const platform = window.navigator.platform;
          const ua = userAgent || window.navigator.userAgent;
          const device = {
            ios: false,
            android: false,
          };
          const screenWidth = window.screen.width;
          const screenHeight = window.screen.height;
          const android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line
          let ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
          const ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
          const iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
          const windows = platform === "Win32";
          let macos = platform === "MacIntel";

          // iPadOs 13 fix
          const iPadScreens = [
            "1024x1366",
            "1366x1024",
            "834x1194",
            "1194x834",
            "834x1112",
            "1112x834",
            "768x1024",
            "1024x768",
            "820x1180",
            "1180x820",
            "810x1080",
            "1080x810",
          ];
          if (
            !ipad &&
            macos &&
            support.touch &&
            iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0
          ) {
            ipad = ua.match(/(Version)\/([\d.]+)/);
            if (!ipad) ipad = [0, 1, "13_0_0"];
            macos = false;
          }

          // Android
          if (android && !windows) {
            device.os = "android";
            device.android = true;
          }
          if (ipad || iphone || ipod) {
            device.os = "ios";
            device.ios = true;
          }

          // Export object
          return device;
        }
        function getDevice(overrides) {
          if (overrides === void 0) {
            overrides = {};
          }
          if (!deviceCached) {
            deviceCached = calcDevice(overrides);
          }
          return deviceCached;
        }

        let browser;
        function calcBrowser() {
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          const device = getDevice();
          let needPerspectiveFix = false;
          function isSafari() {
            const ua = window.navigator.userAgent.toLowerCase();
            return (
              ua.indexOf("safari") >= 0 &&
              ua.indexOf("chrome") < 0 &&
              ua.indexOf("android") < 0
            );
          }
          if (isSafari()) {
            const ua = String(window.navigator.userAgent);
            if (ua.includes("Version/")) {
              const [major, minor] = ua
                .split("Version/")[1]
                .split(" ")[0]
                .split(".")
                .map((num) => Number(num));
              needPerspectiveFix = major < 16 || (major === 16 && minor < 2);
            }
          }
          const isWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(
            window.navigator.userAgent
          );
          const isSafariBrowser = isSafari();
          const need3dFix = isSafariBrowser || (isWebView && device.ios);
          return {
            isSafari: needPerspectiveFix || isSafariBrowser,
            needPerspectiveFix,
            need3dFix,
            isWebView,
          };
        }
        function getBrowser() {
          if (!browser) {
            browser = calcBrowser();
          }
          return browser;
        }

        function Resize(_ref) {
          let { swiper, on, emit } = _ref;
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          let observer = null;
          let animationFrame = null;
          const resizeHandler = () => {
            if (!swiper || swiper.destroyed || !swiper.initialized) return;
            emit("beforeResize");
            emit("resize");
          };
          const createObserver = () => {
            if (!swiper || swiper.destroyed || !swiper.initialized) return;
            observer = new ResizeObserver((entries) => {
              animationFrame = window.requestAnimationFrame(() => {
                const { width, height } = swiper;
                let newWidth = width;
                let newHeight = height;
                entries.forEach((_ref2) => {
                  let { contentBoxSize, contentRect, target } = _ref2;
                  if (target && target !== swiper.el) return;
                  newWidth = contentRect
                    ? contentRect.width
                    : (contentBoxSize[0] || contentBoxSize).inlineSize;
                  newHeight = contentRect
                    ? contentRect.height
                    : (contentBoxSize[0] || contentBoxSize).blockSize;
                });
                if (newWidth !== width || newHeight !== height) {
                  resizeHandler();
                }
              });
            });
            observer.observe(swiper.el);
          };
          const removeObserver = () => {
            if (animationFrame) {
              window.cancelAnimationFrame(animationFrame);
            }
            if (observer && observer.unobserve && swiper.el) {
              observer.unobserve(swiper.el);
              observer = null;
            }
          };
          const orientationChangeHandler = () => {
            if (!swiper || swiper.destroyed || !swiper.initialized) return;
            emit("orientationchange");
          };
          on("init", () => {
            if (
              swiper.params.resizeObserver &&
              typeof window.ResizeObserver !== "undefined"
            ) {
              createObserver();
              return;
            }
            window.addEventListener("resize", resizeHandler);
            window.addEventListener(
              "orientationchange",
              orientationChangeHandler
            );
          });
          on("destroy", () => {
            removeObserver();
            window.removeEventListener("resize", resizeHandler);
            window.removeEventListener(
              "orientationchange",
              orientationChangeHandler
            );
          });
        }

        function Observer(_ref) {
          let { swiper, extendParams, on, emit } = _ref;
          const observers = [];
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          const attach = function (target, options) {
            if (options === void 0) {
              options = {};
            }
            const ObserverFunc =
              window.MutationObserver || window.WebkitMutationObserver;
            const observer = new ObserverFunc((mutations) => {
              // The observerUpdate event should only be triggered
              // once despite the number of mutations.  Additional
              // triggers are redundant and are very costly
              if (swiper.__preventObserver__) return;
              if (mutations.length === 1) {
                emit("observerUpdate", mutations[0]);
                return;
              }
              const observerUpdate = function observerUpdate() {
                emit("observerUpdate", mutations[0]);
              };
              if (window.requestAnimationFrame) {
                window.requestAnimationFrame(observerUpdate);
              } else {
                window.setTimeout(observerUpdate, 0);
              }
            });
            observer.observe(target, {
              attributes:
                typeof options.attributes === "undefined"
                  ? true
                  : options.attributes,
              childList:
                typeof options.childList === "undefined"
                  ? true
                  : options.childList,
              characterData:
                typeof options.characterData === "undefined"
                  ? true
                  : options.characterData,
            });
            observers.push(observer);
          };
          const init = () => {
            if (!swiper.params.observer) return;
            if (swiper.params.observeParents) {
              const containerParents = Object(
                _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["a"]
              )(swiper.hostEl);
              for (let i = 0; i < containerParents.length; i += 1) {
                attach(containerParents[i]);
              }
            }
            // Observe container
            attach(swiper.hostEl, {
              childList: swiper.params.observeSlideChildren,
            });

            // Observe wrapper
            attach(swiper.wrapperEl, {
              attributes: false,
            });
          };
          const destroy = () => {
            observers.forEach((observer) => {
              observer.disconnect();
            });
            observers.splice(0, observers.length);
          };
          extendParams({
            observer: false,
            observeParents: false,
            observeSlideChildren: false,
          });
          on("init", init);
          on("destroy", destroy);
        }

        /* eslint-disable no-underscore-dangle */

        var eventsEmitter = {
          on(events, handler, priority) {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (typeof handler !== "function") return self;
            const method = priority ? "unshift" : "push";
            events.split(" ").forEach((event) => {
              if (!self.eventsListeners[event])
                self.eventsListeners[event] = [];
              self.eventsListeners[event][method](handler);
            });
            return self;
          },
          once(events, handler, priority) {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (typeof handler !== "function") return self;
            function onceHandler() {
              self.off(events, onceHandler);
              if (onceHandler.__emitterProxy) {
                delete onceHandler.__emitterProxy;
              }
              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }
              handler.apply(self, args);
            }
            onceHandler.__emitterProxy = handler;
            return self.on(events, onceHandler, priority);
          },
          onAny(handler, priority) {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (typeof handler !== "function") return self;
            const method = priority ? "unshift" : "push";
            if (self.eventsAnyListeners.indexOf(handler) < 0) {
              self.eventsAnyListeners[method](handler);
            }
            return self;
          },
          offAny(handler) {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (!self.eventsAnyListeners) return self;
            const index = self.eventsAnyListeners.indexOf(handler);
            if (index >= 0) {
              self.eventsAnyListeners.splice(index, 1);
            }
            return self;
          },
          off(events, handler) {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (!self.eventsListeners) return self;
            events.split(" ").forEach((event) => {
              if (typeof handler === "undefined") {
                self.eventsListeners[event] = [];
              } else if (self.eventsListeners[event]) {
                self.eventsListeners[event].forEach((eventHandler, index) => {
                  if (
                    eventHandler === handler ||
                    (eventHandler.__emitterProxy &&
                      eventHandler.__emitterProxy === handler)
                  ) {
                    self.eventsListeners[event].splice(index, 1);
                  }
                });
              }
            });
            return self;
          },
          emit() {
            const self = this;
            if (!self.eventsListeners || self.destroyed) return self;
            if (!self.eventsListeners) return self;
            let events;
            let data;
            let context;
            for (
              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2] = arguments[_key2];
            }
            if (typeof args[0] === "string" || Array.isArray(args[0])) {
              events = args[0];
              data = args.slice(1, args.length);
              context = self;
            } else {
              events = args[0].events;
              data = args[0].data;
              context = args[0].context || self;
            }
            data.unshift(context);
            const eventsArray = Array.isArray(events)
              ? events
              : events.split(" ");
            eventsArray.forEach((event) => {
              if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
                self.eventsAnyListeners.forEach((eventHandler) => {
                  eventHandler.apply(context, [event, ...data]);
                });
              }
              if (self.eventsListeners && self.eventsListeners[event]) {
                self.eventsListeners[event].forEach((eventHandler) => {
                  eventHandler.apply(context, data);
                });
              }
            });
            return self;
          },
        };

        function updateSize() {
          const swiper = this;
          let width;
          let height;
          const el = swiper.el;
          if (
            typeof swiper.params.width !== "undefined" &&
            swiper.params.width !== null
          ) {
            width = swiper.params.width;
          } else {
            width = el.clientWidth;
          }
          if (
            typeof swiper.params.height !== "undefined" &&
            swiper.params.height !== null
          ) {
            height = swiper.params.height;
          } else {
            height = el.clientHeight;
          }
          if (
            (width === 0 && swiper.isHorizontal()) ||
            (height === 0 && swiper.isVertical())
          ) {
            return;
          }

          // Subtract paddings
          width =
            width -
            parseInt(
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["o"])(
                el,
                "padding-left"
              ) || 0,
              10
            ) -
            parseInt(
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["o"])(
                el,
                "padding-right"
              ) || 0,
              10
            );
          height =
            height -
            parseInt(
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["o"])(
                el,
                "padding-top"
              ) || 0,
              10
            ) -
            parseInt(
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["o"])(
                el,
                "padding-bottom"
              ) || 0,
              10
            );
          if (Number.isNaN(width)) width = 0;
          if (Number.isNaN(height)) height = 0;
          Object.assign(swiper, {
            width,
            height,
            size: swiper.isHorizontal() ? width : height,
          });
        }

        function updateSlides() {
          const swiper = this;
          function getDirectionPropertyValue(node, label) {
            return parseFloat(
              node.getPropertyValue(swiper.getDirectionLabel(label)) || 0
            );
          }
          const params = swiper.params;
          const {
            wrapperEl,
            slidesEl,
            size: swiperSize,
            rtlTranslate: rtl,
            wrongRTL,
          } = swiper;
          const isVirtual = swiper.virtual && params.virtual.enabled;
          const previousSlidesLength = isVirtual
            ? swiper.virtual.slides.length
            : swiper.slides.length;
          const slides = Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
            slidesEl,
            `.${swiper.params.slideClass}, swiper-slide`
          );
          const slidesLength = isVirtual
            ? swiper.virtual.slides.length
            : slides.length;
          let snapGrid = [];
          const slidesGrid = [];
          const slidesSizesGrid = [];
          let offsetBefore = params.slidesOffsetBefore;
          if (typeof offsetBefore === "function") {
            offsetBefore = params.slidesOffsetBefore.call(swiper);
          }
          let offsetAfter = params.slidesOffsetAfter;
          if (typeof offsetAfter === "function") {
            offsetAfter = params.slidesOffsetAfter.call(swiper);
          }
          const previousSnapGridLength = swiper.snapGrid.length;
          const previousSlidesGridLength = swiper.slidesGrid.length;
          let spaceBetween = params.spaceBetween;
          let slidePosition = -offsetBefore;
          let prevSlideSize = 0;
          let index = 0;
          if (typeof swiperSize === "undefined") {
            return;
          }
          if (
            typeof spaceBetween === "string" &&
            spaceBetween.indexOf("%") >= 0
          ) {
            spaceBetween =
              (parseFloat(spaceBetween.replace("%", "")) / 100) * swiperSize;
          } else if (typeof spaceBetween === "string") {
            spaceBetween = parseFloat(spaceBetween);
          }
          swiper.virtualSize = -spaceBetween;

          // reset margins
          slides.forEach((slideEl) => {
            if (rtl) {
              slideEl.style.marginLeft = "";
            } else {
              slideEl.style.marginRight = "";
            }
            slideEl.style.marginBottom = "";
            slideEl.style.marginTop = "";
          });

          // reset cssMode offsets
          if (params.centeredSlides && params.cssMode) {
            Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["s"])(
              wrapperEl,
              "--swiper-centered-offset-before",
              ""
            );
            Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["s"])(
              wrapperEl,
              "--swiper-centered-offset-after",
              ""
            );
          }
          const gridEnabled =
            params.grid && params.grid.rows > 1 && swiper.grid;
          if (gridEnabled) {
            swiper.grid.initSlides(slides);
          } else if (swiper.grid) {
            swiper.grid.unsetSlides();
          }

          // Calc slides
          let slideSize;
          const shouldResetSlideSize =
            params.slidesPerView === "auto" &&
            params.breakpoints &&
            Object.keys(params.breakpoints).filter((key) => {
              return (
                typeof params.breakpoints[key].slidesPerView !== "undefined"
              );
            }).length > 0;
          for (let i = 0; i < slidesLength; i += 1) {
            slideSize = 0;
            let slide;
            if (slides[i]) slide = slides[i];
            if (gridEnabled) {
              swiper.grid.updateSlide(i, slide, slides);
            }
            if (
              slides[i] &&
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["o"])(
                slide,
                "display"
              ) === "none"
            )
              continue; // eslint-disable-line

            if (params.slidesPerView === "auto") {
              if (shouldResetSlideSize) {
                slides[i].style[swiper.getDirectionLabel("width")] = ``;
              }
              const slideStyles = getComputedStyle(slide);
              const currentTransform = slide.style.transform;
              const currentWebKitTransform = slide.style.webkitTransform;
              if (currentTransform) {
                slide.style.transform = "none";
              }
              if (currentWebKitTransform) {
                slide.style.webkitTransform = "none";
              }
              if (params.roundLengths) {
                slideSize = swiper.isHorizontal()
                  ? Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["f"])(
                      slide,
                      "width",
                      true
                    )
                  : Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["f"])(
                      slide,
                      "height",
                      true
                    );
              } else {
                // eslint-disable-next-line
                const width = getDirectionPropertyValue(slideStyles, "width");
                const paddingLeft = getDirectionPropertyValue(
                  slideStyles,
                  "padding-left"
                );
                const paddingRight = getDirectionPropertyValue(
                  slideStyles,
                  "padding-right"
                );
                const marginLeft = getDirectionPropertyValue(
                  slideStyles,
                  "margin-left"
                );
                const marginRight = getDirectionPropertyValue(
                  slideStyles,
                  "margin-right"
                );
                const boxSizing = slideStyles.getPropertyValue("box-sizing");
                if (boxSizing && boxSizing === "border-box") {
                  slideSize = width + marginLeft + marginRight;
                } else {
                  const { clientWidth, offsetWidth } = slide;
                  slideSize =
                    width +
                    paddingLeft +
                    paddingRight +
                    marginLeft +
                    marginRight +
                    (offsetWidth - clientWidth);
                }
              }
              if (currentTransform) {
                slide.style.transform = currentTransform;
              }
              if (currentWebKitTransform) {
                slide.style.webkitTransform = currentWebKitTransform;
              }
              if (params.roundLengths) slideSize = Math.floor(slideSize);
            } else {
              slideSize =
                (swiperSize - (params.slidesPerView - 1) * spaceBetween) /
                params.slidesPerView;
              if (params.roundLengths) slideSize = Math.floor(slideSize);
              if (slides[i]) {
                slides[i].style[
                  swiper.getDirectionLabel("width")
                ] = `${slideSize}px`;
              }
            }
            if (slides[i]) {
              slides[i].swiperSlideSize = slideSize;
            }
            slidesSizesGrid.push(slideSize);
            if (params.centeredSlides) {
              slidePosition =
                slidePosition +
                slideSize / 2 +
                prevSlideSize / 2 +
                spaceBetween;
              if (prevSlideSize === 0 && i !== 0)
                slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
              if (i === 0)
                slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
              if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
              if (params.roundLengths)
                slidePosition = Math.floor(slidePosition);
              if (index % params.slidesPerGroup === 0)
                snapGrid.push(slidePosition);
              slidesGrid.push(slidePosition);
            } else {
              if (params.roundLengths)
                slidePosition = Math.floor(slidePosition);
              if (
                (index - Math.min(swiper.params.slidesPerGroupSkip, index)) %
                  swiper.params.slidesPerGroup ===
                0
              )
                snapGrid.push(slidePosition);
              slidesGrid.push(slidePosition);
              slidePosition = slidePosition + slideSize + spaceBetween;
            }
            swiper.virtualSize += slideSize + spaceBetween;
            prevSlideSize = slideSize;
            index += 1;
          }
          swiper.virtualSize =
            Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
          if (
            rtl &&
            wrongRTL &&
            (params.effect === "slide" || params.effect === "coverflow")
          ) {
            wrapperEl.style.width = `${swiper.virtualSize + spaceBetween}px`;
          }
          if (params.setWrapperSize) {
            wrapperEl.style[swiper.getDirectionLabel("width")] = `${
              swiper.virtualSize + spaceBetween
            }px`;
          }
          if (gridEnabled) {
            swiper.grid.updateWrapperSize(slideSize, snapGrid);
          }

          // Remove last grid elements depending on width
          if (!params.centeredSlides) {
            const newSlidesGrid = [];
            for (let i = 0; i < snapGrid.length; i += 1) {
              let slidesGridItem = snapGrid[i];
              if (params.roundLengths)
                slidesGridItem = Math.floor(slidesGridItem);
              if (snapGrid[i] <= swiper.virtualSize - swiperSize) {
                newSlidesGrid.push(slidesGridItem);
              }
            }
            snapGrid = newSlidesGrid;
            if (
              Math.floor(swiper.virtualSize - swiperSize) -
                Math.floor(snapGrid[snapGrid.length - 1]) >
              1
            ) {
              snapGrid.push(swiper.virtualSize - swiperSize);
            }
          }
          if (isVirtual && params.loop) {
            const size = slidesSizesGrid[0] + spaceBetween;
            if (params.slidesPerGroup > 1) {
              const groups = Math.ceil(
                (swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) /
                  params.slidesPerGroup
              );
              const groupSize = size * params.slidesPerGroup;
              for (let i = 0; i < groups; i += 1) {
                snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);
              }
            }
            for (
              let i = 0;
              i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter;
              i += 1
            ) {
              if (params.slidesPerGroup === 1) {
                snapGrid.push(snapGrid[snapGrid.length - 1] + size);
              }
              slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);
              swiper.virtualSize += size;
            }
          }
          if (snapGrid.length === 0) snapGrid = [0];
          if (spaceBetween !== 0) {
            const key =
              swiper.isHorizontal() && rtl
                ? "marginLeft"
                : swiper.getDirectionLabel("marginRight");
            slides
              .filter((_, slideIndex) => {
                if (!params.cssMode || params.loop) return true;
                if (slideIndex === slides.length - 1) {
                  return false;
                }
                return true;
              })
              .forEach((slideEl) => {
                slideEl.style[key] = `${spaceBetween}px`;
              });
          }
          if (params.centeredSlides && params.centeredSlidesBounds) {
            let allSlidesSize = 0;
            slidesSizesGrid.forEach((slideSizeValue) => {
              allSlidesSize += slideSizeValue + (spaceBetween || 0);
            });
            allSlidesSize -= spaceBetween;
            const maxSnap = allSlidesSize - swiperSize;
            snapGrid = snapGrid.map((snap) => {
              if (snap <= 0) return -offsetBefore;
              if (snap > maxSnap) return maxSnap + offsetAfter;
              return snap;
            });
          }
          if (params.centerInsufficientSlides) {
            let allSlidesSize = 0;
            slidesSizesGrid.forEach((slideSizeValue) => {
              allSlidesSize += slideSizeValue + (spaceBetween || 0);
            });
            allSlidesSize -= spaceBetween;
            const offsetSize =
              (params.slidesOffsetBefore || 0) +
              (params.slidesOffsetAfter || 0);
            if (allSlidesSize + offsetSize < swiperSize) {
              const allSlidesOffset =
                (swiperSize - allSlidesSize - offsetSize) / 2;
              snapGrid.forEach((snap, snapIndex) => {
                snapGrid[snapIndex] = snap - allSlidesOffset;
              });
              slidesGrid.forEach((snap, snapIndex) => {
                slidesGrid[snapIndex] = snap + allSlidesOffset;
              });
            }
          }
          Object.assign(swiper, {
            slides,
            snapGrid,
            slidesGrid,
            slidesSizesGrid,
          });
          if (
            params.centeredSlides &&
            params.cssMode &&
            !params.centeredSlidesBounds
          ) {
            Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["s"])(
              wrapperEl,
              "--swiper-centered-offset-before",
              `${-snapGrid[0]}px`
            );
            Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["s"])(
              wrapperEl,
              "--swiper-centered-offset-after",
              `${
                swiper.size / 2 -
                slidesSizesGrid[slidesSizesGrid.length - 1] / 2
              }px`
            );
            const addToSnapGrid = -swiper.snapGrid[0];
            const addToSlidesGrid = -swiper.slidesGrid[0];
            swiper.snapGrid = swiper.snapGrid.map((v) => v + addToSnapGrid);
            swiper.slidesGrid = swiper.slidesGrid.map(
              (v) => v + addToSlidesGrid
            );
          }
          if (slidesLength !== previousSlidesLength) {
            swiper.emit("slidesLengthChange");
          }
          if (snapGrid.length !== previousSnapGridLength) {
            if (swiper.params.watchOverflow) swiper.checkOverflow();
            swiper.emit("snapGridLengthChange");
          }
          if (slidesGrid.length !== previousSlidesGridLength) {
            swiper.emit("slidesGridLengthChange");
          }
          if (params.watchSlidesProgress) {
            swiper.updateSlidesOffset();
          }
          swiper.emit("slidesUpdated");
          if (
            !isVirtual &&
            !params.cssMode &&
            (params.effect === "slide" || params.effect === "fade")
          ) {
            const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;
            const hasClassBackfaceClassAdded =
              swiper.el.classList.contains(backFaceHiddenClass);
            if (slidesLength <= params.maxBackfaceHiddenSlides) {
              if (!hasClassBackfaceClassAdded)
                swiper.el.classList.add(backFaceHiddenClass);
            } else if (hasClassBackfaceClassAdded) {
              swiper.el.classList.remove(backFaceHiddenClass);
            }
          }
        }

        function updateAutoHeight(speed) {
          const swiper = this;
          const activeSlides = [];
          const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
          let newHeight = 0;
          let i;
          if (typeof speed === "number") {
            swiper.setTransition(speed);
          } else if (speed === true) {
            swiper.setTransition(swiper.params.speed);
          }
          const getSlideByIndex = (index) => {
            if (isVirtual) {
              return swiper.slides[swiper.getSlideIndexByData(index)];
            }
            return swiper.slides[index];
          };
          // Find slides currently in view
          if (
            swiper.params.slidesPerView !== "auto" &&
            swiper.params.slidesPerView > 1
          ) {
            if (swiper.params.centeredSlides) {
              (swiper.visibleSlides || []).forEach((slide) => {
                activeSlides.push(slide);
              });
            } else {
              for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
                const index = swiper.activeIndex + i;
                if (index > swiper.slides.length && !isVirtual) break;
                activeSlides.push(getSlideByIndex(index));
              }
            }
          } else {
            activeSlides.push(getSlideByIndex(swiper.activeIndex));
          }

          // Find new height from highest slide in view
          for (i = 0; i < activeSlides.length; i += 1) {
            if (typeof activeSlides[i] !== "undefined") {
              const height = activeSlides[i].offsetHeight;
              newHeight = height > newHeight ? height : newHeight;
            }
          }

          // Update Height
          if (newHeight || newHeight === 0)
            swiper.wrapperEl.style.height = `${newHeight}px`;
        }

        function updateSlidesOffset() {
          const swiper = this;
          const slides = swiper.slides;
          // eslint-disable-next-line
          const minusOffset = swiper.isElement
            ? swiper.isHorizontal()
              ? swiper.wrapperEl.offsetLeft
              : swiper.wrapperEl.offsetTop
            : 0;
          for (let i = 0; i < slides.length; i += 1) {
            slides[i].swiperSlideOffset =
              (swiper.isHorizontal()
                ? slides[i].offsetLeft
                : slides[i].offsetTop) -
              minusOffset -
              swiper.cssOverflowAdjustment();
          }
        }

        const toggleSlideClasses$1 = (slideEl, condition, className) => {
          if (condition && !slideEl.classList.contains(className)) {
            slideEl.classList.add(className);
          } else if (!condition && slideEl.classList.contains(className)) {
            slideEl.classList.remove(className);
          }
        };
        function updateSlidesProgress(translate) {
          if (translate === void 0) {
            translate = (this && this.translate) || 0;
          }
          const swiper = this;
          const params = swiper.params;
          const { slides, rtlTranslate: rtl, snapGrid } = swiper;
          if (slides.length === 0) return;
          if (typeof slides[0].swiperSlideOffset === "undefined")
            swiper.updateSlidesOffset();
          let offsetCenter = -translate;
          if (rtl) offsetCenter = translate;
          swiper.visibleSlidesIndexes = [];
          swiper.visibleSlides = [];
          let spaceBetween = params.spaceBetween;
          if (
            typeof spaceBetween === "string" &&
            spaceBetween.indexOf("%") >= 0
          ) {
            spaceBetween =
              (parseFloat(spaceBetween.replace("%", "")) / 100) * swiper.size;
          } else if (typeof spaceBetween === "string") {
            spaceBetween = parseFloat(spaceBetween);
          }
          for (let i = 0; i < slides.length; i += 1) {
            const slide = slides[i];
            let slideOffset = slide.swiperSlideOffset;
            if (params.cssMode && params.centeredSlides) {
              slideOffset -= slides[0].swiperSlideOffset;
            }
            const slideProgress =
              (offsetCenter +
                (params.centeredSlides ? swiper.minTranslate() : 0) -
                slideOffset) /
              (slide.swiperSlideSize + spaceBetween);
            const originalSlideProgress =
              (offsetCenter -
                snapGrid[0] +
                (params.centeredSlides ? swiper.minTranslate() : 0) -
                slideOffset) /
              (slide.swiperSlideSize + spaceBetween);
            const slideBefore = -(offsetCenter - slideOffset);
            const slideAfter = slideBefore + swiper.slidesSizesGrid[i];
            const isFullyVisible =
              slideBefore >= 0 &&
              slideBefore <= swiper.size - swiper.slidesSizesGrid[i];
            const isVisible =
              (slideBefore >= 0 && slideBefore < swiper.size - 1) ||
              (slideAfter > 1 && slideAfter <= swiper.size) ||
              (slideBefore <= 0 && slideAfter >= swiper.size);
            if (isVisible) {
              swiper.visibleSlides.push(slide);
              swiper.visibleSlidesIndexes.push(i);
            }
            toggleSlideClasses$1(slide, isVisible, params.slideVisibleClass);
            toggleSlideClasses$1(
              slide,
              isFullyVisible,
              params.slideFullyVisibleClass
            );
            slide.progress = rtl ? -slideProgress : slideProgress;
            slide.originalProgress = rtl
              ? -originalSlideProgress
              : originalSlideProgress;
          }
        }

        function updateProgress(translate) {
          const swiper = this;
          if (typeof translate === "undefined") {
            const multiplier = swiper.rtlTranslate ? -1 : 1;
            // eslint-disable-next-line
            translate =
              (swiper && swiper.translate && swiper.translate * multiplier) ||
              0;
          }
          const params = swiper.params;
          const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
          let { progress, isBeginning, isEnd, progressLoop } = swiper;
          const wasBeginning = isBeginning;
          const wasEnd = isEnd;
          if (translatesDiff === 0) {
            progress = 0;
            isBeginning = true;
            isEnd = true;
          } else {
            progress = (translate - swiper.minTranslate()) / translatesDiff;
            const isBeginningRounded =
              Math.abs(translate - swiper.minTranslate()) < 1;
            const isEndRounded =
              Math.abs(translate - swiper.maxTranslate()) < 1;
            isBeginning = isBeginningRounded || progress <= 0;
            isEnd = isEndRounded || progress >= 1;
            if (isBeginningRounded) progress = 0;
            if (isEndRounded) progress = 1;
          }
          if (params.loop) {
            const firstSlideIndex = swiper.getSlideIndexByData(0);
            const lastSlideIndex = swiper.getSlideIndexByData(
              swiper.slides.length - 1
            );
            const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];
            const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];
            const translateMax =
              swiper.slidesGrid[swiper.slidesGrid.length - 1];
            const translateAbs = Math.abs(translate);
            if (translateAbs >= firstSlideTranslate) {
              progressLoop =
                (translateAbs - firstSlideTranslate) / translateMax;
            } else {
              progressLoop =
                (translateAbs + translateMax - lastSlideTranslate) /
                translateMax;
            }
            if (progressLoop > 1) progressLoop -= 1;
          }
          Object.assign(swiper, {
            progress,
            progressLoop,
            isBeginning,
            isEnd,
          });
          if (
            params.watchSlidesProgress ||
            (params.centeredSlides && params.autoHeight)
          )
            swiper.updateSlidesProgress(translate);
          if (isBeginning && !wasBeginning) {
            swiper.emit("reachBeginning toEdge");
          }
          if (isEnd && !wasEnd) {
            swiper.emit("reachEnd toEdge");
          }
          if ((wasBeginning && !isBeginning) || (wasEnd && !isEnd)) {
            swiper.emit("fromEdge");
          }
          swiper.emit("progress", progress);
        }

        const toggleSlideClasses = (slideEl, condition, className) => {
          if (condition && !slideEl.classList.contains(className)) {
            slideEl.classList.add(className);
          } else if (!condition && slideEl.classList.contains(className)) {
            slideEl.classList.remove(className);
          }
        };
        function updateSlidesClasses() {
          const swiper = this;
          const { slides, params, slidesEl, activeIndex } = swiper;
          const isVirtual = swiper.virtual && params.virtual.enabled;
          const gridEnabled =
            swiper.grid && params.grid && params.grid.rows > 1;
          const getFilteredSlide = (selector) => {
            return Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
              slidesEl,
              `.${params.slideClass}${selector}, swiper-slide${selector}`
            )[0];
          };
          let activeSlide;
          let prevSlide;
          let nextSlide;
          if (isVirtual) {
            if (params.loop) {
              let slideIndex = activeIndex - swiper.virtual.slidesBefore;
              if (slideIndex < 0)
                slideIndex = swiper.virtual.slides.length + slideIndex;
              if (slideIndex >= swiper.virtual.slides.length)
                slideIndex -= swiper.virtual.slides.length;
              activeSlide = getFilteredSlide(
                `[data-swiper-slide-index="${slideIndex}"]`
              );
            } else {
              activeSlide = getFilteredSlide(
                `[data-swiper-slide-index="${activeIndex}"]`
              );
            }
          } else {
            if (gridEnabled) {
              activeSlide = slides.filter(
                (slideEl) => slideEl.column === activeIndex
              )[0];
              nextSlide = slides.filter(
                (slideEl) => slideEl.column === activeIndex + 1
              )[0];
              prevSlide = slides.filter(
                (slideEl) => slideEl.column === activeIndex - 1
              )[0];
            } else {
              activeSlide = slides[activeIndex];
            }
          }
          if (activeSlide) {
            if (!gridEnabled) {
              // Next Slide
              nextSlide = Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["p"])(
                activeSlide,
                `.${params.slideClass}, swiper-slide`
              )[0];
              if (params.loop && !nextSlide) {
                nextSlide = slides[0];
              }

              // Prev Slide
              prevSlide = Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["q"])(
                activeSlide,
                `.${params.slideClass}, swiper-slide`
              )[0];
              if (params.loop && !prevSlide === 0) {
                prevSlide = slides[slides.length - 1];
              }
            }
          }
          slides.forEach((slideEl) => {
            toggleSlideClasses(
              slideEl,
              slideEl === activeSlide,
              params.slideActiveClass
            );
            toggleSlideClasses(
              slideEl,
              slideEl === nextSlide,
              params.slideNextClass
            );
            toggleSlideClasses(
              slideEl,
              slideEl === prevSlide,
              params.slidePrevClass
            );
          });
          swiper.emitSlidesClasses();
        }

        const processLazyPreloader = (swiper, imageEl) => {
          if (!swiper || swiper.destroyed || !swiper.params) return;
          const slideSelector = () =>
            swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;
          const slideEl = imageEl.closest(slideSelector());
          if (slideEl) {
            let lazyEl = slideEl.querySelector(
              `.${swiper.params.lazyPreloaderClass}`
            );
            if (!lazyEl && swiper.isElement) {
              if (slideEl.shadowRoot) {
                lazyEl = slideEl.shadowRoot.querySelector(
                  `.${swiper.params.lazyPreloaderClass}`
                );
              } else {
                // init later
                requestAnimationFrame(() => {
                  if (slideEl.shadowRoot) {
                    lazyEl = slideEl.shadowRoot.querySelector(
                      `.${swiper.params.lazyPreloaderClass}`
                    );
                    if (lazyEl) lazyEl.remove();
                  }
                });
              }
            }
            if (lazyEl) lazyEl.remove();
          }
        };
        const unlazy = (swiper, index) => {
          if (!swiper.slides[index]) return;
          const imageEl =
            swiper.slides[index].querySelector('[loading="lazy"]');
          if (imageEl) imageEl.removeAttribute("loading");
        };
        const preload = (swiper) => {
          if (!swiper || swiper.destroyed || !swiper.params) return;
          let amount = swiper.params.lazyPreloadPrevNext;
          const len = swiper.slides.length;
          if (!len || !amount || amount < 0) return;
          amount = Math.min(amount, len);
          const slidesPerView =
            swiper.params.slidesPerView === "auto"
              ? swiper.slidesPerViewDynamic()
              : Math.ceil(swiper.params.slidesPerView);
          const activeIndex = swiper.activeIndex;
          if (swiper.params.grid && swiper.params.grid.rows > 1) {
            const activeColumn = activeIndex;
            const preloadColumns = [activeColumn - amount];
            preloadColumns.push(
              ...Array.from({
                length: amount,
              }).map((_, i) => {
                return activeColumn + slidesPerView + i;
              })
            );
            swiper.slides.forEach((slideEl, i) => {
              if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);
            });
            return;
          }
          const slideIndexLastInView = activeIndex + slidesPerView - 1;
          if (swiper.params.rewind || swiper.params.loop) {
            for (
              let i = activeIndex - amount;
              i <= slideIndexLastInView + amount;
              i += 1
            ) {
              const realIndex = ((i % len) + len) % len;
              if (realIndex < activeIndex || realIndex > slideIndexLastInView)
                unlazy(swiper, realIndex);
            }
          } else {
            for (
              let i = Math.max(activeIndex - amount, 0);
              i <= Math.min(slideIndexLastInView + amount, len - 1);
              i += 1
            ) {
              if (
                i !== activeIndex &&
                (i > slideIndexLastInView || i < activeIndex)
              ) {
                unlazy(swiper, i);
              }
            }
          }
        };

        function getActiveIndexByTranslate(swiper) {
          const { slidesGrid, params } = swiper;
          const translate = swiper.rtlTranslate
            ? swiper.translate
            : -swiper.translate;
          let activeIndex;
          for (let i = 0; i < slidesGrid.length; i += 1) {
            if (typeof slidesGrid[i + 1] !== "undefined") {
              if (
                translate >= slidesGrid[i] &&
                translate <
                  slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2
              ) {
                activeIndex = i;
              } else if (
                translate >= slidesGrid[i] &&
                translate < slidesGrid[i + 1]
              ) {
                activeIndex = i + 1;
              }
            } else if (translate >= slidesGrid[i]) {
              activeIndex = i;
            }
          }
          // Normalize slideIndex
          if (params.normalizeSlideIndex) {
            if (activeIndex < 0 || typeof activeIndex === "undefined")
              activeIndex = 0;
          }
          return activeIndex;
        }
        function updateActiveIndex(newActiveIndex) {
          const swiper = this;
          const translate = swiper.rtlTranslate
            ? swiper.translate
            : -swiper.translate;
          const {
            snapGrid,
            params,
            activeIndex: previousIndex,
            realIndex: previousRealIndex,
            snapIndex: previousSnapIndex,
          } = swiper;
          let activeIndex = newActiveIndex;
          let snapIndex;
          const getVirtualRealIndex = (aIndex) => {
            let realIndex = aIndex - swiper.virtual.slidesBefore;
            if (realIndex < 0) {
              realIndex = swiper.virtual.slides.length + realIndex;
            }
            if (realIndex >= swiper.virtual.slides.length) {
              realIndex -= swiper.virtual.slides.length;
            }
            return realIndex;
          };
          if (typeof activeIndex === "undefined") {
            activeIndex = getActiveIndexByTranslate(swiper);
          }
          if (snapGrid.indexOf(translate) >= 0) {
            snapIndex = snapGrid.indexOf(translate);
          } else {
            const skip = Math.min(params.slidesPerGroupSkip, activeIndex);
            snapIndex =
              skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
          }
          if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
          if (activeIndex === previousIndex && !swiper.params.loop) {
            if (snapIndex !== previousSnapIndex) {
              swiper.snapIndex = snapIndex;
              swiper.emit("snapIndexChange");
            }
            return;
          }
          if (
            activeIndex === previousIndex &&
            swiper.params.loop &&
            swiper.virtual &&
            swiper.params.virtual.enabled
          ) {
            swiper.realIndex = getVirtualRealIndex(activeIndex);
            return;
          }
          const gridEnabled =
            swiper.grid && params.grid && params.grid.rows > 1;

          // Get real index
          let realIndex;
          if (swiper.virtual && params.virtual.enabled && params.loop) {
            realIndex = getVirtualRealIndex(activeIndex);
          } else if (gridEnabled) {
            const firstSlideInColumn = swiper.slides.filter(
              (slideEl) => slideEl.column === activeIndex
            )[0];
            let activeSlideIndex = parseInt(
              firstSlideInColumn.getAttribute("data-swiper-slide-index"),
              10
            );
            if (Number.isNaN(activeSlideIndex)) {
              activeSlideIndex = Math.max(
                swiper.slides.indexOf(firstSlideInColumn),
                0
              );
            }
            realIndex = Math.floor(activeSlideIndex / params.grid.rows);
          } else if (swiper.slides[activeIndex]) {
            const slideIndex = swiper.slides[activeIndex].getAttribute(
              "data-swiper-slide-index"
            );
            if (slideIndex) {
              realIndex = parseInt(slideIndex, 10);
            } else {
              realIndex = activeIndex;
            }
          } else {
            realIndex = activeIndex;
          }
          Object.assign(swiper, {
            previousSnapIndex,
            snapIndex,
            previousRealIndex,
            realIndex,
            previousIndex,
            activeIndex,
          });
          if (swiper.initialized) {
            preload(swiper);
          }
          swiper.emit("activeIndexChange");
          swiper.emit("snapIndexChange");
          if (swiper.initialized || swiper.params.runCallbacksOnInit) {
            if (previousRealIndex !== realIndex) {
              swiper.emit("realIndexChange");
            }
            swiper.emit("slideChange");
          }
        }

        function updateClickedSlide(el, path) {
          const swiper = this;
          const params = swiper.params;
          let slide = el.closest(`.${params.slideClass}, swiper-slide`);
          if (
            !slide &&
            swiper.isElement &&
            path &&
            path.length > 1 &&
            path.includes(el)
          ) {
            [...path.slice(path.indexOf(el) + 1, path.length)].forEach(
              (pathEl) => {
                if (
                  !slide &&
                  pathEl.matches &&
                  pathEl.matches(`.${params.slideClass}, swiper-slide`)
                ) {
                  slide = pathEl;
                }
              }
            );
          }
          let slideFound = false;
          let slideIndex;
          if (slide) {
            for (let i = 0; i < swiper.slides.length; i += 1) {
              if (swiper.slides[i] === slide) {
                slideFound = true;
                slideIndex = i;
                break;
              }
            }
          }
          if (slide && slideFound) {
            swiper.clickedSlide = slide;
            if (swiper.virtual && swiper.params.virtual.enabled) {
              swiper.clickedIndex = parseInt(
                slide.getAttribute("data-swiper-slide-index"),
                10
              );
            } else {
              swiper.clickedIndex = slideIndex;
            }
          } else {
            swiper.clickedSlide = undefined;
            swiper.clickedIndex = undefined;
            return;
          }
          if (
            params.slideToClickedSlide &&
            swiper.clickedIndex !== undefined &&
            swiper.clickedIndex !== swiper.activeIndex
          ) {
            swiper.slideToClickedSlide();
          }
        }

        var update = {
          updateSize,
          updateSlides,
          updateAutoHeight,
          updateSlidesOffset,
          updateSlidesProgress,
          updateProgress,
          updateSlidesClasses,
          updateActiveIndex,
          updateClickedSlide,
        };

        function getSwiperTranslate(axis) {
          if (axis === void 0) {
            axis = this.isHorizontal() ? "x" : "y";
          }
          const swiper = this;
          const { params, rtlTranslate: rtl, translate, wrapperEl } = swiper;
          if (params.virtualTranslate) {
            return rtl ? -translate : translate;
          }
          if (params.cssMode) {
            return translate;
          }
          let currentTranslate = Object(
            _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["j"]
          )(wrapperEl, axis);
          currentTranslate += swiper.cssOverflowAdjustment();
          if (rtl) currentTranslate = -currentTranslate;
          return currentTranslate || 0;
        }

        function setTranslate(translate, byController) {
          const swiper = this;
          const { rtlTranslate: rtl, params, wrapperEl, progress } = swiper;
          let x = 0;
          let y = 0;
          const z = 0;
          if (swiper.isHorizontal()) {
            x = rtl ? -translate : translate;
          } else {
            y = translate;
          }
          if (params.roundLengths) {
            x = Math.floor(x);
            y = Math.floor(y);
          }
          swiper.previousTranslate = swiper.translate;
          swiper.translate = swiper.isHorizontal() ? x : y;
          if (params.cssMode) {
            wrapperEl[swiper.isHorizontal() ? "scrollLeft" : "scrollTop"] =
              swiper.isHorizontal() ? -x : -y;
          } else if (!params.virtualTranslate) {
            if (swiper.isHorizontal()) {
              x -= swiper.cssOverflowAdjustment();
            } else {
              y -= swiper.cssOverflowAdjustment();
            }
            wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;
          }

          // Check if we need to update progress
          let newProgress;
          const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
          if (translatesDiff === 0) {
            newProgress = 0;
          } else {
            newProgress = (translate - swiper.minTranslate()) / translatesDiff;
          }
          if (newProgress !== progress) {
            swiper.updateProgress(translate);
          }
          swiper.emit("setTranslate", swiper.translate, byController);
        }

        function minTranslate() {
          return -this.snapGrid[0];
        }

        function maxTranslate() {
          return -this.snapGrid[this.snapGrid.length - 1];
        }

        function translateTo(
          translate,
          speed,
          runCallbacks,
          translateBounds,
          internal
        ) {
          if (translate === void 0) {
            translate = 0;
          }
          if (speed === void 0) {
            speed = this.params.speed;
          }
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          if (translateBounds === void 0) {
            translateBounds = true;
          }
          const swiper = this;
          const { params, wrapperEl } = swiper;
          if (swiper.animating && params.preventInteractionOnTransition) {
            return false;
          }
          const minTranslate = swiper.minTranslate();
          const maxTranslate = swiper.maxTranslate();
          let newTranslate;
          if (translateBounds && translate > minTranslate)
            newTranslate = minTranslate;
          else if (translateBounds && translate < maxTranslate)
            newTranslate = maxTranslate;
          else newTranslate = translate;

          // Update progress
          swiper.updateProgress(newTranslate);
          if (params.cssMode) {
            const isH = swiper.isHorizontal();
            if (speed === 0) {
              wrapperEl[isH ? "scrollLeft" : "scrollTop"] = -newTranslate;
            } else {
              if (!swiper.support.smoothScroll) {
                Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["r"])({
                  swiper,
                  targetPosition: -newTranslate,
                  side: isH ? "left" : "top",
                });
                return true;
              }
              wrapperEl.scrollTo({
                [isH ? "left" : "top"]: -newTranslate,
                behavior: "smooth",
              });
            }
            return true;
          }
          if (speed === 0) {
            swiper.setTransition(0);
            swiper.setTranslate(newTranslate);
            if (runCallbacks) {
              swiper.emit("beforeTransitionStart", speed, internal);
              swiper.emit("transitionEnd");
            }
          } else {
            swiper.setTransition(speed);
            swiper.setTranslate(newTranslate);
            if (runCallbacks) {
              swiper.emit("beforeTransitionStart", speed, internal);
              swiper.emit("transitionStart");
            }
            if (!swiper.animating) {
              swiper.animating = true;
              if (!swiper.onTranslateToWrapperTransitionEnd) {
                swiper.onTranslateToWrapperTransitionEnd =
                  function transitionEnd(e) {
                    if (!swiper || swiper.destroyed) return;
                    if (e.target !== this) return;
                    swiper.wrapperEl.removeEventListener(
                      "transitionend",
                      swiper.onTranslateToWrapperTransitionEnd
                    );
                    swiper.onTranslateToWrapperTransitionEnd = null;
                    delete swiper.onTranslateToWrapperTransitionEnd;
                    swiper.animating = false;
                    if (runCallbacks) {
                      swiper.emit("transitionEnd");
                    }
                  };
              }
              swiper.wrapperEl.addEventListener(
                "transitionend",
                swiper.onTranslateToWrapperTransitionEnd
              );
            }
          }
          return true;
        }

        var translate = {
          getTranslate: getSwiperTranslate,
          setTranslate,
          minTranslate,
          maxTranslate,
          translateTo,
        };

        function setTransition(duration, byController) {
          const swiper = this;
          if (!swiper.params.cssMode) {
            swiper.wrapperEl.style.transitionDuration = `${duration}ms`;
            swiper.wrapperEl.style.transitionDelay =
              duration === 0 ? `0ms` : "";
          }
          swiper.emit("setTransition", duration, byController);
        }

        function transitionEmit(_ref) {
          let { swiper, runCallbacks, direction, step } = _ref;
          const { activeIndex, previousIndex } = swiper;
          let dir = direction;
          if (!dir) {
            if (activeIndex > previousIndex) dir = "next";
            else if (activeIndex < previousIndex) dir = "prev";
            else dir = "reset";
          }
          swiper.emit(`transition${step}`);
          if (runCallbacks && activeIndex !== previousIndex) {
            if (dir === "reset") {
              swiper.emit(`slideResetTransition${step}`);
              return;
            }
            swiper.emit(`slideChangeTransition${step}`);
            if (dir === "next") {
              swiper.emit(`slideNextTransition${step}`);
            } else {
              swiper.emit(`slidePrevTransition${step}`);
            }
          }
        }

        function transitionStart(runCallbacks, direction) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          const swiper = this;
          const { params } = swiper;
          if (params.cssMode) return;
          if (params.autoHeight) {
            swiper.updateAutoHeight();
          }
          transitionEmit({
            swiper,
            runCallbacks,
            direction,
            step: "Start",
          });
        }

        function transitionEnd(runCallbacks, direction) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          const swiper = this;
          const { params } = swiper;
          swiper.animating = false;
          if (params.cssMode) return;
          swiper.setTransition(0);
          transitionEmit({
            swiper,
            runCallbacks,
            direction,
            step: "End",
          });
        }

        var transition = {
          setTransition,
          transitionStart,
          transitionEnd,
        };

        function slideTo(index, speed, runCallbacks, internal, initial) {
          if (index === void 0) {
            index = 0;
          }
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          if (typeof index === "string") {
            index = parseInt(index, 10);
          }
          const swiper = this;
          let slideIndex = index;
          if (slideIndex < 0) slideIndex = 0;
          const {
            params,
            snapGrid,
            slidesGrid,
            previousIndex,
            activeIndex,
            rtlTranslate: rtl,
            wrapperEl,
            enabled,
          } = swiper;
          if (
            (!enabled && !internal && !initial) ||
            swiper.destroyed ||
            (swiper.animating && params.preventInteractionOnTransition)
          ) {
            return false;
          }
          if (typeof speed === "undefined") {
            speed = swiper.params.speed;
          }
          const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
          let snapIndex =
            skip +
            Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
          if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
          const translate = -snapGrid[snapIndex];
          // Normalize slideIndex
          if (params.normalizeSlideIndex) {
            for (let i = 0; i < slidesGrid.length; i += 1) {
              const normalizedTranslate = -Math.floor(translate * 100);
              const normalizedGrid = Math.floor(slidesGrid[i] * 100);
              const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);
              if (typeof slidesGrid[i + 1] !== "undefined") {
                if (
                  normalizedTranslate >= normalizedGrid &&
                  normalizedTranslate <
                    normalizedGridNext -
                      (normalizedGridNext - normalizedGrid) / 2
                ) {
                  slideIndex = i;
                } else if (
                  normalizedTranslate >= normalizedGrid &&
                  normalizedTranslate < normalizedGridNext
                ) {
                  slideIndex = i + 1;
                }
              } else if (normalizedTranslate >= normalizedGrid) {
                slideIndex = i;
              }
            }
          }
          // Directions locks
          if (swiper.initialized && slideIndex !== activeIndex) {
            if (
              !swiper.allowSlideNext &&
              (rtl
                ? translate > swiper.translate &&
                  translate > swiper.minTranslate()
                : translate < swiper.translate &&
                  translate < swiper.minTranslate())
            ) {
              return false;
            }
            if (
              !swiper.allowSlidePrev &&
              translate > swiper.translate &&
              translate > swiper.maxTranslate()
            ) {
              if ((activeIndex || 0) !== slideIndex) {
                return false;
              }
            }
          }
          if (slideIndex !== (previousIndex || 0) && runCallbacks) {
            swiper.emit("beforeSlideChangeStart");
          }

          // Update progress
          swiper.updateProgress(translate);
          let direction;
          if (slideIndex > activeIndex) direction = "next";
          else if (slideIndex < activeIndex) direction = "prev";
          else direction = "reset";

          // Update Index
          if (
            (rtl && -translate === swiper.translate) ||
            (!rtl && translate === swiper.translate)
          ) {
            swiper.updateActiveIndex(slideIndex);
            // Update Height
            if (params.autoHeight) {
              swiper.updateAutoHeight();
            }
            swiper.updateSlidesClasses();
            if (params.effect !== "slide") {
              swiper.setTranslate(translate);
            }
            if (direction !== "reset") {
              swiper.transitionStart(runCallbacks, direction);
              swiper.transitionEnd(runCallbacks, direction);
            }
            return false;
          }
          if (params.cssMode) {
            const isH = swiper.isHorizontal();
            const t = rtl ? translate : -translate;
            if (speed === 0) {
              const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
              if (isVirtual) {
                swiper.wrapperEl.style.scrollSnapType = "none";
                swiper._immediateVirtual = true;
              }
              if (
                isVirtual &&
                !swiper._cssModeVirtualInitialSet &&
                swiper.params.initialSlide > 0
              ) {
                swiper._cssModeVirtualInitialSet = true;
                requestAnimationFrame(() => {
                  wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t;
                });
              } else {
                wrapperEl[isH ? "scrollLeft" : "scrollTop"] = t;
              }
              if (isVirtual) {
                requestAnimationFrame(() => {
                  swiper.wrapperEl.style.scrollSnapType = "";
                  swiper._immediateVirtual = false;
                });
              }
            } else {
              if (!swiper.support.smoothScroll) {
                Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["r"])({
                  swiper,
                  targetPosition: t,
                  side: isH ? "left" : "top",
                });
                return true;
              }
              wrapperEl.scrollTo({
                [isH ? "left" : "top"]: t,
                behavior: "smooth",
              });
            }
            return true;
          }
          swiper.setTransition(speed);
          swiper.setTranslate(translate);
          swiper.updateActiveIndex(slideIndex);
          swiper.updateSlidesClasses();
          swiper.emit("beforeTransitionStart", speed, internal);
          swiper.transitionStart(runCallbacks, direction);
          if (speed === 0) {
            swiper.transitionEnd(runCallbacks, direction);
          } else if (!swiper.animating) {
            swiper.animating = true;
            if (!swiper.onSlideToWrapperTransitionEnd) {
              swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
                if (!swiper || swiper.destroyed) return;
                if (e.target !== this) return;
                swiper.wrapperEl.removeEventListener(
                  "transitionend",
                  swiper.onSlideToWrapperTransitionEnd
                );
                swiper.onSlideToWrapperTransitionEnd = null;
                delete swiper.onSlideToWrapperTransitionEnd;
                swiper.transitionEnd(runCallbacks, direction);
              };
            }
            swiper.wrapperEl.addEventListener(
              "transitionend",
              swiper.onSlideToWrapperTransitionEnd
            );
          }
          return true;
        }

        function slideToLoop(index, speed, runCallbacks, internal) {
          if (index === void 0) {
            index = 0;
          }
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          if (typeof index === "string") {
            const indexAsNumber = parseInt(index, 10);
            index = indexAsNumber;
          }
          const swiper = this;
          if (swiper.destroyed) return;
          if (typeof speed === "undefined") {
            speed = swiper.params.speed;
          }
          const gridEnabled =
            swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;
          let newIndex = index;
          if (swiper.params.loop) {
            if (swiper.virtual && swiper.params.virtual.enabled) {
              // eslint-disable-next-line
              newIndex = newIndex + swiper.virtual.slidesBefore;
            } else {
              let targetSlideIndex;
              if (gridEnabled) {
                const slideIndex = newIndex * swiper.params.grid.rows;
                targetSlideIndex = swiper.slides.filter(
                  (slideEl) =>
                    slideEl.getAttribute("data-swiper-slide-index") * 1 ===
                    slideIndex
                )[0].column;
              } else {
                targetSlideIndex = swiper.getSlideIndexByData(newIndex);
              }
              const cols = gridEnabled
                ? Math.ceil(swiper.slides.length / swiper.params.grid.rows)
                : swiper.slides.length;
              const { centeredSlides } = swiper.params;
              let slidesPerView = swiper.params.slidesPerView;
              if (slidesPerView === "auto") {
                slidesPerView = swiper.slidesPerViewDynamic();
              } else {
                slidesPerView = Math.ceil(
                  parseFloat(swiper.params.slidesPerView, 10)
                );
                if (centeredSlides && slidesPerView % 2 === 0) {
                  slidesPerView = slidesPerView + 1;
                }
              }
              let needLoopFix = cols - targetSlideIndex < slidesPerView;
              if (centeredSlides) {
                needLoopFix =
                  needLoopFix ||
                  targetSlideIndex < Math.ceil(slidesPerView / 2);
              }
              if (
                internal &&
                centeredSlides &&
                swiper.params.slidesPerView !== "auto" &&
                !gridEnabled
              ) {
                needLoopFix = false;
              }
              if (needLoopFix) {
                const direction = centeredSlides
                  ? targetSlideIndex < swiper.activeIndex
                    ? "prev"
                    : "next"
                  : targetSlideIndex - swiper.activeIndex - 1 <
                    swiper.params.slidesPerView
                  ? "next"
                  : "prev";
                swiper.loopFix({
                  direction,
                  slideTo: true,
                  activeSlideIndex:
                    direction === "next"
                      ? targetSlideIndex + 1
                      : targetSlideIndex - cols + 1,
                  slideRealIndex:
                    direction === "next" ? swiper.realIndex : undefined,
                });
              }
              if (gridEnabled) {
                const slideIndex = newIndex * swiper.params.grid.rows;
                newIndex = swiper.slides.filter(
                  (slideEl) =>
                    slideEl.getAttribute("data-swiper-slide-index") * 1 ===
                    slideIndex
                )[0].column;
              } else {
                newIndex = swiper.getSlideIndexByData(newIndex);
              }
            }
          }
          requestAnimationFrame(() => {
            swiper.slideTo(newIndex, speed, runCallbacks, internal);
          });
          return swiper;
        }

        /* eslint no-unused-vars: "off" */
        function slideNext(speed, runCallbacks, internal) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          const swiper = this;
          const { enabled, params, animating } = swiper;
          if (!enabled || swiper.destroyed) return swiper;
          if (typeof speed === "undefined") {
            speed = swiper.params.speed;
          }
          let perGroup = params.slidesPerGroup;
          if (
            params.slidesPerView === "auto" &&
            params.slidesPerGroup === 1 &&
            params.slidesPerGroupAuto
          ) {
            perGroup = Math.max(
              swiper.slidesPerViewDynamic("current", true),
              1
            );
          }
          const increment =
            swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;
          const isVirtual = swiper.virtual && params.virtual.enabled;
          if (params.loop) {
            if (animating && !isVirtual && params.loopPreventsSliding)
              return false;
            swiper.loopFix({
              direction: "next",
            });
            // eslint-disable-next-line
            swiper._clientLeft = swiper.wrapperEl.clientLeft;
            if (
              swiper.activeIndex === swiper.slides.length - 1 &&
              params.cssMode
            ) {
              requestAnimationFrame(() => {
                swiper.slideTo(
                  swiper.activeIndex + increment,
                  speed,
                  runCallbacks,
                  internal
                );
              });
              return true;
            }
          }
          if (params.rewind && swiper.isEnd) {
            return swiper.slideTo(0, speed, runCallbacks, internal);
          }
          return swiper.slideTo(
            swiper.activeIndex + increment,
            speed,
            runCallbacks,
            internal
          );
        }

        /* eslint no-unused-vars: "off" */
        function slidePrev(speed, runCallbacks, internal) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          const swiper = this;
          const {
            params,
            snapGrid,
            slidesGrid,
            rtlTranslate,
            enabled,
            animating,
          } = swiper;
          if (!enabled || swiper.destroyed) return swiper;
          if (typeof speed === "undefined") {
            speed = swiper.params.speed;
          }
          const isVirtual = swiper.virtual && params.virtual.enabled;
          if (params.loop) {
            if (animating && !isVirtual && params.loopPreventsSliding)
              return false;
            swiper.loopFix({
              direction: "prev",
            });
            // eslint-disable-next-line
            swiper._clientLeft = swiper.wrapperEl.clientLeft;
          }
          const translate = rtlTranslate ? swiper.translate : -swiper.translate;
          function normalize(val) {
            if (val < 0) return -Math.floor(Math.abs(val));
            return Math.floor(val);
          }
          const normalizedTranslate = normalize(translate);
          const normalizedSnapGrid = snapGrid.map((val) => normalize(val));
          let prevSnap =
            snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
          if (typeof prevSnap === "undefined" && params.cssMode) {
            let prevSnapIndex;
            snapGrid.forEach((snap, snapIndex) => {
              if (normalizedTranslate >= snap) {
                // prevSnap = snap;
                prevSnapIndex = snapIndex;
              }
            });
            if (typeof prevSnapIndex !== "undefined") {
              prevSnap =
                snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];
            }
          }
          let prevIndex = 0;
          if (typeof prevSnap !== "undefined") {
            prevIndex = slidesGrid.indexOf(prevSnap);
            if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
            if (
              params.slidesPerView === "auto" &&
              params.slidesPerGroup === 1 &&
              params.slidesPerGroupAuto
            ) {
              prevIndex =
                prevIndex - swiper.slidesPerViewDynamic("previous", true) + 1;
              prevIndex = Math.max(prevIndex, 0);
            }
          }
          if (params.rewind && swiper.isBeginning) {
            const lastIndex =
              swiper.params.virtual &&
              swiper.params.virtual.enabled &&
              swiper.virtual
                ? swiper.virtual.slides.length - 1
                : swiper.slides.length - 1;
            return swiper.slideTo(lastIndex, speed, runCallbacks, internal);
          } else if (
            params.loop &&
            swiper.activeIndex === 0 &&
            params.cssMode
          ) {
            requestAnimationFrame(() => {
              swiper.slideTo(prevIndex, speed, runCallbacks, internal);
            });
            return true;
          }
          return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
        }

        /* eslint no-unused-vars: "off" */
        function slideReset(speed, runCallbacks, internal) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          const swiper = this;
          if (swiper.destroyed) return;
          if (typeof speed === "undefined") {
            speed = swiper.params.speed;
          }
          return swiper.slideTo(
            swiper.activeIndex,
            speed,
            runCallbacks,
            internal
          );
        }

        /* eslint no-unused-vars: "off" */
        function slideToClosest(speed, runCallbacks, internal, threshold) {
          if (runCallbacks === void 0) {
            runCallbacks = true;
          }
          if (threshold === void 0) {
            threshold = 0.5;
          }
          const swiper = this;
          if (swiper.destroyed) return;
          if (typeof speed === "undefined") {
            speed = swiper.params.speed;
          }
          let index = swiper.activeIndex;
          const skip = Math.min(swiper.params.slidesPerGroupSkip, index);
          const snapIndex =
            skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
          const translate = swiper.rtlTranslate
            ? swiper.translate
            : -swiper.translate;
          if (translate >= swiper.snapGrid[snapIndex]) {
            // The current translate is on or after the current snap index, so the choice
            // is between the current index and the one after it.
            const currentSnap = swiper.snapGrid[snapIndex];
            const nextSnap = swiper.snapGrid[snapIndex + 1];
            if (
              translate - currentSnap >
              (nextSnap - currentSnap) * threshold
            ) {
              index += swiper.params.slidesPerGroup;
            }
          } else {
            // The current translate is before the current snap index, so the choice
            // is between the current index and the one before it.
            const prevSnap = swiper.snapGrid[snapIndex - 1];
            const currentSnap = swiper.snapGrid[snapIndex];
            if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {
              index -= swiper.params.slidesPerGroup;
            }
          }
          index = Math.max(index, 0);
          index = Math.min(index, swiper.slidesGrid.length - 1);
          return swiper.slideTo(index, speed, runCallbacks, internal);
        }

        function slideToClickedSlide() {
          const swiper = this;
          if (swiper.destroyed) return;
          const { params, slidesEl } = swiper;
          const slidesPerView =
            params.slidesPerView === "auto"
              ? swiper.slidesPerViewDynamic()
              : params.slidesPerView;
          let slideToIndex = swiper.clickedIndex;
          let realIndex;
          const slideSelector = swiper.isElement
            ? `swiper-slide`
            : `.${params.slideClass}`;
          if (params.loop) {
            if (swiper.animating) return;
            realIndex = parseInt(
              swiper.clickedSlide.getAttribute("data-swiper-slide-index"),
              10
            );
            if (params.centeredSlides) {
              if (
                slideToIndex < swiper.loopedSlides - slidesPerView / 2 ||
                slideToIndex >
                  swiper.slides.length - swiper.loopedSlides + slidesPerView / 2
              ) {
                swiper.loopFix();
                slideToIndex = swiper.getSlideIndex(
                  Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
                    slidesEl,
                    `${slideSelector}[data-swiper-slide-index="${realIndex}"]`
                  )[0]
                );
                Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["n"])(() => {
                  swiper.slideTo(slideToIndex);
                });
              } else {
                swiper.slideTo(slideToIndex);
              }
            } else if (slideToIndex > swiper.slides.length - slidesPerView) {
              swiper.loopFix();
              slideToIndex = swiper.getSlideIndex(
                Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
                  slidesEl,
                  `${slideSelector}[data-swiper-slide-index="${realIndex}"]`
                )[0]
              );
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["n"])(() => {
                swiper.slideTo(slideToIndex);
              });
            } else {
              swiper.slideTo(slideToIndex);
            }
          } else {
            swiper.slideTo(slideToIndex);
          }
        }

        var slide = {
          slideTo,
          slideToLoop,
          slideNext,
          slidePrev,
          slideReset,
          slideToClosest,
          slideToClickedSlide,
        };

        function loopCreate(slideRealIndex) {
          const swiper = this;
          const { params, slidesEl } = swiper;
          if (!params.loop || (swiper.virtual && swiper.params.virtual.enabled))
            return;
          const initSlides = () => {
            const slides = Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
              slidesEl,
              `.${params.slideClass}, swiper-slide`
            );
            slides.forEach((el, index) => {
              el.setAttribute("data-swiper-slide-index", index);
            });
          };
          const gridEnabled =
            swiper.grid && params.grid && params.grid.rows > 1;
          const slidesPerGroup =
            params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);
          const shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;
          const shouldFillGrid =
            gridEnabled && swiper.slides.length % params.grid.rows !== 0;
          const addBlankSlides = (amountOfSlides) => {
            for (let i = 0; i < amountOfSlides; i += 1) {
              const slideEl = swiper.isElement
                ? Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["c"])(
                    "swiper-slide",
                    [params.slideBlankClass]
                  )
                : Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["c"])("div", [
                    params.slideClass,
                    params.slideBlankClass,
                  ]);
              swiper.slidesEl.append(slideEl);
            }
          };
          if (shouldFillGroup) {
            if (params.loopAddBlankSlides) {
              const slidesToAdd =
                slidesPerGroup - (swiper.slides.length % slidesPerGroup);
              addBlankSlides(slidesToAdd);
              swiper.recalcSlides();
              swiper.updateSlides();
            } else {
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["t"])(
                "Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"
              );
            }
            initSlides();
          } else if (shouldFillGrid) {
            if (params.loopAddBlankSlides) {
              const slidesToAdd =
                params.grid.rows - (swiper.slides.length % params.grid.rows);
              addBlankSlides(slidesToAdd);
              swiper.recalcSlides();
              swiper.updateSlides();
            } else {
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["t"])(
                "Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"
              );
            }
            initSlides();
          } else {
            initSlides();
          }
          swiper.loopFix({
            slideRealIndex,
            direction: params.centeredSlides ? undefined : "next",
          });
        }

        function loopFix(_temp) {
          let {
            slideRealIndex,
            slideTo = true,
            direction,
            setTranslate,
            activeSlideIndex,
            byController,
            byMousewheel,
          } = _temp === void 0 ? {} : _temp;
          const swiper = this;
          if (!swiper.params.loop) return;
          swiper.emit("beforeLoopFix");
          const { slides, allowSlidePrev, allowSlideNext, slidesEl, params } =
            swiper;
          const { centeredSlides } = params;
          swiper.allowSlidePrev = true;
          swiper.allowSlideNext = true;
          if (swiper.virtual && params.virtual.enabled) {
            if (slideTo) {
              if (!params.centeredSlides && swiper.snapIndex === 0) {
                swiper.slideTo(swiper.virtual.slides.length, 0, false, true);
              } else if (
                params.centeredSlides &&
                swiper.snapIndex < params.slidesPerView
              ) {
                swiper.slideTo(
                  swiper.virtual.slides.length + swiper.snapIndex,
                  0,
                  false,
                  true
                );
              } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {
                swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);
              }
            }
            swiper.allowSlidePrev = allowSlidePrev;
            swiper.allowSlideNext = allowSlideNext;
            swiper.emit("loopFix");
            return;
          }
          let slidesPerView = params.slidesPerView;
          if (slidesPerView === "auto") {
            slidesPerView = swiper.slidesPerViewDynamic();
          } else {
            slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));
            if (centeredSlides && slidesPerView % 2 === 0) {
              slidesPerView = slidesPerView + 1;
            }
          }
          const slidesPerGroup = params.slidesPerGroupAuto
            ? slidesPerView
            : params.slidesPerGroup;
          let loopedSlides = slidesPerGroup;
          if (loopedSlides % slidesPerGroup !== 0) {
            loopedSlides += slidesPerGroup - (loopedSlides % slidesPerGroup);
          }
          loopedSlides += params.loopAdditionalSlides;
          swiper.loopedSlides = loopedSlides;
          const gridEnabled =
            swiper.grid && params.grid && params.grid.rows > 1;
          if (slides.length < slidesPerView + loopedSlides) {
            Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["t"])(
              "Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"
            );
          } else if (gridEnabled && params.grid.fill === "row") {
            Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["t"])(
              "Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`"
            );
          }
          const prependSlidesIndexes = [];
          const appendSlidesIndexes = [];
          let activeIndex = swiper.activeIndex;
          if (typeof activeSlideIndex === "undefined") {
            activeSlideIndex = swiper.getSlideIndex(
              slides.filter((el) =>
                el.classList.contains(params.slideActiveClass)
              )[0]
            );
          } else {
            activeIndex = activeSlideIndex;
          }
          const isNext = direction === "next" || !direction;
          const isPrev = direction === "prev" || !direction;
          let slidesPrepended = 0;
          let slidesAppended = 0;
          const cols = gridEnabled
            ? Math.ceil(slides.length / params.grid.rows)
            : slides.length;
          const activeColIndex = gridEnabled
            ? slides[activeSlideIndex].column
            : activeSlideIndex;
          const activeColIndexWithShift =
            activeColIndex +
            (centeredSlides && typeof setTranslate === "undefined"
              ? -slidesPerView / 2 + 0.5
              : 0);
          // prepend last slides before start
          if (activeColIndexWithShift < loopedSlides) {
            slidesPrepended = Math.max(
              loopedSlides - activeColIndexWithShift,
              slidesPerGroup
            );
            for (
              let i = 0;
              i < loopedSlides - activeColIndexWithShift;
              i += 1
            ) {
              const index = i - Math.floor(i / cols) * cols;
              if (gridEnabled) {
                const colIndexToPrepend = cols - index - 1;
                for (let i = slides.length - 1; i >= 0; i -= 1) {
                  if (slides[i].column === colIndexToPrepend)
                    prependSlidesIndexes.push(i);
                }
                // slides.forEach((slide, slideIndex) => {
                //   if (slide.column === colIndexToPrepend) prependSlidesIndexes.push(slideIndex);
                // });
              } else {
                prependSlidesIndexes.push(cols - index - 1);
              }
            }
          } else if (
            activeColIndexWithShift + slidesPerView >
            cols - loopedSlides
          ) {
            slidesAppended = Math.max(
              activeColIndexWithShift - (cols - loopedSlides * 2),
              slidesPerGroup
            );
            for (let i = 0; i < slidesAppended; i += 1) {
              const index = i - Math.floor(i / cols) * cols;
              if (gridEnabled) {
                slides.forEach((slide, slideIndex) => {
                  if (slide.column === index)
                    appendSlidesIndexes.push(slideIndex);
                });
              } else {
                appendSlidesIndexes.push(index);
              }
            }
          }
          swiper.__preventObserver__ = true;
          requestAnimationFrame(() => {
            swiper.__preventObserver__ = false;
          });
          if (isPrev) {
            prependSlidesIndexes.forEach((index) => {
              slides[index].swiperLoopMoveDOM = true;
              slidesEl.prepend(slides[index]);
              slides[index].swiperLoopMoveDOM = false;
            });
          }
          if (isNext) {
            appendSlidesIndexes.forEach((index) => {
              slides[index].swiperLoopMoveDOM = true;
              slidesEl.append(slides[index]);
              slides[index].swiperLoopMoveDOM = false;
            });
          }
          swiper.recalcSlides();
          if (params.slidesPerView === "auto") {
            swiper.updateSlides();
          } else if (
            gridEnabled &&
            ((prependSlidesIndexes.length > 0 && isPrev) ||
              (appendSlidesIndexes.length > 0 && isNext))
          ) {
            swiper.slides.forEach((slide, slideIndex) => {
              swiper.grid.updateSlide(slideIndex, slide, swiper.slides);
            });
          }
          if (params.watchSlidesProgress) {
            swiper.updateSlidesOffset();
          }
          if (slideTo) {
            if (prependSlidesIndexes.length > 0 && isPrev) {
              if (typeof slideRealIndex === "undefined") {
                const currentSlideTranslate = swiper.slidesGrid[activeIndex];
                const newSlideTranslate =
                  swiper.slidesGrid[activeIndex + slidesPrepended];
                const diff = newSlideTranslate - currentSlideTranslate;
                if (byMousewheel) {
                  swiper.setTranslate(swiper.translate - diff);
                } else {
                  swiper.slideTo(
                    activeIndex + Math.ceil(slidesPrepended),
                    0,
                    false,
                    true
                  );
                  if (setTranslate) {
                    swiper.touchEventsData.startTranslate =
                      swiper.touchEventsData.startTranslate - diff;
                    swiper.touchEventsData.currentTranslate =
                      swiper.touchEventsData.currentTranslate - diff;
                  }
                }
              } else {
                if (setTranslate) {
                  const shift = gridEnabled
                    ? prependSlidesIndexes.length / params.grid.rows
                    : prependSlidesIndexes.length;
                  swiper.slideTo(swiper.activeIndex + shift, 0, false, true);
                  swiper.touchEventsData.currentTranslate = swiper.translate;
                }
              }
            } else if (appendSlidesIndexes.length > 0 && isNext) {
              if (typeof slideRealIndex === "undefined") {
                const currentSlideTranslate = swiper.slidesGrid[activeIndex];
                const newSlideTranslate =
                  swiper.slidesGrid[activeIndex - slidesAppended];
                const diff = newSlideTranslate - currentSlideTranslate;
                if (byMousewheel) {
                  swiper.setTranslate(swiper.translate - diff);
                } else {
                  swiper.slideTo(activeIndex - slidesAppended, 0, false, true);
                  if (setTranslate) {
                    swiper.touchEventsData.startTranslate =
                      swiper.touchEventsData.startTranslate - diff;
                    swiper.touchEventsData.currentTranslate =
                      swiper.touchEventsData.currentTranslate - diff;
                  }
                }
              } else {
                const shift = gridEnabled
                  ? appendSlidesIndexes.length / params.grid.rows
                  : appendSlidesIndexes.length;
                swiper.slideTo(swiper.activeIndex - shift, 0, false, true);
              }
            }
          }
          swiper.allowSlidePrev = allowSlidePrev;
          swiper.allowSlideNext = allowSlideNext;
          if (swiper.controller && swiper.controller.control && !byController) {
            const loopParams = {
              slideRealIndex,
              direction,
              setTranslate,
              activeSlideIndex,
              byController: true,
            };
            if (Array.isArray(swiper.controller.control)) {
              swiper.controller.control.forEach((c) => {
                if (!c.destroyed && c.params.loop)
                  c.loopFix({
                    ...loopParams,
                    slideTo:
                      c.params.slidesPerView === params.slidesPerView
                        ? slideTo
                        : false,
                  });
              });
            } else if (
              swiper.controller.control instanceof swiper.constructor &&
              swiper.controller.control.params.loop
            ) {
              swiper.controller.control.loopFix({
                ...loopParams,
                slideTo:
                  swiper.controller.control.params.slidesPerView ===
                  params.slidesPerView
                    ? slideTo
                    : false,
              });
            }
          }
          swiper.emit("loopFix");
        }

        function loopDestroy() {
          const swiper = this;
          const { params, slidesEl } = swiper;
          if (!params.loop || (swiper.virtual && swiper.params.virtual.enabled))
            return;
          swiper.recalcSlides();
          const newSlidesOrder = [];
          swiper.slides.forEach((slideEl) => {
            const index =
              typeof slideEl.swiperSlideIndex === "undefined"
                ? slideEl.getAttribute("data-swiper-slide-index") * 1
                : slideEl.swiperSlideIndex;
            newSlidesOrder[index] = slideEl;
          });
          swiper.slides.forEach((slideEl) => {
            slideEl.removeAttribute("data-swiper-slide-index");
          });
          newSlidesOrder.forEach((slideEl) => {
            slidesEl.append(slideEl);
          });
          swiper.recalcSlides();
          swiper.slideTo(swiper.realIndex, 0);
        }

        var loop = {
          loopCreate,
          loopFix,
          loopDestroy,
        };

        function setGrabCursor(moving) {
          const swiper = this;
          if (
            !swiper.params.simulateTouch ||
            (swiper.params.watchOverflow && swiper.isLocked) ||
            swiper.params.cssMode
          )
            return;
          const el =
            swiper.params.touchEventsTarget === "container"
              ? swiper.el
              : swiper.wrapperEl;
          if (swiper.isElement) {
            swiper.__preventObserver__ = true;
          }
          el.style.cursor = "move";
          el.style.cursor = moving ? "grabbing" : "grab";
          if (swiper.isElement) {
            requestAnimationFrame(() => {
              swiper.__preventObserver__ = false;
            });
          }
        }

        function unsetGrabCursor() {
          const swiper = this;
          if (
            (swiper.params.watchOverflow && swiper.isLocked) ||
            swiper.params.cssMode
          ) {
            return;
          }
          if (swiper.isElement) {
            swiper.__preventObserver__ = true;
          }
          swiper[
            swiper.params.touchEventsTarget === "container" ? "el" : "wrapperEl"
          ].style.cursor = "";
          if (swiper.isElement) {
            requestAnimationFrame(() => {
              swiper.__preventObserver__ = false;
            });
          }
        }

        var grabCursor = {
          setGrabCursor,
          unsetGrabCursor,
        };

        // Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd
        function closestElement(selector, base) {
          if (base === void 0) {
            base = this;
          }
          function __closestFrom(el) {
            if (
              !el ||
              el ===
                Object(
                  _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
                )() ||
              el ===
                Object(_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"])()
            )
              return null;
            if (el.assignedSlot) el = el.assignedSlot;
            const found = el.closest(selector);
            if (!found && !el.getRootNode) {
              return null;
            }
            return found || __closestFrom(el.getRootNode().host);
          }
          return __closestFrom(base);
        }
        function preventEdgeSwipe(swiper, event, startX) {
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          const { params } = swiper;
          const edgeSwipeDetection = params.edgeSwipeDetection;
          const edgeSwipeThreshold = params.edgeSwipeThreshold;
          if (
            edgeSwipeDetection &&
            (startX <= edgeSwipeThreshold ||
              startX >= window.innerWidth - edgeSwipeThreshold)
          ) {
            if (edgeSwipeDetection === "prevent") {
              event.preventDefault();
              return true;
            }
            return false;
          }
          return true;
        }
        function onTouchStart(event) {
          const swiper = this;
          const document = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )();
          let e = event;
          if (e.originalEvent) e = e.originalEvent;
          const data = swiper.touchEventsData;
          if (e.type === "pointerdown") {
            if (data.pointerId !== null && data.pointerId !== e.pointerId) {
              return;
            }
            data.pointerId = e.pointerId;
          } else if (e.type === "touchstart" && e.targetTouches.length === 1) {
            data.touchId = e.targetTouches[0].identifier;
          }
          if (e.type === "touchstart") {
            // don't proceed touch event
            preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);
            return;
          }
          const { params, touches, enabled } = swiper;
          if (!enabled) return;
          if (!params.simulateTouch && e.pointerType === "mouse") return;
          if (swiper.animating && params.preventInteractionOnTransition) {
            return;
          }
          if (!swiper.animating && params.cssMode && params.loop) {
            swiper.loopFix();
          }
          let targetEl = e.target;
          if (params.touchEventsTarget === "wrapper") {
            if (!swiper.wrapperEl.contains(targetEl)) return;
          }
          if ("which" in e && e.which === 3) return;
          if ("button" in e && e.button > 0) return;
          if (data.isTouched && data.isMoved) return;

          // change target el for shadow root component
          const swipingClassHasValue =
            !!params.noSwipingClass && params.noSwipingClass !== "";
          // eslint-disable-next-line
          const eventPath = e.composedPath ? e.composedPath() : e.path;
          if (
            swipingClassHasValue &&
            e.target &&
            e.target.shadowRoot &&
            eventPath
          ) {
            targetEl = eventPath[0];
          }
          const noSwipingSelector = params.noSwipingSelector
            ? params.noSwipingSelector
            : `.${params.noSwipingClass}`;
          const isTargetShadow = !!(e.target && e.target.shadowRoot);

          // use closestElement for shadow root element to get the actual closest for nested shadow root element
          if (
            params.noSwiping &&
            (isTargetShadow
              ? closestElement(noSwipingSelector, targetEl)
              : targetEl.closest(noSwipingSelector))
          ) {
            swiper.allowClick = true;
            return;
          }
          if (params.swipeHandler) {
            if (!targetEl.closest(params.swipeHandler)) return;
          }
          touches.currentX = e.pageX;
          touches.currentY = e.pageY;
          const startX = touches.currentX;
          const startY = touches.currentY;

          // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

          if (!preventEdgeSwipe(swiper, e, startX)) {
            return;
          }
          Object.assign(data, {
            isTouched: true,
            isMoved: false,
            allowTouchCallbacks: true,
            isScrolling: undefined,
            startMoving: undefined,
          });
          touches.startX = startX;
          touches.startY = startY;
          data.touchStartTime = Object(
            _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["d"]
          )();
          swiper.allowClick = true;
          swiper.updateSize();
          swiper.swipeDirection = undefined;
          if (params.threshold > 0) data.allowThresholdMove = false;
          let preventDefault = true;
          if (targetEl.matches(data.focusableElements)) {
            preventDefault = false;
            if (targetEl.nodeName === "SELECT") {
              data.isTouched = false;
            }
          }
          if (
            document.activeElement &&
            document.activeElement.matches(data.focusableElements) &&
            document.activeElement !== targetEl
          ) {
            document.activeElement.blur();
          }
          const shouldPreventDefault =
            preventDefault &&
            swiper.allowTouchMove &&
            params.touchStartPreventDefault;
          if (
            (params.touchStartForcePreventDefault || shouldPreventDefault) &&
            !targetEl.isContentEditable
          ) {
            e.preventDefault();
          }
          if (
            params.freeMode &&
            params.freeMode.enabled &&
            swiper.freeMode &&
            swiper.animating &&
            !params.cssMode
          ) {
            swiper.freeMode.onTouchStart();
          }
          swiper.emit("touchStart", e);
        }

        function onTouchMove(event) {
          const document = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )();
          const swiper = this;
          const data = swiper.touchEventsData;
          const { params, touches, rtlTranslate: rtl, enabled } = swiper;
          if (!enabled) return;
          if (!params.simulateTouch && event.pointerType === "mouse") return;
          let e = event;
          if (e.originalEvent) e = e.originalEvent;
          if (e.type === "pointermove") {
            if (data.touchId !== null) return; // return from pointer if we use touch
            const id = e.pointerId;
            if (id !== data.pointerId) return;
          }
          let targetTouch;
          if (e.type === "touchmove") {
            targetTouch = [...e.changedTouches].filter(
              (t) => t.identifier === data.touchId
            )[0];
            if (!targetTouch || targetTouch.identifier !== data.touchId) return;
          } else {
            targetTouch = e;
          }
          if (!data.isTouched) {
            if (data.startMoving && data.isScrolling) {
              swiper.emit("touchMoveOpposite", e);
            }
            return;
          }
          const pageX = targetTouch.pageX;
          const pageY = targetTouch.pageY;
          if (e.preventedByNestedSwiper) {
            touches.startX = pageX;
            touches.startY = pageY;
            return;
          }
          if (!swiper.allowTouchMove) {
            if (!e.target.matches(data.focusableElements)) {
              swiper.allowClick = false;
            }
            if (data.isTouched) {
              Object.assign(touches, {
                startX: pageX,
                startY: pageY,
                currentX: pageX,
                currentY: pageY,
              });
              data.touchStartTime = Object(
                _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["d"]
              )();
            }
            return;
          }
          if (params.touchReleaseOnEdges && !params.loop) {
            if (swiper.isVertical()) {
              // Vertical
              if (
                (pageY < touches.startY &&
                  swiper.translate <= swiper.maxTranslate()) ||
                (pageY > touches.startY &&
                  swiper.translate >= swiper.minTranslate())
              ) {
                data.isTouched = false;
                data.isMoved = false;
                return;
              }
            } else if (
              (pageX < touches.startX &&
                swiper.translate <= swiper.maxTranslate()) ||
              (pageX > touches.startX &&
                swiper.translate >= swiper.minTranslate())
            ) {
              return;
            }
          }
          if (document.activeElement) {
            if (
              e.target === document.activeElement &&
              e.target.matches(data.focusableElements)
            ) {
              data.isMoved = true;
              swiper.allowClick = false;
              return;
            }
          }
          if (data.allowTouchCallbacks) {
            swiper.emit("touchMove", e);
          }
          touches.previousX = touches.currentX;
          touches.previousY = touches.currentY;
          touches.currentX = pageX;
          touches.currentY = pageY;
          const diffX = touches.currentX - touches.startX;
          const diffY = touches.currentY - touches.startY;
          if (
            swiper.params.threshold &&
            Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold
          )
            return;
          if (typeof data.isScrolling === "undefined") {
            let touchAngle;
            if (
              (swiper.isHorizontal() && touches.currentY === touches.startY) ||
              (swiper.isVertical() && touches.currentX === touches.startX)
            ) {
              data.isScrolling = false;
            } else {
              // eslint-disable-next-line
              if (diffX * diffX + diffY * diffY >= 25) {
                touchAngle =
                  (Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180) /
                  Math.PI;
                data.isScrolling = swiper.isHorizontal()
                  ? touchAngle > params.touchAngle
                  : 90 - touchAngle > params.touchAngle;
              }
            }
          }
          if (data.isScrolling) {
            swiper.emit("touchMoveOpposite", e);
          }
          if (typeof data.startMoving === "undefined") {
            if (
              touches.currentX !== touches.startX ||
              touches.currentY !== touches.startY
            ) {
              data.startMoving = true;
            }
          }
          if (
            data.isScrolling ||
            (e.type === "touchmove" && data.preventTouchMoveFromPointerMove)
          ) {
            data.isTouched = false;
            return;
          }
          if (!data.startMoving) {
            return;
          }
          swiper.allowClick = false;
          if (!params.cssMode && e.cancelable) {
            e.preventDefault();
          }
          if (params.touchMoveStopPropagation && !params.nested) {
            e.stopPropagation();
          }
          let diff = swiper.isHorizontal() ? diffX : diffY;
          let touchesDiff = swiper.isHorizontal()
            ? touches.currentX - touches.previousX
            : touches.currentY - touches.previousY;
          if (params.oneWayMovement) {
            diff = Math.abs(diff) * (rtl ? 1 : -1);
            touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);
          }
          touches.diff = diff;
          diff *= params.touchRatio;
          if (rtl) {
            diff = -diff;
            touchesDiff = -touchesDiff;
          }
          const prevTouchesDirection = swiper.touchesDirection;
          swiper.swipeDirection = diff > 0 ? "prev" : "next";
          swiper.touchesDirection = touchesDiff > 0 ? "prev" : "next";
          const isLoop = swiper.params.loop && !params.cssMode;
          const allowLoopFix =
            (swiper.touchesDirection === "next" && swiper.allowSlideNext) ||
            (swiper.touchesDirection === "prev" && swiper.allowSlidePrev);
          if (!data.isMoved) {
            if (isLoop && allowLoopFix) {
              swiper.loopFix({
                direction: swiper.swipeDirection,
              });
            }
            data.startTranslate = swiper.getTranslate();
            swiper.setTransition(0);
            if (swiper.animating) {
              const evt = new window.CustomEvent("transitionend", {
                bubbles: true,
                cancelable: true,
                detail: {
                  bySwiperTouchMove: true,
                },
              });
              swiper.wrapperEl.dispatchEvent(evt);
            }
            data.allowMomentumBounce = false;
            // Grab Cursor
            if (
              params.grabCursor &&
              (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)
            ) {
              swiper.setGrabCursor(true);
            }
            swiper.emit("sliderFirstMove", e);
          }
          let loopFixed;
          new Date().getTime();
          if (
            data.isMoved &&
            data.allowThresholdMove &&
            prevTouchesDirection !== swiper.touchesDirection &&
            isLoop &&
            allowLoopFix &&
            Math.abs(diff) >= 1
          ) {
            Object.assign(touches, {
              startX: pageX,
              startY: pageY,
              currentX: pageX,
              currentY: pageY,
              startTranslate: data.currentTranslate,
            });
            data.loopSwapReset = true;
            data.startTranslate = data.currentTranslate;
            return;
          }
          swiper.emit("sliderMove", e);
          data.isMoved = true;
          data.currentTranslate = diff + data.startTranslate;
          let disableParentSwiper = true;
          let resistanceRatio = params.resistanceRatio;
          if (params.touchReleaseOnEdges) {
            resistanceRatio = 0;
          }
          if (diff > 0) {
            if (
              isLoop &&
              allowLoopFix &&
              !loopFixed &&
              data.allowThresholdMove &&
              data.currentTranslate >
                (params.centeredSlides
                  ? swiper.minTranslate() -
                    swiper.slidesSizesGrid[swiper.activeIndex + 1]
                  : swiper.minTranslate())
            ) {
              swiper.loopFix({
                direction: "prev",
                setTranslate: true,
                activeSlideIndex: 0,
              });
            }
            if (data.currentTranslate > swiper.minTranslate()) {
              disableParentSwiper = false;
              if (params.resistance) {
                data.currentTranslate =
                  swiper.minTranslate() -
                  1 +
                  (-swiper.minTranslate() + data.startTranslate + diff) **
                    resistanceRatio;
              }
            }
          } else if (diff < 0) {
            if (
              isLoop &&
              allowLoopFix &&
              !loopFixed &&
              data.allowThresholdMove &&
              data.currentTranslate <
                (params.centeredSlides
                  ? swiper.maxTranslate() +
                    swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1]
                  : swiper.maxTranslate())
            ) {
              swiper.loopFix({
                direction: "next",
                setTranslate: true,
                activeSlideIndex:
                  swiper.slides.length -
                  (params.slidesPerView === "auto"
                    ? swiper.slidesPerViewDynamic()
                    : Math.ceil(parseFloat(params.slidesPerView, 10))),
              });
            }
            if (data.currentTranslate < swiper.maxTranslate()) {
              disableParentSwiper = false;
              if (params.resistance) {
                data.currentTranslate =
                  swiper.maxTranslate() +
                  1 -
                  (swiper.maxTranslate() - data.startTranslate - diff) **
                    resistanceRatio;
              }
            }
          }
          if (disableParentSwiper) {
            e.preventedByNestedSwiper = true;
          }

          // Directions locks
          if (
            !swiper.allowSlideNext &&
            swiper.swipeDirection === "next" &&
            data.currentTranslate < data.startTranslate
          ) {
            data.currentTranslate = data.startTranslate;
          }
          if (
            !swiper.allowSlidePrev &&
            swiper.swipeDirection === "prev" &&
            data.currentTranslate > data.startTranslate
          ) {
            data.currentTranslate = data.startTranslate;
          }
          if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
            data.currentTranslate = data.startTranslate;
          }

          // Threshold
          if (params.threshold > 0) {
            if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
              if (!data.allowThresholdMove) {
                data.allowThresholdMove = true;
                touches.startX = touches.currentX;
                touches.startY = touches.currentY;
                data.currentTranslate = data.startTranslate;
                touches.diff = swiper.isHorizontal()
                  ? touches.currentX - touches.startX
                  : touches.currentY - touches.startY;
                return;
              }
            } else {
              data.currentTranslate = data.startTranslate;
              return;
            }
          }
          if (!params.followFinger || params.cssMode) return;

          // Update active index in free mode
          if (
            (params.freeMode && params.freeMode.enabled && swiper.freeMode) ||
            params.watchSlidesProgress
          ) {
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
          }
          if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {
            swiper.freeMode.onTouchMove();
          }
          // Update progress
          swiper.updateProgress(data.currentTranslate);
          // Update translate
          swiper.setTranslate(data.currentTranslate);
        }

        function onTouchEnd(event) {
          const swiper = this;
          const data = swiper.touchEventsData;
          let e = event;
          if (e.originalEvent) e = e.originalEvent;
          let targetTouch;
          const isTouchEvent =
            e.type === "touchend" || e.type === "touchcancel";
          if (!isTouchEvent) {
            if (data.touchId !== null) return; // return from pointer if we use touch
            if (e.pointerId !== data.pointerId) return;
            targetTouch = e;
          } else {
            targetTouch = [...e.changedTouches].filter(
              (t) => t.identifier === data.touchId
            )[0];
            if (!targetTouch || targetTouch.identifier !== data.touchId) return;
          }
          if (
            [
              "pointercancel",
              "pointerout",
              "pointerleave",
              "contextmenu",
            ].includes(e.type)
          ) {
            const proceed =
              ["pointercancel", "contextmenu"].includes(e.type) &&
              (swiper.browser.isSafari || swiper.browser.isWebView);
            if (!proceed) {
              return;
            }
          }
          data.pointerId = null;
          data.touchId = null;
          const {
            params,
            touches,
            rtlTranslate: rtl,
            slidesGrid,
            enabled,
          } = swiper;
          if (!enabled) return;
          if (!params.simulateTouch && e.pointerType === "mouse") return;
          if (data.allowTouchCallbacks) {
            swiper.emit("touchEnd", e);
          }
          data.allowTouchCallbacks = false;
          if (!data.isTouched) {
            if (data.isMoved && params.grabCursor) {
              swiper.setGrabCursor(false);
            }
            data.isMoved = false;
            data.startMoving = false;
            return;
          }

          // Return Grab Cursor
          if (
            params.grabCursor &&
            data.isMoved &&
            data.isTouched &&
            (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)
          ) {
            swiper.setGrabCursor(false);
          }

          // Time diff
          const touchEndTime = Object(
            _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["d"]
          )();
          const timeDiff = touchEndTime - data.touchStartTime;

          // Tap, doubleTap, Click
          if (swiper.allowClick) {
            const pathTree = e.path || (e.composedPath && e.composedPath());
            swiper.updateClickedSlide(
              (pathTree && pathTree[0]) || e.target,
              pathTree
            );
            swiper.emit("tap click", e);
            if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
              swiper.emit("doubleTap doubleClick", e);
            }
          }
          data.lastClickTime = Object(
            _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["d"]
          )();
          Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["n"])(() => {
            if (!swiper.destroyed) swiper.allowClick = true;
          });
          if (
            !data.isTouched ||
            !data.isMoved ||
            !swiper.swipeDirection ||
            (touches.diff === 0 && !data.loopSwapReset) ||
            (data.currentTranslate === data.startTranslate &&
              !data.loopSwapReset)
          ) {
            data.isTouched = false;
            data.isMoved = false;
            data.startMoving = false;
            return;
          }
          data.isTouched = false;
          data.isMoved = false;
          data.startMoving = false;
          let currentPos;
          if (params.followFinger) {
            currentPos = rtl ? swiper.translate : -swiper.translate;
          } else {
            currentPos = -data.currentTranslate;
          }
          if (params.cssMode) {
            return;
          }
          if (params.freeMode && params.freeMode.enabled) {
            swiper.freeMode.onTouchEnd({
              currentPos,
            });
            return;
          }

          // Find current slide
          const swipeToLast =
            currentPos >= -swiper.maxTranslate() && !swiper.params.loop;
          let stopIndex = 0;
          let groupSize = swiper.slidesSizesGrid[0];
          for (
            let i = 0;
            i < slidesGrid.length;
            i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup
          ) {
            const increment =
              i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
            if (typeof slidesGrid[i + increment] !== "undefined") {
              if (
                swipeToLast ||
                (currentPos >= slidesGrid[i] &&
                  currentPos < slidesGrid[i + increment])
              ) {
                stopIndex = i;
                groupSize = slidesGrid[i + increment] - slidesGrid[i];
              }
            } else if (swipeToLast || currentPos >= slidesGrid[i]) {
              stopIndex = i;
              groupSize =
                slidesGrid[slidesGrid.length - 1] -
                slidesGrid[slidesGrid.length - 2];
            }
          }
          let rewindFirstIndex = null;
          let rewindLastIndex = null;
          if (params.rewind) {
            if (swiper.isBeginning) {
              rewindLastIndex =
                params.virtual && params.virtual.enabled && swiper.virtual
                  ? swiper.virtual.slides.length - 1
                  : swiper.slides.length - 1;
            } else if (swiper.isEnd) {
              rewindFirstIndex = 0;
            }
          }
          // Find current slide size
          const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
          const increment =
            stopIndex < params.slidesPerGroupSkip - 1
              ? 1
              : params.slidesPerGroup;
          if (timeDiff > params.longSwipesMs) {
            // Long touches
            if (!params.longSwipes) {
              swiper.slideTo(swiper.activeIndex);
              return;
            }
            if (swiper.swipeDirection === "next") {
              if (ratio >= params.longSwipesRatio)
                swiper.slideTo(
                  params.rewind && swiper.isEnd
                    ? rewindFirstIndex
                    : stopIndex + increment
                );
              else swiper.slideTo(stopIndex);
            }
            if (swiper.swipeDirection === "prev") {
              if (ratio > 1 - params.longSwipesRatio) {
                swiper.slideTo(stopIndex + increment);
              } else if (
                rewindLastIndex !== null &&
                ratio < 0 &&
                Math.abs(ratio) > params.longSwipesRatio
              ) {
                swiper.slideTo(rewindLastIndex);
              } else {
                swiper.slideTo(stopIndex);
              }
            }
          } else {
            // Short swipes
            if (!params.shortSwipes) {
              swiper.slideTo(swiper.activeIndex);
              return;
            }
            const isNavButtonTarget =
              swiper.navigation &&
              (e.target === swiper.navigation.nextEl ||
                e.target === swiper.navigation.prevEl);
            if (!isNavButtonTarget) {
              if (swiper.swipeDirection === "next") {
                swiper.slideTo(
                  rewindFirstIndex !== null
                    ? rewindFirstIndex
                    : stopIndex + increment
                );
              }
              if (swiper.swipeDirection === "prev") {
                swiper.slideTo(
                  rewindLastIndex !== null ? rewindLastIndex : stopIndex
                );
              }
            } else if (e.target === swiper.navigation.nextEl) {
              swiper.slideTo(stopIndex + increment);
            } else {
              swiper.slideTo(stopIndex);
            }
          }
        }

        function onResize() {
          const swiper = this;
          const { params, el } = swiper;
          if (el && el.offsetWidth === 0) return;

          // Breakpoints
          if (params.breakpoints) {
            swiper.setBreakpoint();
          }

          // Save locks
          const { allowSlideNext, allowSlidePrev, snapGrid } = swiper;
          const isVirtual = swiper.virtual && swiper.params.virtual.enabled;

          // Disable locks on resize
          swiper.allowSlideNext = true;
          swiper.allowSlidePrev = true;
          swiper.updateSize();
          swiper.updateSlides();
          swiper.updateSlidesClasses();
          const isVirtualLoop = isVirtual && params.loop;
          if (
            (params.slidesPerView === "auto" || params.slidesPerView > 1) &&
            swiper.isEnd &&
            !swiper.isBeginning &&
            !swiper.params.centeredSlides &&
            !isVirtualLoop
          ) {
            swiper.slideTo(swiper.slides.length - 1, 0, false, true);
          } else {
            if (swiper.params.loop && !isVirtual) {
              swiper.slideToLoop(swiper.realIndex, 0, false, true);
            } else {
              swiper.slideTo(swiper.activeIndex, 0, false, true);
            }
          }
          if (
            swiper.autoplay &&
            swiper.autoplay.running &&
            swiper.autoplay.paused
          ) {
            clearTimeout(swiper.autoplay.resizeTimeout);
            swiper.autoplay.resizeTimeout = setTimeout(() => {
              if (
                swiper.autoplay &&
                swiper.autoplay.running &&
                swiper.autoplay.paused
              ) {
                swiper.autoplay.resume();
              }
            }, 500);
          }
          // Return locks after resize
          swiper.allowSlidePrev = allowSlidePrev;
          swiper.allowSlideNext = allowSlideNext;
          if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
            swiper.checkOverflow();
          }
        }

        function onClick(e) {
          const swiper = this;
          if (!swiper.enabled) return;
          if (!swiper.allowClick) {
            if (swiper.params.preventClicks) e.preventDefault();
            if (swiper.params.preventClicksPropagation && swiper.animating) {
              e.stopPropagation();
              e.stopImmediatePropagation();
            }
          }
        }

        function onScroll() {
          const swiper = this;
          const { wrapperEl, rtlTranslate, enabled } = swiper;
          if (!enabled) return;
          swiper.previousTranslate = swiper.translate;
          if (swiper.isHorizontal()) {
            swiper.translate = -wrapperEl.scrollLeft;
          } else {
            swiper.translate = -wrapperEl.scrollTop;
          }
          // eslint-disable-next-line
          if (swiper.translate === 0) swiper.translate = 0;
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
          let newProgress;
          const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
          if (translatesDiff === 0) {
            newProgress = 0;
          } else {
            newProgress =
              (swiper.translate - swiper.minTranslate()) / translatesDiff;
          }
          if (newProgress !== swiper.progress) {
            swiper.updateProgress(
              rtlTranslate ? -swiper.translate : swiper.translate
            );
          }
          swiper.emit("setTranslate", swiper.translate, false);
        }

        function onLoad(e) {
          const swiper = this;
          processLazyPreloader(swiper, e.target);
          if (
            swiper.params.cssMode ||
            (swiper.params.slidesPerView !== "auto" &&
              !swiper.params.autoHeight)
          ) {
            return;
          }
          swiper.update();
        }

        function onDocumentTouchStart() {
          const swiper = this;
          if (swiper.documentTouchHandlerProceeded) return;
          swiper.documentTouchHandlerProceeded = true;
          if (swiper.params.touchReleaseOnEdges) {
            swiper.el.style.touchAction = "auto";
          }
        }

        const events = (swiper, method) => {
          const document = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )();
          const { params, el, wrapperEl, device } = swiper;
          const capture = !!params.nested;
          const domMethod =
            method === "on" ? "addEventListener" : "removeEventListener";
          const swiperMethod = method;

          // Touch Events
          document[domMethod]("touchstart", swiper.onDocumentTouchStart, {
            passive: false,
            capture,
          });
          el[domMethod]("touchstart", swiper.onTouchStart, {
            passive: false,
          });
          el[domMethod]("pointerdown", swiper.onTouchStart, {
            passive: false,
          });
          document[domMethod]("touchmove", swiper.onTouchMove, {
            passive: false,
            capture,
          });
          document[domMethod]("pointermove", swiper.onTouchMove, {
            passive: false,
            capture,
          });
          document[domMethod]("touchend", swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]("pointerup", swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]("pointercancel", swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]("touchcancel", swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]("pointerout", swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]("pointerleave", swiper.onTouchEnd, {
            passive: true,
          });
          document[domMethod]("contextmenu", swiper.onTouchEnd, {
            passive: true,
          });

          // Prevent Links Clicks
          if (params.preventClicks || params.preventClicksPropagation) {
            el[domMethod]("click", swiper.onClick, true);
          }
          if (params.cssMode) {
            wrapperEl[domMethod]("scroll", swiper.onScroll);
          }

          // Resize handler
          if (params.updateOnWindowResize) {
            swiper[swiperMethod](
              device.ios || device.android
                ? "resize orientationchange observerUpdate"
                : "resize observerUpdate",
              onResize,
              true
            );
          } else {
            swiper[swiperMethod]("observerUpdate", onResize, true);
          }

          // Images loader
          el[domMethod]("load", swiper.onLoad, {
            capture: true,
          });
        };
        function attachEvents() {
          const swiper = this;
          const { params } = swiper;
          swiper.onTouchStart = onTouchStart.bind(swiper);
          swiper.onTouchMove = onTouchMove.bind(swiper);
          swiper.onTouchEnd = onTouchEnd.bind(swiper);
          swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);
          if (params.cssMode) {
            swiper.onScroll = onScroll.bind(swiper);
          }
          swiper.onClick = onClick.bind(swiper);
          swiper.onLoad = onLoad.bind(swiper);
          events(swiper, "on");
        }
        function detachEvents() {
          const swiper = this;
          events(swiper, "off");
        }
        var events$1 = {
          attachEvents,
          detachEvents,
        };

        const isGridEnabled = (swiper, params) => {
          return swiper.grid && params.grid && params.grid.rows > 1;
        };
        function setBreakpoint() {
          const swiper = this;
          const { realIndex, initialized, params, el } = swiper;
          const breakpoints = params.breakpoints;
          if (
            !breakpoints ||
            (breakpoints && Object.keys(breakpoints).length === 0)
          )
            return;

          // Get breakpoint for window width and update parameters
          const breakpoint = swiper.getBreakpoint(
            breakpoints,
            swiper.params.breakpointsBase,
            swiper.el
          );
          if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
          const breakpointOnlyParams =
            breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;
          const breakpointParams =
            breakpointOnlyParams || swiper.originalParams;
          const wasMultiRow = isGridEnabled(swiper, params);
          const isMultiRow = isGridEnabled(swiper, breakpointParams);
          const wasGrabCursor = swiper.params.grabCursor;
          const isGrabCursor = breakpointParams.grabCursor;
          const wasEnabled = params.enabled;
          if (wasMultiRow && !isMultiRow) {
            el.classList.remove(
              `${params.containerModifierClass}grid`,
              `${params.containerModifierClass}grid-column`
            );
            swiper.emitContainerClasses();
          } else if (!wasMultiRow && isMultiRow) {
            el.classList.add(`${params.containerModifierClass}grid`);
            if (
              (breakpointParams.grid.fill &&
                breakpointParams.grid.fill === "column") ||
              (!breakpointParams.grid.fill && params.grid.fill === "column")
            ) {
              el.classList.add(`${params.containerModifierClass}grid-column`);
            }
            swiper.emitContainerClasses();
          }
          if (wasGrabCursor && !isGrabCursor) {
            swiper.unsetGrabCursor();
          } else if (!wasGrabCursor && isGrabCursor) {
            swiper.setGrabCursor();
          }

          // Toggle navigation, pagination, scrollbar
          ["navigation", "pagination", "scrollbar"].forEach((prop) => {
            if (typeof breakpointParams[prop] === "undefined") return;
            const wasModuleEnabled = params[prop] && params[prop].enabled;
            const isModuleEnabled =
              breakpointParams[prop] && breakpointParams[prop].enabled;
            if (wasModuleEnabled && !isModuleEnabled) {
              swiper[prop].disable();
            }
            if (!wasModuleEnabled && isModuleEnabled) {
              swiper[prop].enable();
            }
          });
          const directionChanged =
            breakpointParams.direction &&
            breakpointParams.direction !== params.direction;
          const needsReLoop =
            params.loop &&
            (breakpointParams.slidesPerView !== params.slidesPerView ||
              directionChanged);
          const wasLoop = params.loop;
          if (directionChanged && initialized) {
            swiper.changeDirection();
          }
          Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"])(
            swiper.params,
            breakpointParams
          );
          const isEnabled = swiper.params.enabled;
          const hasLoop = swiper.params.loop;
          Object.assign(swiper, {
            allowTouchMove: swiper.params.allowTouchMove,
            allowSlideNext: swiper.params.allowSlideNext,
            allowSlidePrev: swiper.params.allowSlidePrev,
          });
          if (wasEnabled && !isEnabled) {
            swiper.disable();
          } else if (!wasEnabled && isEnabled) {
            swiper.enable();
          }
          swiper.currentBreakpoint = breakpoint;
          swiper.emit("_beforeBreakpoint", breakpointParams);
          if (initialized) {
            if (needsReLoop) {
              swiper.loopDestroy();
              swiper.loopCreate(realIndex);
              swiper.updateSlides();
            } else if (!wasLoop && hasLoop) {
              swiper.loopCreate(realIndex);
              swiper.updateSlides();
            } else if (wasLoop && !hasLoop) {
              swiper.loopDestroy();
            }
          }
          swiper.emit("breakpoint", breakpointParams);
        }

        function getBreakpoint(breakpoints, base, containerEl) {
          if (base === void 0) {
            base = "window";
          }
          if (!breakpoints || (base === "container" && !containerEl))
            return undefined;
          let breakpoint = false;
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          const currentHeight =
            base === "window" ? window.innerHeight : containerEl.clientHeight;
          const points = Object.keys(breakpoints).map((point) => {
            if (typeof point === "string" && point.indexOf("@") === 0) {
              const minRatio = parseFloat(point.substr(1));
              const value = currentHeight * minRatio;
              return {
                value,
                point,
              };
            }
            return {
              value: point,
              point,
            };
          });
          points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));
          for (let i = 0; i < points.length; i += 1) {
            const { point, value } = points[i];
            if (base === "window") {
              if (window.matchMedia(`(min-width: ${value}px)`).matches) {
                breakpoint = point;
              }
            } else if (value <= containerEl.clientWidth) {
              breakpoint = point;
            }
          }
          return breakpoint || "max";
        }

        var breakpoints = {
          setBreakpoint,
          getBreakpoint,
        };

        function prepareClasses(entries, prefix) {
          const resultClasses = [];
          entries.forEach((item) => {
            if (typeof item === "object") {
              Object.keys(item).forEach((classNames) => {
                if (item[classNames]) {
                  resultClasses.push(prefix + classNames);
                }
              });
            } else if (typeof item === "string") {
              resultClasses.push(prefix + item);
            }
          });
          return resultClasses;
        }
        function addClasses() {
          const swiper = this;
          const { classNames, params, rtl, el, device } = swiper;
          // prettier-ignore
          const suffixes = prepareClasses(['initialized', params.direction, {
    'free-mode': swiper.params.freeMode && params.freeMode.enabled
  }, {
    'autoheight': params.autoHeight
  }, {
    'rtl': rtl
  }, {
    'grid': params.grid && params.grid.rows > 1
  }, {
    'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'
  }, {
    'android': device.android
  }, {
    'ios': device.ios
  }, {
    'css-mode': params.cssMode
  }, {
    'centered': params.cssMode && params.centeredSlides
  }, {
    'watch-progress': params.watchSlidesProgress
  }], params.containerModifierClass);
          classNames.push(...suffixes);
          el.classList.add(...classNames);
          swiper.emitContainerClasses();
        }

        function removeClasses() {
          const swiper = this;
          const { el, classNames } = swiper;
          el.classList.remove(...classNames);
          swiper.emitContainerClasses();
        }

        var classes = {
          addClasses,
          removeClasses,
        };

        function checkOverflow() {
          const swiper = this;
          const { isLocked: wasLocked, params } = swiper;
          const { slidesOffsetBefore } = params;
          if (slidesOffsetBefore) {
            const lastSlideIndex = swiper.slides.length - 1;
            const lastSlideRightEdge =
              swiper.slidesGrid[lastSlideIndex] +
              swiper.slidesSizesGrid[lastSlideIndex] +
              slidesOffsetBefore * 2;
            swiper.isLocked = swiper.size > lastSlideRightEdge;
          } else {
            swiper.isLocked = swiper.snapGrid.length === 1;
          }
          if (params.allowSlideNext === true) {
            swiper.allowSlideNext = !swiper.isLocked;
          }
          if (params.allowSlidePrev === true) {
            swiper.allowSlidePrev = !swiper.isLocked;
          }
          if (wasLocked && wasLocked !== swiper.isLocked) {
            swiper.isEnd = false;
          }
          if (wasLocked !== swiper.isLocked) {
            swiper.emit(swiper.isLocked ? "lock" : "unlock");
          }
        }
        var checkOverflow$1 = {
          checkOverflow,
        };

        var defaults = {
          init: true,
          direction: "horizontal",
          oneWayMovement: false,
          swiperElementNodeName: "SWIPER-CONTAINER",
          touchEventsTarget: "wrapper",
          initialSlide: 0,
          speed: 300,
          cssMode: false,
          updateOnWindowResize: true,
          resizeObserver: true,
          nested: false,
          createElements: false,
          eventsPrefix: "swiper",
          enabled: true,
          focusableElements:
            "input, select, option, textarea, button, video, label",
          // Overrides
          width: null,
          height: null,
          //
          preventInteractionOnTransition: false,
          // ssr
          userAgent: null,
          url: null,
          // To support iOS's swipe-to-go-back gesture (when being used in-app).
          edgeSwipeDetection: false,
          edgeSwipeThreshold: 20,
          // Autoheight
          autoHeight: false,
          // Set wrapper width
          setWrapperSize: false,
          // Virtual Translate
          virtualTranslate: false,
          // Effects
          effect: "slide",
          // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

          // Breakpoints
          breakpoints: undefined,
          breakpointsBase: "window",
          // Slides grid
          spaceBetween: 0,
          slidesPerView: 1,
          slidesPerGroup: 1,
          slidesPerGroupSkip: 0,
          slidesPerGroupAuto: false,
          centeredSlides: false,
          centeredSlidesBounds: false,
          slidesOffsetBefore: 0,
          // in px
          slidesOffsetAfter: 0,
          // in px
          normalizeSlideIndex: true,
          centerInsufficientSlides: false,
          // Disable swiper and hide navigation when container not overflow
          watchOverflow: true,
          // Round length
          roundLengths: false,
          // Touches
          touchRatio: 1,
          touchAngle: 45,
          simulateTouch: true,
          shortSwipes: true,
          longSwipes: true,
          longSwipesRatio: 0.5,
          longSwipesMs: 300,
          followFinger: true,
          allowTouchMove: true,
          threshold: 5,
          touchMoveStopPropagation: false,
          touchStartPreventDefault: true,
          touchStartForcePreventDefault: false,
          touchReleaseOnEdges: false,
          // Unique Navigation Elements
          uniqueNavElements: true,
          // Resistance
          resistance: true,
          resistanceRatio: 0.85,
          // Progress
          watchSlidesProgress: false,
          // Cursor
          grabCursor: false,
          // Clicks
          preventClicks: true,
          preventClicksPropagation: true,
          slideToClickedSlide: false,
          // loop
          loop: false,
          loopAddBlankSlides: true,
          loopAdditionalSlides: 0,
          loopPreventsSliding: true,
          // rewind
          rewind: false,
          // Swiping/no swiping
          allowSlidePrev: true,
          allowSlideNext: true,
          swipeHandler: null,
          // '.swipe-handler',
          noSwiping: true,
          noSwipingClass: "swiper-no-swiping",
          noSwipingSelector: null,
          // Passive Listeners
          passiveListeners: true,
          maxBackfaceHiddenSlides: 10,
          // NS
          containerModifierClass: "swiper-",
          // NEW
          slideClass: "swiper-slide",
          slideBlankClass: "swiper-slide-blank",
          slideActiveClass: "swiper-slide-active",
          slideVisibleClass: "swiper-slide-visible",
          slideFullyVisibleClass: "swiper-slide-fully-visible",
          slideNextClass: "swiper-slide-next",
          slidePrevClass: "swiper-slide-prev",
          wrapperClass: "swiper-wrapper",
          lazyPreloaderClass: "swiper-lazy-preloader",
          lazyPreloadPrevNext: 0,
          // Callbacks
          runCallbacksOnInit: true,
          // Internals
          _emitClasses: false,
        };

        function moduleExtendParams(params, allModulesParams) {
          return function extendParams(obj) {
            if (obj === void 0) {
              obj = {};
            }
            const moduleParamName = Object.keys(obj)[0];
            const moduleParams = obj[moduleParamName];
            if (typeof moduleParams !== "object" || moduleParams === null) {
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"])(
                allModulesParams,
                obj
              );
              return;
            }
            if (params[moduleParamName] === true) {
              params[moduleParamName] = {
                enabled: true,
              };
            }
            if (
              moduleParamName === "navigation" &&
              params[moduleParamName] &&
              params[moduleParamName].enabled &&
              !params[moduleParamName].prevEl &&
              !params[moduleParamName].nextEl
            ) {
              params[moduleParamName].auto = true;
            }
            if (
              ["pagination", "scrollbar"].indexOf(moduleParamName) >= 0 &&
              params[moduleParamName] &&
              params[moduleParamName].enabled &&
              !params[moduleParamName].el
            ) {
              params[moduleParamName].auto = true;
            }
            if (!(moduleParamName in params && "enabled" in moduleParams)) {
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"])(
                allModulesParams,
                obj
              );
              return;
            }
            if (
              typeof params[moduleParamName] === "object" &&
              !("enabled" in params[moduleParamName])
            ) {
              params[moduleParamName].enabled = true;
            }
            if (!params[moduleParamName])
              params[moduleParamName] = {
                enabled: false,
              };
            Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"])(
              allModulesParams,
              obj
            );
          };
        }

        /* eslint no-param-reassign: "off" */
        const prototypes = {
          eventsEmitter,
          update,
          translate,
          transition,
          slide,
          loop,
          grabCursor,
          events: events$1,
          breakpoints,
          checkOverflow: checkOverflow$1,
          classes,
        };
        const extendedDefaults = {};
        class Swiper {
          constructor() {
            let el;
            let params;
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }
            if (
              args.length === 1 &&
              args[0].constructor &&
              Object.prototype.toString.call(args[0]).slice(8, -1) === "Object"
            ) {
              params = args[0];
            } else {
              [el, params] = args;
            }
            if (!params) params = {};
            params = Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"])(
              {},
              params
            );
            if (el && !params.el) params.el = el;
            const document = Object(
              _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
            )();
            if (
              params.el &&
              typeof params.el === "string" &&
              document.querySelectorAll(params.el).length > 1
            ) {
              const swipers = [];
              document.querySelectorAll(params.el).forEach((containerEl) => {
                const newParams = Object(
                  _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"]
                )({}, params, {
                  el: containerEl,
                });
                swipers.push(new Swiper(newParams));
              });
              // eslint-disable-next-line no-constructor-return
              return swipers;
            }

            // Swiper Instance
            const swiper = this;
            swiper.__swiper__ = true;
            swiper.support = getSupport();
            swiper.device = getDevice({
              userAgent: params.userAgent,
            });
            swiper.browser = getBrowser();
            swiper.eventsListeners = {};
            swiper.eventsAnyListeners = [];
            swiper.modules = [...swiper.__modules__];
            if (params.modules && Array.isArray(params.modules)) {
              swiper.modules.push(...params.modules);
            }
            const allModulesParams = {};
            swiper.modules.forEach((mod) => {
              mod({
                params,
                swiper,
                extendParams: moduleExtendParams(params, allModulesParams),
                on: swiper.on.bind(swiper),
                once: swiper.once.bind(swiper),
                off: swiper.off.bind(swiper),
                emit: swiper.emit.bind(swiper),
              });
            });

            // Extend defaults with modules params
            const swiperParams = Object(
              _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"]
            )({}, defaults, allModulesParams);

            // Extend defaults with passed params
            swiper.params = Object(
              _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"]
            )({}, swiperParams, extendedDefaults, params);
            swiper.originalParams = Object(
              _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"]
            )({}, swiper.params);
            swiper.passedParams = Object(
              _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"]
            )({}, params);

            // add event listeners
            if (swiper.params && swiper.params.on) {
              Object.keys(swiper.params.on).forEach((eventName) => {
                swiper.on(eventName, swiper.params.on[eventName]);
              });
            }
            if (swiper.params && swiper.params.onAny) {
              swiper.onAny(swiper.params.onAny);
            }

            // Extend Swiper
            Object.assign(swiper, {
              enabled: swiper.params.enabled,
              el,
              // Classes
              classNames: [],
              // Slides
              slides: [],
              slidesGrid: [],
              snapGrid: [],
              slidesSizesGrid: [],
              // isDirection
              isHorizontal() {
                return swiper.params.direction === "horizontal";
              },
              isVertical() {
                return swiper.params.direction === "vertical";
              },
              // Indexes
              activeIndex: 0,
              realIndex: 0,
              //
              isBeginning: true,
              isEnd: false,
              // Props
              translate: 0,
              previousTranslate: 0,
              progress: 0,
              velocity: 0,
              animating: false,
              cssOverflowAdjustment() {
                // Returns 0 unless `translate` is > 2**23
                // Should be subtracted from css values to prevent overflow
                return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;
              },
              // Locks
              allowSlideNext: swiper.params.allowSlideNext,
              allowSlidePrev: swiper.params.allowSlidePrev,
              // Touch Events
              touchEventsData: {
                isTouched: undefined,
                isMoved: undefined,
                allowTouchCallbacks: undefined,
                touchStartTime: undefined,
                isScrolling: undefined,
                currentTranslate: undefined,
                startTranslate: undefined,
                allowThresholdMove: undefined,
                // Form elements to match
                focusableElements: swiper.params.focusableElements,
                // Last click time
                lastClickTime: 0,
                clickTimeout: undefined,
                // Velocities
                velocities: [],
                allowMomentumBounce: undefined,
                startMoving: undefined,
                pointerId: null,
                touchId: null,
              },
              // Clicks
              allowClick: true,
              // Touches
              allowTouchMove: swiper.params.allowTouchMove,
              touches: {
                startX: 0,
                startY: 0,
                currentX: 0,
                currentY: 0,
                diff: 0,
              },
              // Images
              imagesToLoad: [],
              imagesLoaded: 0,
            });
            swiper.emit("_swiper");

            // Init
            if (swiper.params.init) {
              swiper.init();
            }

            // Return app instance
            // eslint-disable-next-line no-constructor-return
            return swiper;
          }
          getDirectionLabel(property) {
            if (this.isHorizontal()) {
              return property;
            }
            // prettier-ignore
            return {
      'width': 'height',
      'margin-top': 'margin-left',
      'margin-bottom ': 'margin-right',
      'margin-left': 'margin-top',
      'margin-right': 'margin-bottom',
      'padding-left': 'padding-top',
      'padding-right': 'padding-bottom',
      'marginRight': 'marginBottom'
    }[property];
          }
          getSlideIndex(slideEl) {
            const { slidesEl, params } = this;
            const slides = Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
              slidesEl,
              `.${params.slideClass}, swiper-slide`
            );
            const firstSlideIndex = Object(
              _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["h"]
            )(slides[0]);
            return (
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["h"])(slideEl) -
              firstSlideIndex
            );
          }
          getSlideIndexByData(index) {
            return this.getSlideIndex(
              this.slides.filter(
                (slideEl) =>
                  slideEl.getAttribute("data-swiper-slide-index") * 1 === index
              )[0]
            );
          }
          recalcSlides() {
            const swiper = this;
            const { slidesEl, params } = swiper;
            swiper.slides = Object(
              _utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"]
            )(slidesEl, `.${params.slideClass}, swiper-slide`);
          }
          enable() {
            const swiper = this;
            if (swiper.enabled) return;
            swiper.enabled = true;
            if (swiper.params.grabCursor) {
              swiper.setGrabCursor();
            }
            swiper.emit("enable");
          }
          disable() {
            const swiper = this;
            if (!swiper.enabled) return;
            swiper.enabled = false;
            if (swiper.params.grabCursor) {
              swiper.unsetGrabCursor();
            }
            swiper.emit("disable");
          }
          setProgress(progress, speed) {
            const swiper = this;
            progress = Math.min(Math.max(progress, 0), 1);
            const min = swiper.minTranslate();
            const max = swiper.maxTranslate();
            const current = (max - min) * progress + min;
            swiper.translateTo(
              current,
              typeof speed === "undefined" ? 0 : speed
            );
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
          }
          emitContainerClasses() {
            const swiper = this;
            if (!swiper.params._emitClasses || !swiper.el) return;
            const cls = swiper.el.className.split(" ").filter((className) => {
              return (
                className.indexOf("swiper") === 0 ||
                className.indexOf(swiper.params.containerModifierClass) === 0
              );
            });
            swiper.emit("_containerClasses", cls.join(" "));
          }
          getSlideClasses(slideEl) {
            const swiper = this;
            if (swiper.destroyed) return "";
            return slideEl.className
              .split(" ")
              .filter((className) => {
                return (
                  className.indexOf("swiper-slide") === 0 ||
                  className.indexOf(swiper.params.slideClass) === 0
                );
              })
              .join(" ");
          }
          emitSlidesClasses() {
            const swiper = this;
            if (!swiper.params._emitClasses || !swiper.el) return;
            const updates = [];
            swiper.slides.forEach((slideEl) => {
              const classNames = swiper.getSlideClasses(slideEl);
              updates.push({
                slideEl,
                classNames,
              });
              swiper.emit("_slideClass", slideEl, classNames);
            });
            swiper.emit("_slideClasses", updates);
          }
          slidesPerViewDynamic(view, exact) {
            if (view === void 0) {
              view = "current";
            }
            if (exact === void 0) {
              exact = false;
            }
            const swiper = this;
            const {
              params,
              slides,
              slidesGrid,
              slidesSizesGrid,
              size: swiperSize,
              activeIndex,
            } = swiper;
            let spv = 1;
            if (typeof params.slidesPerView === "number")
              return params.slidesPerView;
            if (params.centeredSlides) {
              let slideSize = slides[activeIndex]
                ? Math.ceil(slides[activeIndex].swiperSlideSize)
                : 0;
              let breakLoop;
              for (let i = activeIndex + 1; i < slides.length; i += 1) {
                if (slides[i] && !breakLoop) {
                  slideSize += Math.ceil(slides[i].swiperSlideSize);
                  spv += 1;
                  if (slideSize > swiperSize) breakLoop = true;
                }
              }
              for (let i = activeIndex - 1; i >= 0; i -= 1) {
                if (slides[i] && !breakLoop) {
                  slideSize += slides[i].swiperSlideSize;
                  spv += 1;
                  if (slideSize > swiperSize) breakLoop = true;
                }
              }
            } else {
              // eslint-disable-next-line
              if (view === "current") {
                for (let i = activeIndex + 1; i < slides.length; i += 1) {
                  const slideInView = exact
                    ? slidesGrid[i] +
                        slidesSizesGrid[i] -
                        slidesGrid[activeIndex] <
                      swiperSize
                    : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;
                  if (slideInView) {
                    spv += 1;
                  }
                }
              } else {
                // previous
                for (let i = activeIndex - 1; i >= 0; i -= 1) {
                  const slideInView =
                    slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;
                  if (slideInView) {
                    spv += 1;
                  }
                }
              }
            }
            return spv;
          }
          update() {
            const swiper = this;
            if (!swiper || swiper.destroyed) return;
            const { snapGrid, params } = swiper;
            // Breakpoints
            if (params.breakpoints) {
              swiper.setBreakpoint();
            }
            [...swiper.el.querySelectorAll('[loading="lazy"]')].forEach(
              (imageEl) => {
                if (imageEl.complete) {
                  processLazyPreloader(swiper, imageEl);
                }
              }
            );
            swiper.updateSize();
            swiper.updateSlides();
            swiper.updateProgress();
            swiper.updateSlidesClasses();
            function setTranslate() {
              const translateValue = swiper.rtlTranslate
                ? swiper.translate * -1
                : swiper.translate;
              const newTranslate = Math.min(
                Math.max(translateValue, swiper.maxTranslate()),
                swiper.minTranslate()
              );
              swiper.setTranslate(newTranslate);
              swiper.updateActiveIndex();
              swiper.updateSlidesClasses();
            }
            let translated;
            if (params.freeMode && params.freeMode.enabled && !params.cssMode) {
              setTranslate();
              if (params.autoHeight) {
                swiper.updateAutoHeight();
              }
            } else {
              if (
                (params.slidesPerView === "auto" || params.slidesPerView > 1) &&
                swiper.isEnd &&
                !params.centeredSlides
              ) {
                const slides =
                  swiper.virtual && params.virtual.enabled
                    ? swiper.virtual.slides
                    : swiper.slides;
                translated = swiper.slideTo(slides.length - 1, 0, false, true);
              } else {
                translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
              }
              if (!translated) {
                setTranslate();
              }
            }
            if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
              swiper.checkOverflow();
            }
            swiper.emit("update");
          }
          changeDirection(newDirection, needUpdate) {
            if (needUpdate === void 0) {
              needUpdate = true;
            }
            const swiper = this;
            const currentDirection = swiper.params.direction;
            if (!newDirection) {
              // eslint-disable-next-line
              newDirection =
                currentDirection === "horizontal" ? "vertical" : "horizontal";
            }
            if (
              newDirection === currentDirection ||
              (newDirection !== "horizontal" && newDirection !== "vertical")
            ) {
              return swiper;
            }
            swiper.el.classList.remove(
              `${swiper.params.containerModifierClass}${currentDirection}`
            );
            swiper.el.classList.add(
              `${swiper.params.containerModifierClass}${newDirection}`
            );
            swiper.emitContainerClasses();
            swiper.params.direction = newDirection;
            swiper.slides.forEach((slideEl) => {
              if (newDirection === "vertical") {
                slideEl.style.width = "";
              } else {
                slideEl.style.height = "";
              }
            });
            swiper.emit("changeDirection");
            if (needUpdate) swiper.update();
            return swiper;
          }
          changeLanguageDirection(direction) {
            const swiper = this;
            if (
              (swiper.rtl && direction === "rtl") ||
              (!swiper.rtl && direction === "ltr")
            )
              return;
            swiper.rtl = direction === "rtl";
            swiper.rtlTranslate =
              swiper.params.direction === "horizontal" && swiper.rtl;
            if (swiper.rtl) {
              swiper.el.classList.add(
                `${swiper.params.containerModifierClass}rtl`
              );
              swiper.el.dir = "rtl";
            } else {
              swiper.el.classList.remove(
                `${swiper.params.containerModifierClass}rtl`
              );
              swiper.el.dir = "ltr";
            }
            swiper.update();
          }
          mount(element) {
            const swiper = this;
            if (swiper.mounted) return true;

            // Find el
            let el = element || swiper.params.el;
            if (typeof el === "string") {
              el = document.querySelector(el);
            }
            if (!el) {
              return false;
            }
            el.swiper = swiper;
            if (
              el.parentNode &&
              el.parentNode.host &&
              el.parentNode.host.nodeName ===
                swiper.params.swiperElementNodeName.toUpperCase()
            ) {
              swiper.isElement = true;
            }
            const getWrapperSelector = () => {
              return `.${(swiper.params.wrapperClass || "")
                .trim()
                .split(" ")
                .join(".")}`;
            };
            const getWrapper = () => {
              if (el && el.shadowRoot && el.shadowRoot.querySelector) {
                const res = el.shadowRoot.querySelector(getWrapperSelector());
                // Children needs to return slot items
                return res;
              }
              return Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
                el,
                getWrapperSelector()
              )[0];
            };
            // Find Wrapper
            let wrapperEl = getWrapper();
            if (!wrapperEl && swiper.params.createElements) {
              wrapperEl = Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["c"])(
                "div",
                swiper.params.wrapperClass
              );
              el.append(wrapperEl);
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["e"])(
                el,
                `.${swiper.params.slideClass}`
              ).forEach((slideEl) => {
                wrapperEl.append(slideEl);
              });
            }
            Object.assign(swiper, {
              el,
              wrapperEl,
              slidesEl:
                swiper.isElement && !el.parentNode.host.slideSlots
                  ? el.parentNode.host
                  : wrapperEl,
              hostEl: swiper.isElement ? el.parentNode.host : el,
              mounted: true,
              // RTL
              rtl:
                el.dir.toLowerCase() === "rtl" ||
                Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["o"])(
                  el,
                  "direction"
                ) === "rtl",
              rtlTranslate:
                swiper.params.direction === "horizontal" &&
                (el.dir.toLowerCase() === "rtl" ||
                  Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["o"])(
                    el,
                    "direction"
                  ) === "rtl"),
              wrongRTL:
                Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["o"])(
                  wrapperEl,
                  "display"
                ) === "-webkit-box",
            });
            return true;
          }
          init(el) {
            const swiper = this;
            if (swiper.initialized) return swiper;
            const mounted = swiper.mount(el);
            if (mounted === false) return swiper;
            swiper.emit("beforeInit");

            // Set breakpoint
            if (swiper.params.breakpoints) {
              swiper.setBreakpoint();
            }

            // Add Classes
            swiper.addClasses();

            // Update size
            swiper.updateSize();

            // Update slides
            swiper.updateSlides();
            if (swiper.params.watchOverflow) {
              swiper.checkOverflow();
            }

            // Set Grab Cursor
            if (swiper.params.grabCursor && swiper.enabled) {
              swiper.setGrabCursor();
            }

            // Slide To Initial Slide
            if (
              swiper.params.loop &&
              swiper.virtual &&
              swiper.params.virtual.enabled
            ) {
              swiper.slideTo(
                swiper.params.initialSlide + swiper.virtual.slidesBefore,
                0,
                swiper.params.runCallbacksOnInit,
                false,
                true
              );
            } else {
              swiper.slideTo(
                swiper.params.initialSlide,
                0,
                swiper.params.runCallbacksOnInit,
                false,
                true
              );
            }

            // Create loop
            if (swiper.params.loop) {
              swiper.loopCreate();
            }

            // Attach events
            swiper.attachEvents();
            const lazyElements = [
              ...swiper.el.querySelectorAll('[loading="lazy"]'),
            ];
            if (swiper.isElement) {
              lazyElements.push(
                ...swiper.hostEl.querySelectorAll('[loading="lazy"]')
              );
            }
            lazyElements.forEach((imageEl) => {
              if (imageEl.complete) {
                processLazyPreloader(swiper, imageEl);
              } else {
                imageEl.addEventListener("load", (e) => {
                  processLazyPreloader(swiper, e.target);
                });
              }
            });
            preload(swiper);

            // Init Flag
            swiper.initialized = true;
            preload(swiper);

            // Emit
            swiper.emit("init");
            swiper.emit("afterInit");
            return swiper;
          }
          destroy(deleteInstance, cleanStyles) {
            if (deleteInstance === void 0) {
              deleteInstance = true;
            }
            if (cleanStyles === void 0) {
              cleanStyles = true;
            }
            const swiper = this;
            const { params, el, wrapperEl, slides } = swiper;
            if (typeof swiper.params === "undefined" || swiper.destroyed) {
              return null;
            }
            swiper.emit("beforeDestroy");

            // Init Flag
            swiper.initialized = false;

            // Detach events
            swiper.detachEvents();

            // Destroy loop
            if (params.loop) {
              swiper.loopDestroy();
            }

            // Cleanup styles
            if (cleanStyles) {
              swiper.removeClasses();
              el.removeAttribute("style");
              wrapperEl.removeAttribute("style");
              if (slides && slides.length) {
                slides.forEach((slideEl) => {
                  slideEl.classList.remove(
                    params.slideVisibleClass,
                    params.slideFullyVisibleClass,
                    params.slideActiveClass,
                    params.slideNextClass,
                    params.slidePrevClass
                  );
                  slideEl.removeAttribute("style");
                  slideEl.removeAttribute("data-swiper-slide-index");
                });
              }
            }
            swiper.emit("destroy");

            // Detach emitter events
            Object.keys(swiper.eventsListeners).forEach((eventName) => {
              swiper.off(eventName);
            });
            if (deleteInstance !== false) {
              swiper.el.swiper = null;
              Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["v"])(swiper);
            }
            swiper.destroyed = true;
            return null;
          }
          static extendDefaults(newDefaults) {
            Object(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__["u"])(
              extendedDefaults,
              newDefaults
            );
          }
          static get extendedDefaults() {
            return extendedDefaults;
          }
          static get defaults() {
            return defaults;
          }
          static installModule(mod) {
            if (!Swiper.prototype.__modules__)
              Swiper.prototype.__modules__ = [];
            const modules = Swiper.prototype.__modules__;
            if (typeof mod === "function" && modules.indexOf(mod) < 0) {
              modules.push(mod);
            }
          }
          static use(module) {
            if (Array.isArray(module)) {
              module.forEach((m) => Swiper.installModule(m));
              return Swiper;
            }
            Swiper.installModule(module);
            return Swiper;
          }
        }
        Object.keys(prototypes).forEach((prototypeGroup) => {
          Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {
            Swiper.prototype[protoMethod] =
              prototypes[prototypeGroup][protoMethod];
          });
        });
        Swiper.use([Resize, Observer]);

        /***/
      },

    /***/ "./node_modules/swiper/shared/utils.mjs":
      /*!**********************************************!*\
  !*** ./node_modules/swiper/shared/utils.mjs ***!
  \**********************************************/
      /*! exports provided: a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "a",
          function () {
            return elementParents;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "b",
          function () {
            return elementOffset;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "c",
          function () {
            return createElement;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "d",
          function () {
            return now;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "e",
          function () {
            return elementChildren;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "f",
          function () {
            return elementOuterSize;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "g",
          function () {
            return getSlideTransformEl;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "h",
          function () {
            return elementIndex;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "i",
          function () {
            return classesToTokens;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "j",
          function () {
            return getTranslate;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "k",
          function () {
            return elementTransitionEnd;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "l",
          function () {
            return isObject;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "m",
          function () {
            return makeElementsArray;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "n",
          function () {
            return nextTick;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "o",
          function () {
            return elementStyle;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "p",
          function () {
            return elementNextAll;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "q",
          function () {
            return elementPrevAll;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "r",
          function () {
            return animateCSSModeScroll;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "s",
          function () {
            return setCSSProperty;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "t",
          function () {
            return showWarning;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "u",
          function () {
            return extend;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "v",
          function () {
            return deleteProps;
          }
        );
        /* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./ssr-window.esm.mjs */ "./node_modules/swiper/shared/ssr-window.esm.mjs"
          );

        function classesToTokens(classes) {
          if (classes === void 0) {
            classes = "";
          }
          return classes
            .trim()
            .split(" ")
            .filter((c) => !!c.trim());
        }

        function deleteProps(obj) {
          const object = obj;
          Object.keys(object).forEach((key) => {
            try {
              object[key] = null;
            } catch (e) {
              // no getter for object
            }
            try {
              delete object[key];
            } catch (e) {
              // something got wrong
            }
          });
        }
        function nextTick(callback, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          return setTimeout(callback, delay);
        }
        function now() {
          return Date.now();
        }
        function getComputedStyle(el) {
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          let style;
          if (window.getComputedStyle) {
            style = window.getComputedStyle(el, null);
          }
          if (!style && el.currentStyle) {
            style = el.currentStyle;
          }
          if (!style) {
            style = el.style;
          }
          return style;
        }
        function getTranslate(el, axis) {
          if (axis === void 0) {
            axis = "x";
          }
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          let matrix;
          let curTransform;
          let transformMatrix;
          const curStyle = getComputedStyle(el);
          if (window.WebKitCSSMatrix) {
            curTransform = curStyle.transform || curStyle.webkitTransform;
            if (curTransform.split(",").length > 6) {
              curTransform = curTransform
                .split(", ")
                .map((a) => a.replace(",", "."))
                .join(", ");
            }
            // Some old versions of Webkit choke when 'none' is passed; pass
            // empty string instead in this case
            transformMatrix = new window.WebKitCSSMatrix(
              curTransform === "none" ? "" : curTransform
            );
          } else {
            transformMatrix =
              curStyle.MozTransform ||
              curStyle.OTransform ||
              curStyle.MsTransform ||
              curStyle.msTransform ||
              curStyle.transform ||
              curStyle
                .getPropertyValue("transform")
                .replace("translate(", "matrix(1, 0, 0, 1,");
            matrix = transformMatrix.toString().split(",");
          }
          if (axis === "x") {
            // Latest Chrome and webkits Fix
            if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41;
            // Crazy IE10 Matrix
            else if (matrix.length === 16)
              curTransform = parseFloat(matrix[12]);
            // Normal Browsers
            else curTransform = parseFloat(matrix[4]);
          }
          if (axis === "y") {
            // Latest Chrome and webkits Fix
            if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42;
            // Crazy IE10 Matrix
            else if (matrix.length === 16)
              curTransform = parseFloat(matrix[13]);
            // Normal Browsers
            else curTransform = parseFloat(matrix[5]);
          }
          return curTransform || 0;
        }
        function isObject(o) {
          return (
            typeof o === "object" &&
            o !== null &&
            o.constructor &&
            Object.prototype.toString.call(o).slice(8, -1) === "Object"
          );
        }
        function isNode(node) {
          // eslint-disable-next-line
          if (
            typeof window !== "undefined" &&
            typeof window.HTMLElement !== "undefined"
          ) {
            return node instanceof HTMLElement;
          }
          return node && (node.nodeType === 1 || node.nodeType === 11);
        }
        function extend() {
          const to = Object(arguments.length <= 0 ? undefined : arguments[0]);
          const noExtend = ["__proto__", "constructor", "prototype"];
          for (let i = 1; i < arguments.length; i += 1) {
            const nextSource =
              i < 0 || arguments.length <= i ? undefined : arguments[i];
            if (
              nextSource !== undefined &&
              nextSource !== null &&
              !isNode(nextSource)
            ) {
              const keysArray = Object.keys(Object(nextSource)).filter(
                (key) => noExtend.indexOf(key) < 0
              );
              for (
                let nextIndex = 0, len = keysArray.length;
                nextIndex < len;
                nextIndex += 1
              ) {
                const nextKey = keysArray[nextIndex];
                const desc = Object.getOwnPropertyDescriptor(
                  nextSource,
                  nextKey
                );
                if (desc !== undefined && desc.enumerable) {
                  if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
                    if (nextSource[nextKey].__swiper__) {
                      to[nextKey] = nextSource[nextKey];
                    } else {
                      extend(to[nextKey], nextSource[nextKey]);
                    }
                  } else if (
                    !isObject(to[nextKey]) &&
                    isObject(nextSource[nextKey])
                  ) {
                    to[nextKey] = {};
                    if (nextSource[nextKey].__swiper__) {
                      to[nextKey] = nextSource[nextKey];
                    } else {
                      extend(to[nextKey], nextSource[nextKey]);
                    }
                  } else {
                    to[nextKey] = nextSource[nextKey];
                  }
                }
              }
            }
          }
          return to;
        }
        function setCSSProperty(el, varName, varValue) {
          el.style.setProperty(varName, varValue);
        }
        function animateCSSModeScroll(_ref) {
          let { swiper, targetPosition, side } = _ref;
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          const startPosition = -swiper.translate;
          let startTime = null;
          let time;
          const duration = swiper.params.speed;
          swiper.wrapperEl.style.scrollSnapType = "none";
          window.cancelAnimationFrame(swiper.cssModeFrameID);
          const dir = targetPosition > startPosition ? "next" : "prev";
          const isOutOfBound = (current, target) => {
            return (
              (dir === "next" && current >= target) ||
              (dir === "prev" && current <= target)
            );
          };
          const animate = () => {
            time = new Date().getTime();
            if (startTime === null) {
              startTime = time;
            }
            const progress = Math.max(
              Math.min((time - startTime) / duration, 1),
              0
            );
            const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
            let currentPosition =
              startPosition + easeProgress * (targetPosition - startPosition);
            if (isOutOfBound(currentPosition, targetPosition)) {
              currentPosition = targetPosition;
            }
            swiper.wrapperEl.scrollTo({
              [side]: currentPosition,
            });
            if (isOutOfBound(currentPosition, targetPosition)) {
              swiper.wrapperEl.style.overflow = "hidden";
              swiper.wrapperEl.style.scrollSnapType = "";
              setTimeout(() => {
                swiper.wrapperEl.style.overflow = "";
                swiper.wrapperEl.scrollTo({
                  [side]: currentPosition,
                });
              });
              window.cancelAnimationFrame(swiper.cssModeFrameID);
              return;
            }
            swiper.cssModeFrameID = window.requestAnimationFrame(animate);
          };
          animate();
        }
        function getSlideTransformEl(slideEl) {
          return (
            slideEl.querySelector(".swiper-slide-transform") ||
            (slideEl.shadowRoot &&
              slideEl.shadowRoot.querySelector(".swiper-slide-transform")) ||
            slideEl
          );
        }
        function elementChildren(element, selector) {
          if (selector === void 0) {
            selector = "";
          }
          return [...element.children].filter((el) => el.matches(selector));
        }
        function showWarning(text) {
          try {
            console.warn(text);
            return;
          } catch (err) {
            // err
          }
        }
        function createElement(tag, classes) {
          if (classes === void 0) {
            classes = [];
          }
          const el = document.createElement(tag);
          el.classList.add(
            ...(Array.isArray(classes) ? classes : classesToTokens(classes))
          );
          return el;
        }
        function elementOffset(el) {
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          const document = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["g"]
          )();
          const box = el.getBoundingClientRect();
          const body = document.body;
          const clientTop = el.clientTop || body.clientTop || 0;
          const clientLeft = el.clientLeft || body.clientLeft || 0;
          const scrollTop = el === window ? window.scrollY : el.scrollTop;
          const scrollLeft = el === window ? window.scrollX : el.scrollLeft;
          return {
            top: box.top + scrollTop - clientTop,
            left: box.left + scrollLeft - clientLeft,
          };
        }
        function elementPrevAll(el, selector) {
          const prevEls = [];
          while (el.previousElementSibling) {
            const prev = el.previousElementSibling; // eslint-disable-line
            if (selector) {
              if (prev.matches(selector)) prevEls.push(prev);
            } else prevEls.push(prev);
            el = prev;
          }
          return prevEls;
        }
        function elementNextAll(el, selector) {
          const nextEls = [];
          while (el.nextElementSibling) {
            const next = el.nextElementSibling; // eslint-disable-line
            if (selector) {
              if (next.matches(selector)) nextEls.push(next);
            } else nextEls.push(next);
            el = next;
          }
          return nextEls;
        }
        function elementStyle(el, prop) {
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          return window.getComputedStyle(el, null).getPropertyValue(prop);
        }
        function elementIndex(el) {
          let child = el;
          let i;
          if (child) {
            i = 0;
            // eslint-disable-next-line
            while ((child = child.previousSibling) !== null) {
              if (child.nodeType === 1) i += 1;
            }
            return i;
          }
          return undefined;
        }
        function elementParents(el, selector) {
          const parents = []; // eslint-disable-line
          let parent = el.parentElement; // eslint-disable-line
          while (parent) {
            if (selector) {
              if (parent.matches(selector)) parents.push(parent);
            } else {
              parents.push(parent);
            }
            parent = parent.parentElement;
          }
          return parents;
        }
        function elementTransitionEnd(el, callback) {
          function fireCallBack(e) {
            if (e.target !== el) return;
            callback.call(el, e);
            el.removeEventListener("transitionend", fireCallBack);
          }
          if (callback) {
            el.addEventListener("transitionend", fireCallBack);
          }
        }
        function elementOuterSize(el, size, includeMargins) {
          const window = Object(
            _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__["a"]
          )();
          if (includeMargins) {
            return (
              el[size === "width" ? "offsetWidth" : "offsetHeight"] +
              parseFloat(
                window
                  .getComputedStyle(el, null)
                  .getPropertyValue(
                    size === "width" ? "margin-right" : "margin-top"
                  )
              ) +
              parseFloat(
                window
                  .getComputedStyle(el, null)
                  .getPropertyValue(
                    size === "width" ? "margin-left" : "margin-bottom"
                  )
              )
            );
          }
          return el.offsetWidth;
        }
        function makeElementsArray(el) {
          return (Array.isArray(el) ? el : [el]).filter((e) => !!e);
        }

        /***/
      },

    /***/ "./node_modules/swiper/swiper-bundle.mjs":
      /*!***********************************************!*\
  !*** ./node_modules/swiper/swiper-bundle.mjs ***!
  \***********************************************/
      /*! exports provided: Swiper, default */
      /***/ function (
        __webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./shared/swiper-core.mjs */ "./node_modules/swiper/shared/swiper-core.mjs"
          );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Swiper",
          function () {
            return _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_0__["S"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_0__["S"];
          }
        );

        /* harmony import */ var _modules_virtual_mjs__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! ./modules/virtual.mjs */ "./node_modules/swiper/modules/virtual.mjs"
          );
        /* harmony import */ var _modules_keyboard_mjs__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! ./modules/keyboard.mjs */ "./node_modules/swiper/modules/keyboard.mjs"
          );
        /* harmony import */ var _modules_mousewheel_mjs__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            /*! ./modules/mousewheel.mjs */ "./node_modules/swiper/modules/mousewheel.mjs"
          );
        /* harmony import */ var _modules_navigation_mjs__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            /*! ./modules/navigation.mjs */ "./node_modules/swiper/modules/navigation.mjs"
          );
        /* harmony import */ var _modules_pagination_mjs__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            /*! ./modules/pagination.mjs */ "./node_modules/swiper/modules/pagination.mjs"
          );
        /* harmony import */ var _modules_scrollbar_mjs__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            /*! ./modules/scrollbar.mjs */ "./node_modules/swiper/modules/scrollbar.mjs"
          );
        /* harmony import */ var _modules_parallax_mjs__WEBPACK_IMPORTED_MODULE_7__ =
          __webpack_require__(
            /*! ./modules/parallax.mjs */ "./node_modules/swiper/modules/parallax.mjs"
          );
        /* harmony import */ var _modules_zoom_mjs__WEBPACK_IMPORTED_MODULE_8__ =
          __webpack_require__(
            /*! ./modules/zoom.mjs */ "./node_modules/swiper/modules/zoom.mjs"
          );
        /* harmony import */ var _modules_controller_mjs__WEBPACK_IMPORTED_MODULE_9__ =
          __webpack_require__(
            /*! ./modules/controller.mjs */ "./node_modules/swiper/modules/controller.mjs"
          );
        /* harmony import */ var _modules_a11y_mjs__WEBPACK_IMPORTED_MODULE_10__ =
          __webpack_require__(
            /*! ./modules/a11y.mjs */ "./node_modules/swiper/modules/a11y.mjs"
          );
        /* harmony import */ var _modules_history_mjs__WEBPACK_IMPORTED_MODULE_11__ =
          __webpack_require__(
            /*! ./modules/history.mjs */ "./node_modules/swiper/modules/history.mjs"
          );
        /* harmony import */ var _modules_hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_12__ =
          __webpack_require__(
            /*! ./modules/hash-navigation.mjs */ "./node_modules/swiper/modules/hash-navigation.mjs"
          );
        /* harmony import */ var _modules_autoplay_mjs__WEBPACK_IMPORTED_MODULE_13__ =
          __webpack_require__(
            /*! ./modules/autoplay.mjs */ "./node_modules/swiper/modules/autoplay.mjs"
          );
        /* harmony import */ var _modules_thumbs_mjs__WEBPACK_IMPORTED_MODULE_14__ =
          __webpack_require__(
            /*! ./modules/thumbs.mjs */ "./node_modules/swiper/modules/thumbs.mjs"
          );
        /* harmony import */ var _modules_free_mode_mjs__WEBPACK_IMPORTED_MODULE_15__ =
          __webpack_require__(
            /*! ./modules/free-mode.mjs */ "./node_modules/swiper/modules/free-mode.mjs"
          );
        /* harmony import */ var _modules_grid_mjs__WEBPACK_IMPORTED_MODULE_16__ =
          __webpack_require__(
            /*! ./modules/grid.mjs */ "./node_modules/swiper/modules/grid.mjs"
          );
        /* harmony import */ var _modules_manipulation_mjs__WEBPACK_IMPORTED_MODULE_17__ =
          __webpack_require__(
            /*! ./modules/manipulation.mjs */ "./node_modules/swiper/modules/manipulation.mjs"
          );
        /* harmony import */ var _modules_effect_fade_mjs__WEBPACK_IMPORTED_MODULE_18__ =
          __webpack_require__(
            /*! ./modules/effect-fade.mjs */ "./node_modules/swiper/modules/effect-fade.mjs"
          );
        /* harmony import */ var _modules_effect_cube_mjs__WEBPACK_IMPORTED_MODULE_19__ =
          __webpack_require__(
            /*! ./modules/effect-cube.mjs */ "./node_modules/swiper/modules/effect-cube.mjs"
          );
        /* harmony import */ var _modules_effect_flip_mjs__WEBPACK_IMPORTED_MODULE_20__ =
          __webpack_require__(
            /*! ./modules/effect-flip.mjs */ "./node_modules/swiper/modules/effect-flip.mjs"
          );
        /* harmony import */ var _modules_effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_21__ =
          __webpack_require__(
            /*! ./modules/effect-coverflow.mjs */ "./node_modules/swiper/modules/effect-coverflow.mjs"
          );
        /* harmony import */ var _modules_effect_creative_mjs__WEBPACK_IMPORTED_MODULE_22__ =
          __webpack_require__(
            /*! ./modules/effect-creative.mjs */ "./node_modules/swiper/modules/effect-creative.mjs"
          );
        /* harmony import */ var _modules_effect_cards_mjs__WEBPACK_IMPORTED_MODULE_23__ =
          __webpack_require__(
            /*! ./modules/effect-cards.mjs */ "./node_modules/swiper/modules/effect-cards.mjs"
          );
        /**
         * Swiper 11.1.3
         * Most modern mobile touch slider and framework with hardware accelerated transitions
         * https://swiperjs.com
         *
         * Copyright 2014-2024 Vladimir Kharlampidi
         *
         * Released under the MIT License
         *
         * Released on: May 13, 2024
         */

        // Swiper Class
        const modules = [
          _modules_virtual_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
          _modules_keyboard_mjs__WEBPACK_IMPORTED_MODULE_2__["default"],
          _modules_mousewheel_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
          _modules_navigation_mjs__WEBPACK_IMPORTED_MODULE_4__["default"],
          _modules_pagination_mjs__WEBPACK_IMPORTED_MODULE_5__["default"],
          _modules_scrollbar_mjs__WEBPACK_IMPORTED_MODULE_6__["default"],
          _modules_parallax_mjs__WEBPACK_IMPORTED_MODULE_7__["default"],
          _modules_zoom_mjs__WEBPACK_IMPORTED_MODULE_8__["default"],
          _modules_controller_mjs__WEBPACK_IMPORTED_MODULE_9__["default"],
          _modules_a11y_mjs__WEBPACK_IMPORTED_MODULE_10__["default"],
          _modules_history_mjs__WEBPACK_IMPORTED_MODULE_11__["default"],
          _modules_hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_12__["default"],
          _modules_autoplay_mjs__WEBPACK_IMPORTED_MODULE_13__["default"],
          _modules_thumbs_mjs__WEBPACK_IMPORTED_MODULE_14__["default"],
          _modules_free_mode_mjs__WEBPACK_IMPORTED_MODULE_15__["default"],
          _modules_grid_mjs__WEBPACK_IMPORTED_MODULE_16__["default"],
          _modules_manipulation_mjs__WEBPACK_IMPORTED_MODULE_17__["default"],
          _modules_effect_fade_mjs__WEBPACK_IMPORTED_MODULE_18__["default"],
          _modules_effect_cube_mjs__WEBPACK_IMPORTED_MODULE_19__["default"],
          _modules_effect_flip_mjs__WEBPACK_IMPORTED_MODULE_20__["default"],
          _modules_effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_21__[
            "default"
          ],
          _modules_effect_creative_mjs__WEBPACK_IMPORTED_MODULE_22__["default"],
          _modules_effect_cards_mjs__WEBPACK_IMPORTED_MODULE_23__["default"],
        ];
        _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_0__["S"].use(modules);

        /***/
      },

    /***/ "./node_modules/vue/dist/vue.esm-bundler.js":
      /*!**************************************************!*\
  !*** ./node_modules/vue/dist/vue.esm-bundler.js ***!
  \**************************************************/
      /*! exports provided: EffectScope, ReactiveEffect, TrackOpTypes, TriggerOpTypes, customRef, effect, effectScope, getCurrentScope, isProxy, isReactive, isReadonly, isRef, isShallow, markRaw, onScopeDispose, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, toRef, toRefs, toValue, triggerRef, unref, camelize, capitalize, normalizeClass, normalizeProps, normalizeStyle, toDisplayString, toHandlerKey, BaseTransition, BaseTransitionPropsValidators, Comment, DeprecationTypes, ErrorCodes, ErrorTypeStrings, Fragment, KeepAlive, Static, Suspense, Teleport, Text, assertNumber, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, compatUtils, computed, createBlock, createCommentVNode, createElementBlock, createElementVNode, createHydrationRenderer, createPropsRestProxy, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, defineEmits, defineExpose, defineModel, defineOptions, defineProps, defineSlots, devtools, getCurrentInstance, getTransitionRawChildren, guardReactiveProps, h, handleError, hasInjectionContext, initCustomFormatter, inject, isMemoSame, isRuntimeOnly, isVNode, mergeDefaults, mergeModels, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveFilter, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useAttrs, useModel, useSSRContext, useSlots, useTransitionState, version, warn, watch, watchEffect, watchPostEffect, watchSyncEffect, withAsyncContext, withCtx, withDefaults, withDirectives, withMemo, withScopeId, Transition, TransitionGroup, VueElement, createApp, createSSRApp, defineCustomElement, defineSSRCustomElement, hydrate, initDirectivesForSSR, render, useCssModule, useCssVars, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, vShow, withKeys, withModifiers, compile */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "compile",
          function () {
            return compileToFunction;
          }
        );
        /* harmony import */ var _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! @vue/runtime-dom */ "./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js"
          );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "EffectScope",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["EffectScope"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ReactiveEffect",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "ReactiveEffect"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TrackOpTypes",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "TrackOpTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TriggerOpTypes",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "TriggerOpTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "customRef",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["customRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "effect",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["effect"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "effectScope",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["effectScope"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getCurrentScope",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "getCurrentScope"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isProxy",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["isProxy"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isReactive",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["isReactive"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isReadonly",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["isReadonly"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isRef",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["isRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isShallow",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["isShallow"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "markRaw",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["markRaw"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onScopeDispose",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "onScopeDispose"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "proxyRefs",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["proxyRefs"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "reactive",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["reactive"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "readonly",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["readonly"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ref",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["ref"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowReactive",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "shallowReactive"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowReadonly",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "shallowReadonly"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "shallowRef",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["shallowRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "stop",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["stop"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toRaw",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["toRaw"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toRef",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["toRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toRefs",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["toRefs"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toValue",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["toValue"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "triggerRef",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["triggerRef"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "unref",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["unref"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "camelize",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["camelize"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "capitalize",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["capitalize"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "normalizeClass",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "normalizeClass"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "normalizeProps",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "normalizeProps"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "normalizeStyle",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "normalizeStyle"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toDisplayString",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "toDisplayString"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toHandlerKey",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "toHandlerKey"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "BaseTransition",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "BaseTransition"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "BaseTransitionPropsValidators",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "BaseTransitionPropsValidators"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Comment",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["Comment"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "DeprecationTypes",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "DeprecationTypes"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ErrorCodes",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["ErrorCodes"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ErrorTypeStrings",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "ErrorTypeStrings"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Fragment",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["Fragment"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "KeepAlive",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["KeepAlive"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Static",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["Static"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Suspense",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["Suspense"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Teleport",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["Teleport"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Text",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["Text"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "assertNumber",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "assertNumber"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "callWithAsyncErrorHandling",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "callWithAsyncErrorHandling"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "callWithErrorHandling",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "callWithErrorHandling"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "cloneVNode",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["cloneVNode"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "compatUtils",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["compatUtils"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "computed",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["computed"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createBlock",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["createBlock"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createCommentVNode",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "createCommentVNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createElementBlock",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "createElementBlock"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createElementVNode",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "createElementVNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createHydrationRenderer",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "createHydrationRenderer"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createPropsRestProxy",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "createPropsRestProxy"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createRenderer",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "createRenderer"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createSlots",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["createSlots"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createStaticVNode",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "createStaticVNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createTextVNode",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "createTextVNode"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createVNode",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["createVNode"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineAsyncComponent",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "defineAsyncComponent"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineComponent",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "defineComponent"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineEmits",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["defineEmits"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineExpose",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "defineExpose"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineModel",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["defineModel"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineOptions",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "defineOptions"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineProps",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["defineProps"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineSlots",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["defineSlots"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "devtools",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["devtools"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getCurrentInstance",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "getCurrentInstance"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "getTransitionRawChildren",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "getTransitionRawChildren"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "guardReactiveProps",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "guardReactiveProps"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "h",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["h"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "handleError",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["handleError"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "hasInjectionContext",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "hasInjectionContext"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "initCustomFormatter",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "initCustomFormatter"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "inject",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["inject"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isMemoSame",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["isMemoSame"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isRuntimeOnly",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "isRuntimeOnly"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "isVNode",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["isVNode"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "mergeDefaults",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "mergeDefaults"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "mergeModels",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["mergeModels"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "mergeProps",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["mergeProps"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "nextTick",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["nextTick"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onActivated",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["onActivated"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onBeforeMount",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "onBeforeMount"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onBeforeUnmount",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "onBeforeUnmount"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onBeforeUpdate",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "onBeforeUpdate"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onDeactivated",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "onDeactivated"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onErrorCaptured",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "onErrorCaptured"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onMounted",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["onMounted"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onRenderTracked",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "onRenderTracked"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onRenderTriggered",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "onRenderTriggered"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onServerPrefetch",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "onServerPrefetch"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onUnmounted",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["onUnmounted"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "onUpdated",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["onUpdated"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "openBlock",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["openBlock"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "popScopeId",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["popScopeId"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "provide",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["provide"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "pushScopeId",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["pushScopeId"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "queuePostFlushCb",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "queuePostFlushCb"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "registerRuntimeCompiler",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "registerRuntimeCompiler"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "renderList",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["renderList"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "renderSlot",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["renderSlot"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveComponent",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "resolveComponent"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveDirective",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "resolveDirective"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveDynamicComponent",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "resolveDynamicComponent"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveFilter",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "resolveFilter"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "resolveTransitionHooks",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "resolveTransitionHooks"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "setBlockTracking",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "setBlockTracking"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "setDevtoolsHook",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "setDevtoolsHook"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "setTransitionHooks",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "setTransitionHooks"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ssrContextKey",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "ssrContextKey"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "ssrUtils",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["ssrUtils"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "toHandlers",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["toHandlers"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "transformVNodeArgs",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "transformVNodeArgs"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useAttrs",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["useAttrs"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useModel",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["useModel"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useSSRContext",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "useSSRContext"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useSlots",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["useSlots"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useTransitionState",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "useTransitionState"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "version",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["version"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "warn",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["warn"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "watch",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["watch"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "watchEffect",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["watchEffect"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "watchPostEffect",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "watchPostEffect"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "watchSyncEffect",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "watchSyncEffect"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withAsyncContext",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "withAsyncContext"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withCtx",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["withCtx"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withDefaults",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "withDefaults"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withDirectives",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "withDirectives"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withMemo",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["withMemo"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withScopeId",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["withScopeId"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "Transition",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["Transition"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "TransitionGroup",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "TransitionGroup"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "VueElement",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["VueElement"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createApp",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["createApp"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createSSRApp",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "createSSRApp"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineCustomElement",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "defineCustomElement"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "defineSSRCustomElement",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "defineSSRCustomElement"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "hydrate",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["hydrate"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "initDirectivesForSSR",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "initDirectivesForSSR"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "render",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["render"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useCssModule",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "useCssModule"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "useCssVars",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["useCssVars"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "vModelCheckbox",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "vModelCheckbox"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "vModelDynamic",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "vModelDynamic"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "vModelRadio",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["vModelRadio"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "vModelSelect",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "vModelSelect"
            ];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "vModelText",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["vModelText"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "vShow",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["vShow"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withKeys",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["withKeys"];
          }
        );

        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "withModifiers",
          function () {
            return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
              "withModifiers"
            ];
          }
        );

        /* harmony import */ var _vue_compiler_dom__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! @vue/compiler-dom */ "./node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js"
          );
        /* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! @vue/shared */ "./node_modules/@vue/shared/dist/shared.esm-bundler.js"
          );
        /**
         * vue v3.4.27
         * (c) 2018-present Yuxi (Evan) You and Vue contributors
         * @license MIT
         **/

        function initDev() {
          {
            Object(
              _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
                "initCustomFormatter"
              ]
            )();
          }
        }

        if (true) {
          initDev();
        }
        const compileCache = /* @__PURE__ */ new WeakMap();
        function getCache(options) {
          let c = compileCache.get(
            options != null
              ? options
              : _vue_shared__WEBPACK_IMPORTED_MODULE_2__["EMPTY_OBJ"]
          );
          if (!c) {
            c = /* @__PURE__ */ Object.create(null);
            compileCache.set(
              options != null
                ? options
                : _vue_shared__WEBPACK_IMPORTED_MODULE_2__["EMPTY_OBJ"],
              c
            );
          }
          return c;
        }
        function compileToFunction(template, options) {
          if (
            !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_2__["isString"])(
              template
            )
          ) {
            if (template.nodeType) {
              template = template.innerHTML;
            } else {
              true &&
                Object(_vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                  `invalid template option: `,
                  template
                );
              return _vue_shared__WEBPACK_IMPORTED_MODULE_2__["NOOP"];
            }
          }
          const key = template;
          const cache = getCache(options);
          const cached = cache[key];
          if (cached) {
            return cached;
          }
          if (template[0] === "#") {
            const el = document.querySelector(template);
            if (true && !el) {
              Object(_vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["warn"])(
                `Template element not found or is empty: ${template}`
              );
            }
            template = el ? el.innerHTML : ``;
          }
          const opts = Object(
            _vue_shared__WEBPACK_IMPORTED_MODULE_2__["extend"]
          )(
            {
              hoistStatic: true,
              onError: true ? onError : undefined,
              onWarn: true ? (e) => onError(e, true) : undefined,
            },
            options
          );
          if (!opts.isCustomElement && typeof customElements !== "undefined") {
            opts.isCustomElement = (tag) => !!customElements.get(tag);
          }
          const { code } = Object(
            _vue_compiler_dom__WEBPACK_IMPORTED_MODULE_1__["compile"]
          )(template, opts);
          function onError(err, asWarning = false) {
            const message = asWarning
              ? err.message
              : `Template compilation error: ${err.message}`;
            const codeFrame =
              err.loc &&
              Object(
                _vue_shared__WEBPACK_IMPORTED_MODULE_2__["generateCodeFrame"]
              )(template, err.loc.start.offset, err.loc.end.offset);
            Object(_vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__["warn"])(
              codeFrame
                ? `${message}
${codeFrame}`
                : message
            );
          }
          const render = new Function("Vue", code)(
            _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__
          );
          render._rc = true;
          return (cache[key] = render);
        }
        Object(
          _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[
            "registerRuntimeCompiler"
          ]
        )(compileToFunction);

        /***/
      },

    /***/ "./node_modules/webpack/buildin/global.js":
      /*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
      /*! no static exports found */
      /***/ function (module, exports) {
        var g;

        // This works in non-strict mode
        g = (function () {
          return this;
        })();

        try {
          // This works if eval is allowed (see CSP)
          g = g || new Function("return this")();
        } catch (e) {
          // This works if the window reference is available
          if (typeof window === "object") g = window;
        }

        // g can still be undefined, but nothing to do about it...
        // We return undefined, instead of nothing here, so it's
        // easier to handle this case. if(!global) { ...}

        module.exports = g;

        /***/
      },

    /***/ "./src/components/am_employee-stories/am_employee-stories.js":
      /*!*******************************************************************!*\
  !*** ./src/components/am_employee-stories/am_employee-stories.js ***!
  \*******************************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return EmployeeStories;
            }
          );
          /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! vue */ "./node_modules/vue/dist/vue.esm-bundler.js"
            );
          /* harmony import */ var swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              /*! swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );
          /* harmony import */ var _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__ =
            __webpack_require__(
              /*! ../am_modal/am_modal.js */ "./src/components/am_modal/am_modal.js"
            );

          class EmployeeStories {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_employee-stories",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.appContainer = this.$el;
              this.init();
            }

            init() {
              this.buildApp();
            }

            buildApp() {
              var self = this;
              const app = Object(vue__WEBPACK_IMPORTED_MODULE_0__["createApp"])(
                {
                  data() {
                    return {
                      isLoading: false,
                      language:
                        document.querySelector("html").getAttribute("lang") ||
                        "en",
                      stories: window.am_stories ? window.am_stories : [],
                      modalState: false,
                      modalData: {},
                      currentDataIndex: 0,
                      videoIframe: "",
                    };
                  },
                  methods: {
                    handleInitiativeModal(data, index) {
                      this.currentDataIndex = index;
                      this.modalData = data.modal;
                      this.handleModalOpen();
                    },

                    handleModalOpen() {
                      this.modalState = true;
                    },

                    handleModalClose() {
                      this.modalState = false;
                      $(".am_employee-stories-modal")
                        .find(".media")
                        .removeClass("media--playing");
                      $(".am_employee-stories-modal")
                        .find(".media-container")
                        .html("");
                      self.swiper.destroy();
                    },

                    playVideo(video, title) {
                      let mediaFrame = `<iframe width="560" height="315" src="https://www.youtube.com/embed/${video}?autoplay=1" title="${title}}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>`;
                      $(".am_employee-stories-modal")
                        .find(".media")
                        .addClass("media--playing");
                      $(".am_employee-stories-modal")
                        .find(".media-container")
                        .html(mediaFrame);
                    },
                  },
                }
              );

              app.component(
                "am-modal",
                _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__["AMModal"]
              );

              app.mount(self.appContainer);
            }

            bindEvents(slide) {
              this.swiper =
                new swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ](".am_modal-swiper", {
                  direction: "horizontal",
                  slidesPerView: 1,
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  scrollbar: {
                    el: ".swiper-scrollbar",
                  },
                });

              if (this.swiper) {
                this.swiper.slideTo(slide);
              }
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_events/am_events.js":
      /*!***********************************************!*\
  !*** ./src/components/am_events/am_events.js ***!
  \***********************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return Events;
            }
          );
          /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! vue */ "./node_modules/vue/dist/vue.esm-bundler.js"
            );
          /* harmony import */ var swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              /*! swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );
          /* harmony import */ var _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__ =
            __webpack_require__(
              /*! ../am_modal/am_modal.js */ "./src/components/am_modal/am_modal.js"
            );

          class Events {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_events",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.appContainer = this.$el;
              this.init();
            }

            init() {
              this.buildApp();
            }

            buildApp() {
              const self = this;
              const app = Object(vue__WEBPACK_IMPORTED_MODULE_0__["createApp"])(
                {
                  data() {
                    return {
                      isLoading: false,
                      language:
                        document.querySelector("html").getAttribute("lang") ||
                        "en",
                      events: window.am_events ? window.am_events : [],
                      modalState: false,
                      modalData: {},
                      currentDataIndex: 0,
                    };
                  },
                  mounted() {
                    this.$nextTick(() => {
                      self.bindEvents();
                    });
                  },
                  methods: {
                    handleInitiativeModal(data, index) {
                      this.currentDataIndex = index;
                      this.modalData = data.modal;
                      this.handleModalOpen();
                    },

                    handleModalNext() {
                      if (this.currentDataIndex < this.events.length - 1) {
                        this.currentDataIndex++;
                      } else {
                        this.currentDataIndex = 0;
                      }

                      this.modalData = this.events[this.currentDataIndex].modal;
                    },

                    handleModalPrev() {
                      if (this.currentDataIndex > 0) {
                        this.currentDataIndex--;
                      } else {
                        this.currentDataIndex = this.events.length - 1;
                      }
                      this.modalData = this.events[this.currentDataIndex].modal;
                    },

                    handleModalOpen() {
                      this.modalState = true;
                    },

                    handleModalClose() {
                      this.modalState = false;
                    },
                  },
                }
              );

              app.component(
                "am-modal",
                _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__["AMModal"]
              );

              app.mount(self.appContainer);
            }

            bindEvents() {
              const swiper =
                new swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ](".am_events-swiper", {
                  direction: "horizontal",
                  slidesPerView: 1,
                  spaceBetween: 16,
                  breakpoints: {
                    768: {
                      slidesPerView: 2,
                    },
                    1024: {
                      slidesPerView: 3,
                    },
                  },
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  scrollbar: {
                    el: ".swiper-scrollbar",
                  },
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_faqs/am_faqs.js":
      /*!*******************************************!*\
  !*** ./src/components/am_faqs/am_faqs.js ***!
  \*******************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return FAQs;
            }
          );
          class FAQs {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_faqs",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? $(this.options.el)
                : $(this.options.selector);
              this.init();
            }

            init() {
              this.bindEvents();
            }

            bindEvents() {
              this.$el.find("li").on("click", (e) => {
                if ($(e.currentTarget).hasClass("active")) {
                  $(e.currentTarget).removeClass("active");
                } else {
                  this.$el.find("li").removeClass("active");
                  $(e.currentTarget).addClass("active");
                }
              });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_featured-experts/am_featured-experts.js":
      /*!*******************************************************************!*\
  !*** ./src/components/am_featured-experts/am_featured-experts.js ***!
  \*******************************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return FeaturedExperts;
            }
          );
          /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! vue */ "./node_modules/vue/dist/vue.esm-bundler.js"
            );
          /* harmony import */ var _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              /*! ../../../node_modules/swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );
          /* harmony import */ var _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__ =
            __webpack_require__(
              /*! ../am_modal/am_modal.js */ "./src/components/am_modal/am_modal.js"
            );

          class FeaturedExperts {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_featured-experts",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.appContainer = this.$el;
              this.init();
            }

            init() {
              this.buildApp();
            }

            buildApp() {
              var self = this;
              const app = Object(vue__WEBPACK_IMPORTED_MODULE_0__["createApp"])(
                {
                  data() {
                    return {
                      isLoading: false,
                      language:
                        document.querySelector("html").getAttribute("lang") ||
                        "en",
                      leaders: window.am_featured_leaders
                        ? window.am_featured_leaders
                        : [],
                      modalState: false,
                      modalData: {},
                    };
                  },
                  mounted() {
                    this.$nextTick(() => {
                      self.bindEvents();
                    });
                  },
                  methods: {
                    handleInitiativeModal(data, index) {
                      this.currentDataIndex = index;
                      this.modalData = data.modal;
                      this.handleModalOpen();
                    },

                    handleModalOpen() {
                      this.modalState = true;
                      this.$nextTick(() => {
                        if ($(".am_modal-swiper").length > 0) {
                          this.swiper =
                            new _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__[
                              "default"
                            ](".am_modal-swiper", {
                              direction: "horizontal",
                              slidesPerView: 1,
                              navigation: {
                                nextEl: ".swiper-button-next",
                                prevEl: ".swiper-button-prev",
                              },
                              scrollbar: {
                                el: ".swiper-scrollbar",
                              },
                            });
                        }
                      });
                    },

                    handleModalClose() {
                      this.modalState = false;
                      if (this.swiper) {
                        this.swiper.destroy();
                      }
                    },
                  },
                }
              );

              app.component(
                "am-modal",
                _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__["AMModal"]
              );

              app.mount(self.appContainer);
            }

            bindEvents() {
              const swiper =
                new _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ](".am_featured-experts-swiper", {
                  direction: "horizontal",
                  slidesPerView: 1,
                  spaceBetween: 16,
                  breakpoints: {
                    768: {
                      slidesPerView: 3,
                    },
                    1024: {
                      slidesPerView: 4,
                    },
                  },
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  scrollbar: {
                    el: ".swiper-scrollbar",
                  },
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_features-highlights/am_features-highlights.js":
      /*!*************************************************************************!*\
  !*** ./src/components/am_features-highlights/am_features-highlights.js ***!
  \*************************************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return FeaturesHighlights;
            }
          );
          class FeaturesHighlights {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_features-highlights",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? $(this.options.el)
                : $(this.options.selector);
              this.$featuresContainers = this.$el.find(".features");
              this.$featuresNavigation = this.$el.find(".features-navigation");
              this.$featuresList = ".features-list";
              this.$featuresContent = ".features-content";
              this.$indicator = ".indicator";
              this.currentContainer = this.$featuresNavigation
                ? this.$featuresNavigation
                    .find("li")
                    .eq(0)
                    .find("a")
                    .attr("href")
                : this.$featuresContainers.eq(0).attr("id");
              this.init();
            }

            init() {
              this.initialSetup();
              this.bindEvents();
            }

            initialSetup() {
              if (this.$featuresNavigation) {
                this.$featuresNavigation
                  .find("li")
                  .eq(0)
                  .find("a")
                  .addClass("active");
              }

              this.currentContainer = this.$featuresNavigation
                ? this.$featuresNavigation
                    .find("li")
                    .eq(0)
                    .find("a")
                    .attr("href")
                : this.$featuresContainers.eq(0).attr("id");

              this.$featuresContainers.eq(0).addClass("features--active");

              this.$featuresContainers
                .eq(0)
                .find(this.$featuresList)
                .find("li")
                .eq(0)
                .addClass("active");
              this.$featuresContainers
                .eq(0)
                .find(this.$featuresContent)
                .find(".features-content-item")
                .eq(0)
                .addClass("features-content-item--show");
              window.setTimeout(() => {
                this.$featuresContainers
                  .eq(0)
                  .find(this.$indicator)
                  .animate(
                    {
                      top: this.$featuresContainers
                        .eq(0)
                        .find(this.$featuresList)
                        .find("li")
                        .eq(0)
                        .position().top,
                      height: this.$featuresContainers
                        .eq(0)
                        .find(this.$featuresList)
                        .find("li")
                        .eq(0)
                        .height(),
                    },
                    100
                  );
              }, 300);
            }

            bindEvents() {
              if (this.$featuresNavigation) {
                this.$featuresNavigation.find("li a").on("click", (e) => {
                  e.preventDefault();
                  this.$featuresNavigation.find("li a").removeClass("active");
                  $(e.currentTarget).addClass("active");

                  this.currentContainer = $(e.currentTarget).attr("href");
                  this.$featuresContainers.removeClass("features--active");
                  this.$el
                    .find(`#${this.currentContainer}`)
                    .addClass("features--active");
                  this.$featuresContainers
                    .find(this.$featuresContent)
                    .find(".features-content-item")
                    .removeClass("features-content-item--show");
                  this.$el
                    .find(`#${this.currentContainer}`)
                    .find(this.$featuresContent)
                    .find(".features-content-item")
                    .eq(0)
                    .addClass("features-content-item--show");

                  window.setTimeout(() => {
                    this.$el
                      .find(`#${this.currentContainer}`)
                      .find(this.$indicator)
                      .animate(
                        {
                          top: this.$el
                            .find(`#${this.currentContainer}`)
                            .find(this.$featuresList)
                            .find("li")
                            .eq(0)
                            .position().top,
                          height: this.$el
                            .find(`#${this.currentContainer}`)
                            .find(this.$featuresList)
                            .find("li")
                            .eq(0)
                            .height(),
                        },
                        100
                      );
                    this.$el
                      .find(`#${this.currentContainer}`)
                      .find(this.$featuresList)
                      .find("li")
                      .removeClass("active");
                    this.$el
                      .find(`#${this.currentContainer}`)
                      .find(this.$featuresList)
                      .find("li")
                      .eq(0)
                      .addClass("active");
                  }, 300);
                });
              }

              $(this.$featuresList)
                .find("a")
                .on("click", (e) => {
                  e.preventDefault();
                  this.currentContainer = this.$el
                    .find(".features--active")
                    .attr("id");
                  this.$el
                    .find(`#${this.currentContainer}`)
                    .find(this.$featuresList)
                    .find("li")
                    .removeClass("active");
                  $(e.currentTarget).parent().addClass("active");
                  this.$el
                    .find(`#${this.currentContainer}`)
                    .find(this.$featuresContent)
                    .find(".features-content-item")
                    .removeClass("features-content-item--show");
                  this.$el
                    .find(`#${this.currentContainer}`)
                    .find(this.$featuresContent)
                    .find(".features-content-item")
                    .eq(
                      this.$el
                        .find(`#${this.currentContainer}`)
                        .find(this.$featuresList)
                        .find("li.active")
                        .index()
                    )
                    .addClass("features-content-item--show");
                  window.setTimeout(() => {
                    this.$el
                      .find(`#${this.currentContainer}`)
                      .find(this.$indicator)
                      .animate(
                        {
                          top: $(e.currentTarget).parent().position().top,
                          height: $(e.currentTarget).parent().height(),
                        },
                        100
                      );
                  }, 300);
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_header/am_header.js":
      /*!***********************************************!*\
  !*** ./src/components/am_header/am_header.js ***!
  \***********************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return Header;
            }
          );
          /* harmony import */ var _am_utils_am_utils__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! ../am_utils/am_utils */ "./src/components/am_utils/am_utils.js"
            );

          class Header {
            constructor(options) {
              this.options = {
                el: ".am_header",
                ...options,
              };

              this.$el = $(this.options.el);
              this.$body = $("body");
              this.$searchBtn = this.$el.find(".am_header-secondary-search");
              this.$searchContainer = this.$el.find(".am_header-search-modal");
              this.$navSwitcher = this.$el.find(".am_header-brand-menu");
              this.$navigationMobile = this.$el.find(
                ".am_header-navigation--mobile"
              );
              this.$navigationDesktop = this.$el.find(
                ".am_header-navigation--desktop"
              );
              this.$navCloseBtn = this.$navigationMobile.find(
                ".am_header-navigation--mobile-close"
              );
              this.$expandables = this.$navigationMobile.find(
                ".am_header-navigation--expandable"
              );
              this.$level1Item = this.$navigationMobile.find(
                ".am_header-navigation-level1-item"
              );
              this.$level2Item = this.$navigationMobile.find(
                ".am_header-navigation-level2-item"
              );
              this.$level3Item = this.$navigationMobile.find(
                ".am_header-navigation-level3-item"
              );

              this.bodyScrolllHideClass = "am_body--hidescroll";

              this.Utils = new _am_utils_am_utils__WEBPACK_IMPORTED_MODULE_0__[
                "default"
              ]();
              this.init();
            }

            init() {
              this.bindEvents();
            }

            bindEvents() {
              this.$searchBtn.on("click", (e) => {
                e.stopPropagation();
                $(e.currentTarget).toggleClass(
                  "am_header-secondary-search--active"
                );
                this.$searchContainer.slideToggle();
              });

              this.$navSwitcher.on("click", (e) => {
                e.stopPropagation();
                this.handleNavigation();
              });

              this.$navCloseBtn.on("click", (e) => {
                e.stopPropagation();
                this.hideNavigation();
              });

              this.$level1Item.find("> a > span").on("click", (e) => {
                e.preventDefault();
                if ($(e.currentTarget).parent().parent().hasClass("expanded")) {
                  $(e.currentTarget).parent().next().slideUp();
                  $(e.currentTarget).parent().parent().removeClass("expanded");
                } else {
                  this.$expandables.removeClass("expanded");
                  this.$expandables
                    .find(".am_header-navigation--subnav")
                    .slideUp();
                  $(e.currentTarget).parent().next().slideDown();
                  $(e.currentTarget).parent().parent().addClass("expanded");
                }
              });

              this.$level2Item.find("> a > span").on("click", (e) => {
                e.preventDefault();
                if (
                  !$(e.currentTarget)
                    .parent()
                    .parent()
                    .hasClass("am_header-navigation--expandable")
                ) {
                  window.location = $(e.currentTarget).attr("href");
                }
                if ($(e.currentTarget).parent().parent().hasClass("expanded")) {
                  $(e.currentTarget).parent().next().slideUp();
                  $(e.currentTarget).parent().parent().removeClass("expanded");
                } else {
                  this.$level2Item.removeClass("expanded");
                  this.$level2Item
                    .find(".am_header-navigation--subnav")
                    .slideUp();
                  $(e.currentTarget).parent().next().slideDown();
                  $(e.currentTarget).parent().parent().addClass("expanded");
                }
              });

              this.$level3Item.find("> a > span").on("click", (e) => {
                e.preventDefault();
                if (
                  !$(e.currentTarget)
                    .parent()
                    .parent()
                    .hasClass("am_header-navigation--expandable")
                ) {
                  window.location = $(e.currentTarget).attr("href");
                }
                if ($(e.currentTarget).parent().parent().hasClass("expanded")) {
                  $(e.currentTarget).parent().next().slideUp();
                  $(e.currentTarget).parent().parent().removeClass("expanded");
                } else {
                  this.$level3Item.removeClass("expanded");
                  this.$level3Item
                    .find(".am_header-navigation--subnav")
                    .slideUp();
                  $(e.currentTarget).parent().next().slideDown();
                  $(e.currentTarget).parent().parent().addClass("expanded");
                }
              });

              this.$navigationDesktop
                .find(
                  ".am_header-navigation-level1-item.am_header-navigation--expandable, .am_header-navigation-level2-item.am_header-navigation--expandable"
                )
                .on("mouseenter", function (e) {
                  e.preventDefault();
                  $(this)
                    .find("> .am_header-navigation--desktop-flyout")
                    .stop()
                    .slideDown();
                })
                .on("mouseleave", function (e) {
                  $(this)
                    .find("> .am_header-navigation--desktop-flyout")
                    .stop()
                    .slideUp()
                    .removeAttr("style");
                });

              /*this.$navigationDesktop.find(".am_header-navigation-level1-item.am_header-navigation--expandable > a").on("click", function(e) {
            e.preventDefault();
        });

        $(".am_header-navigation--desktop-flyout--mega").find(".am_header-navigation-level2-item > a").on("click", function(e) {
            if($(this).parent().hasClass("am_header-navigation--expandable")) {
                e.preventDefault();
                $(this).parents(".am_header-navigation--subnav").find(".am_header-navigation-level2-item > a").removeClass("active");
                $(this).parents(".am_header-navigation--subnav").find(".am_header-navigation-level3-item a").removeClass("active");
                $(".am_header-navigation--desktop-flyout--mega").find(".am_header-navigation-level3").removeClass('show');
                $(".am_header-navigation--desktop-flyout--mega").find(".am_header-navigation-level4").removeClass('show');
                $(this).addClass("active");
                $(this).next().addClass("show");
                $(this).parents(".am_header-navigation--desktop-flyout--mega > .container").css('height', `${$(this).next().outerHeight()/16}rem`)
            }
        });

        $(".am_header-navigation--desktop-flyout--mega").find(".am_header-navigation-level3-item > a").on("click", function(e) {
            if($(this).parent().hasClass("am_header-navigation--expandable")) {
                e.preventDefault();
                $(this).parents(".am_header-navigation--subnav").find(".am_header-navigation-level3-item a").removeClass("active");
                $(".am_header-navigation--desktop-flyout--mega").find(".am_header-navigation-level4").removeClass('show');
                $(this).addClass("active");
                $(this).next().addClass("show");
                if($(this).parents(".am_header-navigation--desktop-flyout--mega > .container").outerHeight(true) < $(this).next().outerHeight()) {
                    $(this).parents(".am_header-navigation--desktop-flyout--mega > .container").css('height', `${$(this).next().outerHeight()/16}rem`);
                } else {
                    $(this).parents(".am_header-navigation--desktop-flyout--mega > .container").css('height', `${$(this).closest(".am_header-navigation-level3").outerHeight()/16}rem`)
                }
            }
        });*/
            }

            handleNavigation() {
              this.$body.addClass(this.bodyScrolllHideClass);

              this.$navigationMobile.show().animate({ left: "0" }, 500);
            }

            hideNavigation() {
              this.$navigationMobile.animate({ left: "-100%" }, 500, () => {
                this.$expandables.removeClass("expanded");
                this.$expandables
                  .find(".am_header-navigation--subnav")
                  .slideUp();
                this.$navigationMobile.hide();
                this.$body.removeClass(this.bodyScrolllHideClass);
              });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_hero-slider-v2/am_hero-slider-v2.js":
      /*!***************************************************************!*\
  !*** ./src/components/am_hero-slider-v2/am_hero-slider-v2.js ***!
  \***************************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return HeroSliderV2;
            }
          );
          /* harmony import */ var _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! ../../../node_modules/swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );

          class HeroSliderV2 {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_hero-slider-v2",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.init();
            }

            init() {
              this.bindEvents();
            }

            bindEvents() {
              const swiper =
                new _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ](".am_hero-slider-v2-swiper", {
                  direction: "horizontal",
                  slidesPerView: 1,
                  autoplay: {
                    delay: 6000,
                    disableOnInteraction: false,
                  },
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  scrollbar: {
                    el: ".swiper-scrollbar",
                  },
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_hero-slider/am_hero-slider.js":
      /*!*********************************************************!*\
  !*** ./src/components/am_hero-slider/am_hero-slider.js ***!
  \*********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return HeroSlider;
            }
          );
          /* harmony import */ var owl_carousel__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! owl.carousel */ "./node_modules/owl.carousel/dist/owl.carousel.js"
            );
          /* harmony import */ var owl_carousel__WEBPACK_IMPORTED_MODULE_0___default =
            /*#__PURE__*/ __webpack_require__.n(
              owl_carousel__WEBPACK_IMPORTED_MODULE_0__
            );

          class HeroSlider {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_hero-slider",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.init();
            }

            init() {
              this.bindEvents();
            }

            bindEvents() {
              $(".am_hero-slider .slider").owlCarousel({
                loop: true,
                nav: true,
                items: 1,
                dots: false,
                navContainer: ".hero-slider-navs",
                navElement: "div",
                navText: [
                  '<div class="slider-prev"><span class="icon-left"></span></div>',
                  '<div class="slider-next"><span class="icon-right"></span></div>',
                ],
              });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_hiring/am_hiring.js":
      /*!***********************************************!*\
  !*** ./src/components/am_hiring/am_hiring.js ***!
  \***********************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return Hiring;
            }
          );
          /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! vue */ "./node_modules/vue/dist/vue.esm-bundler.js"
            );
          /* harmony import */ var _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              /*! ../am_modal/am_modal.js */ "./src/components/am_modal/am_modal.js"
            );

          class Hiring {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_hiring",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.appContainer = this.$el;
              this.init();
            }

            init() {
              this.buildApp();
            }

            buildApp() {
              const app = Object(vue__WEBPACK_IMPORTED_MODULE_0__["createApp"])(
                {
                  data() {
                    return {
                      isLoading: false,
                      language:
                        document.querySelector("html").getAttribute("lang") ||
                        "en",
                      hiring: window.am_hiring ? window.am_hiring : [],
                      modalState: false,
                      modalData: {},
                      currentDataIndex: 0,
                    };
                  },
                  methods: {
                    handleInitiativeModal(data, index) {
                      this.currentDataIndex = index;
                      this.modalData = data.modal;
                      this.handleModalOpen();
                    },

                    handleModalOpen() {
                      this.modalState = true;
                    },

                    handleModalClose() {
                      this.modalState = false;
                    },
                  },
                }
              );

              app.component(
                "am-modal",
                _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_1__["AMModal"]
              );

              app.mount(this.appContainer);
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_history/am_history.js":
      /*!*************************************************!*\
  !*** ./src/components/am_history/am_history.js ***!
  \*************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return History;
            }
          );
          /* harmony import */ var _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! ../../../node_modules/swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );

          class History {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_history",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.init();
            }

            init() {
              this.bindEvents();
            }

            bindEvents() {
              var self = this;
              const swiper =
                new _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ](".am_history-swiper", {
                  direction: "horizontal",
                  slidesPerView: 1,
                  spaceBetween: 0,
                  effect: "creative",
                  creativeEffect: {
                    prev: {
                      translate: ["-100%", 0, 0],
                      scale: 1.25,
                    },
                    next: {
                      translate: ["100%", 0, 0],
                      scale: 1.25,
                    },
                  },
                  pagination: {
                    el: ".swiper-pagination",
                    clickable: true,
                    renderBullet: function (index, className) {
                      const $swiperContent = $(".am_history-content");
                      const $swiperSlides = $(
                        ".am_history-swiper .swiper-slide"
                      );
                      const year = $swiperSlides.eq(index).attr("data-year");
                      return (
                        '<span class="' + className + '">' + year + "</span>"
                      );
                    },
                  },
                  on: {
                    init: function (el) {
                      const $swiperContent = $(".am_history-content");
                      const $swiperSlides = $(
                        ".am_history-swiper .swiper-slide"
                      );
                      $swiperContent
                        .find(".year-prefix")
                        .html($swiperSlides.eq(0).attr("data-year-prefix"));
                      $swiperContent
                        .find(".year")
                        .html($swiperSlides.eq(0).attr("data-year"));
                      $swiperContent
                        .find(".event")
                        .html($swiperSlides.eq(0).attr("data-event"));
                    },
                    slideChange(swiper) {
                      const $swiperContent = $(".am_history-content");
                      const $swiperSlides = $(
                        ".am_history-swiper .swiper-slide"
                      );
                      $swiperContent
                        .find(".year-prefix")
                        .html(
                          $swiperSlides
                            .eq(swiper.activeIndex)
                            .attr("data-year-prefix")
                        );
                      $swiperContent
                        .find(".year")
                        .html(
                          $swiperSlides.eq(swiper.activeIndex).attr("data-year")
                        );
                      $swiperContent
                        .find(".event")
                        .html(
                          $swiperSlides
                            .eq(swiper.activeIndex)
                            .attr("data-event")
                        );
                    },
                  },
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_hover-cards/am_hover-cards.js":
      /*!*********************************************************!*\
  !*** ./src/components/am_hover-cards/am_hover-cards.js ***!
  \*********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return HoverCards;
            }
          );
          /* harmony import */ var _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! ../../../node_modules/swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );

          class HoverCards {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_hover-cards",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.init();
            }

            init() {
              this.bindEvents();
            }

            bindEvents() {
              const swiper =
                new _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ](".am_hover-cards-swiper", {
                  direction: "horizontal",
                  slidesPerView: 1,
                  spaceBetween: 16,
                  breakpoints: {
                    768: {
                      slidesPerView: 2,
                    },
                    1024: {
                      slidesPerView: 3,
                    },
                    1366: {
                      slidesPerView: 4,
                    },
                  },
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  scrollbar: {
                    el: ".swiper-scrollbar",
                  },
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_image-cards/am_image-cards.js":
      /*!*********************************************************!*\
  !*** ./src/components/am_image-cards/am_image-cards.js ***!
  \*********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return ImageCards;
            }
          );
          /* harmony import */ var _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! ../../../node_modules/swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );

          class ImageCards {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_image-cards",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.init();
            }

            init() {
              this.bindEvents();
            }

            bindEvents() {
              const swiper =
                new _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_0__[
                  "default"
                ](".am_image-cards-swiper", {
                  direction: "horizontal",
                  slidesPerView: 1,
                  spaceBetween: 40,
                  breakpoints: {
                    768: {
                      slidesPerView: 2,
                    },
                    1024: {
                      slidesPerView: 3,
                    },
                  },
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  scrollbar: {
                    el: ".swiper-scrollbar",
                  },
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_industries/am_industries.js":
      /*!*******************************************************!*\
  !*** ./src/components/am_industries/am_industries.js ***!
  \*******************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return Industries;
            }
          );
          /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! vue */ "./node_modules/vue/dist/vue.esm-bundler.js"
            );
          /* harmony import */ var _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              /*! ../../../node_modules/swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );
          /* harmony import */ var _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__ =
            __webpack_require__(
              /*! ../am_modal/am_modal.js */ "./src/components/am_modal/am_modal.js"
            );

          class Industries {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_industries",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.appContainer = this.$el;
              this.init();
            }

            init() {
              this.buildApp();
            }

            buildApp() {
              var self = this;
              const app = Object(vue__WEBPACK_IMPORTED_MODULE_0__["createApp"])(
                {
                  data() {
                    return {
                      isLoading: false,
                      language:
                        document.querySelector("html").getAttribute("lang") ||
                        "en",
                      industries: window.am_industries
                        ? window.am_industries
                        : [],
                      modalState: false,
                      modalData: {},
                    };
                  },
                  mounted() {
                    this.$nextTick(() => {
                      self.bindEvents();
                    });
                  },
                  methods: {
                    handleInitiativeModal(data, index) {
                      this.currentDataIndex = index;
                      this.modalData = data.modal;
                      this.handleModalOpen();
                    },

                    handleModalOpen() {
                      this.modalState = true;
                      this.$nextTick(() => {
                        if ($(".am_modal-swiper").length > 0) {
                          this.swiper =
                            new _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__[
                              "default"
                            ](".am_modal-swiper", {
                              direction: "horizontal",
                              slidesPerView: 1,
                              navigation: {
                                nextEl: ".swiper-button-next",
                                prevEl: ".swiper-button-prev",
                              },
                              scrollbar: {
                                el: ".swiper-scrollbar",
                              },
                            });
                        }
                      });
                    },

                    handleModalClose() {
                      this.modalState = false;
                      if (this.swiper) {
                        this.swiper.destroy();
                      }
                    },
                  },
                }
              );

              app.component(
                "am-modal",
                _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__["AMModal"]
              );

              app.mount(self.appContainer);
            }

            bindEvents() {
              const swiper =
                new _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ](".am_industries-swiper", {
                  slidesPerView: 1,
                  grid: {
                    fill: "row",
                    rows: 3,
                  },
                  spaceBetween: 18,
                  breakpoints: {
                    768: {
                      slidesPerView: 2,
                      grid: {
                        fill: "row",
                        rows: 3,
                      },
                    },
                    1024: {
                      slidesPerView: 3,
                      grid: {
                        fill: "row",
                        rows: 3,
                      },
                    },
                  },
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  scrollbar: {
                    el: ".swiper-scrollbar",
                  },
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_initiatives/am_initiatives.js":
      /*!*********************************************************!*\
  !*** ./src/components/am_initiatives/am_initiatives.js ***!
  \*********************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return Initiatives;
            }
          );
          /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! vue */ "./node_modules/vue/dist/vue.esm-bundler.js"
            );
          /* harmony import */ var swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              /*! swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );
          /* harmony import */ var _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__ =
            __webpack_require__(
              /*! ../am_modal/am_modal.js */ "./src/components/am_modal/am_modal.js"
            );

          class Initiatives {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_initiatives",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.appContainer = this.$el;
              this.init();
            }

            init() {
              this.buildApp();
            }

            buildApp() {
              const self = this;
              const app = Object(vue__WEBPACK_IMPORTED_MODULE_0__["createApp"])(
                {
                  data() {
                    return {
                      isLoading: false,
                      language:
                        document.querySelector("html").getAttribute("lang") ||
                        "en",
                      initiatives: window.am_iniatives
                        ? window.am_iniatives
                        : [],
                      modalState: false,
                      modalData: {},
                      currentDataIndex: 0,
                    };
                  },
                  mounted() {
                    this.$nextTick(() => {
                      self.bindEvents();
                    });
                  },
                  methods: {
                    handleInitiativeModal(data, index) {
                      this.currentDataIndex = index;
                      this.modalData = data.modal;
                      this.handleModalOpen();
                    },

                    handleModalNext() {
                      if (this.currentDataIndex < this.initiatives.length - 1) {
                        this.currentDataIndex++;
                      } else {
                        this.currentDataIndex = 0;
                      }

                      this.modalData =
                        this.initiatives[this.currentDataIndex].modal;
                    },

                    handleModalPrev() {
                      if (this.currentDataIndex > 0) {
                        this.currentDataIndex--;
                      } else {
                        this.currentDataIndex = this.initiatives.length - 1;
                      }
                      this.modalData =
                        this.initiatives[this.currentDataIndex].modal;
                    },

                    handleModalOpen() {
                      this.modalState = true;
                    },

                    handleModalClose() {
                      this.modalState = false;
                    },
                  },
                }
              );

              app.component(
                "am-modal",
                _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__["AMModal"]
              );

              app.mount(self.appContainer);
            }

            bindEvents() {
              const swiper =
                new swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ](".am_initiatives-swiper", {
                  direction: "horizontal",
                  slidesPerView: 1,
                  spaceBetween: 40,
                  breakpoints: {
                    768: {
                      slidesPerView: 2,
                    },
                    1024: {
                      slidesPerView: 3,
                    },
                  },
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  scrollbar: {
                    el: ".swiper-scrollbar",
                  },
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_insights/am_insights.js":
      /*!***************************************************!*\
  !*** ./src/components/am_insights/am_insights.js ***!
  \***************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return Insights;
            }
          );
          /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! vue */ "./node_modules/vue/dist/vue.esm-bundler.js"
            );
          /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
          /* harmony import */ var _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_2__ =
            __webpack_require__(
              /*! ../../../node_modules/swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );

          class Insights {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_insights",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.appContainer = this.$el;
              this.insightApiUrl = $(this.$el).find(".am_insights-api").val();
              this.insightTypesApiUrl = $(this.$el)
                .find(".am_insights-type-api")
                .val();
              this.init();
            }

            init() {
              this.buildApp();
            }

            buildApp() {
              var self = this;
              const app = Object(vue__WEBPACK_IMPORTED_MODULE_0__["createApp"])(
                {
                  data() {
                    return {
                      isLoading: false,
                      language:
                        document.querySelector("html").getAttribute("lang") ||
                        "en",
                      insightTypes: [],
                      selectedInsightTypes: [],
                      toggleFilters: false,
                      insights: [],
                      filterParams: undefined,
                      filterCount: 0,
                      keyword: "",
                    };
                  },
                  mounted() {
                    this.fetchInsights();
                    this.fetchInsightTypes();
                  },
                  methods: {
                    fetchInsights() {
                      this.isLoading = true;
                      axios__WEBPACK_IMPORTED_MODULE_1__["default"]
                        .get(
                          this.filterParams
                            ? `${self.insightApiUrl}?${this.filterParams}`
                            : self.insightApiUrl
                        )
                        .then((response) => {
                          if (response === null || response.data === null) {
                            return false;
                          }

                          this.insights = response.data;
                          this.$nextTick(() => {
                            self.bindEvents();
                          });
                          this.isLoading = false;
                        })
                        .catch((error) => {
                          console.error(error);
                        });
                    },

                    fetchInsightTypes() {
                      axios__WEBPACK_IMPORTED_MODULE_1__["default"]
                        .get(self.insightTypesApiUrl)
                        .then((response) => {
                          if (response === null || response.data === null) {
                            return false;
                          }

                          this.insightTypes = response.data.data;

                          console.log(this.insightTypes);
                        })
                        .catch((error) => {
                          console.error(error);
                        });
                    },

                    showHideFilters() {
                      this.toggleFilters = !this.toggleFilters;
                    },

                    toggleInsightTypesFilters(filter) {
                      if (
                        this.selectedInsightTypes
                          .map((item) => item.attributes.drupal_internal__tid)
                          .indexOf(filter.attributes.drupal_internal__tid) ===
                        -1
                      ) {
                        this.selectedInsightTypes.push(filter);
                      } else {
                        const filterIndex = this.selectedInsightTypes
                          .map((item) => item.attributes.drupal_internal__tid)
                          .indexOf(filter.attributes.drupal_internal__tid);
                        this.selectedInsightTypes.splice(filterIndex, 1);
                      }
                    },

                    isActiveFilter(filter) {
                      if (
                        this.selectedInsightTypes
                          .map((item) => item.attributes.drupal_internal__tid)
                          .indexOf(filter) !== -1
                      ) {
                        return "active";
                      } else {
                        return null;
                      }
                    },

                    applyFilters() {
                      this.filterParams = undefined;
                      let filters = [];

                      if (this.selectedInsightTypes.length > 0) {
                        let mediaParams = [];
                        this.selectedInsightTypes.forEach((type, index) => {
                          mediaParams.push(
                            `category[]=${type.attributes.drupal_internal__tid}`
                          );
                        });
                        filters.push(mediaParams.join("&"));
                      }

                      this.filterParams = filters.join("&");
                      this.filterCount = this.selectedInsightTypes.length;
                      this.toggleFilters = false;
                      this.fetchInsights();
                    },

                    removeInsightTypesFilter(filter) {
                      const filterIndex =
                        this.selectedInsightTypes.indexOf(filter);
                      this.selectedInsightTypes.splice(filterIndex, 1);
                      this.applyFilters();
                    },

                    clearFilters() {
                      this.filterParams = undefined;
                      this.filterCount = 0;
                      this.toggleFilters = false;
                      this.selectedInsightTypes = [];
                      this.fetchInsights();
                    },

                    handleSearch() {
                      if (this.keyword.length > 2) {
                        this.filterParams = undefined;
                        this.filterCount = 0;
                        this.toggleFilters = false;
                        this.selectedInsightTypes = [];
                        this.filterParams = `search=${this.keyword}`;
                        this.fetchInsights();
                      }
                    },
                    timestamp(date) {
                      const dateFormat = {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      };
                      const authorDate = new Date(date);
                      return authorDate.toLocaleDateString("en-US", dateFormat);
                    },
                  },
                }
              );

              app.mount(self.appContainer);
            }

            bindEvents() {
              const swiper =
                new _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_2__[
                  "default"
                ](".am_insights-featured-swiper", {
                  direction: "horizontal",
                  slidesPerView: 1,
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  scrollbar: {
                    el: ".swiper-scrollbar",
                  },
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_resource-groups/am_resource-groups.js":
      /*!*****************************************************************!*\
  !*** ./src/components/am_resource-groups/am_resource-groups.js ***!
  \*****************************************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "default",
            function () {
              return ResourceGroups;
            }
          );
          /* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              /*! vue */ "./node_modules/vue/dist/vue.esm-bundler.js"
            );
          /* harmony import */ var _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              /*! ../../../node_modules/swiper/swiper-bundle */ "./node_modules/swiper/swiper-bundle.mjs"
            );
          /* harmony import */ var _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__ =
            __webpack_require__(
              /*! ../am_modal/am_modal.js */ "./src/components/am_modal/am_modal.js"
            );

          class ResourceGroups {
            constructor(options) {
              this.options = {
                selector: options.selector || ".am_resource-groups",
                el: options.el || undefined,
                ...options,
              };

              this.$el = this.options.el
                ? this.options.el
                : $(this.options.selector);
              this.appContainer = this.$el;
              this.init();
            }

            init() {
              this.buildApp();
            }

            buildApp() {
              var self = this;
              const app = Object(vue__WEBPACK_IMPORTED_MODULE_0__["createApp"])(
                {
                  data() {
                    return {
                      isLoading: false,
                      language:
                        document.querySelector("html").getAttribute("lang") ||
                        "en",
                      resources: window.am_resources ? window.am_resources : [],
                      modalState: false,
                      modalData: {},
                      currentDataIndex: 0,
                    };
                  },
                  mounted() {
                    this.$nextTick(() => {
                      self.bindEvents();
                    });
                  },
                  methods: {
                    handleInitiativeModal(data, index) {
                      this.currentDataIndex = index;
                      this.modalData = data.modal;
                      this.handleModalOpen();
                    },

                    handleModalNext() {
                      if (this.currentDataIndex < this.resources.length - 1) {
                        this.currentDataIndex++;
                      } else {
                        this.currentDataIndex = 0;
                      }

                      this.modalData =
                        this.resources[this.currentDataIndex].modal;
                    },

                    handleModalPrev() {
                      if (this.currentDataIndex > 0) {
                        this.currentDataIndex--;
                      } else {
                        this.currentDataIndex = this.resources.length - 1;
                      }
                      this.modalData =
                        this.resources[this.currentDataIndex].modal;
                    },

                    handleModalOpen() {
                      this.modalState = true;
                    },

                    handleModalClose() {
                      this.modalState = false;
                    },
                  },
                }
              );

              app.component(
                "am-modal",
                _am_modal_am_modal_js__WEBPACK_IMPORTED_MODULE_2__["AMModal"]
              );

              app.mount(this.appContainer);
            }

            bindEvents() {
              const swiper =
                new _node_modules_swiper_swiper_bundle__WEBPACK_IMPORTED_MODULE_1__[
                  "default"
                ](".am_resource-groups-swiper", {
                  direction: "horizontal",
                  slidesPerView: 1,
                  spaceBetween: 40,
                  breakpoints: {
                    768: {
                      slidesPerView: 2,
                    },
                    1024: {
                      slidesPerView: 3,
                    },
                  },
                  navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev",
                  },
                  scrollbar: {
                    el: ".swiper-scrollbar",
                  },
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },

    /***/ "./src/components/am_utils/am_utils.js":
      /*!*********************************************!*\
  !*** ./src/components/am_utils/am_utils.js ***!
  \*********************************************/
      /*! exports provided: default */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "default",
          function () {
            return Utils;
          }
        );
        /* harmony import */ var _app_constants__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! ./app_constants */ "./src/components/am_utils/app_constants.js"
          );

        class Utils {
          constructor(options) {
            this.options = {
              ...options,
            };
            this.timeout;
            this.nestedTimeout;
          }

          addClass(selector, cssClass) {
            if (selector && cssClass) {
              selector.classList.add(cssClass);
            }
          }

          removeClass(selector, cssClass) {
            if (selector && cssClass) {
              if (selector.length && selector.length > 0) {
                selector.forEach((item) => {
                  item.classList.remove(cssClass);
                });
              } else {
                selector.classList.remove(cssClass);
              }
            }
          }

          hasClass(selector, cssClass) {
            if (selector && cssClass) {
              return selector.classList.contains(cssClass);
            }
            return false;
          }

          addAnimation(selector, showClass, animateClass) {
            if (selector) {
              clearTimeout(this.timeout);
              clearTimeout(this.nestedTimeout);
              this.timeout = setTimeout(() => {
                selector.classList.add(
                  showClass
                    ? showClass
                    : _app_constants__WEBPACK_IMPORTED_MODULE_0__["CONSTANTS"]
                        .SHOW_CLASS
                );
                this.nestedTimeout = setTimeout(() => {
                  selector.classList.add(
                    animateClass
                      ? animateClass
                      : _app_constants__WEBPACK_IMPORTED_MODULE_0__["CONSTANTS"]
                          .ANIMATE_CLASS
                  );
                }, _app_constants__WEBPACK_IMPORTED_MODULE_0__["CONSTANTS"].DEFAULT_TIMEOUT);
              }, _app_constants__WEBPACK_IMPORTED_MODULE_0__["CONSTANTS"].DEFAULT_TIMEOUT);
            }
          }

          removeAnimation(selector, showClass, animateClass) {
            clearTimeout(this.timeout);
            clearTimeout(this.nestedTimeout);
            this.timeout = setTimeout(() => {
              selector.classList.remove(
                animateClass
                  ? animateClass
                  : _app_constants__WEBPACK_IMPORTED_MODULE_0__["CONSTANTS"]
                      .ANIMATE_CLASS
              );
              this.nestedTimeout = setTimeout(() => {
                selector.classList.remove(
                  showClass
                    ? showClass
                    : _app_constants__WEBPACK_IMPORTED_MODULE_0__["CONSTANTS"]
                        .SHOW_CLASS
                );
              }, _app_constants__WEBPACK_IMPORTED_MODULE_0__["CONSTANTS"].ANIMATION_TIMEOUT);
            }, _app_constants__WEBPACK_IMPORTED_MODULE_0__["CONSTANTS"].DEFAULT_TIMEOUT);
          }

          getScript(url) {
            return new Promise((resolve, reject) => {
              const script = document.createElement("script");
              script.src = url;
              script.async = true;

              script.onerror = reject;

              script.onload = script.onreadystatechange = function () {
                const loadState = this.readyState;
                if (
                  loadState &&
                  loadState !== "loaded" &&
                  loadState !== "complete"
                )
                  return;
                script.onload = script.onreadystatechange = null;
                resolve();
              };

              document.head.appendChild(script);
            });
          }

          getOuterHeight(el) {
            var elmHeight, elmMargin;
            if (document.all) {
              // IE
              elmHeight = el.currentStyle.height;
              elmMargin =
                parseInt(el.currentStyle.marginTop, 10) +
                parseInt(el.currentStyle.marginBottom, 10);
            } else {
              // Mozilla
              elmHeight = document.defaultView
                .getComputedStyle(el, "")
                .getPropertyValue("height");
              elmMargin =
                parseInt(
                  document.defaultView
                    .getComputedStyle(el, "")
                    .getPropertyValue("margin-top")
                ) +
                parseInt(
                  document.defaultView
                    .getComputedStyle(el, "")
                    .getPropertyValue("margin-bottom")
                );
            }
            return parseInt(elmHeight) + parseInt(elmMargin);
          }

          readCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(";");
            for (var i = 0; i < ca.length; i++) {
              var c = ca[i];
              while (c.charAt(0) == " ") c = c.substring(1, c.length);
              if (c.indexOf(nameEQ) == 0)
                return c.substring(nameEQ.length, c.length);
            }
            return null;
          }

          createCookie(name, value, days) {
            if (days) {
              var date = new Date();
              date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
              var expires = "; expires=" + date.toGMTString();
            } else var expires = "";

            document.cookie = name + "=" + value + expires + "; path=/";
          }

          eraseCookie(name) {
            this.createCookie(name, "", -1);
          }

          isInputEmpty(value) {
            if (value == "" || value.length == 0 || value == undefined) {
              return true;
            }
            return false;
          }

          isValidEmail(value) {
            const pattern =
              /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/;
            return value.match(pattern);
          }

          getScript(url, callback, location) {
            //url is URL of external file, callback function to be callsed
            //location is the location to insert the <script> element

            var scriptTag = document.createElement("script");
            scriptTag.src = url;

            scriptTag.onload = callback;
            scriptTag.onreadystatechange = callback;

            location.appendChild(scriptTag);
          }
        }

        /***/
      },

    /***/ "./src/components/am_utils/app_constants.js":
      /*!**************************************************!*\
  !*** ./src/components/am_utils/app_constants.js ***!
  \**************************************************/
      /*! exports provided: CONSTANTS */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "CONSTANTS",
          function () {
            return CONSTANTS;
          }
        );
        const CONSTANTS = {
          DEFAULT_TIMEOUT: 50,
          ANIMATION_TIMEOUT: 300,
          SHOW_CLASS: "show",
          ANIMATE_CLASS: "animate",
        };

        /***/
      },

    /***/ "./src/js/entry.js":
      /*!*************************!*\
  !*** ./src/js/entry.js ***!
  \*************************/
      /*! no exports provided */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(/*! ./main */ "./src/js/main.js");

        /***/
      },

    /***/ "./src/js/main.js":
      /*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
      /*! no exports provided */
      /***/ function (module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function ($) {
          /* harmony import */ var _components_am_insights_am_insights__WEBPACK_IMPORTED_MODULE_17__ =
            __webpack_require__(
              /*! ../components/am_insights/am_insights */ "./src/components/am_insights/am_insights.js"
            );

          window.am_modules = {};
          window.am_stickyElements = [];
          window.unStickyPoint = 0;
          $(window).on("load", function () {
            var setTimeoutPromise = new Promise(function (resolve, reject) {
              setTimeout(function () {
                $("body").addClass("loaded");
                resolve();
              }, 10);
            });
            Promise.all([setTimeoutPromise]).then(function () {
              if ($('[data-sticky="true"').length > 0) {
                $('[data-sticky="true"').each(function (index, el) {
                  $(el)
                    .addClass("am--sticky")
                    .css({
                      "z-index": index + 500 + 1,
                    });
                  window.am_stickyElements.push({
                    el: el,
                    position: $(el).offset().top - 80,
                  });
                  if (index !== $('[data-sticky="true"').length - 1) {
                    window.unStickyPoint += $(el).outerHeight() - 80;
                  }
                });
                $(window).on("scroll", function () {
                  var windowTop = $(window).scrollTop();
                  if (window.am_stickyElements.length > 0) {
                    window.am_stickyElements.forEach(function (element, index) {
                      if (window.unStickyPoint - 95 < windowTop) {
                        $(element.el).removeClass("am--sticky");
                      } else {
                        $(element.el).addClass("am--sticky");
                      }
                    });
                  }
                });
              }
            });
          });

          if ($(".am_insights").length > 0) {
            $(".am_insights").each(function (index, el) {
              window.am_modules["Insights_".concat(index + 1)] =
                new _components_am_insights_am_insights__WEBPACK_IMPORTED_MODULE_17__[
                  "default"
                ]({
                  el: el,
                });
            });
          }
          /* WEBPACK VAR INJECTION */
        }).call(
          this,
          __webpack_require__(
            /*! jquery */ "./node_modules/jquery/dist/jquery.js"
          )
        );

        /***/
      },
    //
    /******/
  }
);
